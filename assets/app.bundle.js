/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var e,t,n={6751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,a=String.fromCharCode,l=Object.assign;function i(e){return e.trim()}function s(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function f(e){return e.length}function p(e){return e.length}function h(e,t){return t.push(e),e}var m=1,v=1,g=0,y=0,b=0,w="";function x(e,t,n,r,o,a,l){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:m,column:v,length:l,return:""}}function S(e,t){return l(x("",null,null,"",null,null,0),e,{length:-e.length},t)}function C(){return b=y>0?c(w,--y):0,v--,10===b&&(v=1,m--),b}function k(){return b=y<g?c(w,y++):0,v++,10===b&&(v=1,m++),b}function E(){return c(w,y)}function P(){return y}function Z(e,t){return d(w,e,t)}function z(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function I(e){return m=v=1,g=f(w=e),y=0,[]}function D(e){return w="",e}function R(e){return i(Z(y-1,O(91===e?e+2:40===e?e+1:e)))}function $(e){for(;(b=E())&&b<33;)k();return z(e)>2||z(b)>3?"":" "}function T(e,t){for(;--t&&k()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return Z(e,P()+(t<6&&32==E()&&32==k()))}function O(e){for(;k();)switch(b){case e:return y;case 34:case 39:34!==e&&39!==e&&O(b);break;case 40:41===e&&O(e);break;case 92:k()}return y}function _(e,t){for(;k()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+Z(t,y-1)+"*"+a(47===e?e:k())}function L(e){for(;!z(E());)k();return Z(e,y)}var B="-ms-",M="-moz-",A="-webkit-",F="comm",N="rule",j="decl",H="@keyframes";function W(e,t){for(var n="",r=p(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function V(e,t,n,r){switch(e.type){case"@import":case j:return e.return=e.return||e.value;case F:return"";case H:return e.return=e.value+"{"+W(e.children,r)+"}";case N:e.value=e.props.join(",")}return f(n=W(e.children,r))?e.return=e.value+"{"+n+"}":""}function U(e){return D(K("",null,null,null,[""],e=I(e),0,[0],e))}function K(e,t,n,r,o,l,i,d,p){for(var m=0,v=0,g=i,y=0,b=0,w=0,x=1,S=1,Z=1,z=0,I="",D=o,O=l,B=r,M=I;S;)switch(w=z,z=k()){case 40:if(108!=w&&58==c(M,g-1)){-1!=u(M+=s(R(z),"&","&\f"),"&\f")&&(Z=-1);break}case 34:case 39:case 91:M+=R(z);break;case 9:case 10:case 13:case 32:M+=$(w);break;case 92:M+=T(P()-1,7);continue;case 47:switch(E()){case 42:case 47:h(J(_(k(),P()),t,n),p);break;default:M+="/"}break;case 123*x:d[m++]=f(M)*Z;case 125*x:case 59:case 0:switch(z){case 0:case 125:S=0;case 59+v:b>0&&f(M)-g&&h(b>32?Q(M+";",r,n,g-1):Q(s(M," ","")+";",r,n,g-2),p);break;case 59:M+=";";default:if(h(B=q(M,t,n,m,v,o,d,I,D=[],O=[],g),l),123===z)if(0===v)K(M,t,B,B,D,l,g,d,O);else switch(99===y&&110===c(M,3)?100:y){case 100:case 109:case 115:K(e,B,B,r&&h(q(e,B,B,0,0,o,d,I,o,D=[],g),O),o,O,g,d,r?D:O);break;default:K(M,B,B,B,[""],O,0,d,O)}}m=v=b=0,x=Z=1,I=M="",g=i;break;case 58:g=1+f(M),b=w;default:if(x<1)if(123==z)--x;else if(125==z&&0==x++&&125==C())continue;switch(M+=a(z),z*x){case 38:Z=v>0?1:(M+="\f",-1);break;case 44:d[m++]=(f(M)-1)*Z,Z=1;break;case 64:45===E()&&(M+=R(k())),y=E(),v=g=f(I=M+=L(P())),z++;break;case 45:45===w&&2==f(M)&&(x=0)}}return l}function q(e,t,n,r,a,l,u,c,f,h,m){for(var v=a-1,g=0===a?l:[""],y=p(g),b=0,w=0,S=0;b<r;++b)for(var C=0,k=d(e,v+1,v=o(w=u[b])),E=e;C<y;++C)(E=i(w>0?g[C]+" "+k:s(k,/&\f/g,g[C])))&&(f[S++]=E);return x(e,t,n,0===a?N:c,f,h,m)}function J(e,t,n){return x(e,t,n,F,a(b),d(e,2,-2),0)}function Q(e,t,n,r){return x(e,t,n,j,d(e,0,r),d(e,r+1,-1),r)}var G=function(e,t,n){for(var r=0,o=0;r=o,o=E(),38===r&&12===o&&(t[n]=1),!z(o);)k();return Z(e,y)},X=new WeakMap,Y=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var o=[],l=function(e,t){return D(function(e,t){var n=-1,r=44;do{switch(z(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=G(y-1,t,n);break;case 2:e[n]+=R(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=a(r)}}while(r=k());return e}(I(e),t))}(t,o),i=n.props,s=0,u=0;s<l.length;s++)for(var c=0;c<i.length;c++,u++)e.props[u]=o[s]?l[s].replace(/&\f/g,i[c]):i[c]+" "+l[s]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return A+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return A+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return A+e+M+e+B+e+e;case 6828:case 4268:return A+e+B+e+e;case 6165:return A+e+B+"flex-"+e+e;case 5187:return A+e+s(e,/(\w+).+(:[^]+)/,A+"box-$1$2"+B+"flex-$1$2")+e;case 5443:return A+e+B+"flex-item-"+s(e,/flex-|-self/,"")+e;case 4675:return A+e+B+"flex-line-pack"+s(e,/align-content|flex-|-self/,"")+e;case 5548:return A+e+B+s(e,"shrink","negative")+e;case 5292:return A+e+B+s(e,"basis","preferred-size")+e;case 6060:return A+"box-"+s(e,"-grow","")+A+e+B+s(e,"grow","positive")+e;case 4554:return A+s(e,/([^-])(transform)/g,"$1"+A+"$2")+e;case 6187:return s(s(s(e,/(zoom-|grab)/,A+"$1"),/(image-set)/,A+"$1"),e,"")+e;case 5495:case 3959:return s(e,/(image-set\([^]*)/,A+"$1$`$1");case 4968:return s(s(e,/(.+:)(flex-)?(.*)/,A+"box-pack:$3"+B+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+A+e+e;case 4095:case 3583:case 4068:case 2532:return s(e,/(.+)-inline(.+)/,A+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(f(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return s(e,/(.+:)(.+)-([^]+)/,"$1"+A+"$2-$3$1"+M+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?te(s(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,f(e)-3-(~u(e,"!important")&&10))){case 107:return s(e,":",":"+A)+e;case 101:return s(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+A+(45===c(e,14)?"inline-":"")+"box$3$1"+A+"$2$3$1"+B+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return A+e+B+s(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return A+e+B+s(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return A+e+B+s(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return A+e+B+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case j:e.return=te(e.value,e.length);break;case H:return W([S(e,{value:s(e.value,"@","@"+A)})],r);case N:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return W([S(e,{props:[s(t,/:(read-\w+)/,":"+M+"$1")]})],r);case"::placeholder":return W([S(e,{props:[s(t,/:(plac\w+)/,":"+A+"input-$1")]}),S(e,{props:[s(t,/:(plac\w+)/,":"+M+"$1")]}),S(e,{props:[s(t,/:(plac\w+)/,B+"input-$1")]})],r)}return""}))}}];const re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,a,l=e.stylisPlugins||ne,i={},s=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;s.push(e)}));var u,c,d,f,h=[V,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],m=(c=[Y,ee].concat(l,h),d=p(c),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=c[a](e,t,n,r)||"";return o});a=function(e,t,n,r){u=n,W(U(e?e+"{"+t.styles+"}":t.styles),m),r&&(v.inserted[t.name]=!0)};var v={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:a};return v.sheet.hydrate(s),v}},5042:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},2443:(e,t,n)=>{"use strict";n.d(t,{C:()=>l,T:()=>s,w:()=>i});var r=n(7294),o=n(6751),a=(n(6797),n(7278),(0,r.createContext)("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null)),l=a.Provider,i=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(a);return e(t,o,n)}))},s=(0,r.createContext)({})},917:(e,t,n)=>{"use strict";n.d(t,{F4:()=>c,iv:()=>u,xB:()=>s});var r=n(7294),o=(n(6751),n(2443)),a=(n(8679),n(444)),l=n(6797),i=n(7278),s=(0,o.w)((function(e,t){var n=e.styles,s=(0,l.O)([n],void 0,(0,r.useContext)(o.T)),u=(0,r.useRef)();return(0,i.j)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,o=document.querySelector('style[data-emotion="'+e+" "+s.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==o&&(r=!0,o.setAttribute("data-emotion",e),n.hydrate([o])),u.current=[n,r],function(){n.flush()}}),[t]),(0,i.j)((function(){var e=u.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==s.next&&(0,a.My)(t,s.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",s,n,!1)}}),[t,s.name]),null}));function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,l.O)(t)}var c=function(){var e=u.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>m});const r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var a=n(5042),l=/[A-Z]|^ms/g,i=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,a.Z)((function(e){return s(e)?e:e.replace(l,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(i,(function(e,t,n){return p={name:t,styles:n,next:p},t}))}return 1===o[e]||s(e)||"number"!=typeof t||0===t?t:t+"px"};function f(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return p={name:n.name,styles:n.styles,next:p},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)p={name:r.name,styles:r.styles,next:p},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=f(e,t,n[o])+";";else for(var a in n){var l=n[a];if("object"!=typeof l)null!=t&&void 0!==t[l]?r+=a+"{"+t[l]+"}":u(l)&&(r+=c(a)+":"+d(a,l)+";");else if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var i=f(e,t,l);switch(a){case"animation":case"animationName":r+=c(a)+":"+i+";";break;default:r+=a+"{"+i+"}"}}else for(var s=0;s<l.length;s++)u(l[s])&&(r+=c(a)+":"+d(a,l[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=p,a=n(e);return p=o,f(e,t,a)}}if(null==t)return n;var l=t[n];return void 0!==l?l:n}var p,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,a="";p=void 0;var l=e[0];null==l||void 0===l.raw?(o=!1,a+=f(n,t,l)):a+=l[0];for(var i=1;i<e.length;i++)a+=f(n,t,e[i]),o&&(a+=l[i]);h.lastIndex=0;for(var s,u="";null!==(s=h.exec(a));)u+="-"+s[1];return{name:r(a)+u,styles:a,next:p}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>l,j:()=>i});var o=n(7294),a=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,l=a||function(e){return e()},i=a||o.useLayoutEffect},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:()=>a,fp:()=>r,hC:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},8259:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=n(7294).createContext(null);r.displayName="MenuUnstyledContext";const o=r},272:(e,t,n)=>{"use strict";n.d(t,{Z:()=>$e});var r=n(7462),o=n(3366),a=n(7294),l=n(67),i=n(6600),s=n(7094);function u(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function c(e){return e instanceof u(e).Element||e instanceof Element}function d(e){return e instanceof u(e).HTMLElement||e instanceof HTMLElement}function f(e){return"undefined"!=typeof ShadowRoot&&(e instanceof u(e).ShadowRoot||e instanceof ShadowRoot)}var p=Math.max,h=Math.min,m=Math.round;function v(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function g(){return!/^((?!chrome|android).)*safari/i.test(v())}function y(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,a=1;t&&d(e)&&(o=e.offsetWidth>0&&m(r.width)/e.offsetWidth||1,a=e.offsetHeight>0&&m(r.height)/e.offsetHeight||1);var l=(c(e)?u(e):window).visualViewport,i=!g()&&n,s=(r.left+(i&&l?l.offsetLeft:0))/o,f=(r.top+(i&&l?l.offsetTop:0))/a,p=r.width/o,h=r.height/a;return{width:p,height:h,top:f,right:s+p,bottom:f+h,left:s,x:s,y:f}}function b(e){var t=u(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function w(e){return e?(e.nodeName||"").toLowerCase():null}function x(e){return((c(e)?e.ownerDocument:e.document)||window.document).documentElement}function S(e){return y(x(e)).left+b(e).scrollLeft}function C(e){return u(e).getComputedStyle(e)}function k(e){var t=C(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function E(e,t,n){void 0===n&&(n=!1);var r,o,a=d(t),l=d(t)&&function(e){var t=e.getBoundingClientRect(),n=m(t.width)/e.offsetWidth||1,r=m(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),i=x(t),s=y(e,l,n),c={scrollLeft:0,scrollTop:0},f={x:0,y:0};return(a||!a&&!n)&&(("body"!==w(t)||k(i))&&(c=(r=t)!==u(r)&&d(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:b(r)),d(t)?((f=y(t,!0)).x+=t.clientLeft,f.y+=t.clientTop):i&&(f.x=S(i))),{x:s.left+c.scrollLeft-f.x,y:s.top+c.scrollTop-f.y,width:s.width,height:s.height}}function P(e){var t=y(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Z(e){return"html"===w(e)?e:e.assignedSlot||e.parentNode||(f(e)?e.host:null)||x(e)}function z(e){return["html","body","#document"].indexOf(w(e))>=0?e.ownerDocument.body:d(e)&&k(e)?e:z(Z(e))}function I(e,t){var n;void 0===t&&(t=[]);var r=z(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),a=u(r),l=o?[a].concat(a.visualViewport||[],k(r)?r:[]):r,i=t.concat(l);return o?i:i.concat(I(Z(l)))}function D(e){return["table","td","th"].indexOf(w(e))>=0}function R(e){return d(e)&&"fixed"!==C(e).position?e.offsetParent:null}function $(e){for(var t=u(e),n=R(e);n&&D(n)&&"static"===C(n).position;)n=R(n);return n&&("html"===w(n)||"body"===w(n)&&"static"===C(n).position)?t:n||function(e){var t=/firefox/i.test(v());if(/Trident/i.test(v())&&d(e)&&"fixed"===C(e).position)return null;var n=Z(e);for(f(n)&&(n=n.host);d(n)&&["html","body"].indexOf(w(n))<0;){var r=C(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}var T="top",O="bottom",_="right",L="left",B="auto",M=[T,O,_,L],A="start",F="end",N="viewport",j="popper",H=M.reduce((function(e,t){return e.concat([t+"-"+A,t+"-"+F])}),[]),W=[].concat(M,[B]).reduce((function(e,t){return e.concat([t,t+"-"+A,t+"-"+F])}),[]),V=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function U(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var K={placement:"bottom",modifiers:[],strategy:"absolute"};function q(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function J(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,a=void 0===o?K:o;return function(e,t,n){void 0===n&&(n=a);var o,l,i={placement:"bottom",orderedModifiers:[],options:Object.assign({},K,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},s=[],u=!1,d={state:i,setOptions:function(n){var o="function"==typeof n?n(i.options):n;f(),i.options=Object.assign({},a,i.options,o),i.scrollParents={reference:c(e)?I(e):e.contextElement?I(e.contextElement):[],popper:I(t)};var l,u,p=function(e){var t=U(e);return V.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((l=[].concat(r,i.options.modifiers),u=l.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return i.orderedModifiers=p.filter((function(e){return e.enabled})),i.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var a=o({state:i,name:t,instance:d,options:r});s.push(a||function(){})}})),d.update()},forceUpdate:function(){if(!u){var e=i.elements,t=e.reference,n=e.popper;if(q(t,n)){i.rects={reference:E(t,$(n),"fixed"===i.options.strategy),popper:P(n)},i.reset=!1,i.placement=i.options.placement,i.orderedModifiers.forEach((function(e){return i.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<i.orderedModifiers.length;r++)if(!0!==i.reset){var o=i.orderedModifiers[r],a=o.fn,l=o.options,s=void 0===l?{}:l,c=o.name;"function"==typeof a&&(i=a({state:i,options:s,name:c,instance:d})||i)}else i.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){d.forceUpdate(),e(i)}))},function(){return l||(l=new Promise((function(e){Promise.resolve().then((function(){l=void 0,e(o())}))}))),l}),destroy:function(){f(),u=!0}};if(!q(e,t))return d;function f(){s.forEach((function(e){return e()})),s=[]}return d.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),d}}var Q={passive:!0};function G(e){return e.split("-")[0]}function X(e){return e.split("-")[1]}function Y(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function ee(e){var t,n=e.reference,r=e.element,o=e.placement,a=o?G(o):null,l=o?X(o):null,i=n.x+n.width/2-r.width/2,s=n.y+n.height/2-r.height/2;switch(a){case T:t={x:i,y:n.y-r.height};break;case O:t={x:i,y:n.y+n.height};break;case _:t={x:n.x+n.width,y:s};break;case L:t={x:n.x-r.width,y:s};break;default:t={x:n.x,y:n.y}}var u=a?Y(a):null;if(null!=u){var c="y"===u?"height":"width";switch(l){case A:t[u]=t[u]-(n[c]/2-r[c]/2);break;case F:t[u]=t[u]+(n[c]/2-r[c]/2)}}return t}var te={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ne(e){var t,n=e.popper,r=e.popperRect,o=e.placement,a=e.variation,l=e.offsets,i=e.position,s=e.gpuAcceleration,c=e.adaptive,d=e.roundOffsets,f=e.isFixed,p=l.x,h=void 0===p?0:p,v=l.y,g=void 0===v?0:v,y="function"==typeof d?d({x:h,y:g}):{x:h,y:g};h=y.x,g=y.y;var b=l.hasOwnProperty("x"),w=l.hasOwnProperty("y"),S=L,k=T,E=window;if(c){var P=$(n),Z="clientHeight",z="clientWidth";P===u(n)&&"static"!==C(P=x(n)).position&&"absolute"===i&&(Z="scrollHeight",z="scrollWidth"),(o===T||(o===L||o===_)&&a===F)&&(k=O,g-=(f&&P===E&&E.visualViewport?E.visualViewport.height:P[Z])-r.height,g*=s?1:-1),o!==L&&(o!==T&&o!==O||a!==F)||(S=_,h-=(f&&P===E&&E.visualViewport?E.visualViewport.width:P[z])-r.width,h*=s?1:-1)}var I,D=Object.assign({position:i},c&&te),R=!0===d?function(e,t){var n=e.x,r=e.y,o=t.devicePixelRatio||1;return{x:m(n*o)/o||0,y:m(r*o)/o||0}}({x:h,y:g},u(n)):{x:h,y:g};return h=R.x,g=R.y,s?Object.assign({},D,((I={})[k]=w?"0":"",I[S]=b?"0":"",I.transform=(E.devicePixelRatio||1)<=1?"translate("+h+"px, "+g+"px)":"translate3d("+h+"px, "+g+"px, 0)",I)):Object.assign({},D,((t={})[k]=w?g+"px":"",t[S]=b?h+"px":"",t.transform="",t))}var re={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return re[e]}))}var ae={start:"end",end:"start"};function le(e){return e.replace(/start|end/g,(function(e){return ae[e]}))}function ie(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&f(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function se(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ue(e,t,n){return t===N?se(function(e,t){var n=u(e),r=x(e),o=n.visualViewport,a=r.clientWidth,l=r.clientHeight,i=0,s=0;if(o){a=o.width,l=o.height;var c=g();(c||!c&&"fixed"===t)&&(i=o.offsetLeft,s=o.offsetTop)}return{width:a,height:l,x:i+S(e),y:s}}(e,n)):c(t)?function(e,t){var n=y(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):se(function(e){var t,n=x(e),r=b(e),o=null==(t=e.ownerDocument)?void 0:t.body,a=p(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),l=p(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),i=-r.scrollLeft+S(e),s=-r.scrollTop;return"rtl"===C(o||n).direction&&(i+=p(n.clientWidth,o?o.clientWidth:0)-a),{width:a,height:l,x:i,y:s}}(x(e)))}function ce(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function de(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function fe(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=void 0===r?e.placement:r,a=n.strategy,l=void 0===a?e.strategy:a,i=n.boundary,s=void 0===i?"clippingParents":i,u=n.rootBoundary,f=void 0===u?N:u,m=n.elementContext,v=void 0===m?j:m,g=n.altBoundary,b=void 0!==g&&g,S=n.padding,k=void 0===S?0:S,E=ce("number"!=typeof k?k:de(k,M)),P=v===j?"reference":j,z=e.rects.popper,D=e.elements[b?P:v],R=function(e,t,n,r){var o="clippingParents"===t?function(e){var t=I(Z(e)),n=["absolute","fixed"].indexOf(C(e).position)>=0&&d(e)?$(e):e;return c(n)?t.filter((function(e){return c(e)&&ie(e,n)&&"body"!==w(e)})):[]}(e):[].concat(t),a=[].concat(o,[n]),l=a[0],i=a.reduce((function(t,n){var o=ue(e,n,r);return t.top=p(o.top,t.top),t.right=h(o.right,t.right),t.bottom=h(o.bottom,t.bottom),t.left=p(o.left,t.left),t}),ue(e,l,r));return i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}(c(D)?D:D.contextElement||x(e.elements.popper),s,f,l),L=y(e.elements.reference),B=ee({reference:L,element:z,strategy:"absolute",placement:o}),A=se(Object.assign({},z,B)),F=v===j?A:L,H={top:R.top-F.top+E.top,bottom:F.bottom-R.bottom+E.bottom,left:R.left-F.left+E.left,right:F.right-R.right+E.right},W=e.modifiersData.offset;if(v===j&&W){var V=W[o];Object.keys(H).forEach((function(e){var t=[_,O].indexOf(e)>=0?1:-1,n=[T,O].indexOf(e)>=0?"y":"x";H[e]+=V[n]*t}))}return H}function pe(e,t,n){return p(e,h(t,n))}function he(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function me(e){return[T,_,O,L].some((function(t){return e[t]>=0}))}var ve=J({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,a=void 0===o||o,l=r.resize,i=void 0===l||l,s=u(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&c.forEach((function(e){e.addEventListener("scroll",n.update,Q)})),i&&s.addEventListener("resize",n.update,Q),function(){a&&c.forEach((function(e){e.removeEventListener("scroll",n.update,Q)})),i&&s.removeEventListener("resize",n.update,Q)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=ee({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,a=n.adaptive,l=void 0===a||a,i=n.roundOffsets,s=void 0===i||i,u={placement:G(t.placement),variation:X(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ne(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:l,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ne(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];d(o)&&w(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});d(r)&&w(r)&&(Object.assign(r.style,a),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,a=void 0===o?[0,0]:o,l=W.reduce((function(e,n){return e[n]=function(e,t,n){var r=G(e),o=[L,T].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,l=a[0],i=a[1];return l=l||0,i=(i||0)*o,[L,_].indexOf(r)>=0?{x:i,y:l}:{x:l,y:i}}(n,t.rects,a),e}),{}),i=l[t.placement],s=i.x,u=i.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=l}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,a=void 0===o||o,l=n.altAxis,i=void 0===l||l,s=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,f=n.altBoundary,p=n.flipVariations,h=void 0===p||p,m=n.allowedAutoPlacements,v=t.options.placement,g=G(v),y=s||(g!==v&&h?function(e){if(G(e)===B)return[];var t=oe(e);return[le(e),t,le(t)]}(v):[oe(v)]),b=[v].concat(y).reduce((function(e,n){return e.concat(G(n)===B?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,l=n.padding,i=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?W:s,c=X(r),d=c?i?H:H.filter((function(e){return X(e)===c})):M,f=d.filter((function(e){return u.indexOf(e)>=0}));0===f.length&&(f=d);var p=f.reduce((function(t,n){return t[n]=fe(e,{placement:n,boundary:o,rootBoundary:a,padding:l})[G(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,x=t.rects.popper,S=new Map,C=!0,k=b[0],E=0;E<b.length;E++){var P=b[E],Z=G(P),z=X(P)===A,I=[T,O].indexOf(Z)>=0,D=I?"width":"height",R=fe(t,{placement:P,boundary:c,rootBoundary:d,altBoundary:f,padding:u}),$=I?z?_:L:z?O:T;w[D]>x[D]&&($=oe($));var F=oe($),N=[];if(a&&N.push(R[Z]<=0),i&&N.push(R[$]<=0,R[F]<=0),N.every((function(e){return e}))){k=P,C=!1;break}S.set(P,N)}if(C)for(var j=function(e){var t=b.find((function(t){var n=S.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},V=h?3:1;V>0&&"break"!==j(V);V--);t.placement!==k&&(t.modifiersData[r]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,a=void 0===o||o,l=n.altAxis,i=void 0!==l&&l,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,f=n.tether,m=void 0===f||f,v=n.tetherOffset,g=void 0===v?0:v,y=fe(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:c}),b=G(t.placement),w=X(t.placement),x=!w,S=Y(b),C="x"===S?"y":"x",k=t.modifiersData.popperOffsets,E=t.rects.reference,Z=t.rects.popper,z="function"==typeof g?g(Object.assign({},t.rects,{placement:t.placement})):g,I="number"==typeof z?{mainAxis:z,altAxis:z}:Object.assign({mainAxis:0,altAxis:0},z),D=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,R={x:0,y:0};if(k){if(a){var B,M="y"===S?T:L,F="y"===S?O:_,N="y"===S?"height":"width",j=k[S],H=j+y[M],W=j-y[F],V=m?-Z[N]/2:0,U=w===A?E[N]:Z[N],K=w===A?-Z[N]:-E[N],q=t.elements.arrow,J=m&&q?P(q):{width:0,height:0},Q=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},ee=Q[M],te=Q[F],ne=pe(0,E[N],J[N]),re=x?E[N]/2-V-ne-ee-I.mainAxis:U-ne-ee-I.mainAxis,oe=x?-E[N]/2+V+ne+te+I.mainAxis:K+ne+te+I.mainAxis,ae=t.elements.arrow&&$(t.elements.arrow),le=ae?"y"===S?ae.clientTop||0:ae.clientLeft||0:0,ie=null!=(B=null==D?void 0:D[S])?B:0,se=j+oe-ie,ue=pe(m?h(H,j+re-ie-le):H,j,m?p(W,se):W);k[S]=ue,R[S]=ue-j}if(i){var ce,de="x"===S?T:L,he="x"===S?O:_,me=k[C],ve="y"===C?"height":"width",ge=me+y[de],ye=me-y[he],be=-1!==[T,L].indexOf(b),we=null!=(ce=null==D?void 0:D[C])?ce:0,xe=be?ge:me-E[ve]-Z[ve]-we+I.altAxis,Se=be?me+E[ve]+Z[ve]-we-I.altAxis:ye,Ce=m&&be?function(e,t,n){var r=pe(e,t,n);return r>n?n:r}(xe,me,Se):pe(m?xe:ge,me,m?Se:ye);k[C]=Ce,R[C]=Ce-me}t.modifiersData[r]=R}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,o=e.options,a=n.elements.arrow,l=n.modifiersData.popperOffsets,i=G(n.placement),s=Y(i),u=[L,_].indexOf(i)>=0?"height":"width";if(a&&l){var c=function(e,t){return ce("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:de(e,M))}(o.padding,n),d=P(a),f="y"===s?T:L,p="y"===s?O:_,h=n.rects.reference[u]+n.rects.reference[s]-l[s]-n.rects.popper[u],m=l[s]-n.rects.reference[s],v=$(a),g=v?"y"===s?v.clientHeight||0:v.clientWidth||0:0,y=h/2-m/2,b=c[f],w=g-d[u]-c[p],x=g/2-d[u]/2+y,S=pe(b,x,w),C=s;n.modifiersData[r]=((t={})[C]=S,t.centerOffset=S-x,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&ie(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,a=t.modifiersData.preventOverflow,l=fe(t,{elementContext:"reference"}),i=fe(t,{altBoundary:!0}),s=he(l,r),u=he(i,o,a),c=me(s),d=me(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]}),ge=n(4780),ye=n(3935),be=n(7960),we=n(5893);const xe=a.forwardRef((function(e,t){const{children:n,container:r,disablePortal:o=!1}=e,[s,u]=a.useState(null),c=(0,l.Z)(a.isValidElement(n)?n.ref:null,t);if((0,i.Z)((()=>{o||u(function(e){return"function"==typeof e?e():e}(r)||document.body)}),[r,o]),(0,i.Z)((()=>{if(s&&!o)return(0,be.Z)(t,s),()=>{(0,be.Z)(t,null)}}),[t,s,o]),o){if(a.isValidElement(n)){const e={ref:c};return a.cloneElement(n,e)}return(0,we.jsx)(a.Fragment,{children:n})}return(0,we.jsx)(a.Fragment,{children:s?ye.createPortal(n,s):s})}));var Se=n(4867);function Ce(e){return(0,Se.Z)("MuiPopper",e)}(0,n(1588).Z)("MuiPopper",["root"]);var ke=n(7293);const Ee={disableDefaultClasses:!1},Pe=a.createContext(Ee),Ze=["anchorEl","children","component","direction","disablePortal","modifiers","open","ownerState","placement","popperOptions","popperRef","slotProps","slots","TransitionProps"],ze=["anchorEl","children","container","direction","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition","slotProps","slots"];function Ie(e){return"function"==typeof e?e():e}const De={},Re=a.forwardRef((function(e,t){var n;const{anchorEl:s,children:u,component:c,direction:d,disablePortal:f,modifiers:p,open:h,ownerState:m,placement:v,popperOptions:g,popperRef:y,slotProps:b={},slots:w={},TransitionProps:x}=e,S=(0,o.Z)(e,Ze),C=a.useRef(null),k=(0,l.Z)(C,t),E=a.useRef(null),P=(0,l.Z)(E,y),Z=a.useRef(P);(0,i.Z)((()=>{Z.current=P}),[P]),a.useImperativeHandle(y,(()=>E.current),[]);const z=function(e,t){if("ltr"===t)return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(v,d),[I,D]=a.useState(z),[R,$]=a.useState(Ie(s));a.useEffect((()=>{E.current&&E.current.forceUpdate()})),a.useEffect((()=>{s&&$(Ie(s))}),[s]),(0,i.Z)((()=>{if(!R||!h)return;let e=[{name:"preventOverflow",options:{altBoundary:f}},{name:"flip",options:{altBoundary:f}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:e})=>{D(e.placement)}}];null!=p&&(e=e.concat(p)),g&&null!=g.modifiers&&(e=e.concat(g.modifiers));const t=ve(R,C.current,(0,r.Z)({placement:z},g,{modifiers:e}));return Z.current(t),()=>{t.destroy(),Z.current(null)}}),[R,f,p,h,g,z]);const T={placement:I};null!==x&&(T.TransitionProps=x);const O=(0,ge.Z)({root:["root"]},function(e){const{disableDefaultClasses:t}=a.useContext(Pe);return n=>t?"":e(n)}(Ce)),_=null!=(n=null!=c?c:w.root)?n:"div",L=(0,ke.Z)({elementType:_,externalSlotProps:b.root,externalForwardedProps:S,additionalProps:{role:"tooltip",ref:k},ownerState:(0,r.Z)({},e,m),className:O.root});return(0,we.jsx)(_,(0,r.Z)({},L,{children:"function"==typeof u?u(T):u}))})),$e=a.forwardRef((function(e,t){const{anchorEl:n,children:l,container:i,direction:u="ltr",disablePortal:c=!1,keepMounted:d=!1,modifiers:f,open:p,placement:h="bottom",popperOptions:m=De,popperRef:v,style:g,transition:y=!1,slotProps:b={},slots:w={}}=e,x=(0,o.Z)(e,ze),[S,C]=a.useState(!0);if(!d&&!p&&(!y||S))return null;let k;if(i)k=i;else if(n){const e=Ie(n);k=e&&void 0!==e.nodeType?(0,s.Z)(e).body:(0,s.Z)(null).body}const E=p||!d||y&&!S?void 0:"none",P=y?{in:p,onEnter:()=>{C(!1)},onExited:()=>{C(!0)}}:void 0;return(0,we.jsx)(xe,{disablePortal:c,container:k,children:(0,we.jsx)(Re,(0,r.Z)({anchorEl:n,direction:u,disablePortal:c,modifiers:f,ref:t,open:y?!S:p,placement:h,popperOptions:m,popperRef:v,slotProps:b,slots:w},x,{style:(0,r.Z)({position:"fixed",top:0,left:0,display:E},g),TransitionProps:P,children:l}))})}))},2289:(e,t,n)=>{"use strict";n.d(t,{j:()=>r});const r=n(7294).createContext(void 0)},758:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7462),o=n(7294),a=n(9962),l=n(67),i=n(437);function s(e){const{disabled:t=!1,focusableWhenDisabled:n,href:s,ref:u,tabIndex:c,to:d,type:f}=e,p=o.useRef(),[h,m]=o.useState(!1),{isFocusVisibleRef:v,onFocus:g,onBlur:y,ref:b}=(0,a.Z)(),[w,x]=o.useState(!1);t&&!n&&w&&x(!1),o.useEffect((()=>{v.current=w}),[w,v]);const[S,C]=o.useState(""),k=e=>t=>{var n;w&&t.preventDefault(),null==(n=e.onMouseLeave)||n.call(e,t)},E=e=>t=>{var n;y(t),!1===v.current&&x(!1),null==(n=e.onBlur)||n.call(e,t)},P=e=>t=>{var n,r;p.current||(p.current=t.currentTarget),g(t),!0===v.current&&(x(!0),null==(r=e.onFocusVisible)||r.call(e,t)),null==(n=e.onFocus)||n.call(e,t)},Z=()=>{const e=p.current;return"BUTTON"===S||"INPUT"===S&&["button","submit","reset"].includes(null==e?void 0:e.type)||"A"===S&&(null==e?void 0:e.href)},z=e=>n=>{var r;t||null==(r=e.onClick)||r.call(e,n)},I=e=>n=>{var r;t||(m(!0),document.addEventListener("mouseup",(()=>{m(!1)}),{once:!0})),null==(r=e.onMouseDown)||r.call(e,n)},D=e=>n=>{var r,o;null==(r=e.onKeyDown)||r.call(e,n),n.defaultPrevented||(n.target!==n.currentTarget||Z()||" "!==n.key||n.preventDefault(),n.target!==n.currentTarget||" "!==n.key||t||m(!0),n.target!==n.currentTarget||Z()||"Enter"!==n.key||t||(null==(o=e.onClick)||o.call(e,n),n.preventDefault()))},R=e=>n=>{var r,o;n.target===n.currentTarget&&m(!1),null==(r=e.onKeyUp)||r.call(e,n),n.target!==n.currentTarget||Z()||t||" "!==n.key||n.defaultPrevented||null==(o=e.onClick)||o.call(e,n)},$=o.useCallback((e=>{var t;C(null!=(t=null==e?void 0:e.tagName)?t:"")}),[]),T=(0,l.Z)($,u,b,p),O={};return"BUTTON"===S?(O.type=null!=f?f:"button",n?O["aria-disabled"]=t:O.disabled=t):""!==S&&(s||d||(O.role="button",O.tabIndex=null!=c?c:0),t&&(O["aria-disabled"]=t,O.tabIndex=n?null!=c?c:0:-1)),{getRootProps:(t={})=>{const n=(0,i.Z)(e),o=(0,r.Z)({},n,t);return delete o.onFocusVisible,(0,r.Z)({type:f},o,O,{onBlur:E(o),onClick:z(o),onFocus:P(o),onKeyDown:D(o),onKeyUp:R(o),onMouseDown:I(o),onMouseLeave:k(o),ref:T})},focusVisible:w,setFocusVisible:x,disabled:t,active:h}}},9124:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7462),o=n(9395);const a=5;function l(e,t,n,r,o,a,l){var i;const s=e.length-1,u=null==t?-1:e.findIndex((e=>l(e,t)));let c,d,f;switch(n){case"reset":return null;case"start":c=0,d="next",f=!1;break;case"end":c=s,d="previous",f=!1;break;default:{const e=u+n;f=!a,e<0?!f&&-1!==u||Math.abs(n)>1?(c=0,d="next"):(c=s,d="previous"):e>s?!f||Math.abs(n)>1?(c=s,d="previous"):(c=0,d="next"):(c=e,d=n>=0?"next":"previous")}}const p=function(e,t,n,r,o,a){if(0===n.length||n.every(((e,t)=>o(e,t))))return-1;let l=e;for(;;){if(!a&&"next"===t&&l===n.length||!a&&"previous"===t&&-1===l)return-1;if(r||!o(n[l],l))return l;l+="next"===t?1:-1,a&&(l=(l+n.length)%n.length)}}(c,d,e,r,o,f);return null!=(i=e[p])?i:null}function i(e,t,n){const{options:r,isOptionDisabled:o,disableListWrap:a,disabledItemsFocusable:i,optionComparer:s}=n;return l(r,e,t,null!=i&&i,null!=o?o:()=>!1,null!=a&&a,null!=s?s:(e,t)=>e===t)}function s(e,t,n){const{optionComparer:r=((e,t)=>e===t),isOptionDisabled:o=(()=>!1),selectionLimit:a}=n,{selectedValues:l}=t,i=n.options.findIndex((t=>n.optionComparer(e,t)));if(o(e,i))return t;const s=function(e,t,n,r){if(0===n)return[];if(1===n)return r(t[0],e)?t:[e];if(t.some((t=>r(t,e))))return t.filter((t=>!r(t,e)));if(null===n||t.length<n)return[...t,e];const o=t.slice(t.length-n+1);return o.push(e),o}(e,l,a,r);return{selectedValues:s,highlightedValue:e}}const u=(e,t,n)=>{var r;const o=null==(r=n(e))?void 0:r.trim().toLowerCase();return!(!o||0===o.length)&&0===o.indexOf(t)};function c(e,t){const{type:n}=t;switch(n){case o.M.keyDown:return function(e,t,n){const o=t.highlightedValue;switch(e.key){case"Home":return(0,r.Z)({},t,{highlightedValue:i(o,"start",n)});case"End":return(0,r.Z)({},t,{highlightedValue:i(o,"end",n)});case"PageUp":return(0,r.Z)({},t,{highlightedValue:i(o,-a,n)});case"PageDown":return(0,r.Z)({},t,{highlightedValue:i(o,a,n)});case"ArrowUp":return(0,r.Z)({},t,{highlightedValue:i(o,-1,n)});case"ArrowDown":return(0,r.Z)({},t,{highlightedValue:i(o,1,n)});case"Enter":case" ":return null===t.highlightedValue?t:s(t.highlightedValue,t,n)}return t}(t.event,e,t.props);case o.M.optionClick:return s(t.option,e,t.props);case o.M.blur:return function(e){return(0,r.Z)({},e,{highlightedValue:null})}(e);case o.M.setValue:return(0,r.Z)({},e,{selectedValues:t.value});case o.M.setHighlight:return(0,r.Z)({},e,{highlightedValue:t.highlight});case o.M.textNavigation:return function(e,t,n){const{options:o,isOptionDisabled:a,disableListWrap:i,disabledItemsFocusable:s,optionComparer:c,optionStringifier:d}=n,f=t.length>1;let p=f?e.highlightedValue:l(o,e.highlightedValue,1,null!=s&&s,null!=a?a:()=>!1,null!=i&&i,c);for(let n=0;n<o.length;n+=1){if(!p||!f&&e.highlightedValue===p)return e;if(u(p,t,d)&&(!a(p,o.indexOf(p))||s))return(0,r.Z)({},e,{highlightedValue:p});p=l(o,p,1,null!=s&&s,null!=a?a:()=>!1,null!=i&&i,c)}return e}(e,t.searchString,t.props);case o.M.optionsChange:return function(e,t,n){var r,o;const{optionComparer:a}=n;return{highlightedValue:null==t.highlightedValue?null:null!=(r=e.find((e=>a(e,t.highlightedValue))))?r:null,selectedValues:(null!=(o=t.selectedValues)?o:[]).filter((t=>e.some((e=>a(e,t)))))}}(t.options,e,t.props);default:return e}}},352:(e,t,n)=>{"use strict";n.d(t,{Z:()=>v});var r=n(7462),o=n(7294),a=n(7579),l=n(67),i=n(9395),s=n(9124);function u(e,t,n=((e,t)=>e===t)){return e.length===t.length&&e.every(((e,r)=>n(e,t[r])))}function c(e,t){return void 0!==t.value?(0,r.Z)({},e,{selectedValue:t.value}):e}function d(e,t){const n=o.useRef(e);return o.useEffect((()=>{n.current=e}),null!=t?t:[e]),n}const f=500,p=(e,t)=>e===t,h=()=>!1,m=e=>"string"==typeof e?e:String(e);function v(e){var t;const{disabledItemsFocusable:n=!1,disableListWrap:v=!1,focusManagement:g="activeDescendant",id:y,isOptionDisabled:b=h,listboxRef:w,optionComparer:x=p,optionStringifier:S=m,options:C,stateReducer:k,value:E,selectionLimit:P=null}=e,Z=(0,a.Z)(y),z=o.useCallback(((e,t)=>`${Z}-option-${t}`),[Z]),I=null!=(t=e.optionIdGenerator)?t:z,D=d((0,r.Z)({},e,{disabledItemsFocusable:n,disableListWrap:v,focusManagement:g,isOptionDisabled:b,optionComparer:x,optionStringifier:S,selectionLimit:P}),[e]),R=o.useRef(null),$=(0,l.Z)(w,R),[{highlightedValue:T,selectedValues:O},_]=function(e,t,n){var a;const{value:l,defaultValue:s}=n.current,d=o.useRef(null),f={highlightedValue:null,selectedValues:null!=(a=void 0===l?s:l)?a:[]},p=o.useCallback(((n,r)=>(d.current=r,t?t(c(n,r.props),r):e(c(n,r.props),r))),[t,e]),[h,m]=o.useReducer(p,f),v=o.useCallback((e=>{m((0,r.Z)({props:n.current},e))}),[m,n]),g=o.useRef(f);return o.useEffect((()=>{g.current=h}),[g,h]),function(e,t,n,r){o.useEffect((()=>{var o;if(!n.current||null===r.current)return;if(r.current.type===i.M.setValue||r.current.type===i.M.setHighlight)return;const a=c(t,n.current),{optionComparer:l,onChange:s}=n.current,d=null!=(o=null==a?void 0:a.selectedValues)?o:[],f=e.selectedValues;var p,h;u(f,d,l)||null==s||s(r.current.event,f),function(e,t,n){return e===t||null!==e&&null!==t&&n(e,t)}(t.highlightedValue,e.highlightedValue,n.current.optionComparer)||null==(p=n.current)||null==(h=p.onHighlightChange)||h.call(p,r.current.event,e.highlightedValue),r.current=null}),[e.selectedValues,e.highlightedValue,t,n,r])}(h,g.current,n,d),[c(h,n.current),v]}(s.Z,k,D),L=function(e){const t=o.useRef({searchString:"",lastTime:null});return o.useCallback((n=>{if(1===n.key.length&&" "!==n.key){const r=t.current,o=n.key.toLowerCase(),a=performance.now();r.searchString.length>0&&r.lastTime&&a-r.lastTime>f?r.searchString=o:1===r.searchString.length&&o===r.searchString||(r.searchString+=o),r.lastTime=a,e(r.searchString,n)}}),[e])}(((e,t)=>_({type:i.M.textNavigation,event:t,searchString:e})));o.useEffect((()=>{void 0!==E&&E!==O&&_({type:i.M.setValue,event:null,value:E})}),[E,O,_]);const B=o.useMemo((()=>null==T?-1:C.findIndex((e=>x(e,T)))),[T,C,x]),M=d(O),A=d(B),F=o.useRef([]);o.useEffect((()=>{u(F.current,C,x)||(_({type:i.M.optionsChange,event:null,options:C,previousOptions:F.current}),F.current=C)}),[C,x,_]);const N=o.useCallback((e=>{_({type:i.M.setValue,event:null,value:e})}),[_]),j=o.useCallback((e=>{_({type:i.M.setHighlight,event:null,highlight:e})}),[_]),H=o.useCallback(((e,t)=>n=>{var r;null==(r=t.onClick)||r.call(t,n),n.defaultPrevented||(n.preventDefault(),_({type:i.M.optionClick,option:e,event:n}))}),[_]),W=o.useCallback(((e,t)=>n=>{var r;null==(r=t.onMouseOver)||r.call(t,n),n.defaultPrevented||_({type:i.M.optionHover,option:e,event:n})}),[_]),V=e=>t=>{var n;if(null==(n=e.onKeyDown)||n.call(e,t),t.defaultPrevented)return;const r=["ArrowUp","ArrowDown","Home","End","PageUp","PageDown"];"activeDescendant"===g&&r.push(" ","Enter"),r.includes(t.key)&&t.preventDefault(),_({type:i.M.keyDown,event:t}),L(t)},U=o.useCallback((e=>{var t;const n=C.findIndex((t=>x(t,e))),r=(null!=(t=M.current)?t:[]).some((t=>null!=t&&x(e,t)));return{disabled:b(e,n),highlighted:A.current===n&&-1!==n,index:n,selected:r}}),[C,b,x,M,A]),K=o.useCallback((e=>{if("activeDescendant"!==g)return e.highlighted?e.disabled&&!n?-1:0:-1}),[g,n]),q=o.useCallback(((e,t={})=>{const n=U(e);return(0,r.Z)({},t,{"aria-disabled":n.disabled||void 0,"aria-selected":n.selected,id:I(e,n.index),onClick:H(e,t),onPointerOver:W(e,t),role:"option",tabIndex:K(n)})}),[I,H,W,K,U]);return o.useDebugValue({highlightedOption:T,selectedOption:O}),{getRootProps:(e={})=>{return(0,r.Z)({},e,{"aria-activedescendant":"activeDescendant"===g&&null!=T?I(T,B):void 0,id:Z,onBlur:(t=e,e=>{var n,r;null==(n=t.onBlur)||n.call(t,e),e.defaultPrevented||null!=(r=R.current)&&r.contains(document.activeElement)||_({type:i.M.blur,event:e})}),onKeyDown:V(e),role:"listbox",tabIndex:"DOM"===g?-1:0,ref:$});var t},getOptionProps:q,getOptionState:U,highlightedOption:T,selectedOption:O,setSelectedValue:N,setHighlightedValue:j}}},9395:(e,t,n)=>{"use strict";var r;n.d(t,{M:()=>r}),function(e){e.blur="blur",e.focus="focus",e.keyDown="keyDown",e.optionClick="optionClick",e.optionHover="optionHover",e.optionsChange="optionsChange",e.setValue="setValue",e.setHighlight="setHighlight",e.textNavigation="textNagivation"}(r||(r={}))},3474:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7462);function o(e,t,n){return void 0===e||"string"==typeof e?t:(0,r.Z)({},t,{ownerState:(0,r.Z)({},t.ownerState,n)})}},437:(e,t,n)=>{"use strict";function r(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n}n.d(t,{Z:()=>r})},9585:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7462),o=n(6010),a=n(437);function l(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t}function i(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:i,externalForwardedProps:s,className:u}=e;if(!t){const e=(0,o.Z)(null==s?void 0:s.className,null==i?void 0:i.className,u,null==n?void 0:n.className),t=(0,r.Z)({},null==n?void 0:n.style,null==s?void 0:s.style,null==i?void 0:i.style),a=(0,r.Z)({},n,s,i);return e.length>0&&(a.className=e),Object.keys(t).length>0&&(a.style=t),{props:a,internalRef:void 0}}const c=(0,a.Z)((0,r.Z)({},s,i)),d=l(i),f=l(s),p=t(c),h=(0,o.Z)(null==p?void 0:p.className,null==n?void 0:n.className,u,null==s?void 0:s.className,null==i?void 0:i.className),m=(0,r.Z)({},null==p?void 0:p.style,null==n?void 0:n.style,null==s?void 0:s.style,null==i?void 0:i.style),v=(0,r.Z)({},p,n,f,d);return h.length>0&&(v.className=h),Object.keys(m).length>0&&(v.style=m),{props:v,internalRef:p.ref}}},1276:(e,t,n)=>{"use strict";function r(e,t){return"function"==typeof e?e(t):e}n.d(t,{Z:()=>r})},5028:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(){const[,e]=r.useState({});return r.useCallback((()=>{e({})}),[])}},1529:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(){const e=r.useRef();return e.current||(e.current=function(){const e=new Map;return{subscribe:function(t,n){let r=e.get(t);return r?r.add(n):(r=new Set([n]),e.set(t,r)),()=>{r.delete(n),0===r.size&&e.delete(t)}},publish:function(t,...n){const r=e.get(t);r&&r.forEach((e=>e(...n)))}}}()),e.current}},7293:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7462),o=n(3366),a=n(67),l=n(3474),i=n(9585),s=n(1276);const u=["elementType","externalSlotProps","ownerState"];function c(e){var t;const{elementType:n,externalSlotProps:c,ownerState:d}=e,f=(0,o.Z)(e,u),p=(0,s.Z)(c,d),{props:h,internalRef:m}=(0,i.Z)((0,r.Z)({},f,{externalSlotProps:p})),v=(0,a.Z)(m,null==p?void 0:p.ref,null==(t=e.additionalProps)?void 0:t.ref);return(0,l.Z)(n,(0,r.Z)({},h,{ref:v}),d)}},6191:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4938)),a=n(5893),l=(0,o.default)((0,a.jsx)("path",{d:"M18.3 5.71a.9959.9959 0 0 0-1.41 0L12 10.59 7.11 5.7a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z"}),"CloseRounded");t.default=l},7608:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4938)),a=n(5893),l=(0,o.default)((0,a.jsx)("path",{d:"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z"}),"HelpOutline");t.default=l},5418:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(4938)),a=n(5893),l=(0,o.default)((0,a.jsx)("path",{d:"M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z"}),"Report");t.default=l},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(5688)},7201:(e,t,n)=>{"use strict";n.r(t),n.d(t,{alertClasses:()=>m,default:()=>S,getAlertUtilityClass:()=>h});var r=n(3366),o=n(7462),a=n(7294),l=n(6010),i=n(4780),s=n(8320),u=n(4312),c=n(407),d=n(8653),f=n(220),p=n(6821);function h(e){return(0,p.d6)("MuiAlert",e)}const m=(0,p.sI)("MuiAlert",["root","startDecorator","endDecorator","colorPrimary","colorDanger","colorInfo","colorNeutral","colorSuccess","colorWarning","colorContext","sizeSm","sizeMd","sizeLg","variantPlain","variantOutlined","variantSoft","variantSolid"]);var v=n(5893);const g=["children","className","color","role","variant","size","startDecorator","endDecorator"],y=(0,u.Z)("div",{name:"JoyAlert",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n;return(0,o.Z)({"--Alert-radius":e.vars.radius.sm,"--Alert-decoratorChildRadius":"max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))","--Button-minHeight":"var(--Alert-decoratorChildHeight)","--IconButton-size":"var(--Alert-decoratorChildHeight)","--Button-radius":"var(--Alert-decoratorChildRadius)","--IconButton-radius":"var(--Alert-decoratorChildRadius)"},"sm"===t.size&&{"--Alert-padding":"0.5rem","--Alert-gap":"0.375rem","--Alert-decoratorChildHeight":"1.5rem","--Icon-fontSize":"1.125rem",fontSize:e.vars.fontSize.sm},"md"===t.size&&{"--Alert-padding":"0.75rem","--Alert-gap":"0.5rem","--Alert-decoratorChildHeight":"2rem","--Icon-fontSize":"1.25rem",fontSize:e.vars.fontSize.sm,fontWeight:e.vars.fontWeight.md},"lg"===t.size&&{"--Alert-padding":"1rem","--Alert-gap":"0.75rem","--Alert-decoratorChildHeight":"2.375rem","--Icon-fontSize":"1.5rem",fontSize:e.vars.fontSize.md,fontWeight:e.vars.fontWeight.md},{fontFamily:e.vars.fontFamily.body,lineHeight:e.vars.lineHeight.md,backgroundColor:"transparent",display:"flex",alignItems:"center",padding:"var(--Alert-padding)",borderRadius:"var(--Alert-radius)"},null==(n=e.variants[t.variant])?void 0:n[t.color])})),b=(0,u.Z)("span",{name:"JoyAlert",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})((({theme:e,ownerState:t})=>{var n;return(0,o.Z)({display:"inherit",flex:"none",marginInlineEnd:"var(--Alert-gap)"},"context"!==t.color&&{color:null==(n=e.vars.palette[t.color])?void 0:n[`${t.variant}Color`]})})),w=(0,u.Z)("span",{name:"JoyAlert",slot:"EndDecorator",overridesResolver:(e,t)=>t.endDecorator})((({theme:e,ownerState:t})=>{var n;return(0,o.Z)({display:"inherit",flex:"none",marginInlineStart:"var(--Alert-gap)",marginLeft:"auto"},"context"!==t.color&&{color:null==(n=e.vars.palette[t.color])?void 0:n[`${t.variant}Color`]})})),x=a.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"JoyAlert"}),{children:a,className:u,color:p="primary",role:m="alert",variant:x="soft",size:S="md",startDecorator:C,endDecorator:k}=n,E=(0,r.Z)(n,g),{getColor:P}=(0,d.VT)(x),Z=P(e.color,p),z=(0,o.Z)({},n,{color:Z,variant:x,size:S}),I=(e=>{const{variant:t,color:n,size:r}=e,o={root:["root",r&&`size${(0,s.Z)(r)}`,n&&`color${(0,s.Z)(n)}`,t&&`variant${(0,s.Z)(t)}`],startDecorator:["startDecorator"],endDecorator:["endDecorator"]};return(0,i.Z)(o,h,{})})(z),[D,R]=(0,f.Z)("root",{ref:t,className:(0,l.Z)(I.root,u),elementType:y,externalForwardedProps:E,ownerState:z,additionalProps:{role:m}}),[$,T]=(0,f.Z)("startDecorator",{className:I.startDecorator,elementType:b,externalForwardedProps:E,ownerState:z}),[O,_]=(0,f.Z)("endDecorator",{className:I.endDecorator,elementType:w,externalForwardedProps:E,ownerState:z});return(0,v.jsxs)(D,(0,o.Z)({},R,{children:[C&&(0,v.jsx)($,(0,o.Z)({},T,{children:C})),a,k&&(0,v.jsx)(O,(0,o.Z)({},_,{children:k}))]}))})),S=x},1637:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var r=n(7462),o=n(3366),a=n(7294),l=n(6010),i=n(9378),s=n(6523),u=n(9707),c=n(6631),d=n(5893);const f=["className","component"];var p=n(7078);const h=function(e={}){const{defaultTheme:t,defaultClassName:n="MuiBox-root",generateClassName:p}=e,h=(0,i.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(s.Z);return a.forwardRef((function(e,a){const i=(0,c.Z)(t),s=(0,u.Z)(e),{className:m,component:v="div"}=s,g=(0,o.Z)(s,f);return(0,d.jsx)(h,(0,r.Z)({as:v,ref:a,className:(0,l.Z)(m,p?p(n):n),theme:i},g))}))}({defaultTheme:n(1812).Z,defaultClassName:"MuiBox-root",generateClassName:p.Z.generate})},5904:(e,t,n)=>{"use strict";n.r(t),n.d(t,{buttonClasses:()=>R,default:()=>B,getButtonUtilityClass:()=>D});var r=n(3366),o=n(7462),a=n(7294),l=n(758),i=n(4780),s=n(8320),u=n(67),c=n(4312),d=n(407),f=n(8653),p=n(220),h=n(6010),m=n(917),v=n(6821);function g(e){return(0,v.d6)("MuiCircularProgress",e)}(0,v.sI)("MuiCircularProgress",["root","determinate","svg","track","progress","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","sizeSm","sizeMd","sizeLg","variantPlain","variantOutlined","variantSoft","variantSolid"]);var y=n(5893);let b,w=e=>e;const x=["color","backgroundColor"],S=["children","className","color","size","variant","thickness","determinate","value"],C=(0,m.F4)({"0%":{transform:"rotate(-90deg)"},"100%":{transform:"rotate(270deg)"}}),k=(0,c.Z)("span",{name:"JoyCircularProgress",slot:"Root",overridesResolver:(e,t)=>t.root})((({ownerState:e,theme:t})=>{var n;const a=(null==(n=t.variants[e.variant])?void 0:n[e.color])||{},{color:l,backgroundColor:i}=a,s=(0,r.Z)(a,x);return(0,o.Z)({"--Icon-fontSize":"calc(0.4 * var(--_root-size))","--CircularProgress-trackColor":i,"--CircularProgress-progressColor":l,"--CircularProgress-percent":e.value,"--CircularProgress-linecap":"round"},"sm"===e.size&&{"--CircularProgress-trackThickness":"3px","--CircularProgress-progressThickness":"3px","--_root-size":"var(--CircularProgress-size, 24px)"},"sm"===e.instanceSize&&{"--CircularProgress-size":"24px"},"md"===e.size&&{"--CircularProgress-trackThickness":"6px","--CircularProgress-progressThickness":"6px","--_root-size":"var(--CircularProgress-size, 40px)"},"md"===e.instanceSize&&{"--CircularProgress-size":"40px"},"lg"===e.size&&{"--CircularProgress-trackThickness":"8px","--CircularProgress-progressThickness":"8px","--_root-size":"var(--CircularProgress-size, 64px)"},"lg"===e.instanceSize&&{"--CircularProgress-size":"64px"},e.thickness&&{"--CircularProgress-trackThickness":`${e.thickness}px`,"--CircularProgress-progressThickness":`${e.thickness}px`},{"--_thickness-diff":"calc(var(--CircularProgress-trackThickness) - var(--CircularProgress-progressThickness))","--_inner-size":"calc(var(--_root-size) - 2 * var(--variant-borderWidth, 0px))","--_outlined-inset":"max(var(--CircularProgress-trackThickness), var(--CircularProgress-progressThickness))",width:"var(--_root-size)",height:"var(--_root-size)",borderRadius:"var(--_root-size)",margin:"var(--CircularProgress-margin)",boxSizing:"border-box",display:"inline-flex",justifyContent:"center",alignItems:"center",flexShrink:0,position:"relative",color:l},e.children&&{fontFamily:t.vars.fontFamily.body,fontWeight:t.vars.fontWeight.md,fontSize:"calc(0.2 * var(--_root-size))"},s,"outlined"===e.variant&&{"&:before":(0,o.Z)({content:'""',display:"block",position:"absolute",borderRadius:"inherit",top:"var(--_outlined-inset)",left:"var(--_outlined-inset)",right:"var(--_outlined-inset)",bottom:"var(--_outlined-inset)"},s)})})),E=(0,c.Z)("svg",{name:"JoyCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({width:"inherit",height:"inherit",display:"inherit",boxSizing:"inherit",position:"absolute",top:"calc(-1 * var(--variant-borderWidth, 0px))",left:"calc(-1 * var(--variant-borderWidth, 0px))"}),P=(0,c.Z)("circle",{name:"JoyCircularProgress",slot:"track",overridesResolver:(e,t)=>t.track})({cx:"50%",cy:"50%",r:"calc(var(--_inner-size) / 2 - var(--CircularProgress-trackThickness) / 2 + min(0px, var(--_thickness-diff) / 2))",fill:"transparent",strokeWidth:"var(--CircularProgress-trackThickness)",stroke:"var(--CircularProgress-trackColor)"}),Z=(0,c.Z)("circle",{name:"JoyCircularProgress",slot:"progress",overridesResolver:(e,t)=>t.progress})({"--_progress-radius":"calc(var(--_inner-size) / 2 - var(--CircularProgress-progressThickness) / 2 - max(0px, var(--_thickness-diff) / 2))","--_progress-length":"calc(2 * 3.1415926535 * var(--_progress-radius))",cx:"50%",cy:"50%",r:"var(--_progress-radius)",fill:"transparent",strokeWidth:"var(--CircularProgress-progressThickness)",stroke:"var(--CircularProgress-progressColor)",strokeLinecap:"var(--CircularProgress-linecap, round)",strokeDasharray:"var(--_progress-length)",strokeDashoffset:"calc(var(--_progress-length) - var(--CircularProgress-percent) * var(--_progress-length) / 100)",transformOrigin:"center",transform:"rotate(-90deg)"},(({ownerState:e})=>!e.determinate&&(0,m.iv)(b||(b=w`
      animation: var(--CircularProgress-circulation, 0.8s linear 0s infinite normal none running)
        ${0};
    `),C))),z=a.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"JoyCircularProgress"}),{children:a,className:l,color:u="primary",size:c="md",variant:m="soft",thickness:v,determinate:b=!1,value:w=(b?0:25)}=n,x=(0,r.Z)(n,S),{getColor:C}=(0,f.VT)(m),z=C(e.color,u),I=(0,o.Z)({},n,{color:z,size:c,variant:m,thickness:v,value:w,determinate:b,instanceSize:e.size}),D=(e=>{const{determinate:t,color:n,variant:r,size:o}=e,a={root:["root",t&&"determinate",n&&`color${(0,s.Z)(n)}`,r&&`variant${(0,s.Z)(r)}`,o&&`size${(0,s.Z)(o)}`],svg:["svg"],track:["track"],progress:["progress"]};return(0,i.Z)(a,g,{})})(I),[R,$]=(0,p.Z)("root",{ref:t,className:(0,h.Z)(D.root,l),elementType:k,externalForwardedProps:x,ownerState:I,additionalProps:(0,o.Z)({role:"progressbar",style:{"--CircularProgress-percent":w}},w&&b&&{"aria-valuenow":"number"==typeof w?Math.round(w):Math.round(Number(w||0))})}),[T,O]=(0,p.Z)("svg",{className:D.svg,elementType:E,externalForwardedProps:x,ownerState:I}),[_,L]=(0,p.Z)("track",{className:D.track,elementType:P,externalForwardedProps:x,ownerState:I}),[B,M]=(0,p.Z)("progress",{className:D.progress,elementType:Z,externalForwardedProps:x,ownerState:I});return(0,y.jsxs)(R,(0,o.Z)({},$,{children:[(0,y.jsxs)(T,(0,o.Z)({},O,{children:[(0,y.jsx)(_,(0,o.Z)({},L)),(0,y.jsx)(B,(0,o.Z)({},M))]})),a]}))})),I=z;function D(e){return(0,v.d6)("MuiButton",e)}const R=(0,v.sI)("MuiButton",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","focusVisible","disabled","sizeSm","sizeMd","sizeLg","fullWidth","startDecorator","endDecorator","loading","loadingIndicatorCenter"]),$=["children","action","color","variant","size","fullWidth","startDecorator","endDecorator","loading","loadingPosition","loadingIndicator","disabled"],T=(0,c.Z)("span",{name:"JoyButton",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})({"--Icon-margin":"0 0 0 calc(var(--Button-gap) / -2)","--CircularProgress-margin":"0 0 0 calc(var(--Button-gap) / -2)",display:"inherit",marginRight:"var(--Button-gap)"}),O=(0,c.Z)("span",{name:"JoyButton",slot:"EndDecorator",overridesResolver:(e,t)=>t.endDecorator})({"--Icon-margin":"0 calc(var(--Button-gap) / -2) 0 0","--CircularProgress-margin":"0 calc(var(--Button-gap) / -2) 0 0",display:"inherit",marginLeft:"var(--Button-gap)"}),_=(0,c.Z)("span",{name:"JoyButton",slot:"LoadingCenter",overridesResolver:(e,t)=>t.loadingIndicatorCenter})((({theme:e,ownerState:t})=>{var n,r,a,l;return(0,o.Z)({display:"inherit",position:"absolute",left:"50%",transform:"translateX(-50%)",color:null==(n=e.variants[t.variant])||null==(r=n[t.color])?void 0:r.color},t.disabled&&{color:null==(a=e.variants[`${t.variant}Disabled`])||null==(l=a[t.color])?void 0:l.color})})),L=(0,c.Z)("button",{name:"JoyButton",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r,a,l;return[(0,o.Z)({"--Icon-margin":"initial"},"sm"===t.size&&{"--Icon-fontSize":"1.25rem","--CircularProgress-size":"20px","--Button-gap":"0.375rem",minHeight:"var(--Button-minHeight, 2rem)",fontSize:e.vars.fontSize.sm,paddingBlock:"2px",paddingInline:"0.75rem"},"md"===t.size&&{"--Icon-fontSize":"1.5rem","--CircularProgress-size":"24px","--Button-gap":"0.5rem",minHeight:"var(--Button-minHeight, 2.5rem)",fontSize:e.vars.fontSize.sm,paddingBlock:"0.25rem",paddingInline:"1rem"},"lg"===t.size&&{"--Icon-fontSize":"1.75rem","--CircularProgress-size":"28px","--Button-gap":"0.75rem",minHeight:"var(--Button-minHeight, 3rem)",fontSize:e.vars.fontSize.md,paddingBlock:"0.375rem",paddingInline:"1.5rem"},{WebkitTapHighlightColor:"transparent",borderRadius:`var(--Button-radius, ${e.vars.radius.sm})`,margin:"var(--Button-margin)",border:"none",backgroundColor:"transparent",cursor:"pointer",display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",textDecoration:"none",fontFamily:e.vars.fontFamily.body,fontWeight:e.vars.fontWeight.lg,lineHeight:1},t.fullWidth&&{width:"100%"},{[e.focus.selector]:e.focus.default}),null==(n=e.variants[t.variant])?void 0:n[t.color],{"&:hover":null==(r=e.variants[`${t.variant}Hover`])?void 0:r[t.color]},{"&:active":null==(a=e.variants[`${t.variant}Active`])?void 0:a[t.color]},(0,o.Z)({[`&.${R.disabled}`]:null==(l=e.variants[`${t.variant}Disabled`])?void 0:l[t.color]},"center"===t.loadingPosition&&{[`&.${R.loading}`]:{color:"transparent"}})]})),B=a.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"JoyButton"}),{children:c,action:h,color:m="primary",variant:v="solid",size:g="md",fullWidth:b=!1,startDecorator:w,endDecorator:x,loading:S=!1,loadingPosition:C="center",loadingIndicator:k,disabled:E}=n,P=(0,r.Z)(n,$),{getColor:Z}=(0,f.VT)(v),z=Z(e.color,m),R=a.useRef(null),B=(0,u.Z)(R,t),{focusVisible:M,setFocusVisible:A,getRootProps:F}=(0,l.Z)((0,o.Z)({},n,{disabled:E||S,ref:B})),N=null!=k?k:(0,y.jsx)(I,(0,o.Z)({},"context"!==z&&{color:z},{thickness:{sm:2,md:3,lg:4}[g]||3}));a.useImperativeHandle(h,(()=>({focusVisible:()=>{var e;A(!0),null==(e=R.current)||e.focus()}})),[A]);const j=(0,o.Z)({},n,{color:z,fullWidth:b,variant:v,size:g,focusVisible:M,loading:S,loadingPosition:C,disabled:E||S}),H=(e=>{const{color:t,disabled:n,focusVisible:r,focusVisibleClassName:o,fullWidth:a,size:l,variant:u,loading:c}=e,d={root:["root",n&&"disabled",r&&"focusVisible",a&&"fullWidth",u&&`variant${(0,s.Z)(u)}`,t&&`color${(0,s.Z)(t)}`,l&&`size${(0,s.Z)(l)}`,c&&"loading"],startDecorator:["startDecorator"],endDecorator:["endDecorator"],loadingIndicatorCenter:["loadingIndicatorCenter"]},f=(0,i.Z)(d,D,{});return r&&o&&(f.root+=` ${o}`),f})(j),[W,V]=(0,p.Z)("root",{ref:t,className:H.root,elementType:L,externalForwardedProps:P,getSlotProps:F,ownerState:j}),[U,K]=(0,p.Z)("startDecorator",{className:H.startDecorator,elementType:T,externalForwardedProps:P,ownerState:j}),[q,J]=(0,p.Z)("endDecorator",{className:H.endDecorator,elementType:O,externalForwardedProps:P,ownerState:j}),[Q,G]=(0,p.Z)("loadingIndicatorCenter",{className:H.loadingIndicatorCenter,elementType:_,externalForwardedProps:P,ownerState:j});return(0,y.jsxs)(W,(0,o.Z)({},V,{children:[(w||S&&"start"===C)&&(0,y.jsx)(U,(0,o.Z)({},K,{children:S&&"start"===C?N:w})),c,S&&"center"===C&&(0,y.jsx)(Q,(0,o.Z)({},G,{children:N})),(x||S&&"end"===C)&&(0,y.jsx)(q,(0,o.Z)({},J,{children:S&&"end"===C?N:x}))]}))}))},5665:(e,t,n)=>{"use strict";n.r(t),n.d(t,{cardClasses:()=>m,default:()=>S,getCardUtilityClass:()=>h});var r=n(3366),o=n(7462),a=n(7294),l=n(6010),i=n(4780),s=n(8320),u=n(8719),c=n(407),d=n(4312),f=n(8653),p=n(6821);function h(e){return(0,p.d6)("MuiCard",e)}const m=(0,p.sI)("MuiCard",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","sizeSm","sizeMd","sizeLg","horizontal","vertical"]);var v=n(8859);const g=a.createContext(!1);var y=n(5893);const b=["className","color","component","invertedColors","size","variant","children","orientation"],w=(0,d.Z)("div",{name:"JoyCard",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r;return[(0,o.Z)({"--Card-childRadius":"max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--Card-padding), min(var(--Card-padding) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))","--AspectRatio-radius":"var(--Card-childRadius)","--unstable_actionMargin":"calc(-1 * var(--variant-borderWidth, 0px))","--unstable_actionRadius":(0,v.V)({theme:e,ownerState:t},"borderRadius","var(--Card-radius)"),"--CardCover-radius":"calc(var(--Card-radius) - var(--variant-borderWidth, 0px))","--CardOverflow-offset":"calc(-1 * var(--Card-padding))","--CardOverflow-radius":"calc(var(--Card-radius) - var(--variant-borderWidth, 0px))","--Divider-inset":"calc(-1 * var(--Card-padding))"},"sm"===t.size&&{"--Card-radius":e.vars.radius.sm,"--Card-padding":"0.5rem"},"md"===t.size&&{"--Card-radius":e.vars.radius.md,"--Card-padding":"1rem",fontSize:e.vars.fontSize.md},"lg"===t.size&&{"--Card-radius":e.vars.radius.lg,"--Card-padding":"1.5rem"},{padding:"var(--Card-padding)",borderRadius:"var(--Card-radius)",boxShadow:e.shadow.sm,backgroundColor:e.vars.palette.background.surface,fontFamily:e.vars.fontFamily.body,position:"relative",display:"flex",flexDirection:"horizontal"===t.orientation?"row":"column"}),null==(n=e.variants[t.variant])?void 0:n[t.color],"context"!==t.color&&t.invertedColors&&(null==(r=e.colorInversion[t.variant])?void 0:r[t.color])]})),x=a.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"JoyCard"}),{className:d,color:p="neutral",component:m="div",invertedColors:v=!1,size:x="md",variant:S="plain",children:C,orientation:k="vertical"}=n,E=(0,r.Z)(n,b),{getColor:P}=(0,f.VT)(S),Z=P(e.color,p),z=(0,o.Z)({},n,{color:Z,component:m,orientation:k,size:x,variant:S}),I=(e=>{const{size:t,variant:n,color:r,orientation:o}=e,a={root:["root",o,n&&`variant${(0,s.Z)(n)}`,r&&`color${(0,s.Z)(r)}`,t&&`size${(0,s.Z)(t)}`]};return(0,i.Z)(a,h,{})})(z),D=(0,y.jsx)(g.Provider,{value:"horizontal"===k,children:(0,y.jsx)(w,(0,o.Z)({as:m,ownerState:z,className:(0,l.Z)(I.root,d),ref:t},E,{children:a.Children.map(C,((e,t)=>{if(!a.isValidElement(e))return e;const n={};if((0,u.Z)(e,["Divider"])){n.inset="inset"in e.props?e.props.inset:"context";const t="vertical"===k?"horizontal":"vertical";n.orientation="orientation"in e.props?e.props.orientation:t}return 0===t&&(n["data-first-child"]=""),t===a.Children.count(C)-1&&(n["data-last-child"]=""),a.cloneElement(e,n)}))}))});return v?(0,y.jsx)(f.do,{variant:S,children:D}):D})),S=x},3999:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(7462),o=n(7294),a=n(1234),l=n(1812),i=n(5893);const s=function(e){const{children:t,disableColorScheme:n=!1}=e;return(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(a.Z,{styles:e=>{var t,o,a,l;const i={};n||Object.entries(e.colorSchemes).forEach((([t,n])=>{var r;i[e.getColorSchemeSelector(t).replace(/\s*&/,"")]={colorScheme:null==(r=n.palette)?void 0:r.mode}}));const s=null!=(t=null==(o=e.components)||null==(a=o.JoyTypography)||null==(l=a.defaultProps)?void 0:l.level)?t:"body1";return(0,r.Z)({html:{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%"},"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:"bold"},body:(0,r.Z)({margin:0,color:e.vars.palette.text.primary,fontFamily:e.vars.fontFamily.body},e.typography[s],{backgroundColor:e.vars.palette.background.body,"@media print":{backgroundColor:e.vars.palette.common.white},"&::backdrop":{backgroundColor:e.vars.palette.background.backdrop}})},i)},defaultTheme:l.Z}),t]})}},6043:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(void 0)},9755:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>x,getIconButtonUtilityClass:()=>m,iconButtonClasses:()=>v});var r=n(3366),o=n(7462),a=n(7294),l=n(8320),i=n(67),s=n(758),u=n(4780),c=n(4312),d=n(407),f=n(8653),p=n(220),h=n(6821);function m(e){return(0,h.d6)("MuiIconButton",e)}const v=(0,h.sI)("MuiIconButton",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","focusVisible","disabled","sizeSm","sizeMd","sizeLg"]);var g=n(5893);const y=["children","action","component","color","variant","size"],b=(0,c.Z)("button")((({theme:e,ownerState:t})=>{var n,r,a,l;return[(0,o.Z)({"--Icon-margin":"initial"},"sm"===t.size&&{"--Icon-fontSize":"calc(var(--IconButton-size, 2rem) / 1.6)","--CircularProgress-size":"20px",minWidth:"var(--IconButton-size, 2rem)",minHeight:"var(--IconButton-size, 2rem)",fontSize:e.vars.fontSize.sm,paddingInline:"2px"},"md"===t.size&&{"--Icon-fontSize":"calc(var(--IconButton-size, 2.5rem) / 1.667)","--CircularProgress-size":"24px",minWidth:"var(--IconButton-size, 2.5rem)",minHeight:"var(--IconButton-size, 2.5rem)",fontSize:e.vars.fontSize.md,paddingInline:"0.25rem"},"lg"===t.size&&{"--Icon-fontSize":"calc(var(--IconButton-size, 3rem) / 1.714)","--CircularProgress-size":"28px",minWidth:"var(--IconButton-size, 3rem)",minHeight:"var(--IconButton-size, 3rem)",fontSize:e.vars.fontSize.lg,paddingInline:"0.375rem"},{WebkitTapHighlightColor:"transparent",paddingBlock:0,fontFamily:e.vars.fontFamily.body,fontWeight:e.vars.fontWeight.md,margin:"var(--IconButton-margin)",borderRadius:`var(--IconButton-radius, ${e.vars.radius.sm})`,border:"none",boxSizing:"border-box",backgroundColor:"transparent",cursor:"pointer",display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",[e.focus.selector]:e.focus.default}),null==(n=e.variants[t.variant])?void 0:n[t.color],{"&:hover":null==(r=e.variants[`${t.variant}Hover`])?void 0:r[t.color]},{"&:active":null==(a=e.variants[`${t.variant}Active`])?void 0:a[t.color]},{[`&.${v.disabled}`]:null==(l=e.variants[`${t.variant}Disabled`])?void 0:l[t.color]}]})),w=(0,c.Z)(b,{name:"JoyIconButton",slot:"Root",overridesResolver:(e,t)=>t.root})({}),x=a.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"JoyIconButton"}),{children:c,action:h,component:v="button",color:b="primary",variant:x="soft",size:S="md"}=n,C=(0,r.Z)(n,y),{getColor:k}=(0,f.VT)(x),E=k(e.color,b),P=a.useRef(null),Z=(0,i.Z)(P,t),{focusVisible:z,setFocusVisible:I,getRootProps:D}=(0,s.Z)((0,o.Z)({},n,{ref:Z}));a.useImperativeHandle(h,(()=>({focusVisible:()=>{var e;I(!0),null==(e=P.current)||e.focus()}})),[I]);const R=(0,o.Z)({},n,{component:v,color:E,variant:x,size:S,focusVisible:z}),$=(e=>{const{color:t,disabled:n,focusVisible:r,focusVisibleClassName:o,size:a,variant:i}=e,s={root:["root",n&&"disabled",r&&"focusVisible",i&&`variant${(0,l.Z)(i)}`,t&&`color${(0,l.Z)(t)}`,a&&`size${(0,l.Z)(a)}`]},c=(0,u.Z)(s,m,{});return r&&o&&(c.root+=` ${o}`),c})(R),[T,O]=(0,p.Z)("root",{ref:t,className:$.root,elementType:w,getSlotProps:D,externalForwardedProps:(0,o.Z)({},C,{component:v}),ownerState:R});return(0,g.jsx)(T,(0,o.Z)({},O,{children:c}))}))},4877:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>P,getInputUtilityClass:()=>p,inputClasses:()=>h});var r=n(3366),o=n(7462),a=n(7294),l=n(8320),i=n(4780),s=n(4312),u=n(407),c=n(8653),d=n(220),f=n(6821);function p(e){return(0,f.d6)("MuiInput",e)}const h=(0,f.sI)("MuiInput",["root","input","formControl","focused","disabled","error","adornedStart","adornedEnd","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","sizeSm","sizeMd","sizeLg","variantPlain","variantOutlined","variantSoft","variantSolid","fullWidth","startDecorator","endDecorator"]);var m=n(9524),v=n(5893);const g=["propsToForward","rootStateClasses","inputStateClasses","getRootProps","getInputProps","formControl","focused","error","disabled","fullWidth","size","color","variant","startDecorator","endDecorator"],y=(0,s.Z)("div")((({theme:e,ownerState:t})=>{var n,r,a,l,i;const s=null==(n=e.variants[`${t.variant}`])?void 0:n[t.color];return[(0,o.Z)({"--Input-radius":e.vars.radius.sm,"--Input-gap":"0.5rem","--Input-placeholderColor":"inherit","--Input-placeholderOpacity":.5,"--Input-focusedThickness":e.vars.focus.thickness},"context"===t.color?{"--Input-focusedHighlight":e.vars.palette.focusVisible}:{"--Input-focusedHighlight":null==(r=e.vars.palette["neutral"===t.color?"primary":t.color])?void 0:r[500]},"sm"===t.size&&{"--Input-minHeight":"2rem","--Input-paddingInline":"0.5rem","--Input-decoratorChildHeight":"min(1.5rem, var(--Input-minHeight))","--Icon-fontSize":"1.25rem"},"md"===t.size&&{"--Input-minHeight":"2.5rem","--Input-paddingInline":"0.75rem","--Input-decoratorChildHeight":"min(2rem, var(--Input-minHeight))","--Icon-fontSize":"1.5rem"},"lg"===t.size&&{"--Input-minHeight":"3rem","--Input-paddingInline":"1rem","--Input-gap":"0.75rem","--Input-decoratorChildHeight":"min(2.375rem, var(--Input-minHeight))","--Icon-fontSize":"1.75rem"},{"--Input-decoratorChildOffset":"min(calc(var(--Input-paddingInline) - (var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2), var(--Input-paddingInline))","--_Input-paddingBlock":"max((var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2, 0px)","--Input-decoratorChildRadius":"max(var(--Input-radius) - var(--variant-borderWidth, 0px) - var(--_Input-paddingBlock), min(var(--_Input-paddingBlock) + var(--variant-borderWidth, 0px), var(--Input-radius) / 2))","--Button-minHeight":"var(--Input-decoratorChildHeight)","--IconButton-size":"var(--Input-decoratorChildHeight)","--Button-radius":"var(--Input-decoratorChildRadius)","--IconButton-radius":"var(--Input-decoratorChildRadius)",boxSizing:"border-box",minWidth:0,minHeight:"var(--Input-minHeight)"},t.fullWidth&&{width:"100%"},{cursor:"text",position:"relative",display:"flex",alignItems:"center",paddingInline:"var(--Input-paddingInline)",borderRadius:"var(--Input-radius)",fontFamily:e.vars.fontFamily.body,fontSize:e.vars.fontSize.md},"sm"===t.size&&{fontSize:e.vars.fontSize.sm},{"&:before":{boxSizing:"border-box",content:'""',display:"block",position:"absolute",pointerEvents:"none",top:0,left:0,right:0,bottom:0,zIndex:1,borderRadius:"inherit",margin:"calc(var(--variant-borderWidth, 0px) * -1)"}}),(0,o.Z)({},s,{backgroundColor:null!=(a=null==s?void 0:s.backgroundColor)?a:e.vars.palette.background.surface,[`&:hover:not(.${h.focused})`]:(0,o.Z)({},null==(l=e.variants[`${t.variant}Hover`])?void 0:l[t.color],{backgroundColor:null}),[`&.${h.disabled}`]:null==(i=e.variants[`${t.variant}Disabled`])?void 0:i[t.color],[`&.${h.focused}`]:{"&:before":{boxShadow:"inset 0 0 0 var(--Input-focusedThickness) var(--Input-focusedHighlight)"}}})]})),b=(0,s.Z)("input")((({ownerState:e})=>({border:"none",minWidth:0,outline:0,padding:0,flex:1,alignSelf:"stretch",color:"inherit",backgroundColor:"transparent",fontFamily:"inherit",fontSize:"inherit",fontStyle:"inherit",fontWeight:"inherit",lineHeight:"inherit",textOverflow:"ellipsis","&:-webkit-autofill":(0,o.Z)({paddingInline:"var(--Input-paddingInline)"},!e.startDecorator&&{marginInlineStart:"calc(-1 * var(--Input-paddingInline))",paddingInlineStart:"var(--Input-paddingInline)",borderTopLeftRadius:"calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",borderBottomLeftRadius:"calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"},!e.endDecorator&&{marginInlineEnd:"calc(-1 * var(--Input-paddingInline))",paddingInlineEnd:"var(--Input-paddingInline)",borderTopRightRadius:"calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",borderBottomRightRadius:"calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"}),"&::-webkit-input-placeholder":{color:"var(--Input-placeholderColor)",opacity:"var(--Input-placeholderOpacity)"},"&::-moz-placeholder":{color:"var(--Input-placeholderColor)",opacity:"var(--Input-placeholderOpacity)"},"&:-ms-input-placeholder":{color:"var(--Input-placeholderColor)",opacity:"var(--Input-placeholderOpacity)"},"&::-ms-input-placeholder":{color:"var(--Input-placeholderColor)",opacity:"var(--Input-placeholderOpacity)"}}))),w=(0,s.Z)("span")((({theme:e,ownerState:t})=>{var n,r,a,l;return(0,o.Z)({"--Button-margin":"0 0 0 calc(var(--Input-decoratorChildOffset) * -1)","--IconButton-margin":"0 0 0 calc(var(--Input-decoratorChildOffset) * -1)","--Icon-margin":"0 0 0 calc(var(--Input-paddingInline) / -4)",display:"inherit",alignItems:"center",paddingBlock:"var(--unstable_InputPaddingBlock)",flexWrap:"wrap",marginInlineEnd:"var(--Input-gap)",color:e.vars.palette.text.tertiary,cursor:"initial"},t.focused&&{color:null==(n=e.variants[t.variant])||null==(r=n[t.color])?void 0:r.color},t.disabled&&{color:null==(a=e.variants[`${t.variant}Disabled`])||null==(l=a[t.color])?void 0:l.color})})),x=(0,s.Z)("span")((({theme:e,ownerState:t})=>{var n,r,a,l;return(0,o.Z)({"--Button-margin":"0 calc(var(--Input-decoratorChildOffset) * -1) 0 0","--IconButton-margin":"0 calc(var(--Input-decoratorChildOffset) * -1) 0 0","--Icon-margin":"0 calc(var(--Input-paddingInline) / -4) 0 0",display:"inherit",alignItems:"center",marginInlineStart:"var(--Input-gap)",color:null==(n=e.variants[t.variant])||null==(r=n[t.color])?void 0:r.color,cursor:"initial"},t.disabled&&{color:null==(a=e.variants[`${t.variant}Disabled`])||null==(l=a[t.color])?void 0:l.color})})),S=(0,s.Z)(y,{name:"JoyInput",slot:"Root",overridesResolver:(e,t)=>t.root})({}),C=(0,s.Z)(b,{name:"JoyInput",slot:"Input",overridesResolver:(e,t)=>t.input})({}),k=(0,s.Z)(w,{name:"JoyInput",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})({}),E=(0,s.Z)(x,{name:"JoyInput",slot:"EndDecorator",overridesResolver:(e,t)=>t.endDecorator})({}),P=a.forwardRef((function(e,t){var n,a,s,f,y;const b=(0,u.Z)({props:e,name:"JoyInput"}),w=(0,m.Z)(b,h),{propsToForward:x,rootStateClasses:P,inputStateClasses:Z,getRootProps:z,getInputProps:I,formControl:D,focused:R,error:$=!1,disabled:T,fullWidth:O=!1,size:_="md",color:L="neutral",variant:B="outlined",startDecorator:M,endDecorator:A}=w,F=(0,r.Z)(w,g),N=null!=(n=null!=(a=e.error)?a:null==D?void 0:D.error)?n:$,j=null!=(s=null!=(f=e.size)?f:null==D?void 0:D.size)?s:_,{getColor:H}=(0,c.VT)(B),W=H(e.color,N?"danger":null!=(y=null==D?void 0:D.color)?y:L),V=(0,o.Z)({},b,{fullWidth:O,color:W,disabled:T,error:N,focused:R,size:j,variant:B}),U=(e=>{const{disabled:t,fullWidth:n,variant:r,color:o,size:a}=e,s={root:["root",t&&"disabled",n&&"fullWidth",r&&`variant${(0,l.Z)(r)}`,o&&`color${(0,l.Z)(o)}`,a&&`size${(0,l.Z)(a)}`],input:["input"],startDecorator:["startDecorator"],endDecorator:["endDecorator"]};return(0,i.Z)(s,p,{})})(V),[K,q]=(0,d.Z)("root",{ref:t,className:[U.root,P],elementType:S,getSlotProps:z,externalForwardedProps:F,ownerState:V}),[J,Q]=(0,d.Z)("input",(0,o.Z)({},D&&{additionalProps:{id:D.htmlFor,"aria-describedby":D["aria-describedby"]}},{className:[U.input,Z],elementType:C,getSlotProps:I,internalForwardedProps:x,externalForwardedProps:F,ownerState:V})),[G,X]=(0,d.Z)("startDecorator",{className:U.startDecorator,elementType:k,externalForwardedProps:F,ownerState:V}),[Y,ee]=(0,d.Z)("endDecorator",{className:U.endDecorator,elementType:E,externalForwardedProps:F,ownerState:V});return(0,v.jsxs)(K,(0,o.Z)({},q,{children:[M&&(0,v.jsx)(G,(0,o.Z)({},X,{children:M})),(0,v.jsx)(J,(0,o.Z)({},Q)),A&&(0,v.jsx)(Y,(0,o.Z)({},ee,{children:A}))]}))}))},9524:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7462),o=n(3366),a=n(7294),l=n(1387),i=n(67);const s=a.createContext(void 0);var u=n(437);var c=n(6043);const d=["aria-describedby","aria-label","aria-labelledby","autoComplete","autoFocus","className","defaultValue","disabled","error","id","name","onClick","onChange","onKeyDown","onKeyUp","onFocus","onBlur","placeholder","readOnly","required","type","value"];function f(e,t){const n=a.useContext(c.Z),{"aria-describedby":f,"aria-label":p,"aria-labelledby":h,autoComplete:m,autoFocus:v,className:g,defaultValue:y,disabled:b,error:w,id:x,name:S,onClick:C,onChange:k,onKeyDown:E,onKeyUp:P,onFocus:Z,onBlur:z,placeholder:I,readOnly:D,required:R,type:$,value:T}=e,O=(0,o.Z)(e,d),{getRootProps:_,getInputProps:L,focused:B,error:M,disabled:A}=function(e){const{defaultValue:t,disabled:n=!1,error:o=!1,onBlur:c,onChange:d,onFocus:f,required:p=!1,value:h,inputRef:m}=e,v=a.useContext(s);let g,y,b,w,x;var S,C,k;v?(g=void 0,y=null!=(S=v.disabled)&&S,b=null!=(C=v.error)&&C,w=null!=(k=v.required)&&k,x=v.value):(g=t,y=n,b=o,w=p,x=h);const{current:E}=a.useRef(null!=x),P=a.useCallback((e=>{}),[]),Z=a.useRef(null),z=(0,i.Z)(Z,m,P),[I,D]=a.useState(!1);a.useEffect((()=>{!v&&y&&I&&(D(!1),null==c||c())}),[v,y,I,c]);const R=e=>t=>{var n,r;null!=v&&v.disabled?t.stopPropagation():(null==(n=e.onFocus)||n.call(e,t),v&&v.onFocus?null==v||null==(r=v.onFocus)||r.call(v):D(!0))},$=e=>(t,...n)=>{var r,o;if(!E&&null==(t.target||Z.current))throw new Error((0,l.Z)(17));null==v||null==(r=v.onChange)||r.call(v,t),null==(o=e.onChange)||o.call(e,t,...n)};return{disabled:y,error:b,focused:I,formControlContext:v,getInputProps:(e={})=>{const t={onBlur:c,onChange:d,onFocus:f},n=(0,r.Z)({},t,(0,u.Z)(e)),o=(0,r.Z)({},e,n,{onBlur:(a=n,e=>{var t;null==(t=a.onBlur)||t.call(a,e),v&&v.onBlur?v.onBlur():D(!1)}),onChange:$(n),onFocus:R(n)});var a;return(0,r.Z)({},o,{"aria-invalid":b||void 0,defaultValue:g,ref:z,value:x,required:w,disabled:y})},getRootProps:(t={})=>{const n=(0,u.Z)(e,["onBlur","onChange","onFocus"]),o=(0,r.Z)({},n,(0,u.Z)(t));return(0,r.Z)({},t,o,{onClick:(a=o,e=>{var t;Z.current&&e.currentTarget===e.target&&Z.current.focus(),null==(t=a.onClick)||t.call(a,e)})});var a},required:w,value:x}}({disabled:null!=b?b:null==n?void 0:n.disabled,defaultValue:y,error:w,onBlur:z,onClick:C,onChange:k,onFocus:Z,required:null!=R?R:null==n?void 0:n.required,value:T}),F={[t.disabled]:A,[t.error]:M,[t.focused]:B,[t.formControl]:Boolean(n),[g]:g},N={[t.disabled]:A},j={"aria-describedby":f,"aria-label":p,"aria-labelledby":h,autoComplete:m,autoFocus:v,disabled:A,id:x,onKeyDown:E,onKeyUp:P,name:S,placeholder:I,readOnly:D,type:$};return(0,r.Z)({formControl:n,propsToForward:j,rootStateClasses:F,inputStateClasses:N,getRootProps:_,getInputProps:L,focused:B,error:M,disabled:A},O)}},9674:(e,t,n)=>{"use strict";n.d(t,{C:()=>x,Z:()=>C});var r=n(3366),o=n(7462),a=n(7294),l=n(6010),i=n(8320),s=n(4780),u=n(8259),c=n(2289),d=n(4312),f=n(407),p=n(8653),h=n(7361),m=n(4593);const v=a.createContext(void 0);var g=n(6375);const y=a.createContext(void 0);var b=n(5893);const w=["component","className","children","size","orientation","wrap","variant","color","role"],x=(0,d.Z)("ul")((({theme:e,ownerState:t})=>{var n;function r(n){return"sm"===n?{"--ListDivider-gap":"0.25rem","--ListItem-minHeight":"2rem","--ListItem-paddingY":"0.25rem","--ListItem-paddingX":"0.5rem","--ListItem-fontSize":e.vars.fontSize.sm,"--ListItemDecorator-size":"horizontal"===t.orientation?"1.5rem":"2rem","--Icon-fontSize":"1.125rem"}:"md"===n?{"--ListDivider-gap":"0.375rem","--ListItem-minHeight":"2.5rem","--ListItem-paddingY":"0.375rem","--ListItem-paddingX":"0.75rem","--ListItem-fontSize":e.vars.fontSize.md,"--ListItemDecorator-size":"horizontal"===t.orientation?"1.75rem":"2.5rem","--Icon-fontSize":"1.25rem"}:"lg"===n?{"--ListDivider-gap":"0.5rem","--ListItem-minHeight":"3rem","--ListItem-paddingY":"0.5rem","--ListItem-paddingX":"1rem","--ListItem-fontSize":e.vars.fontSize.md,"--ListItemDecorator-size":"horizontal"===t.orientation?"2.25rem":"3rem","--Icon-fontSize":"1.5rem"}:{}}return[t.nesting&&(0,o.Z)({},r(t.instanceSize),{"--ListItem-paddingRight":"var(--ListItem-paddingX)","--ListItem-paddingLeft":"var(--NestedListItem-paddingLeft)","--ListItemButton-marginBlock":"0px","--ListItemButton-marginInline":"0px","--ListItem-marginBlock":"0px","--ListItem-marginInline":"0px",padding:0,marginInlineStart:"var(--NestedList-marginLeft)",marginInlineEnd:"var(--NestedList-marginRight)",marginBlockStart:"var(--List-gap)",marginBlockEnd:"initial"}),!t.nesting&&(0,o.Z)({},r(t.size),{"--List-gap":"0px","--ListItemDecorator-color":e.vars.palette.text.tertiary,"--List-nestedInsetStart":"0px","--ListItem-paddingLeft":"var(--ListItem-paddingX)","--ListItem-paddingRight":"var(--ListItem-paddingX)","--unstable_List-childRadius":"calc(max(var(--List-radius) - var(--List-padding), min(var(--List-padding) / 2, var(--List-radius) / 2)) - var(--variant-borderWidth, 0px))","--ListItem-radius":"var(--unstable_List-childRadius)","--ListItem-startActionTranslateX":"calc(0.5 * var(--ListItem-paddingLeft))","--ListItem-endActionTranslateX":"calc(-0.5 * var(--ListItem-paddingRight))",margin:"initial"},"horizontal"===t.orientation?(0,o.Z)({},t.wrap?{padding:"var(--List-padding)",marginInlineStart:"calc(-1 * var(--List-gap))",marginBlockStart:"calc(-1 * var(--List-gap))"}:{paddingInline:"var(--List-padding, var(--ListDivider-gap))",paddingBlock:"var(--List-padding)"}):{paddingBlock:"var(--List-padding, var(--ListDivider-gap))",paddingInline:"var(--List-padding)"}),(0,o.Z)({boxSizing:"border-box",borderRadius:"var(--List-radius)",listStyle:"none",display:"flex",flexDirection:"horizontal"===t.orientation?"row":"column"},t.wrap&&{flexWrap:"wrap"},{flexGrow:1,position:"relative"},null==(n=e.variants[t.variant])?void 0:n[t.color],{"--unstable_List-borderWidth":"var(--variant-borderWidth, 0px)"})]})),S=(0,d.Z)(x,{name:"JoyList",slot:"Root",overridesResolver:(e,t)=>t.root})({}),C=a.forwardRef((function(e,t){var n;const d=a.useContext(m.Z),x=a.useContext(u.Z),C=a.useContext(c.j),k=a.useContext(y),E=(0,f.Z)({props:e,name:"JoyList"}),{component:P,className:Z,children:z,size:I,orientation:D="vertical",wrap:R=!1,variant:$="plain",color:T="neutral",role:O}=E,_=(0,r.Z)(E,w),{getColor:L}=(0,p.VT)($),B=L(e.color,T),M=I||(null!=(n=e.size)?n:"md");let A;(x||C)&&(A="group"),k&&(A="presentation"),O&&(A=O);const F=(0,o.Z)({},E,{instanceSize:e.size,size:M,nesting:d,orientation:D,wrap:R,variant:$,color:B,role:A}),N=(e=>{const{variant:t,color:n,size:r,nesting:o,orientation:a,instanceSize:l}=e,u={root:["root",a,t&&`variant${(0,i.Z)(t)}`,n&&`color${(0,i.Z)(n)}`,!l&&!o&&r&&`size${(0,i.Z)(r)}`,l&&`size${(0,i.Z)(l)}`,o&&"nesting"]};return(0,s.Z)(u,h.z,{})})(F);return(0,b.jsx)(S,(0,o.Z)({ref:t,as:P,className:(0,l.Z)(N.root,Z),ownerState:F,role:A,"aria-labelledby":"string"==typeof d?d:void 0},_,{children:(0,b.jsx)(v.Provider,{value:`${"string"==typeof P?P:""}:${A||""}`,children:(0,b.jsx)(g.Z,{row:"horizontal"===D,wrap:R,children:z})})}))}))},6375:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c,M:()=>u});var r=n(7462),o=n(7294),a=n(780);const l=o.createContext(!1);var i=n(4593),s=n(5893);const u={"--NestedList-marginRight":"0px","--NestedList-marginLeft":"0px","--NestedListItem-paddingLeft":"var(--ListItem-paddingX)","--ListItemButton-marginBlock":"0px","--ListItemButton-marginInline":"0px","--ListItem-marginBlock":"0px","--ListItem-marginInline":"0px"},c=function(e){const{children:t,nested:n,row:u=!1,wrap:c=!1}=e,d=(0,s.jsx)(a.Z.Provider,{value:u,children:(0,s.jsx)(l.Provider,{value:c,children:o.Children.map(t,((e,t)=>o.isValidElement(e)?o.cloneElement(e,(0,r.Z)({},0===t&&{"data-first-child":""})):e))})});return void 0===n?d:(0,s.jsx)(i.Z.Provider,{value:n,children:d})}},4593:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(!1)},780:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(!1)},4614:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z,getListUtilityClass:()=>o.z,listClasses:()=>o.Z});var r=n(9674),o=n(7361)},7361:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a,z:()=>o});var r=n(6821);function o(e){return(0,r.d6)("MuiList",e)}const a=(0,r.sI)("MuiList",["root","nesting","scoped","sizeSm","sizeMd","sizeLg","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","horizontal","vertical"])},4664:(e,t,n)=>{"use strict";n.d(t,{r:()=>l});var r=n(7462),o=(n(7294),n(4312));const a=(0,n(6821).sI)("MuiListItemButton",["root","horizontal","vertical","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","focusVisible","disabled","selected","variantPlain","variantSoft","variantOutlined","variantSolid"]);n(5893);const l=(0,o.Z)("div")((({theme:e,ownerState:t})=>{var n,o,l,i,s,u,c;return[(0,r.Z)({},t.selected&&{"--ListItemDecorator-color":"initial"},t.disabled&&{"--ListItemDecorator-color":null==(n=e.variants)||null==(o=n[`${t.variant}Disabled`])||null==(l=o[t.color])?void 0:l.color},{WebkitTapHighlightColor:"transparent",boxSizing:"border-box",position:"relative",display:"flex",flexDirection:"vertical"===t.orientation?"column":"row",alignItems:"center",textAlign:"initial",textDecoration:"initial",backgroundColor:"initial",cursor:"pointer",marginInline:"var(--ListItemButton-marginInline)",marginBlock:"var(--ListItemButton-marginBlock)"},void 0===t["data-first-child"]&&{marginInlineStart:t.row?"var(--List-gap)":void 0,marginBlockStart:t.row?void 0:"var(--List-gap)"},{paddingBlock:"calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px))",paddingInlineStart:"calc(var(--ListItem-paddingLeft) + var(--ListItem-startActionWidth, var(--unstable_startActionWidth, 0px)))",paddingInlineEnd:"calc(var(--ListItem-paddingRight) + var(--ListItem-endActionWidth, var(--unstable_endActionWidth, 0px)))",minBlockSize:"var(--ListItem-minHeight)",border:"none",borderRadius:"var(--ListItem-radius)",flexGrow:t.row?0:1,flexBasis:t.row?"auto":"0%",flexShrink:0,minInlineSize:0,fontSize:"var(--ListItem-fontSize)",fontFamily:e.vars.fontFamily.body},t.selected&&{fontWeight:e.vars.fontWeight.md},{[e.focus.selector]:e.focus.default}),(0,r.Z)({},null==(i=e.variants[t.variant])?void 0:i[t.color],!t.selected&&{"&:hover":null==(s=e.variants[`${t.variant}Hover`])?void 0:s[t.color],"&:active":null==(u=e.variants[`${t.variant}Active`])?void 0:u[t.color]}),{[`&.${a.disabled}`]:null==(c=e.variants[`${t.variant}Disabled`])?void 0:c[t.color]}]}));(0,o.Z)(l,{name:"JoyListItemButton",slot:"Root",overridesResolver:(e,t)=>t.root})({})},1103:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>E,getMenuItemUtilityClass:()=>b,menuItemClasses:()=>w});var r=n(7462),o=n(3366),a=n(7294),l=n(8320),i=n(4780),s=n(7293),u=n(7579),c=n(67),d=n(8259),f=n(758),p=n(5028),h=n(4664),m=n(4312),v=n(407),g=n(8653),y=n(6821);function b(e){return(0,y.d6)("MuiMenuItem",e)}const w=(0,y.sI)("MuiMenuItem",["root","focusVisible","disabled","selected","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantSoft","variantOutlined","variantSolid"]);var x=n(780),S=n(5893);const C=["children","disabled","component","selected","color","variant"],k=(0,m.Z)(h.r,{name:"JoyMenuItem",slot:"Root",overridesResolver:(e,t)=>t.root})({}),E=a.forwardRef((function(e,t){const n=(0,v.Z)({props:e,name:"JoyMenuItem"}),h=a.useContext(x.Z),{children:m,disabled:y=!1,component:w="li",selected:E=!1,color:P=(E?"primary":"neutral"),variant:Z="plain"}=n,z=(0,o.Z)(n,C),{getColor:I}=(0,g.VT)(Z),D=I(e.color,P),{getRootProps:R,disabled:$,focusVisible:T}=function(e){var t;const{disabled:n=!1,ref:o,label:l}=e,i=(0,u.Z)(),s=a.useContext(d.Z),h=a.useRef(null),m=(0,c.Z)(h,o);if(null===s)throw new Error("MenuItemUnstyled must be used within a MenuUnstyled");const{registerItem:v,unregisterItem:g,open:y,registerHighlightChangeHandler:b}=s;a.useEffect((()=>{if(void 0!==i)return v(i,{disabled:n,id:i,ref:h,label:l}),()=>g(i)}),[i,v,g,n,o,l]);const{getRootProps:w,focusVisible:x}=(0,f.Z)({disabled:n,focusableWhenDisabled:!0,ref:m}),[S,C]=a.useState(!1),k=a.useCallback((()=>{S&&null!=h.current&&(h.current.focus(),C(!1))}),[S]);a.useEffect((()=>{k()})),a.useDebugValue({id:i,disabled:n,label:l});const E=s.getItemState(null!=i?i:""),{highlighted:P}=null!=E?E:{highlighted:!1},Z=(0,p.Z)();return a.useEffect((()=>b((function(e){e!==i||P?e!==i&&P&&Z():Z()})))),a.useEffect((()=>{C(P&&y)}),[P,y]),void 0===i?{getRootProps:(e={})=>(0,r.Z)({},e,w(e),{role:"menuitem"}),disabled:!1,focusVisible:x,highlighted:!1}:{getRootProps:(e={})=>{const t=s.getItemProps(i,e);return(0,r.Z)({},e,w(e),{tabIndex:t.tabIndex,id:t.id,role:"menuitem"})},disabled:null!=(t=null==E?void 0:E.disabled)&&t,focusVisible:x,highlighted:P}}({disabled:y,ref:t}),O=(0,r.Z)({},n,{component:w,color:D,disabled:$,focusVisible:T,selected:E,row:h,variant:Z}),_=(e=>{const{focusVisible:t,disabled:n,selected:r,color:o,variant:a}=e,s={root:["root",t&&"focusVisible",n&&"disabled",r&&"selected",o&&`color${(0,l.Z)(o)}`,a&&`variant${(0,l.Z)(a)}`]};return(0,i.Z)(s,b,{})})(O),L=(0,s.Z)({elementType:k,getSlotProps:R,externalSlotProps:{},additionalProps:{as:w},externalForwardedProps:z,className:_.root,ownerState:O});return(0,S.jsx)(k,(0,r.Z)({},L,{children:m}))}))},3010:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>z,getMenuListUtilityClass:()=>C,menuListClasses:()=>k});var r=n(3366),o=n(7462),a=n(7294),l=n(8320),i=n(4780),s=n(7293),u=n(8259),c=n(67),d=n(9395),f=n(9124),p=n(352),h=n(1529);const m="menu:change-highlight";function v(e,t){if(t.type===d.M.blur||t.type===d.M.optionHover||t.type===d.M.setValue)return e;const n=(0,f.Z)(e,t);return t.type!==d.M.setHighlight&&null===n.highlightedValue&&t.props.options.length>0?(0,o.Z)({},n,{highlightedValue:t.props.options[0]}):n}var g=n(4312),y=n(407),b=n(8653),w=n(9674),x=n(6375),S=n(6821);function C(e){return(0,S.d6)("MuiMenuList",e)}const k=(0,S.sI)("MuiMenuList",["root","nested","sizeSm","sizeMd","sizeLg","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid"]);var E=n(5893);const P=["actions","id","component","children","size","variant","color"],Z=(0,g.Z)(w.C,{name:"JoyMenuList",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n;const r=null==(n=e.variants[t.variant])?void 0:n[t.color];return(0,o.Z)({"--focus-outline-offset":`calc(${e.vars.focus.thickness} * -1)`,"--List-radius":e.vars.radius.sm,"--ListItem-stickyBackground":(null==r?void 0:r.backgroundColor)||(null==r?void 0:r.background)||e.vars.palette.background.surface,"--ListItem-stickyTop":"calc(var(--List-padding, var(--ListDivider-gap)) * -1)"},x.M,{overflow:"auto"},!(null!=r&&r.backgroundColor)&&{backgroundColor:e.vars.palette.background.surface})})),z=a.forwardRef((function(e,t){const n=(0,y.Z)({props:e,name:"JoyMenuList"}),{actions:d,id:f,component:g,children:w,size:S="md",variant:k="outlined",color:z="neutral"}=n,I=(0,r.Z)(n,P),{getColor:D}=(0,b.VT)(k),R=D(e.color,z),{contextValue:$,getListboxProps:T,highlightFirstItem:O,highlightLastItem:_}=function(e={}){const{listboxRef:t,open:n=!1,onClose:r,listboxId:l}=e,[i,s]=a.useState({}),u=a.useRef(null),d=(0,c.Z)(u,t),f=a.useCallback(((e,t)=>{s((n=>{const r=(0,o.Z)({},n);return r[e]=t,r}))}),[]),g=a.useCallback((e=>{s((t=>{const n=(0,o.Z)({},t);return delete n[e],n}))}),[]),{notifyHighlightChanged:y,registerHighlightChangeHandler:b}=function(){const e=(0,h.Z)();return{notifyHighlightChanged:a.useCallback((t=>{e.publish(m,t)}),[e]),registerHighlightChangeHandler:a.useCallback((t=>e.subscribe(m,t)),[e])}}(),{getOptionState:w,getOptionProps:x,getRootProps:S,highlightedOption:C,setHighlightedValue:k}=(0,p.Z)({options:Object.keys(i),optionStringifier:e=>{var t;return i[e].label||(null==(t=i[e].ref.current)?void 0:t.innerText)},isOptionDisabled:e=>{var t;return(null==i||null==(t=i[e])?void 0:t.disabled)||!1},listboxRef:d,focusManagement:"DOM",id:l,stateReducer:v,selectionLimit:0,disabledItemsFocusable:!0});a.useEffect((()=>{y(C)}),[C,y]);const E=a.useCallback((()=>{Object.keys(i).length>0&&k(i[Object.keys(i)[0]].id)}),[i,k]),P=a.useCallback((()=>{Object.keys(i).length>0&&k(i[Object.keys(i)[Object.keys(i).length-1]].id)}),[i,k]);a.useEffect((()=>{n||E()}),[n,E]);const Z=e=>t=>{var o;null==(o=e.onKeyDown)||o.call(e,t),t.defaultPrevented||"Escape"===t.key&&n&&(null==r||r())},z=e=>t=>{var n,o;null==(n=e.onBlur)||n.call(e,t),null!=(o=u.current)&&o.contains(t.relatedTarget)||null==r||r()};a.useEffect((()=>{var e,t,n;null!=(e=u.current)&&e.contains(document.activeElement)&&null!==C&&(null==i||null==(t=i[C])||null==(n=t.ref.current)||n.focus())}),[C,i]);const I=a.useCallback((e=>{const{disabled:t,highlighted:n}=w(e);return{disabled:t,highlighted:n}}),[w]);return a.useDebugValue({menuItems:i,highlightedOption:C}),{contextValue:a.useMemo((()=>({getItemProps:x,getItemState:I,registerHighlightChangeHandler:b,registerItem:f,unregisterItem:g,open:n})),[x,I,b,f,g,n]),getListboxProps:(e={})=>{const t=S((0,o.Z)({},e,{onBlur:z(e),onKeyDown:Z(e)}));return(0,o.Z)({},e,t,{role:"menu"})},highlightedOption:C,highlightFirstItem:E,highlightLastItem:P,menuItems:i}}({listboxRef:t,listboxId:f});a.useImperativeHandle(d,(()=>({highlightFirstItem:O,highlightLastItem:_})),[O,_]);const L=(0,o.Z)({},n,{variant:k,color:R,size:S,nesting:!1,row:!1}),B=(e=>{const{variant:t,color:n,size:r}=e,o={root:["root",t&&`variant${(0,l.Z)(t)}`,n&&`color${(0,l.Z)(n)}`,r&&`size${(0,l.Z)(r)}`]};return(0,i.Z)(o,C,{})})(L),M=(0,s.Z)({elementType:Z,getSlotProps:T,externalSlotProps:{},externalForwardedProps:I,additionalProps:{as:g},ownerState:L,className:B.root}),A=a.useMemo((()=>(0,o.Z)({},$,{getListboxProps:T,open:!0})),[$,T]);return(0,E.jsx)(Z,(0,o.Z)({},M,{children:(0,E.jsx)(u.Z.Provider,{value:A,children:(0,E.jsx)(x.Z,{nested:!0,children:w})})}))}))},2496:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>S,getOptionUtilityClass:()=>v,optionClasses:()=>g});var r=n(7462),o=n(3366),a=n(7294),l=n(4780),i=n(67),s=n(2289),u=n(5028),c=n(7293),d=n(4664),f=n(4312),p=n(407),h=n(8653),m=n(6821);function v(e){return(0,m.d6)("MuiOption",e)}const g=(0,m.sI)("MuiOption",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","focusVisible","disabled","selected","highlighted","variantPlain","variantSoft","variantOutlined","variantSolid"]);var y=n(780),b=n(5893);const w=["component","children","disabled","value","label","variant","color"],x=(0,f.Z)(d.r,{name:"JoyOption",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n;const r=null==(n=e.variants[`${t.variant}Hover`])?void 0:n[t.color];return{[`&.${g.highlighted}`]:{backgroundColor:null==r?void 0:r.backgroundColor}}})),S=a.forwardRef((function(e,t){const n=(0,p.Z)({props:e,name:"JoyOption"}),{component:d="li",children:f,disabled:m=!1,value:g,variant:S="plain",color:C="neutral"}=n,k=(0,o.Z)(n,w),E=a.useContext(y.Z),{getRootProps:P,selected:Z,highlighted:z,index:I}=function(e){const{value:t,optionRef:n}=e,o=a.useContext(s.j);if(!o)throw new Error("Option must have access to the SelectUnstyledContext (i.e., be used inside a SelectUnstyled component).");const{getOptionProps:l,getOptionState:c,listboxRef:d,registerHighlightChangeHandler:f,registerSelectionChangeHandler:p}=o,h=c(t),{selected:m,highlighted:v}=h,g=(0,u.Z)();a.useEffect((()=>p((function(e){m?Array.isArray(e)?e.includes(t)||g():e!==t&&g():Array.isArray(e)?e.includes(t)&&g():e===t&&g()}))),[p,g,m,t]),a.useEffect((()=>f((function(e){e!==t||v?e!==t&&v&&g():g()}))),[f,g,t,v]);const y=a.useRef(null),b=(0,i.Z)(n,y);return a.useEffect((()=>{if(v){if(!d.current||!y.current)return;const e=d.current.getBoundingClientRect(),t=y.current.getBoundingClientRect();t.top<e.top?d.current.scrollTop-=e.top-t.top:t.bottom>e.bottom&&(d.current.scrollTop+=t.bottom-e.bottom)}}),[v,d]),{getRootProps:(e={})=>(0,r.Z)({},e,l(t,e),{ref:b}),highlighted:v,index:h.index,selected:m}}({disabled:m,value:g,optionRef:t}),{getColor:D}=(0,h.VT)(S),R=D(e.color,Z?"primary":C),$=(0,r.Z)({},n,{disabled:m,selected:Z,highlighted:z,index:I,component:d,variant:S,color:R,row:E}),T=(e=>{const{disabled:t,highlighted:n,selected:r}=e,o={root:["root",t&&"disabled",n&&"highlighted",r&&"selected"]};return(0,l.Z)(o,v,{})})($),O=(0,c.Z)({getSlotProps:P,elementType:x,externalSlotProps:{},externalForwardedProps:k,additionalProps:{as:d},className:T.root,ownerState:$});return(0,b.jsx)(x,(0,r.Z)({},O,{children:f}))}))},4015:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>X,getSelectUtilityClass:()=>M,selectClasses:()=>A});var r=n(3366),o=n(7462),a=n(7294),l=n(6010),i=n(8320),s=n(8925),u=n(67),c=n(272);function d(e){if(null==e)return[];const t=[];return a.Children.forEach(e,(e=>{var n,r,o;const a=null==e||null==(n=e.props)?void 0:n.children;if(void 0===(null==e||null==(r=e.props)?void 0:r.value)){if(null!=a){var l;const n=e,r={options:d(a),label:n.props.label,disabled:null!=(l=n.props.disabled)&&l};t.push(r)}return}const i=e,s={value:i.props.value,label:i.props.label||i.props.children,disabled:null!=(o=i.props.disabled)&&o};t.push(s)})),null!=t?t:[]}function f(e,t=!1){let n=[];return e.forEach((e=>{e.options?n=n.concat(f(e.options,e.disabled)):n.push((0,o.Z)({},e,{disabled:t||e.disabled}))})),n}var p=n(2289),h=n(7579),m=n(758),v=n(9124),g=n(9395),y=n(352);const b=e=>{const{label:t,value:n}=e;return"string"==typeof t?t:"string"==typeof n?n:String(e)};var w=n(1529);const x="select:change-selection",S="select:change-highlight";var C=n(4780),k=n(9674),E=n(6375),P=n(4312),Z=n(407),z=n(220),I=n(6821);function D(e){return(0,I.d6)("MuiSvgIcon",e)}(0,I.sI)("MuiSvgIcon",["root","colorInherit","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","fontSizeInherit","fontSizeXs","fontSizeSm","fontSizeMd","fontSizeLg","fontSizeXl","fontSizeXl2","fontSizeXl3","fontSizeXl4","fontSizeXl5","fontSizeXl6"]);var R=n(5893);const $=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],T=(0,P.Z)("svg",{name:"JoySvgIcon",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r;return(0,o.Z)({},t.instanceFontSize&&"inherit"!==t.instanceFontSize&&{"--Icon-fontSize":e.vars.fontSize[t.instanceFontSize]},{userSelect:"none",margin:"var(--Icon-margin)",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0},t.fontSize&&"inherit"!==t.fontSize&&{fontSize:`var(--Icon-fontSize, ${e.fontSize[t.fontSize]})`},{color:"var(--Icon-color)"},"inherit"!==t.color&&"context"!==t.color&&e.vars.palette[t.color]&&{color:e.vars.palette[t.color].plainColor},"context"===t.color&&{color:null==(n=e.variants.plain)||null==(r=n[t.color])?void 0:r.color})})),O=a.forwardRef((function(e,t){const n=(0,Z.Z)({props:e,name:"JoySvgIcon"}),{children:a,className:s,color:u="inherit",component:c="svg",fontSize:d="xl",htmlColor:f,inheritViewBox:p=!1,titleAccess:h,viewBox:m="0 0 24 24"}=n,v=(0,r.Z)(n,$),g=(0,o.Z)({},n,{color:u,component:c,fontSize:d,instanceFontSize:e.fontSize,inheritViewBox:p,viewBox:m}),y=(e=>{const{color:t,fontSize:n}=e,r={root:["root",t&&`color${(0,i.Z)(t)}`,n&&`fontSize${(0,i.Z)(n)}`]};return(0,C.Z)(r,D,{})})(g),[b,w]=(0,z.Z)("root",{ref:t,className:(0,l.Z)(y.root,s),elementType:T,externalForwardedProps:(0,o.Z)({},v,{component:c}),ownerState:g,additionalProps:(0,o.Z)({color:f,focusable:!1},h&&{role:"img"},!h&&{"aria-hidden":!0},!p&&{viewBox:m})});return(0,R.jsxs)(b,(0,o.Z)({},w,{children:[a,h?(0,R.jsx)("title",{children:h}):null]}))})),_=O,L=function(e,t){function n(t,n){return(0,R.jsx)(_,(0,o.Z)({"data-testid":"UnfoldIcon",ref:n},t,{children:e}))}return n.muiName=_.muiName,a.memo(a.forwardRef(n))}((0,R.jsx)("path",{d:"m12 5.83 2.46 2.46c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L12.7 3.7a.9959.9959 0 0 0-1.41 0L8.12 6.88c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 5.83zm0 12.34-2.46-2.46a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l3.17 3.18c.39.39 1.02.39 1.41 0l3.17-3.17c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L12 18.17z"}));var B=n(8653);function M(e){return(0,I.d6)("MuiSelect",e)}const A=(0,I.sI)("MuiSelect",["root","button","indicator","startDecorator","endDecorator","popper","listbox","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","sizeSm","sizeMd","sizeLg","focusVisible","disabled","expanded"]);var F,N=n(6043);const j=["action","autoFocus","children","defaultValue","defaultListboxOpen","disabled","getSerializedValue","placeholder","listboxId","listboxOpen","onChange","onListboxOpenChange","onClose","renderValue","value","size","variant","color","startDecorator","endDecorator","indicator","aria-describedby","aria-label","aria-labelledby","id","name"];function H(e){var t;return null!=(t=null==e?void 0:e.label)?t:""}function W(e){return null==(null==e?void 0:e.value)?"":"string"==typeof e.value||"number"==typeof e.value?e.value:JSON.stringify(e.value)}const V=[{name:"offset",options:{offset:[0,4]}},{name:"equalWidth",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:({state:e})=>{e.styles.popper.width=`${e.rects.reference.width}px`}}],U=(0,P.Z)("div",{name:"JoySelect",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r,a,l;const i=null==(n=e.variants[`${t.variant}`])?void 0:n[t.color];return[(0,o.Z)({"--Select-radius":e.vars.radius.sm,"--Select-gap":"0.5rem","--Select-placeholderOpacity":.5,"--Select-focusedThickness":e.vars.focus.thickness},"context"===t.color?{"--Select-focusedHighlight":e.vars.palette.focusVisible}:{"--Select-focusedHighlight":null==(r=e.vars.palette["neutral"===t.color?"primary":t.color])?void 0:r[500]},{"--Select-indicatorColor":null!=i&&i.backgroundColor?null==i?void 0:i.color:e.vars.palette.text.tertiary},"sm"===t.size&&{"--Select-minHeight":"2rem","--Select-paddingInline":"0.5rem","--Select-decoratorChildHeight":"min(1.5rem, var(--Select-minHeight))","--Icon-fontSize":"1.25rem"},"md"===t.size&&{"--Select-minHeight":"2.5rem","--Select-paddingInline":"0.75rem","--Select-decoratorChildHeight":"min(2rem, var(--Select-minHeight))","--Icon-fontSize":"1.5rem"},"lg"===t.size&&{"--Select-minHeight":"3rem","--Select-paddingInline":"1rem","--Select-decoratorChildHeight":"min(2.375rem, var(--Select-minHeight))","--Icon-fontSize":"1.75rem"},{"--Select-decoratorChildOffset":"min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))","--_Select-paddingBlock":"max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)","--Select-decoratorChildRadius":"max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))","--Button-minHeight":"var(--Select-decoratorChildHeight)","--IconButton-size":"var(--Select-decoratorChildHeight)","--Button-radius":"var(--Select-decoratorChildRadius)","--IconButton-radius":"var(--Select-decoratorChildRadius)",boxSizing:"border-box",minWidth:0,minHeight:"var(--Select-minHeight)",position:"relative",display:"flex",alignItems:"center",borderRadius:"var(--Select-radius)",cursor:"pointer"},!i.backgroundColor&&{backgroundColor:e.vars.palette.background.surface},t.size&&{paddingBlock:{sm:2,md:3,lg:4}[t.size]},{paddingInline:"var(--Select-paddingInline)",fontFamily:e.vars.fontFamily.body,fontSize:e.vars.fontSize.md},"sm"===t.size&&{fontSize:e.vars.fontSize.sm},{"&::before":{boxSizing:"border-box",content:'""',display:"block",position:"absolute",pointerEvents:"none",top:0,left:0,right:0,bottom:0,zIndex:1,borderRadius:"inherit",margin:"calc(var(--variant-borderWidth, 0px) * -1)"},[`&.${A.focusVisible}`]:{"--Select-indicatorColor":null==i?void 0:i.color,"&::before":{boxShadow:"inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)"}},[`&.${A.disabled}`]:{"--Select-indicatorColor":"inherit"}}),(0,o.Z)({},i,{"&:hover":null==(a=e.variants[`${t.variant}Hover`])?void 0:a[t.color],[`&.${A.disabled}`]:null==(l=e.variants[`${t.variant}Disabled`])?void 0:l[t.color]})]})),K=(0,P.Z)("button",{name:"JoySelect",slot:"Button",overridesResolver:(e,t)=>t.button})((({ownerState:e})=>(0,o.Z)({border:0,outline:0,background:"none",padding:0,fontSize:"inherit",color:"inherit",alignSelf:"stretch",display:"flex",alignItems:"center",flex:1,fontFamily:"inherit",cursor:"pointer",whiteSpace:"nowrap",overflow:"auto"},(null===e.value||void 0===e.value)&&{opacity:"var(--Select-placeholderOpacity)"}))),q=(0,P.Z)(k.C,{name:"JoySelect",slot:"Listbox",overridesResolver:(e,t)=>t.listbox})((({theme:e,ownerState:t})=>{var n;const r="context"===t.color||null==(n=e.variants[t.variant])?void 0:n[t.color];return(0,o.Z)({"--focus-outline-offset":`calc(${e.vars.focus.thickness} * -1)`,"--List-radius":e.vars.radius.sm,"--ListItem-stickyBackground":(null==r?void 0:r.backgroundColor)||(null==r?void 0:r.background)||e.vars.palette.background.popup,"--ListItem-stickyTop":"calc(var(--List-padding, var(--ListDivider-gap)) * -1)"},E.M,{minWidth:"max-content",maxHeight:"44vh",overflow:"auto",outline:0,boxShadow:e.shadow.md,zIndex:e.vars.zIndex.popup},!(null!=r&&r.backgroundColor)&&{backgroundColor:e.vars.palette.background.popup})})),J=(0,P.Z)("span",{name:"JoySelect",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})((({theme:e,ownerState:t})=>(0,o.Z)({"--Button-margin":"0 0 0 calc(var(--Select-decoratorChildOffset) * -1)","--IconButton-margin":"0 0 0 calc(var(--Select-decoratorChildOffset) * -1)","--Icon-margin":"0 0 0 calc(var(--Select-paddingInline) / -4)",display:"inherit",alignItems:"center",marginInlineEnd:"var(--Select-gap)",color:e.vars.palette.text.tertiary},t.focusVisible&&{color:"var(--Select-focusedHighlight)"}))),Q=(0,P.Z)("span",{name:"JoySelect",slot:"EndDecorator",overridesResolver:(e,t)=>t.endDecorator})((({theme:e,ownerState:t})=>{var n;const r=null==(n=e.variants[t.variant])?void 0:n[t.color];return{"--Button-margin":"0 calc(var(--Select-decoratorChildOffset) * -1) 0 0","--IconButton-margin":"0 calc(var(--Select-decoratorChildOffset) * -1) 0 0","--Icon-margin":"0 calc(var(--Select-paddingInline) / -4) 0 0",display:"inherit",alignItems:"center",marginInlineStart:"var(--Select-gap)",color:null==r?void 0:r.color}})),G=(0,P.Z)("span",{name:"JoySelect",slot:"Indicator"})((({ownerState:e})=>(0,o.Z)({},"sm"===e.size&&{"--Icon-fontSize":"1.125rem"},"md"===e.size&&{"--Icon-fontSize":"1.25rem"},"lg"===e.size&&{"--Icon-fontSize":"1.5rem"},{color:"var(--Select-indicatorColor)",display:"inherit",alignItems:"center",marginInlineStart:"var(--Select-gap)",marginInlineEnd:"calc(var(--Select-paddingInline) / -4)",[`.${A.endDecorator} + &`]:{marginInlineStart:"calc(var(--Select-gap) / 2)"}}))),X=a.forwardRef((function(e,t){var n,k,P,I,D;const $=(0,Z.Z)({props:e,name:"JoySelect"}),T=$,{action:O,autoFocus:_,children:X,defaultValue:Y,defaultListboxOpen:ee=!1,disabled:te,getSerializedValue:ne=W,placeholder:re,listboxId:oe,listboxOpen:ae,onChange:le,onListboxOpenChange:ie,onClose:se,renderValue:ue,value:ce,size:de="md",variant:fe="outlined",color:pe="neutral",startDecorator:he,endDecorator:me,indicator:ve=F||(F=(0,R.jsx)(L,{})),"aria-describedby":ge,"aria-label":ye,"aria-labelledby":be,id:we,name:xe}=T,Se=(0,r.Z)(T,j),Ce=a.useContext(N.Z),ke=null!=(n=null!=(k=e.disabled)?k:null==Ce?void 0:Ce.disabled)?n:te,Ee=null!=(P=null!=(I=e.size)?I:null==Ce?void 0:Ce.size)?P:de,{getColor:Pe}=(0,B.VT)(fe),Ze=Pe(e.color,null!=Ce&&Ce.error?"danger":null!=(D=null==Ce?void 0:Ce.color)?D:pe),ze=null!=ue?ue:H,[Ie,De]=a.useState(null),[Re,$e]=a.useState([]),Te=a.useMemo((()=>f(Re)),[Re]),[Oe,_e]=(0,s.Z)({controlled:ae,default:ee,name:"SelectUnstyled",state:"listboxOpen"}),Le=a.useRef(null),Be=a.useRef(null),Me=a.useRef(null),Ae=(0,u.Z)(t,Le);a.useImperativeHandle(O,(()=>({focusVisible:()=>{var e;null==(e=Be.current)||e.focus()}})),[]),a.useEffect((()=>{$e(d(X))}),[X]),a.useEffect((()=>{De(Le.current)}),[]),a.useEffect((()=>{_&&Be.current.focus()}),[_]);const Fe=a.useCallback((e=>{_e(e),null==ie||ie(e),e||null==se||se()}),[se,ie,_e]),{buttonActive:Ne,buttonFocusVisible:je,contextValue:He,disabled:We,getButtonProps:Ve,getListboxProps:Ue,value:Ke}=function(e){const{buttonRef:t,defaultValue:n,disabled:r=!1,listboxId:l,listboxRef:i,multiple:s=!1,onChange:c,onHighlightChange:d,onOpenChange:f,open:p=!1,options:C,optionStringifier:k=b,value:E}=e,P=a.useRef(null),Z=(0,u.Z)(t,P),z=a.useRef(null),I=(0,h.Z)(l);let D;void 0===E&&void 0===n?D=[]:void 0!==n&&(D=s?n:[n]);const R=a.useMemo((()=>{if(void 0!==E)return s?E:[E]}),[E,s]),$=a.useMemo((()=>{const e=new Map;return C.forEach((t=>{e.set(t.value,t)})),e}),[C]),T=a.useRef(!1),O=a.useRef(!1),[_,L]=a.useState(!1),B=a.useCallback((()=>{_&&null!=z.current&&(z.current.focus(),L(!1))}),[_]),M=(0,u.Z)(i,z,B),{notifySelectionChanged:A,notifyHighlightChanged:F,registerHighlightChangeHandler:N,registerSelectionChangeHandler:j}=function(){const e=(0,w.Z)();return{notifySelectionChanged:a.useCallback((t=>{e.publish(x,t)}),[e]),notifyHighlightChanged:a.useCallback((t=>{e.publish(S,t)}),[e]),registerSelectionChangeHandler:a.useCallback((t=>e.subscribe(x,t)),[e]),registerHighlightChangeHandler:a.useCallback((t=>e.subscribe(S,t)),[e])}}();a.useEffect((()=>{B()}),[B]),a.useEffect((()=>{L(p)}),[p]);const H=e=>t=>{var n;null==e||null==(n=e.onMouseDown)||n.call(e,t),!t.defaultPrevented&&p&&(O.current=!0)},W=e=>t=>{var n;null==e||null==(n=e.onClick)||n.call(e,t),t.defaultPrevented||O.current||null==f||f(!p),O.current=!1},V=e=>t=>{var n;null==e||null==(n=e.onKeyDown)||n.call(e,t),t.defaultPrevented||("Enter"===t.key&&(T.current=!0),"ArrowDown"!==t.key&&"ArrowUp"!==t.key||(t.preventDefault(),null==f||f(!0)))},U=e=>t=>{var n;if(null==e||null==(n=e.onKeyUp)||n.call(e,t),t.defaultPrevented)return;const r=s?["Escape"]:["Escape","Enter"," "];var o;p&&!T.current&&r.includes(t.key)&&(null==P||null==(o=P.current)||o.focus()),T.current=!1},K=a.useCallback((e=>t=>{var n;null==e||null==(n=e.onClick)||n.call(e,t),t.defaultPrevented||s||null==f||f(!1)}),[s,f]),q=e=>t=>{var n;null==e||null==(n=e.onBlur)||n.call(e,t),t.defaultPrevented||null==f||f(!1)},J=a.useCallback(((e,t)=>{const n=(0,v.Z)(e,t);switch(t.type){case g.M.keyDown:if(!("ArrowUp"!==t.event.key&&"ArrowDown"!==t.event.key||p||s))return(0,o.Z)({},n,{selectedValues:null!=n.highlightedValue?[n.highlightedValue]:[]});break;case g.M.blur:case g.M.setValue:case g.M.optionsChange:return(0,o.Z)({},n,{highlightedValue:n.selectedValues.length>0?n.selectedValues[0]:null});default:return n}return n}),[p,s]),{getRootProps:Q,active:G,focusVisible:X}=(0,m.Z)({disabled:r,ref:Z}),Y=a.useMemo((()=>C.map((e=>e.value))),[C]),ee=a.useCallback((e=>{var t;const n=$.get(e);return null!=(t=null==n?void 0:n.disabled)&&t}),[$]),te=a.useCallback((e=>{const t=$.get(e);return t?k(t):""}),[$,k]),ne={defaultValue:D,id:I,isOptionDisabled:ee,listboxRef:M,onChange:(e,t)=>{var n;s?null==c||c(e,t):null==c||c(e,null!=(n=t[0])?n:null)},onHighlightChange:(e,t)=>{null==d||d(e,null!=t?t:null)},options:Y,optionStringifier:te,selectionLimit:s?null:1,stateReducer:J,value:R},{getRootProps:re,getOptionProps:oe,getOptionState:ae,highlightedOption:le,selectedOption:ie}=(0,y.Z)(ne);a.useEffect((()=>{A(ie)}),[ie,A]),a.useEffect((()=>{F(le)}),[le,F]);const se=(e={})=>(0,o.Z)({},Q((0,o.Z)({},e,{onClick:W(e),onMouseDown:H(e),onKeyDown:V(e)})),{role:"combobox","aria-expanded":p,"aria-haspopup":"listbox","aria-controls":I}),ue=(e={})=>re((0,o.Z)({},e,{onBlur:q(e),onKeyUp:U(e)})),ce=a.useCallback(((e,t={})=>oe(e,(0,o.Z)({},t,{onClick:K(t)}))),[oe,K]);a.useDebugValue({selectedOption:ie,highlightedOption:le,open:p});const de=a.useMemo((()=>({listboxRef:z,getOptionProps:ce,getOptionState:ae,registerHighlightChangeHandler:N,registerSelectionChangeHandler:j})),[ce,ae,N,j]);return e.multiple?{buttonActive:G,buttonFocusVisible:X,disabled:r,getButtonProps:se,getListboxProps:ue,contextValue:de,open:p,value:ie,highlightedOption:le}:{buttonActive:G,buttonFocusVisible:X,disabled:r,getButtonProps:se,getListboxProps:ue,contextValue:de,open:p,value:ie.length>0?ie[0]:null,highlightedOption:le}}({buttonRef:Be,defaultValue:Y,disabled:ke,listboxId:oe,multiple:!1,onChange:le,onOpenChange:Fe,open:Oe,options:Te,value:ce}),qe=(0,o.Z)({},$,{active:Ne,defaultListboxOpen:ee,disabled:We,focusVisible:je,open:Oe,renderValue:ze,value:Ke,size:Ee,variant:fe,color:Ze}),Je=(e=>{const{color:t,disabled:n,focusVisible:r,size:o,variant:a,open:l}=e,s={root:["root",n&&"disabled",r&&"focusVisible",l&&"expanded",a&&`variant${(0,i.Z)(a)}`,t&&`color${(0,i.Z)(t)}`,o&&`size${(0,i.Z)(o)}`],button:["button"],startDecorator:["startDecorator"],endDecorator:["endDecorator"],indicator:["indicator",l&&"expanded"],listbox:["listbox",l&&"expanded",n&&"disabled"]};return(0,C.Z)(s,M,{})})(qe),Qe=a.useMemo((()=>{var e;return null!=(e=Te.find((e=>Ke===e.value)))?e:null}),[Te,Ke]),[Ge,Xe]=(0,z.Z)("root",{ref:Ae,className:Je.root,elementType:U,externalForwardedProps:Se,getSlotProps:e=>({onMouseDown:t=>{var n,r;Oe||null!=(n=Be.current)&&n.contains(t.target)||t.isPropagationStopped()||Fe(!0),null==(r=e.onMouseDown)||r.call(e,t)}}),ownerState:qe}),[Ye,et]=(0,z.Z)("button",{additionalProps:{"aria-describedby":null!=ge?ge:null==Ce?void 0:Ce["aria-describedby"],"aria-label":ye,"aria-labelledby":null!=be?be:null==Ce?void 0:Ce.labelId,id:null!=we?we:null==Ce?void 0:Ce.htmlFor,name:xe},className:Je.button,elementType:K,externalForwardedProps:Se,getSlotProps:Ve,ownerState:qe}),[tt,nt]=(0,z.Z)("listbox",{additionalProps:{ref:Me,anchorEl:Ie,disablePortal:!0,open:Oe,placement:"bottom"},className:Je.listbox,elementType:c.Z,externalForwardedProps:Se,getSlotProps:Ue,ownerState:(0,o.Z)({},qe,{nesting:!1,row:!1,wrap:!1}),getSlotOwnerState:e=>({size:e.size||Ee,variant:e.variant||"outlined",color:e.color||"neutral",disableColorInversion:!e.disablePortal}),internalForwardedProps:{component:q}}),[rt,ot]=(0,z.Z)("startDecorator",{className:Je.startDecorator,elementType:J,externalForwardedProps:Se,ownerState:qe}),[at,lt]=(0,z.Z)("endDecorator",{className:Je.endDecorator,elementType:Q,externalForwardedProps:Se,ownerState:qe}),[it,st]=(0,z.Z)("indicator",{className:Je.indicator,elementType:G,externalForwardedProps:Se,ownerState:qe}),ut=a.useMemo((()=>(0,o.Z)({},He,{color:Ze})),[Ze,He]),ct=a.useMemo((()=>[...V,...nt.modifiers||[]]),[nt.modifiers]);let dt=null;var ft;return Ie&&(dt=(0,R.jsx)(tt,(0,o.Z)({},nt,{className:(0,l.Z)(nt.className,"context"===(null==(ft=nt.ownerState)?void 0:ft.color)&&A.colorContext),modifiers:ct,children:(0,R.jsx)(p.j.Provider,{value:ut,children:(0,R.jsx)(E.Z,{nested:!0,children:X})})})),nt.disablePortal||(dt=(0,R.jsx)(B.ZP.Provider,{value:void 0,children:dt}))),(0,R.jsxs)(a.Fragment,{children:[(0,R.jsxs)(Ge,(0,o.Z)({},Xe,{children:[he&&(0,R.jsx)(rt,(0,o.Z)({},ot,{children:he})),(0,R.jsx)(Ye,(0,o.Z)({},et,{children:Qe?ze(Qe):re})),me&&(0,R.jsx)(at,(0,o.Z)({},lt,{children:me})),ve&&(0,R.jsx)(it,(0,o.Z)({},st,{children:ve}))]})),dt,xe&&(0,R.jsx)("input",{type:"hidden",name:xe,value:ne(Qe)})]})}))},8928:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>x,getSheetUtilityClass:()=>h,sheetClasses:()=>m});var r=n(3366),o=n(7462),a=n(4780),l=n(8320),i=n(6010),s=n(7294),u=n(4844),c=n(407),d=n(4312),f=n(8859),p=n(6821);function h(e){return(0,p.d6)("MuiSheet",e)}const m=(0,p.sI)("MuiSheet",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid"]);var v=n(8653),g=n(5893);const y=["className","color","component","variant","invertedColors"],b=(0,d.Z)("div",{name:"JoySheet",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r;const a=null==(n=e.variants[t.variant])?void 0:n[t.color],l=(0,f.V)({theme:e,ownerState:t},"borderRadius"),i=(0,f.V)({theme:e,ownerState:t},"bgcolor"),s=(0,f.V)({theme:e,ownerState:t},"backgroundColor"),c=(0,f.V)({theme:e,ownerState:t},"background"),d=(0,u.DW)(e,`palette.${i}`)||i||(0,u.DW)(e,`palette.${s}`)||s||c||(null==a?void 0:a.backgroundColor)||(null==a?void 0:a.background)||e.vars.palette.background.surface;return[(0,o.Z)({"--ListItem-stickyBackground":d,"--Sheet-background":d},void 0!==l&&{"--List-radius":`calc(${l} - var(--variant-borderWidth, 0px))`,"--unstable_actionRadius":`calc(${l} - var(--variant-borderWidth, 0px))`},{backgroundColor:e.vars.palette.background.surface,position:"relative"}),a,"context"!==t.color&&t.invertedColors&&(null==(r=e.colorInversion[t.variant])?void 0:r[t.color])]})),w=s.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"JoySheet"}),{className:s,color:u="neutral",component:d="div",variant:f="plain",invertedColors:p=!1}=n,m=(0,r.Z)(n,y),{getColor:w}=(0,v.VT)(f),x=w(e.color,u),S=(0,o.Z)({},n,{color:x,component:d,invertedColors:p,variant:f}),C=(e=>{const{variant:t,color:n}=e,r={root:["root",t&&`variant${(0,l.Z)(t)}`,n&&`color${(0,l.Z)(n)}`]};return(0,a.Z)(r,h,{})})(S),k=(0,g.jsx)(b,(0,o.Z)({as:d,ownerState:S,className:(0,i.Z)(C.root,s),ref:t},m));return p?(0,g.jsx)(v.do,{variant:f,children:k}):k})),x=w},4492:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>P,getStackUtilityClass:()=>z,stackClasses:()=>I});var r=n(3366),o=n(7462),a=n(7294),l=n(6010),i=n(9766),s=n(4780),u=n(4867);const c=(0,n(2807).ZP)();var d=n(8805),f=n(9707),p=n(2161),h=n(5408),m=n(2605),v=n(5893);const g=["component","direction","spacing","divider","children","className","useFlexGap"],y=(0,p.Z)(),b=c("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function w(e){return(0,d.Z)({props:e,name:"MuiStack",defaultTheme:y})}function x(e,t){const n=a.Children.toArray(e).filter(Boolean);return n.reduce(((e,r,o)=>(e.push(r),o<n.length-1&&e.push(a.cloneElement(t,{key:`separator-${o}`})),e)),[])}const S=({ownerState:e,theme:t})=>{let n=(0,o.Z)({display:"flex",flexDirection:"column"},(0,h.k9)({theme:t},(0,h.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const r=(0,m.hB)(t),o=Object.keys(t.breakpoints.values).reduce(((t,n)=>(("object"==typeof e.spacing&&null!=e.spacing[n]||"object"==typeof e.direction&&null!=e.direction[n])&&(t[n]=!0),t)),{}),a=(0,h.P$)({values:e.direction,base:o}),l=(0,h.P$)({values:e.spacing,base:o});"object"==typeof a&&Object.keys(a).forEach(((e,t,n)=>{if(!a[e]){const r=t>0?a[n[t-1]]:"column";a[e]=r}}));const s=(t,n)=>{return e.useFlexGap?{gap:(0,m.NA)(r,t)}:{"& > :not(style) + :not(style)":{margin:0,[`margin${o=n?a[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[o]}`]:(0,m.NA)(r,t)}};var o};n=(0,i.Z)(n,(0,h.k9)({theme:t},l,s))}return n=(0,h.dt)(t.breakpoints,n),n};var C=n(4312),k=n(407);const E=function(e={}){const{createStyledComponent:t=b,useThemeProps:n=w,componentName:i="MuiStack"}=e,c=t(S),d=a.forwardRef((function(e,t){const a=n(e),d=(0,f.Z)(a),{component:p="div",direction:h="column",spacing:m=0,divider:y,children:b,className:w,useFlexGap:S=!1}=d,C=(0,r.Z)(d,g),k={direction:h,spacing:m,useFlexGap:S},E=(0,s.Z)({root:["root"]},(e=>(0,u.Z)(i,e)),{});return(0,v.jsx)(c,(0,o.Z)({as:p,ownerState:k,ref:t,className:(0,l.Z)(E.root,w)},C,{children:y?x(b,y):b}))}));return d}({createStyledComponent:(0,C.Z)("div",{name:"JoyStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>(0,k.Z)({props:e,name:"JoyStack"})}),P=E;var Z=n(6821);function z(e){return(0,Z.d6)("MuiStack",e)}const I=(0,Z.sI)("MuiStack",["root"])},2968:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>$,getTextareaUtilityClass:()=>k,textareaClasses:()=>E});var r=n(3366),o=n(7462),a=n(7294),l=n(8320),i=n(4780),s=n(3935),u=n(67),c=n(8290),d=n(7596),f=n(6600),p=n(5893);const h=["onChange","maxRows","minRows","style","value"];function m(e){return parseInt(e,10)||0}const v={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function g(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const y=a.forwardRef((function(e,t){const{onChange:n,maxRows:l,minRows:i=1,style:y,value:b}=e,w=(0,r.Z)(e,h),{current:x}=a.useRef(null!=b),S=a.useRef(null),C=(0,u.Z)(t,S),k=a.useRef(null),E=a.useRef(0),[P,Z]=a.useState({outerHeightStyle:0}),z=a.useCallback((()=>{const t=S.current,n=(0,c.Z)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=k.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const o=n.boxSizing,a=m(n.paddingBottom)+m(n.paddingTop),s=m(n.borderBottomWidth)+m(n.borderTopWidth),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let f=u;return i&&(f=Math.max(Number(i)*d,f)),l&&(f=Math.min(Number(l)*d,f)),f=Math.max(f,d),{outerHeightStyle:f+("border-box"===o?a+s:0),overflow:Math.abs(f-u)<=1}}),[l,i,e.placeholder]),I=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return E.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(E.current+=1,{overflow:r,outerHeightStyle:n}):e},D=a.useCallback((()=>{const e=z();g(e)||Z((t=>I(t,e)))}),[z]);return a.useEffect((()=>{const e=(0,d.Z)((()=>{E.current=0,S.current&&(()=>{const e=z();g(e)||s.flushSync((()=>{Z((t=>I(t,e)))}))})()}));let t;const n=S.current,r=(0,c.Z)(n);return r.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(t=new ResizeObserver(e),t.observe(n)),()=>{e.clear(),r.removeEventListener("resize",e),t&&t.disconnect()}})),(0,f.Z)((()=>{D()})),a.useEffect((()=>{E.current=0}),[b]),(0,p.jsxs)(a.Fragment,{children:[(0,p.jsx)("textarea",(0,o.Z)({value:b,onChange:e=>{E.current=0,x||D(),n&&n(e)},ref:C,rows:i,style:(0,o.Z)({height:P.outerHeightStyle,overflow:P.overflow?"hidden":void 0},y)},w)),(0,p.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:k,tabIndex:-1,style:(0,o.Z)({},v,y,{padding:0})})]})}));var b=n(4312),w=n(407),x=n(8653),S=n(220),C=n(6821);function k(e){return(0,C.d6)("MuiTextarea",e)}const E=(0,C.sI)("MuiTextarea",["root","textarea","startDecorator","endDecorator","formControl","disabled","error","focused","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","sizeSm","sizeMd","sizeLg","variantPlain","variantOutlined","variantSoft"]);var P=n(9524);const Z=["propsToForward","rootStateClasses","inputStateClasses","getRootProps","getInputProps","formControl","focused","error","disabled","size","color","variant","startDecorator","endDecorator","minRows","maxRows"],z=(0,b.Z)("div",{name:"JoyTextarea",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r,a,l,i;const s=null==(n=e.variants[`${t.variant}`])?void 0:n[t.color];return[(0,o.Z)({"--Textarea-radius":e.vars.radius.sm,"--Textarea-gap":"0.5rem","--Textarea-placeholderColor":"inherit","--Textarea-placeholderOpacity":.5,"--Textarea-focusedThickness":e.vars.focus.thickness},"context"===t.color?{"--Textarea-focusedHighlight":e.vars.palette.focusVisible}:{"--Textarea-focusedHighlight":null==(r=e.vars.palette["neutral"===t.color?"primary":t.color])?void 0:r[500]},"sm"===t.size&&{"--Textarea-minHeight":"2rem","--Textarea-paddingBlock":"calc(0.5rem - var(--variant-borderWidth, 0px))","--Textarea-paddingInline":"0.5rem","--Textarea-decoratorChildHeight":"min(1.5rem, var(--Textarea-minHeight))","--Icon-fontSize":"1.25rem"},"md"===t.size&&{"--Textarea-minHeight":"2.5rem","--Textarea-paddingBlock":"calc(0.5rem - var(--variant-borderWidth, 0px))","--Textarea-paddingInline":"0.75rem","--Textarea-decoratorChildHeight":"min(2rem, var(--Textarea-minHeight))","--Icon-fontSize":"1.5rem"},"lg"===t.size&&{"--Textarea-minHeight":"3rem","--Textarea-paddingBlock":"calc(0.75rem - var(--variant-borderWidth, 0px))","--Textarea-paddingInline":"1rem","--Textarea-gap":"0.75rem","--Textarea-decoratorChildHeight":"min(2.375rem, var(--Textarea-minHeight))","--Icon-fontSize":"1.75rem"},{"--_Textarea-paddingBlock":"max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Textarea-decoratorChildHeight)) / 2, 0px)","--Textarea-decoratorChildRadius":"max(var(--Textarea-radius) - var(--variant-borderWidth, 0px) - var(--_Textarea-paddingBlock), min(var(--_Textarea-paddingBlock) + var(--variant-borderWidth, 0px), var(--Textarea-radius) / 2))","--Button-minHeight":"var(--Textarea-decoratorChildHeight)","--IconButton-size":"var(--Textarea-decoratorChildHeight)","--Button-radius":"var(--Textarea-decoratorChildRadius)","--IconButton-radius":"var(--Textarea-decoratorChildRadius)",boxSizing:"border-box",minWidth:0,minHeight:"var(--Textarea-minHeight)",cursor:"text",position:"relative",display:"flex",flexDirection:"column",paddingInlineStart:"var(--Textarea-paddingInline)",paddingBlock:"var(--Textarea-paddingBlock)",borderRadius:"var(--Textarea-radius)",fontFamily:e.vars.fontFamily.body,fontSize:e.vars.fontSize.md,lineHeight:e.vars.lineHeight.md},"sm"===t.size&&{fontSize:e.vars.fontSize.sm,lineHeight:e.vars.lineHeight.sm},{"&:before":{boxSizing:"border-box",content:'""',display:"block",position:"absolute",pointerEvents:"none",top:0,left:0,right:0,bottom:0,zIndex:1,borderRadius:"inherit",margin:"calc(var(--variant-borderWidth, 0px) * -1)"}}),(0,o.Z)({},s,{backgroundColor:null!=(a=null==s?void 0:s.backgroundColor)?a:e.vars.palette.background.surface,[`&:hover:not(.${E.focused})`]:(0,o.Z)({},null==(l=e.variants[`${t.variant}Hover`])?void 0:l[t.color],{backgroundColor:null,cursor:"text"}),[`&.${E.disabled}`]:null==(i=e.variants[`${t.variant}Disabled`])?void 0:i[t.color],[`&.${E.focused}`]:{"&:before":{boxShadow:"inset 0 0 0 var(--Textarea-focusedThickness) var(--Textarea-focusedHighlight)"}}})]})),I=(0,b.Z)(y,{name:"JoyTextarea",slot:"Textarea",overridesResolver:(e,t)=>t.textarea})({resize:"none",border:"none",minWidth:0,outline:0,padding:0,paddingInlineEnd:"var(--Textarea-paddingInline)",flex:"auto",alignSelf:"stretch",color:"inherit",backgroundColor:"transparent",fontFamily:"inherit",fontSize:"inherit",fontStyle:"inherit",fontWeight:"inherit",lineHeight:"inherit","&:-webkit-autofill":{WebkitBackgroundClip:"text",WebkitTextFillColor:"currentColor"},"&::-webkit-input-placeholder":{color:"var(--Textarea-placeholderColor)",opacity:"var(--Textarea-placeholderOpacity)"},"&::-moz-placeholder":{color:"var(--Textarea-placeholderColor)",opacity:"var(--Textarea-placeholderOpacity)"},"&:-ms-input-placeholder":{color:"var(--Textarea-placeholderColor)",opacity:"var(--Textarea-placeholderOpacity)"},"&::-ms-input-placeholder":{color:"var(--Textarea-placeholderColor)",opacity:"var(--Textarea-placeholderOpacity)"}}),D=(0,b.Z)("div",{name:"JoyTextarea",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})((({theme:e})=>({display:"flex",marginInlineStart:"calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",marginInlineEnd:"var(--Textarea-paddingBlock)",marginBlockEnd:"var(--Textarea-gap)",color:e.vars.palette.text.tertiary,cursor:"initial"}))),R=(0,b.Z)("div",{name:"JoyTextarea",slot:"EndDecorator",overridesResolver:(e,t)=>t.endDecorator})((({theme:e})=>({display:"flex",marginInlineStart:"calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",marginInlineEnd:"var(--Textarea-paddingBlock)",marginBlockStart:"var(--Textarea-gap)",color:e.vars.palette.text.tertiary,cursor:"initial"}))),$=a.forwardRef((function(e,t){var n,a,s,u,c,d,f;const h=(0,w.Z)({props:e,name:"JoyTextarea"}),m=(0,P.Z)(h,E),{propsToForward:v,rootStateClasses:g,inputStateClasses:y,getRootProps:b,getInputProps:C,formControl:$,focused:T,error:O=!1,disabled:_=!1,size:L="md",color:B="neutral",variant:M="outlined",startDecorator:A,endDecorator:F,minRows:N,maxRows:j}=m,H=(0,r.Z)(m,Z),W=null!=(n=null!=(a=e.disabled)?a:null==$?void 0:$.disabled)?n:_,V=null!=(s=null!=(u=e.error)?u:null==$?void 0:$.error)?s:O,U=null!=(c=null!=(d=e.size)?d:null==$?void 0:$.size)?c:L,{getColor:K}=(0,x.VT)(M),q=K(e.color,V?"danger":null!=(f=null==$?void 0:$.color)?f:B),J=(0,o.Z)({},h,{color:q,disabled:W,error:V,focused:T,size:U,variant:M}),Q=(e=>{const{disabled:t,variant:n,color:r,size:o}=e,a={root:["root",t&&"disabled",n&&`variant${(0,l.Z)(n)}`,r&&`color${(0,l.Z)(r)}`,o&&`size${(0,l.Z)(o)}`],textarea:["textarea"],startDecorator:["startDecorator"],endDecorator:["endDecorator"]};return(0,i.Z)(a,k,{})})(J),[G,X]=(0,S.Z)("root",{ref:t,className:[Q.root,g],elementType:z,externalForwardedProps:H,getSlotProps:b,ownerState:J}),[Y,ee]=(0,S.Z)("textarea",{additionalProps:{id:null==$?void 0:$.htmlFor,"aria-describedby":null==$?void 0:$["aria-describedby"]},className:[Q.textarea,y],elementType:I,internalForwardedProps:(0,o.Z)({},v,{minRows:N,maxRows:j}),externalForwardedProps:H,getSlotProps:C,ownerState:J}),[te,ne]=(0,S.Z)("startDecorator",{className:Q.startDecorator,elementType:D,externalForwardedProps:H,ownerState:J}),[re,oe]=(0,S.Z)("endDecorator",{className:Q.endDecorator,elementType:R,externalForwardedProps:H,ownerState:J});return(0,p.jsxs)(G,(0,o.Z)({},X,{children:[A&&(0,p.jsx)(te,(0,o.Z)({},ne,{children:A})),(0,p.jsx)(Y,(0,o.Z)({},ee)),F&&(0,p.jsx)(re,(0,o.Z)({},oe,{children:F}))]}))}))},969:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>T,getTooltipUtilityClass:()=>w,tooltipClasses:()=>x});var r=n(7462),o=n(3366),a=n(7294),l=n(6010),i=n(8320),s=n(8925),u=n(7579),c=n(3633),d=n(9962),f=n(67),p=n(4780),h=n(272),m=n(4312),v=n(407),g=n(220),y=n(8653),b=n(6821);function w(e){return(0,b.d6)("MuiTooltip",e)}const x=(0,b.sI)("MuiTooltip",["root","tooltipArrow","arrow","touch","placementLeft","placementRight","placementTop","placementBottom","colorPrimary","colorDanger","colorInfo","colorNeutral","colorSuccess","colorWarning","colorContext","sizeSm","sizeMd","sizeLg","variantPlain","variantOutlined","variantSoft","variantSolid"]);var S=n(5893);const C=["slots","slotProps"],k=["children","className","arrow","describeChild","disableFocusListener","disableHoverListener","disableInteractive","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","followCursor","id","leaveDelay","leaveTouchDelay","onClose","onOpen","open","disablePortal","direction","keepMounted","modifiers","placement","title","color","variant","size"],E=(0,m.Z)("div",{name:"JoyTooltip",slot:"Root",overridesResolver:(e,t)=>t.root})((({ownerState:e,theme:t})=>{var n,o,a;const l=null==(n=t.variants[e.variant])?void 0:n[e.color];return(0,r.Z)({},"sm"===e.size&&{"--Icon-fontSize":"1rem","--Tooltip-arrowSize":"8px",padding:t.spacing(.5,.625),fontSize:t.vars.fontSize.xs},"md"===e.size&&{"--Icon-fontSize":"1.125rem","--Tooltip-arrowSize":"10px",padding:t.spacing(.625,.75),fontSize:t.vars.fontSize.sm},"lg"===e.size&&{"--Icon-fontSize":"1.25rem","--Tooltip-arrowSize":"12px",padding:t.spacing(.75,1),fontSize:t.vars.fontSize.md},{zIndex:t.vars.zIndex.tooltip,pointerEvents:"none",borderRadius:t.vars.radius.xs,boxShadow:t.shadow.sm,fontFamily:t.vars.fontFamily.body,fontWeight:t.vars.fontWeight.md,lineHeight:t.vars.lineHeight.sm,wordWrap:"break-word",position:"relative"},!e.disableInteractive&&{pointerEvents:"auto"},!e.open&&{pointerEvents:"none"},l,!l.backgroundColor&&{backgroundColor:t.vars.palette.background.surface},{"&::before":{content:'""',display:"block",position:"absolute",width:null!=(o=e.placement)&&o.match(/(top|bottom)/)?"100%":"calc(10px + var(--variant-borderWidth, 0px))",height:null!=(a=e.placement)&&a.match(/(top|bottom)/)?"calc(10px + var(--variant-borderWidth, 0px))":"100%"},'&[data-popper-placement*="bottom"]::before':{top:0,left:0,transform:"translateY(-100%)"},'&[data-popper-placement*="left"]::before':{top:0,right:0,transform:"translateX(100%)"},'&[data-popper-placement*="right"]::before':{top:0,left:0,transform:"translateX(-100%)"},'&[data-popper-placement*="top"]::before':{bottom:0,left:0,transform:"translateY(100%)"}})})),P=(0,m.Z)("span",{name:"JoyTooltip",slot:"Arrow",overridesResolver:(e,t)=>t.arrow})((({theme:e,ownerState:t})=>{var n,r,o;const a=null==(n=e.variants[t.variant])?void 0:n[t.color];return{"--unstable_Tooltip-arrowRotation":0,width:"var(--Tooltip-arrowSize)",height:"var(--Tooltip-arrowSize)",boxSizing:"border-box","&:before":{content:'""',display:"block",position:"absolute",width:0,height:0,border:"calc(var(--Tooltip-arrowSize) / 2) solid",borderLeftColor:"transparent",borderBottomColor:"transparent",borderTopColor:null!=(r=null==a?void 0:a.backgroundColor)?r:e.vars.palette.background.surface,borderRightColor:null!=(o=null==a?void 0:a.backgroundColor)?o:e.vars.palette.background.surface,borderRadius:"0px 2px 0px 0px",boxShadow:`var(--variant-borderWidth, 0px) calc(-1 * var(--variant-borderWidth, 0px)) 0px 0px ${a.borderColor}`,transformOrigin:"center center",transform:"rotate(calc(-45deg + 90deg * var(--unstable_Tooltip-arrowRotation)))"},'[data-popper-placement*="bottom"] &':{top:"calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"},'[data-popper-placement*="top"] &':{"--unstable_Tooltip-arrowRotation":2,bottom:"calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"},'[data-popper-placement*="left"] &':{"--unstable_Tooltip-arrowRotation":1,right:"calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"},'[data-popper-placement*="right"] &':{"--unstable_Tooltip-arrowRotation":3,left:"calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"}}}));let Z=!1,z=null,I={x:0,y:0};function D(e,t){return n=>{t&&t(n),e(n)}}function R(e,t){return n=>{t&&t(n),e(n)}}const $=a.forwardRef((function(e,t){const n=(0,v.Z)({props:e,name:"JoyTooltip"}),{children:m,className:b,arrow:x=!1,describeChild:$=!1,disableFocusListener:T=!1,disableHoverListener:O=!1,disableInteractive:_=!1,disableTouchListener:L=!1,enterDelay:B=100,enterNextDelay:M=0,enterTouchDelay:A=700,followCursor:F=!1,id:N,leaveDelay:j=0,leaveTouchDelay:H=1500,onClose:W,onOpen:V,open:U,disablePortal:K,direction:q,keepMounted:J,placement:Q="bottom",title:G,color:X="neutral",variant:Y="solid",size:ee="md"}=n,te=(0,o.Z)(n,k),{getColor:ne}=(0,y.VT)(Y),re=K?ne(e.color,X):X,[oe,ae]=a.useState(),[le,ie]=a.useState(null),se=a.useRef(!1),ue=_||F,ce=a.useRef(),de=a.useRef(),fe=a.useRef(),pe=a.useRef(),[he,me]=(0,s.Z)({controlled:U,default:!1,name:"Tooltip",state:"open"});let ve=he;const ge=(0,u.Z)(N),ye=a.useRef(),be=a.useCallback((()=>{void 0!==ye.current&&(document.body.style.WebkitUserSelect=ye.current,ye.current=void 0),clearTimeout(pe.current)}),[]);a.useEffect((()=>()=>{clearTimeout(ce.current),clearTimeout(de.current),clearTimeout(fe.current),be()}),[be]);const we=e=>{z&&clearTimeout(z),Z=!0,me(!0),V&&!ve&&V(e)},xe=(0,c.Z)((e=>{z&&clearTimeout(z),z=setTimeout((()=>{Z=!1}),800+j),me(!1),W&&ve&&W(e),clearTimeout(ce.current),ce.current=setTimeout((()=>{se.current=!1}),150)})),Se=e=>{se.current&&"touchstart"!==e.type||(oe&&oe.removeAttribute("title"),clearTimeout(de.current),clearTimeout(fe.current),B||Z&&M?de.current=setTimeout((()=>{we(e)}),Z?M:B):we(e))},Ce=e=>{clearTimeout(de.current),clearTimeout(fe.current),fe.current=setTimeout((()=>{xe(e)}),j)},{isFocusVisibleRef:ke,onBlur:Ee,onFocus:Pe,ref:Ze}=(0,d.Z)(),[,ze]=a.useState(!1),Ie=e=>{Ee(e),!1===ke.current&&(ze(!1),Ce(e))},De=e=>{oe||ae(e.currentTarget),Pe(e),!0===ke.current&&(ze(!0),Se(e))},Re=e=>{se.current=!0;const t=m.props;t.onTouchStart&&t.onTouchStart(e)},$e=Se,Te=Ce;a.useEffect((()=>{if(ve)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){"Escape"!==e.key&&"Esc"!==e.key||xe(e)}}),[xe,ve]);const Oe=(0,f.Z)(ae,t),_e=(0,f.Z)(Ze,Oe),Le=(0,f.Z)(m.ref,_e);"number"==typeof G||G||(ve=!1);const Be=a.useRef(null),Me={},Ae="string"==typeof G;$?(Me.title=ve||!Ae||O?null:G,Me["aria-describedby"]=ve?ge:null):(Me["aria-label"]=Ae?G:null,Me["aria-labelledby"]=ve&&!Ae?ge:null);const Fe=(0,r.Z)({},Me,(e=>(0,o.Z)(e,C))(te),m.props,{className:(0,l.Z)(b,m.props.className),onTouchStart:Re,ref:Le},F?{onMouseMove:e=>{const t=m.props;t.onMouseMove&&t.onMouseMove(e),I={x:e.clientX,y:e.clientY},Be.current&&Be.current.update()}}:{}),Ne={};L||(Fe.onTouchStart=e=>{Re(e),clearTimeout(fe.current),clearTimeout(ce.current),be(),ye.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",pe.current=setTimeout((()=>{document.body.style.WebkitUserSelect=ye.current,Se(e)}),A)},Fe.onTouchEnd=e=>{m.props.onTouchEnd&&m.props.onTouchEnd(e),be(),clearTimeout(fe.current),fe.current=setTimeout((()=>{xe(e)}),H)}),O||(Fe.onMouseOver=D($e,Fe.onMouseOver),Fe.onMouseLeave=D(Te,Fe.onMouseLeave),ue||(Ne.onMouseOver=$e,Ne.onMouseLeave=Te)),T||(Fe.onFocus=R(De,Fe.onFocus),Fe.onBlur=R(Ie,Fe.onBlur),ue||(Ne.onFocus=De,Ne.onBlur=Ie));const je=(0,r.Z)({},n,{arrow:x,disableInteractive:ue,placement:Q,touch:se.current,color:re,variant:Y,size:ee}),He=(e=>{const{arrow:t,variant:n,color:r,size:o,placement:a,touch:l}=e,s={root:["root",t&&"tooltipArrow",l&&"touch",o&&`size${(0,i.Z)(o)}`,r&&`color${(0,i.Z)(r)}`,n&&`variant${(0,i.Z)(n)}`,`tooltipPlacement${(0,i.Z)(a.split("-")[0])}`],arrow:["arrow"]};return(0,p.Z)(s,w,{})})(je),[We,Ve]=(0,g.Z)("root",{additionalProps:(0,r.Z)({id:ge,popperRef:Be,placement:Q,anchorEl:F?{getBoundingClientRect:()=>({top:I.y,left:I.x,right:I.x,bottom:I.y,width:0,height:0})}:oe,open:!!oe&&ve,disablePortal:K,keepMounted:J,direction:q},Ne),ref:null,className:He.root,elementType:h.Z,externalForwardedProps:te,ownerState:je,internalForwardedProps:{component:E}}),[Ue,Ke]=(0,g.Z)("arrow",{ref:ie,className:He.arrow,elementType:P,externalForwardedProps:te,ownerState:je}),qe=a.useMemo((()=>[{name:"arrow",enabled:Boolean(le),options:{element:le,padding:6}},{name:"offset",options:{offset:[0,10]}},...Ve.modifiers||[]]),[le,Ve.modifiers]),Je=(0,S.jsxs)(We,(0,r.Z)({},Ve,{modifiers:qe,children:[G,x?(0,S.jsx)(Ue,(0,r.Z)({},Ke)):null]}));return(0,S.jsxs)(a.Fragment,{children:[a.isValidElement(m)&&a.cloneElement(m,Fe),K?Je:(0,S.jsx)(y.ZP.Provider,{value:void 0,children:Je})]})})),T=$},477:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>E,getTypographyUtilityClass:()=>h,typographyClasses:()=>m});var r=n(3366),o=n(7462),a=n(7294),l=n(8320),i=n(9707),s=n(4780),u=n(4312),c=n(407),d=n(8653),f=n(220),p=n(6821);function h(e){return(0,p.d6)("MuiTypography",e)}const m=(0,p.sI)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","body1","body2","body3","noWrap","gutterBottom","startDecorator","endDecorator","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid"]);var v=n(5893);const g=["color","textColor"],y=["component","gutterBottom","noWrap","level","levelMapping","children","endDecorator","startDecorator","variant"],b=a.createContext(!1),w=a.createContext(!1),x=(0,u.Z)("span",{name:"JoyTypography",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})((({ownerState:e})=>{var t;return(0,o.Z)({display:"inline-flex",marginInlineEnd:"clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"},"string"!=typeof e.startDecorator&&("flex-start"===e.alignItems||"flex-start"===(null==(t=e.sx)?void 0:t.alignItems))&&{marginTop:"2px"})})),S=(0,u.Z)("span",{name:"JoyTypography",slot:"endDecorator",overridesResolver:(e,t)=>t.endDecorator})((({ownerState:e})=>{var t;return(0,o.Z)({display:"inline-flex",marginInlineStart:"clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"},"string"!=typeof e.endDecorator&&("flex-start"===e.alignItems||"flex-start"===(null==(t=e.sx)?void 0:t.alignItems))&&{marginTop:"2px"})})),C=(0,u.Z)("span",{name:"JoyTypography",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r,a,l;return(0,o.Z)({"--Icon-fontSize":"1.25em",margin:"var(--Typography-margin, 0px)"},t.nesting?{display:"inline"}:{fontFamily:e.vars.fontFamily.body,display:"block"},(t.startDecorator||t.endDecorator)&&(0,o.Z)({display:"flex",alignItems:"center"},t.nesting&&(0,o.Z)({display:"inline-flex"},t.startDecorator&&{verticalAlign:"bottom"})),t.level&&"inherit"!==t.level&&e.typography[t.level],{fontSize:`var(--Typography-fontSize, ${t.level&&"inherit"!==t.level&&null!=(n=null==(r=e.typography[t.level])?void 0:r.fontSize)?n:"inherit"})`},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.color&&"context"!==t.color&&{color:`rgba(${null==(a=e.vars.palette[t.color])?void 0:a.mainChannel} / 1)`},t.variant&&(0,o.Z)({borderRadius:e.vars.radius.xs,paddingBlock:"min(0.15em, 4px)",paddingInline:"0.375em"},!t.nesting&&{marginInline:"-0.375em"},null==(l=e.variants[t.variant])?void 0:l[t.color]))})),k={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",display1:"h1",display2:"h2",body1:"p",body2:"p",body3:"span",body4:"span",body5:"span",inherit:"p"},E=a.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"JoyTypography"}),{color:u,textColor:p}=n,m=(0,r.Z)(n,g),E=a.useContext(b),P=a.useContext(w),Z=(0,i.Z)((0,o.Z)({},m,{color:p})),{component:z,gutterBottom:I=!1,noWrap:D=!1,level:R="body1",levelMapping:$={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",body1:"p",body2:"p",body3:"p",inherit:"p"},children:T,endDecorator:O,startDecorator:_,variant:L}=Z,B=(0,r.Z)(Z,y),{getColor:M}=(0,d.VT)(L),A=M(e.color,L?null!=u?u:"neutral":u),F=E||P?e.level||"inherit":R,N=z||(E?"span":$[F]||k[F]||"span"),j=(0,o.Z)({},Z,{level:F,component:N,color:A,gutterBottom:I,noWrap:D,nesting:E,variant:L}),H=(e=>{const{gutterBottom:t,noWrap:n,level:r,color:o,variant:a}=e,i={root:["root",r,t&&"gutterBottom",n&&"noWrap",o&&`color${(0,l.Z)(o)}`,a&&`variant${(0,l.Z)(a)}`],startDecorator:["startDecorator"],endDecorator:["endDecorator"]};return(0,s.Z)(i,h,{})})(j),W=(0,o.Z)({},B,{component:N}),[V,U]=(0,f.Z)("root",{ref:t,className:H.root,elementType:C,externalForwardedProps:W,ownerState:j}),[K,q]=(0,f.Z)("startDecorator",{className:H.startDecorator,elementType:x,externalForwardedProps:W,ownerState:j}),[J,Q]=(0,f.Z)("endDecorator",{className:H.endDecorator,elementType:S,externalForwardedProps:W,ownerState:j});return(0,v.jsx)(b.Provider,{value:!0,children:(0,v.jsxs)(V,(0,o.Z)({},U,{children:[_&&(0,v.jsx)(K,(0,o.Z)({},q,{children:_})),T,O&&(0,v.jsx)(J,(0,o.Z)({},Q,{children:O}))]}))})}))},6821:(e,t,n)=>{"use strict";n.d(t,{d6:()=>a,sI:()=>l});var r=n(4867),o=n(1588);const a=(e,t)=>(0,r.Z)(e,t,"Joy"),l=(e,t)=>(0,o.Z)(e,t,"Joy")},8653:(e,t,n)=>{"use strict";n.d(t,{VT:()=>s,ZP:()=>c,do:()=>u});var r=n(7294),o=n(6631),a=n(1812),l=n(5893);const i=r.createContext(void 0),s=e=>{const t=r.useContext(i);return{getColor:(n,r)=>t&&e&&t.includes(e)?n||"context":n||r}};function u({children:e,variant:t}){var n;const r=(0,o.Z)(a.Z);return(0,l.jsx)(i.Provider,{value:t?(null!=(n=r.colorInversionConfig)?n:a.Z.colorInversionConfig)[t]:void 0,children:e})}const c=i},1812:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(3801).Z)()},3801:(e,t,n)=>{"use strict";n.d(t,{N:()=>E,Z:()=>P});var r=n(7462),o=n(3366),a=n(9766),l=n(159),i=n(1796),s=n(1512),u=n(8373);const c=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))},d=(e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().indexOf("opacity")>=0?t:`${t}px`:t;function f(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},l={};return i=(e,t,i)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`;Object.assign(o,{[r]:d(e,t)}),c(a,e,`var(${r})`,i),c(l,e,`var(${r}, ${t})`,i)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):i([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:l};var i,s}const p=["colorSchemes","components"],h=["light"],m=function(e,t){const{colorSchemes:n={}}=e,r=(0,o.Z)(e,p),{vars:l,css:i,varsWithDefaults:s}=f(r,t);let u=s;const c={},{light:d}=n,m=(0,o.Z)(n,h);if(Object.entries(m||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:l}=f(n,t);u=(0,a.Z)(u,l),c[e]={css:o,vars:r}})),d){const{css:e,vars:n,varsWithDefaults:r}=f(d,t);u=(0,a.Z)(u,r),c.light={css:e,vars:n}}return{vars:u,generateCssVars:e=>e?c[e]:{css:i,vars:l}}};var v=n(6523),g=n(8010);const y=(0,r.Z)({},g.Z,{borderRadius:{themeKey:"radius"},boxShadow:{themeKey:"shadow"},fontFamily:{themeKey:"fontFamily"},fontSize:{themeKey:"fontSize"},fontWeight:{themeKey:"fontWeight"},letterSpacing:{themeKey:"letterSpacing"},lineHeight:{themeKey:"lineHeight"}}),b={grey:{50:"#F7F7F8",100:"#EBEBEF",200:"#D8D8DF",300:"#B9B9C6",400:"#8F8FA3",500:"#73738C",600:"#5A5A72",700:"#434356",800:"#25252D",900:"#131318"},blue:{50:"#F4FAFF",100:"#DDF1FF",200:"#ADDBFF",300:"#6FB6FF",400:"#3990FF",500:"#096BDE",600:"#054DA7",700:"#02367D",800:"#072859",900:"#00153C"},yellow:{50:"#FFF8C5",100:"#FAE17D",200:"#EAC54F",300:"#D4A72C",400:"#BF8700",500:"#9A6700",600:"#7D4E00",700:"#633C01",800:"#4D2D00",900:"#3B2300"},red:{50:"#FFF8F6",100:"#FFE9E8",200:"#FFC7C5",300:"#FF9192",400:"#FA5255",500:"#D3232F",600:"#A10E25",700:"#77061B",800:"#580013",900:"#39000D"},green:{50:"#F3FEF5",100:"#D7F5DD",200:"#77EC95",300:"#4CC76E",400:"#2CA24D",500:"#1A7D36",600:"#0F5D26",700:"#034318",800:"#002F0F",900:"#001D09"},purple:{50:"#FDF7FF",100:"#F4EAFF",200:"#E1CBFF",300:"#C69EFF",400:"#A374F9",500:"#814DDE",600:"#5F35AE",700:"#452382",800:"#301761",900:"#1D0A42"}};var w=n(6776),x=n(6821),S=n(3951);const C=["cssVarPrefix","breakpoints","spacing","components","variants","colorInversion","shouldSkipGeneratingVar"],k=["colorSchemes"],E=(e="joy")=>(0,l.Z)(e);function P(e){var t,n,l,c,d,f,p,h,g,P,Z,z,I,D,R,$,T,O,_,L,B,M,A,F,N,j,H,W,V,U,K,q,J,Q,G,X,Y,ee,te,ne,re,oe,ae,le,ie,se,ue,ce,de,fe,pe,he,me,ve,ge,ye,be,we,xe,Se,Ce,ke,Ee,Pe,Ze,ze,Ie,De,Re,$e,Te,Oe,_e,Le,Be,Me,Ae,Fe,Ne,je,He,We;const Ve=e||{},{cssVarPrefix:Ue="joy",breakpoints:Ke,spacing:qe,components:Je,variants:Qe,colorInversion:Ge,shouldSkipGeneratingVar:Xe=w.Z}=Ve,Ye=(0,o.Z)(Ve,C),et=E(Ue),tt={primary:b.blue,neutral:b.grey,danger:b.red,info:b.purple,success:b.green,warning:b.yellow,common:{white:"#FFF",black:"#09090D"}},nt=e=>{var t;const n=e.split("-"),r=n[1],o=n[2];return et(e,null==(t=tt[r])?void 0:t[o])},rt=e=>({plainColor:nt(`palette-${e}-600`),plainHoverBg:nt(`palette-${e}-100`),plainActiveBg:nt(`palette-${e}-200`),plainDisabledColor:nt(`palette-${e}-200`),outlinedColor:nt(`palette-${e}-500`),outlinedBorder:nt(`palette-${e}-200`),outlinedHoverBg:nt(`palette-${e}-100`),outlinedHoverBorder:nt(`palette-${e}-300`),outlinedActiveBg:nt(`palette-${e}-200`),outlinedDisabledColor:nt(`palette-${e}-100`),outlinedDisabledBorder:nt(`palette-${e}-100`),softColor:nt(`palette-${e}-600`),softBg:nt(`palette-${e}-100`),softHoverBg:nt(`palette-${e}-200`),softActiveBg:nt(`palette-${e}-300`),softDisabledColor:nt(`palette-${e}-300`),softDisabledBg:nt(`palette-${e}-50`),solidColor:"#fff",solidBg:nt(`palette-${e}-500`),solidHoverBg:nt(`palette-${e}-600`),solidActiveBg:nt(`palette-${e}-700`),solidDisabledColor:"#fff",solidDisabledBg:nt(`palette-${e}-200`)}),ot=e=>({plainColor:nt(`palette-${e}-300`),plainHoverBg:nt(`palette-${e}-800`),plainActiveBg:nt(`palette-${e}-700`),plainDisabledColor:nt(`palette-${e}-800`),outlinedColor:nt(`palette-${e}-200`),outlinedBorder:nt(`palette-${e}-700`),outlinedHoverBg:nt(`palette-${e}-800`),outlinedHoverBorder:nt(`palette-${e}-600`),outlinedActiveBg:nt(`palette-${e}-900`),outlinedDisabledColor:nt(`palette-${e}-800`),outlinedDisabledBorder:nt(`palette-${e}-800`),softColor:nt(`palette-${e}-200`),softBg:nt(`palette-${e}-900`),softHoverBg:nt(`palette-${e}-800`),softActiveBg:nt(`palette-${e}-700`),softDisabledColor:nt(`palette-${e}-800`),softDisabledBg:nt(`palette-${e}-900`),solidColor:"#fff",solidBg:nt(`palette-${e}-600`),solidHoverBg:nt(`palette-${e}-700`),solidActiveBg:nt(`palette-${e}-800`),solidDisabledColor:nt(`palette-${e}-700`),solidDisabledBg:nt(`palette-${e}-900`)}),at={palette:{mode:"light",primary:(0,r.Z)({},tt.primary,rt("primary")),neutral:(0,r.Z)({},tt.neutral,{plainColor:nt("palette-neutral-800"),plainHoverColor:nt("palette-neutral-900"),plainHoverBg:nt("palette-neutral-100"),plainActiveBg:nt("palette-neutral-200"),plainDisabledColor:nt("palette-neutral-300"),outlinedColor:nt("palette-neutral-800"),outlinedBorder:nt("palette-neutral-200"),outlinedHoverColor:nt("palette-neutral-900"),outlinedHoverBg:nt("palette-neutral-100"),outlinedHoverBorder:nt("palette-neutral-300"),outlinedActiveBg:nt("palette-neutral-200"),outlinedDisabledColor:nt("palette-neutral-300"),outlinedDisabledBorder:nt("palette-neutral-100"),softColor:nt("palette-neutral-800"),softBg:nt("palette-neutral-100"),softHoverColor:nt("palette-neutral-900"),softHoverBg:nt("palette-neutral-200"),softActiveBg:nt("palette-neutral-300"),softDisabledColor:nt("palette-neutral-300"),softDisabledBg:nt("palette-neutral-50"),solidColor:nt("palette-common-white"),solidBg:nt("palette-neutral-600"),solidHoverBg:nt("palette-neutral-700"),solidActiveBg:nt("palette-neutral-800"),solidDisabledColor:nt("palette-neutral-300"),solidDisabledBg:nt("palette-neutral-50")}),danger:(0,r.Z)({},tt.danger,rt("danger")),info:(0,r.Z)({},tt.info,rt("info")),success:(0,r.Z)({},tt.success,rt("success")),warning:(0,r.Z)({},tt.warning,rt("warning"),{solidColor:nt("palette-warning-800"),solidBg:nt("palette-warning-200"),solidHoverBg:nt("palette-warning-300"),solidActiveBg:nt("palette-warning-400"),solidDisabledColor:nt("palette-warning-200"),solidDisabledBg:nt("palette-warning-50"),softColor:nt("palette-warning-800"),softBg:nt("palette-warning-50"),softHoverBg:nt("palette-warning-100"),softActiveBg:nt("palette-warning-200"),softDisabledColor:nt("palette-warning-200"),softDisabledBg:nt("palette-warning-50"),outlinedColor:nt("palette-warning-800"),outlinedHoverBg:nt("palette-warning-50"),plainColor:nt("palette-warning-800"),plainHoverBg:nt("palette-warning-50")}),common:{white:"#FFF",black:"#09090D"},text:{primary:nt("palette-neutral-800"),secondary:nt("palette-neutral-600"),tertiary:nt("palette-neutral-500")},background:{body:nt("palette-common-white"),surface:nt("palette-common-white"),popup:nt("palette-common-white"),level1:nt("palette-neutral-50"),level2:nt("palette-neutral-100"),level3:nt("palette-neutral-200"),tooltip:nt("palette-neutral-800"),backdrop:"rgba(255 255 255 / 0.5)"},divider:`rgba(${et("palette-neutral-mainChannel",(0,i.n8)(tt.neutral[500]))} / 0.28)`,focusVisible:nt("palette-primary-500")},shadowRing:"0 0 #000",shadowChannel:"187 187 187"},lt={palette:{mode:"dark",primary:(0,r.Z)({},tt.primary,ot("primary")),neutral:(0,r.Z)({},tt.neutral,{plainColor:nt("palette-neutral-200"),plainHoverColor:nt("palette-neutral-50"),plainHoverBg:nt("palette-neutral-800"),plainActiveBg:nt("palette-neutral-700"),plainDisabledColor:nt("palette-neutral-700"),outlinedColor:nt("palette-neutral-200"),outlinedBorder:nt("palette-neutral-800"),outlinedHoverColor:nt("palette-neutral-50"),outlinedHoverBg:nt("palette-neutral-800"),outlinedHoverBorder:nt("palette-neutral-700"),outlinedActiveBg:nt("palette-neutral-800"),outlinedDisabledColor:nt("palette-neutral-800"),outlinedDisabledBorder:nt("palette-neutral-800"),softColor:nt("palette-neutral-200"),softBg:nt("palette-neutral-800"),softHoverColor:nt("palette-neutral-50"),softHoverBg:nt("palette-neutral-700"),softActiveBg:nt("palette-neutral-600"),softDisabledColor:nt("palette-neutral-700"),softDisabledBg:nt("palette-neutral-900"),solidColor:nt("palette-common-white"),solidBg:nt("palette-neutral-600"),solidHoverBg:nt("palette-neutral-700"),solidActiveBg:nt("palette-neutral-800"),solidDisabledColor:nt("palette-neutral-700"),solidDisabledBg:nt("palette-neutral-900")}),danger:(0,r.Z)({},tt.danger,ot("danger")),info:(0,r.Z)({},tt.info,ot("info")),success:(0,r.Z)({},tt.success,ot("success"),{solidColor:"#fff",solidBg:nt("palette-success-600"),solidHoverBg:nt("palette-success-700"),solidActiveBg:nt("palette-success-800")}),warning:(0,r.Z)({},tt.warning,ot("warning"),{solidColor:nt("palette-common-black"),solidBg:nt("palette-warning-300"),solidHoverBg:nt("palette-warning-400"),solidActiveBg:nt("palette-warning-500")}),common:{white:"#FFF",black:"#09090D"},text:{primary:nt("palette-neutral-100"),secondary:nt("palette-neutral-300"),tertiary:nt("palette-neutral-400")},background:{body:nt("palette-neutral-900"),surface:nt("palette-common-black"),popup:nt("palette-neutral-800"),level1:nt("palette-neutral-800"),level2:nt("palette-neutral-700"),level3:nt("palette-neutral-600"),tooltip:nt("palette-neutral-600"),backdrop:`rgba(${et("palette-neutral-darkChannel",(0,i.n8)(tt.neutral[800]))} / 0.5)`},divider:`rgba(${et("palette-neutral-mainChannel",(0,i.n8)(tt.neutral[500]))} / 0.24)`,focusVisible:nt("palette-primary-500")},shadowRing:"0 0 #000",shadowChannel:"0 0 0"},it='-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',st=(0,r.Z)({body:`"Public Sans", ${et("fontFamily-fallback",it)}`,display:`"Public Sans", ${et("fontFamily-fallback",it)}`,code:"Source Code Pro,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",fallback:it},Ye.fontFamily),ut=(0,r.Z)({xs:200,sm:300,md:500,lg:600,xl:700,xl2:800,xl3:900},Ye.fontWeight),ct=(0,r.Z)({xs3:"0.5rem",xs2:"0.625rem",xs:"0.75rem",sm:"0.875rem",md:"1rem",lg:"1.125rem",xl:"1.25rem",xl2:"1.5rem",xl3:"1.875rem",xl4:"2.25rem",xl5:"3rem",xl6:"3.75rem",xl7:"4.5rem"},Ye.fontSize),dt=(0,r.Z)({sm:1.25,md:1.5,lg:1.7},Ye.lineHeight),ft=(0,r.Z)({sm:"-0.01em",md:"0.083em",lg:"0.125em"},Ye.letterSpacing),pt={colorSchemes:{light:at,dark:lt},fontSize:ct,fontFamily:st,fontWeight:ut,focus:{thickness:"2px",selector:`&.${(0,x.d6)("","focusVisible")}, &:focus-visible`,default:{outlineOffset:`var(--focus-outline-offset, ${et("focus-thickness",null!=(t=null==(n=Ye.focus)?void 0:n.thickness)?t:"2px")})`,outline:`${et("focus-thickness",null!=(l=null==(c=Ye.focus)?void 0:c.thickness)?l:"2px")} solid ${et("palette-focusVisible",tt.primary[500])}`}},lineHeight:dt,letterSpacing:ft,radius:{xs:"4px",sm:"8px",md:"12px",lg:"16px",xl:"20px"},shadow:{xs:`${et("shadowRing",null!=(d=null==(f=Ye.colorSchemes)||null==(p=f.light)?void 0:p.shadowRing)?d:at.shadowRing)}, 0 1px 2px 0 rgba(${et("shadowChannel",null!=(h=null==(g=Ye.colorSchemes)||null==(P=g.light)?void 0:P.shadowChannel)?h:at.shadowChannel)} / 0.12)`,sm:`${et("shadowRing",null!=(Z=null==(z=Ye.colorSchemes)||null==(I=z.light)?void 0:I.shadowRing)?Z:at.shadowRing)}, 0.3px 0.8px 1.1px rgba(${et("shadowChannel",null!=(D=null==(R=Ye.colorSchemes)||null==($=R.light)?void 0:$.shadowChannel)?D:at.shadowChannel)} / 0.11), 0.5px 1.3px 1.8px -0.6px rgba(${et("shadowChannel",null!=(T=null==(O=Ye.colorSchemes)||null==(_=O.light)?void 0:_.shadowChannel)?T:at.shadowChannel)} / 0.18), 1.1px 2.7px 3.8px -1.2px rgba(${et("shadowChannel",null!=(L=null==(B=Ye.colorSchemes)||null==(M=B.light)?void 0:M.shadowChannel)?L:at.shadowChannel)} / 0.26)`,md:`${et("shadowRing",null!=(A=null==(F=Ye.colorSchemes)||null==(N=F.light)?void 0:N.shadowRing)?A:at.shadowRing)}, 0.3px 0.8px 1.1px rgba(${et("shadowChannel",null!=(j=null==(H=Ye.colorSchemes)||null==(W=H.light)?void 0:W.shadowChannel)?j:at.shadowChannel)} / 0.12), 1.1px 2.8px 3.9px -0.4px rgba(${et("shadowChannel",null!=(V=null==(U=Ye.colorSchemes)||null==(K=U.light)?void 0:K.shadowChannel)?V:at.shadowChannel)} / 0.17), 2.4px 6.1px 8.6px -0.8px rgba(${et("shadowChannel",null!=(q=null==(J=Ye.colorSchemes)||null==(Q=J.light)?void 0:Q.shadowChannel)?q:at.shadowChannel)} / 0.23), 5.3px 13.3px 18.8px -1.2px rgba(${et("shadowChannel",null!=(G=null==(X=Ye.colorSchemes)||null==(Y=X.light)?void 0:Y.shadowChannel)?G:at.shadowChannel)} / 0.29)`,lg:`${et("shadowRing",null!=(ee=null==(te=Ye.colorSchemes)||null==(ne=te.light)?void 0:ne.shadowRing)?ee:at.shadowRing)}, 0.3px 0.8px 1.1px rgba(${et("shadowChannel",null!=(re=null==(oe=Ye.colorSchemes)||null==(ae=oe.light)?void 0:ae.shadowChannel)?re:at.shadowChannel)} / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(${et("shadowChannel",null!=(le=null==(ie=Ye.colorSchemes)||null==(se=ie.light)?void 0:se.shadowChannel)?le:at.shadowChannel)} / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(${et("shadowChannel",null!=(ue=null==(ce=Ye.colorSchemes)||null==(de=ce.light)?void 0:de.shadowChannel)?ue:at.shadowChannel)} / 0.16), 4.8px 12px 17px -0.5px rgba(${et("shadowChannel",null!=(fe=null==(pe=Ye.colorSchemes)||null==(he=pe.light)?void 0:he.shadowChannel)?fe:at.shadowChannel)} / 0.19), 7px 17.5px 24.7px -0.7px rgba(${et("shadowChannel",null!=(me=null==(ve=Ye.colorSchemes)||null==(ge=ve.light)?void 0:ge.shadowChannel)?me:at.shadowChannel)} / 0.21)`,xl:`${et("shadowRing",null!=(ye=null==(be=Ye.colorSchemes)||null==(we=be.light)?void 0:we.shadowRing)?ye:at.shadowRing)}, 0.3px 0.8px 1.1px rgba(${et("shadowChannel",null!=(xe=null==(Se=Ye.colorSchemes)||null==(Ce=Se.light)?void 0:Ce.shadowChannel)?xe:at.shadowChannel)} / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(${et("shadowChannel",null!=(ke=null==(Ee=Ye.colorSchemes)||null==(Pe=Ee.light)?void 0:Pe.shadowChannel)?ke:at.shadowChannel)} / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(${et("shadowChannel",null!=(Ze=null==(ze=Ye.colorSchemes)||null==(Ie=ze.light)?void 0:Ie.shadowChannel)?Ze:at.shadowChannel)} / 0.16), 4.8px 12px 17px -0.5px rgba(${et("shadowChannel",null!=(De=null==(Re=Ye.colorSchemes)||null==($e=Re.light)?void 0:$e.shadowChannel)?De:at.shadowChannel)} / 0.19), 7px 17.5px 24.7px -0.7px rgba(${et("shadowChannel",null!=(Te=null==(Oe=Ye.colorSchemes)||null==(_e=Oe.light)?void 0:_e.shadowChannel)?Te:at.shadowChannel)} / 0.21), 10.2px 25.5px 36px -0.9px rgba(${et("shadowChannel",null!=(Le=null==(Be=Ye.colorSchemes)||null==(Me=Be.light)?void 0:Me.shadowChannel)?Le:at.shadowChannel)} / 0.24), 14.8px 36.8px 52.1px -1.1px rgba(${et("shadowChannel",null!=(Ae=null==(Fe=Ye.colorSchemes)||null==(Ne=Fe.light)?void 0:Ne.shadowChannel)?Ae:at.shadowChannel)} / 0.27), 21px 52.3px 74px -1.2px rgba(${et("shadowChannel",null!=(je=null==(He=Ye.colorSchemes)||null==(We=He.light)?void 0:We.shadowChannel)?je:at.shadowChannel)} / 0.29)`},zIndex:{badge:1,table:10,popup:1e3,modal:1300,tooltip:1500},typography:{display1:{fontFamily:et("fontFamily-display",st.display),fontWeight:et("fontWeight-xl",ut.xl.toString()),fontSize:et("fontSize-xl7",ct.xl7),lineHeight:et("lineHeight-sm",dt.sm.toString()),letterSpacing:et("letterSpacing-sm",ft.sm),color:et("palette-text-primary",at.palette.text.primary)},display2:{fontFamily:et("fontFamily-display",st.display),fontWeight:et("fontWeight-xl",ut.xl.toString()),fontSize:et("fontSize-xl6",ct.xl6),lineHeight:et("lineHeight-sm",dt.sm.toString()),letterSpacing:et("letterSpacing-sm",ft.sm),color:et("palette-text-primary",at.palette.text.primary)},h1:{fontFamily:et("fontFamily-display",st.display),fontWeight:et("fontWeight-lg",ut.lg.toString()),fontSize:et("fontSize-xl5",ct.xl5),lineHeight:et("lineHeight-sm",dt.sm.toString()),letterSpacing:et("letterSpacing-sm",ft.sm),color:et("palette-text-primary",at.palette.text.primary)},h2:{fontFamily:et("fontFamily-display",st.display),fontWeight:et("fontWeight-lg",ut.lg.toString()),fontSize:et("fontSize-xl4",ct.xl4),lineHeight:et("lineHeight-sm",dt.sm.toString()),letterSpacing:et("letterSpacing-sm",ft.sm),color:et("palette-text-primary",at.palette.text.primary)},h3:{fontFamily:et("fontFamily-body",st.body),fontWeight:et("fontWeight-md",ut.md.toString()),fontSize:et("fontSize-xl3",ct.xl3),lineHeight:et("lineHeight-sm",dt.sm.toString()),color:et("palette-text-primary",at.palette.text.primary)},h4:{fontFamily:et("fontFamily-body",st.body),fontWeight:et("fontWeight-md",ut.md.toString()),fontSize:et("fontSize-xl2",ct.xl2),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-primary",at.palette.text.primary)},h5:{fontFamily:et("fontFamily-body",st.body),fontWeight:et("fontWeight-md",ut.md.toString()),fontSize:et("fontSize-xl",ct.xl),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-primary",at.palette.text.primary)},h6:{fontFamily:et("fontFamily-body",st.body),fontWeight:et("fontWeight-md",ut.md.toString()),fontSize:et("fontSize-lg",ct.lg),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-primary",at.palette.text.primary)},body1:{fontFamily:et("fontFamily-body",st.body),fontSize:et("fontSize-md",ct.md),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-primary",at.palette.text.primary)},body2:{fontFamily:et("fontFamily-body",st.body),fontSize:et("fontSize-sm",ct.sm),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-secondary",at.palette.text.secondary)},body3:{fontFamily:et("fontFamily-body",st.body),fontSize:et("fontSize-xs",ct.xs),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-tertiary",at.palette.text.tertiary)},body4:{fontFamily:et("fontFamily-body",st.body),fontSize:et("fontSize-xs2",ct.xs2),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-tertiary",at.palette.text.tertiary)},body5:{fontFamily:et("fontFamily-body",st.body),fontSize:et("fontSize-xs3",ct.xs3),lineHeight:et("lineHeight-md",dt.md.toString()),color:et("palette-text-tertiary",at.palette.text.tertiary)}}},ht=Ye?(0,a.Z)(pt,Ye):pt,{colorSchemes:mt}=ht,vt=(0,o.Z)(ht,k),gt=(0,r.Z)({colorSchemes:mt},vt,{breakpoints:(0,s.Z)(null!=Ke?Ke:{}),components:(0,a.Z)({MuiSvgIcon:{defaultProps:{fontSize:"xl"},styleOverrides:{root:({ownerState:e,theme:t})=>{var n;const o=e.instanceFontSize;return(0,r.Z)({color:"var(--Icon-color)",margin:"var(--Icon-margin)"},e.fontSize&&"inherit"!==e.fontSize&&{fontSize:`var(--Icon-fontSize, ${t.vars.fontSize[e.fontSize]})`},e.color&&"inherit"!==e.color&&"context"!==e.color&&t.vars.palette[e.color]&&{color:`rgba(${null==(n=t.vars.palette[e.color])?void 0:n.mainChannel} / 1)`},"context"===e.color&&{color:t.vars.palette.text.secondary},o&&"inherit"!==o&&{"--Icon-fontSize":t.vars.fontSize[o]})}}}},Je),cssVarPrefix:Ue,getCssVar:et,spacing:(0,u.Z)(qe),colorInversionConfig:{soft:["plain","outlined","soft","solid"],solid:["plain","outlined","soft","solid"]}});Object.entries(gt.colorSchemes).forEach((([e,t])=>{!function(e,t){Object.keys(t).forEach((n=>{const r={main:"500",light:"200",dark:"800"};"dark"===e&&(r.main=400),!t[n].mainChannel&&t[n][r.main]&&(t[n].mainChannel=(0,i.n8)(t[n][r.main])),!t[n].lightChannel&&t[n][r.light]&&(t[n].lightChannel=(0,i.n8)(t[n][r.light])),!t[n].darkChannel&&t[n][r.dark]&&(t[n].darkChannel=(0,i.n8)(t[n][r.dark]))}))}(e,t.palette)}));const yt={prefix:Ue,shouldSkipGeneratingVar:Xe},{vars:bt,generateCssVars:wt}=m((0,r.Z)({colorSchemes:mt},vt),yt);gt.vars=bt,gt.generateCssVars=wt,gt.unstable_sxConfig=(0,r.Z)({},y,null==e?void 0:e.unstable_sxConfig),gt.unstable_sx=function(e){return(0,v.Z)({sx:e,theme:this})},gt.getColorSchemeSelector=e=>"light"===e?"&":`&[data-joy-color-scheme="${e}"], [data-joy-color-scheme="${e}"] &`;const xt={getCssVar:et,palette:gt.colorSchemes.light.palette};return gt.variants=(0,a.Z)({plain:(0,S.Zm)("plain",xt),plainHover:(0,S.Zm)("plainHover",xt),plainActive:(0,S.Zm)("plainActive",xt),plainDisabled:(0,S.Zm)("plainDisabled",xt),outlined:(0,S.Zm)("outlined",xt),outlinedHover:(0,S.Zm)("outlinedHover",xt),outlinedActive:(0,S.Zm)("outlinedActive",xt),outlinedDisabled:(0,S.Zm)("outlinedDisabled",xt),soft:(0,S.Zm)("soft",xt),softHover:(0,S.Zm)("softHover",xt),softActive:(0,S.Zm)("softActive",xt),softDisabled:(0,S.Zm)("softDisabled",xt),solid:(0,S.Zm)("solid",xt),solidHover:(0,S.Zm)("solidHover",xt),solidActive:(0,S.Zm)("solidActive",xt),solidDisabled:(0,S.Zm)("solidDisabled",xt)},Qe),gt.palette=(0,r.Z)({},gt.colorSchemes.light.palette,{colorScheme:"light"}),gt.shouldSkipGeneratingVar=Xe,gt.colorInversion="function"==typeof Ge?Ge:(0,a.Z)({soft:(0,S.pP)(gt,!0),solid:(0,S.Lo)(gt,!0)},Ge||{},{clone:!1}),gt}},9082:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ColorInversionProvider:()=>B.do,CssVarsProvider:()=>z,StyledEngineProvider:()=>F,ThemeProvider:()=>_,createGetCssVar:()=>T.N,extendTheme:()=>T.Z,getInitColorSchemeScript:()=>D,shouldSkipGeneratingVar:()=>R.Z,styled:()=>$.Z,useColorInversion:()=>B.VT,useColorScheme:()=>I,useTheme:()=>O,useThemeProps:()=>L.Z});var r=n(9766),o=n(7462),a=n(3366),l=n(1387),i=n(7294),s=n(1234),u=n(6760),c=n(4819);const d="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var f=n(5893);const p=function(e){const{children:t,theme:n}=e,r=(0,u.Z)(),a=i.useMemo((()=>{const e=null===r?n:function(e,t){return"function"==typeof t?t(e):(0,o.Z)({},e,t)}(r,n);return null!=e&&(e[d]=null!==r),e}),[n,r]);return(0,f.jsx)(c.Z.Provider,{value:a,children:t})};var h=n(2443),m=n(6631);const v={};function g(e){const t=(0,m.Z)();return(0,f.jsx)(h.T.Provider,{value:"object"==typeof t?t:v,children:e.children})}const y=function(e){const{children:t,theme:n}=e;return(0,f.jsx)(p,{theme:n,children:(0,f.jsx)(g,{children:t})})},b="mode",w="color-scheme",x="data-color-scheme";function S(e){if("undefined"!=typeof window&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function C(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}function k(e,t){if("undefined"==typeof window)return;let n;try{n=localStorage.getItem(e)||void 0,n||localStorage.setItem(e,t)}catch(e){}return n||t}const E=["colorSchemes","components","generateCssVars","cssVarPrefix"];var P=n(1812),Z=n(3951);const{CssVarsProvider:z,useColorScheme:I,getInitColorSchemeScript:D}=function(e){const{theme:t={},attribute:n=x,modeStorageKey:c=b,colorSchemeStorageKey:d=w,defaultMode:p="light",defaultColorScheme:h,disableTransitionOnChange:m=!1,resolveTheme:v,excludeVariablesFromRoot:g}=e;(!t.colorSchemes||"string"==typeof h&&!t.colorSchemes[h]||"object"==typeof h&&!t.colorSchemes[null==h?void 0:h.light]||"object"==typeof h&&!t.colorSchemes[null==h?void 0:h.dark])&&console.error(`MUI: \`${h}\` does not exist in \`theme.colorSchemes\`.`);const P=i.createContext(void 0),Z="string"==typeof h?h:h.light,z="string"==typeof h?h:h.dark;return{CssVarsProvider:function({children:e,theme:l=t,modeStorageKey:x=c,colorSchemeStorageKey:Z=d,attribute:z=n,defaultMode:I=p,defaultColorScheme:D=h,disableTransitionOnChange:R=m,storageWindow:$=("undefined"==typeof window?void 0:window),documentNode:T=("undefined"==typeof document?void 0:document),colorSchemeNode:O=("undefined"==typeof document?void 0:document.documentElement),colorSchemeSelector:_=":root",disableNestedContext:L=!1,disableStyleSheetGeneration:B=!1}){const M=i.useRef(!1),A=(0,u.Z)(),F=i.useContext(P),N=!!F&&!L,{colorSchemes:j={},components:H={},generateCssVars:W=(()=>({vars:{},css:{}})),cssVarPrefix:V}=l,U=(0,a.Z)(l,E),K=Object.keys(j),q="string"==typeof D?D:D.light,J="string"==typeof D?D:D.dark,{mode:Q,setMode:G,systemMode:X,lightColorScheme:Y,darkColorScheme:ee,colorScheme:te,setColorScheme:ne}=function(e){const{defaultMode:t="light",defaultLightColorScheme:n,defaultDarkColorScheme:r,supportedColorSchemes:a=[],modeStorageKey:l=b,colorSchemeStorageKey:s=w,storageWindow:u=("undefined"==typeof window?void 0:window)}=e,c=a.join(","),[d,f]=i.useState((()=>{const e=k(l,t),o=k(`${s}-light`,n),a=k(`${s}-dark`,r);return{mode:e,systemMode:S(e),lightColorScheme:o,darkColorScheme:a}})),p=function(e){return C(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(d),h=i.useCallback((e=>{f((n=>{if(e===n.mode)return n;const r=e||t;try{localStorage.setItem(l,r)}catch(e){}return(0,o.Z)({},n,{mode:r,systemMode:S(r)})}))}),[l,t]),m=i.useCallback((e=>{e?"string"==typeof e?e&&!c.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):f((t=>{const n=(0,o.Z)({},t);return C(t,(t=>{try{localStorage.setItem(`${s}-${t}`,e)}catch(e){}"light"===t&&(n.lightColorScheme=e),"dark"===t&&(n.darkColorScheme=e)})),n})):f((t=>{const a=(0,o.Z)({},t),l=null===e.light?n:e.light,i=null===e.dark?r:e.dark;if(l)if(c.includes(l)){a.lightColorScheme=l;try{localStorage.setItem(`${s}-light`,l)}catch(e){}}else console.error(`\`${l}\` does not exist in \`theme.colorSchemes\`.`);if(i)if(c.includes(i)){a.darkColorScheme=i;try{localStorage.setItem(`${s}-dark`,i)}catch(e){}}else console.error(`\`${i}\` does not exist in \`theme.colorSchemes\`.`);return a})):f((e=>{try{localStorage.setItem(`${s}-light`,n),localStorage.setItem(`${s}-dark`,r)}catch(e){}return(0,o.Z)({},e,{lightColorScheme:n,darkColorScheme:r})}))}),[c,s,n,r]),v=i.useCallback((e=>{"system"===d.mode&&f((t=>(0,o.Z)({},t,{systemMode:null!=e&&e.matches?"dark":"light"})))}),[d.mode]),g=i.useRef(v);return g.current=v,i.useEffect((()=>{const e=(...e)=>g.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>t.removeListener(e)}),[]),i.useEffect((()=>{const e=e=>{const n=e.newValue;"string"!=typeof e.key||!e.key.startsWith(s)||n&&!c.match(n)||(e.key.endsWith("light")&&m({light:n}),e.key.endsWith("dark")&&m({dark:n})),e.key!==l||n&&!["light","dark","system"].includes(n)||h(n||t)};if(u)return u.addEventListener("storage",e),()=>u.removeEventListener("storage",e)}),[m,h,l,s,c,t,u]),(0,o.Z)({},d,{colorScheme:p,setMode:h,setColorScheme:m})}({supportedColorSchemes:K,defaultLightColorScheme:q,defaultDarkColorScheme:J,modeStorageKey:x,colorSchemeStorageKey:Z,defaultMode:I,storageWindow:$});let re=Q,oe=te;N&&(re=F.mode,oe=F.colorScheme);const ae=oe||("dark"===(re||("system"===I?p:I))?J:q),{css:le,vars:ie}=W(),se=(0,o.Z)({},U,{components:H,colorSchemes:j,cssVarPrefix:V,vars:ie,getColorSchemeSelector:e=>`[${z}="${e}"] &`}),ue={},ce={};Object.entries(j).forEach((([e,t])=>{const{css:n,vars:a}=W(e);if(se.vars=(0,r.Z)(se.vars,a),e===ae&&(Object.keys(t).forEach((e=>{t[e]&&"object"==typeof t[e]?se[e]=(0,o.Z)({},se[e],t[e]):se[e]=t[e]})),se.palette&&(se.palette.colorScheme=e)),e===("string"==typeof D?D:"dark"===I?D.dark:D.light)){if(g){const t={};g(V).forEach((e=>{t[e]=n[e],delete n[e]})),ue[`[${z}="${e}"]`]=t}ue[`${_}, [${z}="${e}"]`]=n}else ce[`${":root"===_?"":_}[${z}="${e}"]`]=n})),se.vars=(0,r.Z)(se.vars,ie),i.useEffect((()=>{oe&&O&&O.setAttribute(z,oe)}),[oe,z,O]),i.useEffect((()=>{let e;if(R&&M.current&&T){const t=T.createElement("style");t.appendChild(T.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),T.head.appendChild(t),window.getComputedStyle(T.body),e=setTimeout((()=>{T.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[oe,R,T]),i.useEffect((()=>(M.current=!0,()=>{M.current=!1})),[]);const de=i.useMemo((()=>({mode:re,systemMode:X,setMode:G,lightColorScheme:Y,darkColorScheme:ee,colorScheme:oe,setColorScheme:ne,allColorSchemes:K})),[K,oe,ee,Y,re,ne,G,X]);let fe=!0;(B||N&&(null==A?void 0:A.cssVarPrefix)===V)&&(fe=!1);const pe=(0,f.jsxs)(i.Fragment,{children:[fe&&(0,f.jsxs)(i.Fragment,{children:[(0,f.jsx)(s.Z,{styles:{[_]:le}}),(0,f.jsx)(s.Z,{styles:ue}),(0,f.jsx)(s.Z,{styles:ce})]}),(0,f.jsx)(y,{theme:v?v(se):se,children:e})]});return N?pe:(0,f.jsx)(P.Provider,{value:de,children:pe})},useColorScheme:()=>{const e=i.useContext(P);if(!e)throw new Error((0,l.Z)(19));return e},getInitColorSchemeScript:e=>function(e){const{defaultMode:t="light",defaultLightColorScheme:n="light",defaultDarkColorScheme:r="dark",modeStorageKey:o=b,colorSchemeStorageKey:a=w,attribute:l=x,colorSchemeNode:i="document.documentElement"}=e||{};return(0,f.jsx)("script",{dangerouslySetInnerHTML:{__html:`(function() { try {\n        var mode = localStorage.getItem('${o}') || '${t}';\n        var cssColorScheme = mode;\n        var colorScheme = '';\n        if (mode === 'system') {\n          // handle system mode\n          var mql = window.matchMedia('(prefers-color-scheme: dark)');\n          if (mql.matches) {\n            cssColorScheme = 'dark';\n            colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n          } else {\n            cssColorScheme = 'light';\n            colorScheme = localStorage.getItem('${a}-light') || '${n}';\n          }\n        }\n        if (mode === 'light') {\n          colorScheme = localStorage.getItem('${a}-light') || '${n}';\n        }\n        if (mode === 'dark') {\n          colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n        }\n        if (colorScheme) {\n          ${i}.setAttribute('${l}', colorScheme);\n        }\n      } catch (e) {} })();`}},"mui-color-scheme-init")}((0,o.Z)({attribute:n,colorSchemeStorageKey:d,defaultMode:p,defaultLightColorScheme:Z,defaultDarkColorScheme:z,modeStorageKey:c},e))}}({theme:P.Z,attribute:"data-joy-color-scheme",modeStorageKey:"joy-mode",colorSchemeStorageKey:"joy-color-scheme",defaultColorScheme:{light:"light",dark:"dark"},resolveTheme:e=>{const t=e.colorInversion;return e.colorInversion=(0,r.Z)({soft:(0,Z.pP)(e),solid:(0,Z.Lo)(e)},"function"==typeof t?t(e):t,{clone:!1}),e}});var R=n(6776),$=n(4312),T=n(3801);const O=()=>(0,m.Z)(P.Z);function _({children:e,theme:t}){return(0,f.jsx)(y,{theme:t?(0,T.Z)(t):P.Z,children:e})}var L=n(407),B=n(8653),M=n(6751);let A;function F(e){const{injectFirst:t,children:n}=e;return t&&A?(0,f.jsx)(h.C,{value:A,children:n}):n}"object"==typeof document&&(A=(0,M.Z)({key:"css",prepend:!0}))},6776:(e,t,n)=>{"use strict";function r(e){var t;return!!e[0].match(/^(typography|variants|breakpoints|colorInversion|colorInversionConfig)$/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!(null==(t=e[1])||!t.match(/^(mode)$/))||"focus"===e[0]&&"thickness"!==e[1]}n.d(t,{Z:()=>r})},8859:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7462);const o=({theme:e,ownerState:t},n,o)=>{let a,l={};if(t.sx){!function t(n){"function"==typeof n?t(n(e)):Array.isArray(n)?n.forEach((e=>{"boolean"!=typeof e&&t(e)})):"object"==typeof n&&(l=(0,r.Z)({},l,n))}(t.sx);const o=l[n];if("string"==typeof o||"number"==typeof o)if("borderRadius"===n){var i;if("number"==typeof o)return`${o}px`;a=(null==(i=e.vars)?void 0:i.radius[o])||o}else a=o;"function"==typeof o&&(a=o(e))}return a||o}},4312:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(2807),o=n(1812);const a=(0,r.ZP)({defaultTheme:o.Z})},407:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7462),o=n(8805),a=n(1812);function l({props:e,name:t}){return(0,o.Z)({props:e,name:t,defaultTheme:(0,r.Z)({},a.Z,{components:{}})})}},3951:(e,t,n)=>{"use strict";n.d(t,{Lo:()=>c,Zm:()=>s,pP:()=>u});var r=n(7462),o=n(159);const a=e=>e&&"object"==typeof e&&Object.keys(e).some((e=>{var t;return null==(t=e.match)?void 0:t.call(e,/^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/)})),l=(e,t,n)=>{const r={};return Object.entries(t||{}).forEach((([t,o])=>{if(t.match(new RegExp(`${e}(color|bg|border)`,"i"))&&o){const e=n?n(t):o;t.includes("Disabled")&&(r.pointerEvents="none",r.cursor="default"),t.match(/(Hover|Active|Disabled)/)||(r["--variant-borderWidth"]||(r["--variant-borderWidth"]="0px"),t.includes("Border")&&(r["--variant-borderWidth"]="1px",r.border="var(--variant-borderWidth) solid")),((e,t,n)=>{t.includes("Color")&&(e.color=n),t.includes("Bg")&&(e.backgroundColor=n),t.includes("Border")&&(e.borderColor=n)})(r,t,e)}})),r},i=e=>t=>`--${e?`${e}-`:""}${t.replace(/^--/,"")}`,s=(e,t)=>{let n={};if(t){const{getCssVar:o,palette:i}=t;Object.entries(i).forEach((t=>{const[s,u]=t;a(u)&&"object"==typeof u&&(n=(0,r.Z)({},n,{[s]:l(e,u,(e=>o(`palette-${s}-${e}`,i[s][e])))}))}))}return n.context=l(e,{plainColor:"var(--variant-plainColor)",plainHoverColor:"var(--variant-plainHoverColor)",plainHoverBg:"var(--variant-plainHoverBg)",plainActiveBg:"var(--variant-plainActiveBg)",plainDisabledColor:"var(--variant-plainDisabledColor)",outlinedColor:"var(--variant-outlinedColor)",outlinedBorder:"var(--variant-outlinedBorder)",outlinedHoverColor:"var(--variant-outlinedHoverColor)",outlinedHoverBorder:"var(--variant-outlinedHoverBorder)",outlinedHoverBg:"var(--variant-outlinedHoverBg)",outlinedActiveBg:"var(--variant-outlinedActiveBg)",outlinedDisabledColor:"var(--variant-outlinedDisabledColor)",outlinedDisabledBorder:"var(--variant-outlinedDisabledBorder)",softColor:"var(--variant-softColor)",softBg:"var(--variant-softBg)",softHoverColor:"var(--variant-softHoverColor)",softHoverBg:"var(--variant-softHoverBg)",softActiveBg:"var(--variant-softActiveBg)",softDisabledColor:"var(--variant-softDisabledColor)",softDisabledBg:"var(--variant-softDisabledBg)",solidColor:"var(--variant-solidColor)",solidBg:"var(--variant-solidBg)",solidHoverColor:"var(--variant-solidHoverColor)",solidHoverBg:"var(--variant-solidHoverBg)",solidActiveBg:"var(--variant-solidActiveBg)",solidDisabledColor:"var(--variant-solidDisabledColor)",solidDisabledBg:"var(--variant-solidDisabledBg)"}),n},u=(e,t)=>{const n=(0,o.Z)(e.cssVarPrefix),r=i(e.cssVarPrefix),l={},s=t?t=>{var r,o;const a=t.split("-"),l=a[1],i=a[2];return n(t,null==(r=e.palette)||null==(o=r[l])?void 0:o[i])}:n;return Object.entries(e.palette).forEach((t=>{const[n,o]=t;a(o)&&(l[n]={"--Badge-ringColor":s(`palette-${n}-softBg`),[r("--shadowChannel")]:s(`palette-${n}-darkChannel`),[e.getColorSchemeSelector("dark")]:{[r("--palette-focusVisible")]:s(`palette-${n}-300`),[r("--palette-background-body")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.1)`,[r("--palette-background-surface")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.08)`,[r("--palette-background-level1")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.4)`,[r("--palette-background-level3")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.6)`,[r("--palette-text-primary")]:s(`palette-${n}-100`),[r("--palette-text-secondary")]:`rgba(${s(`palette-${n}-lightChannel`)} / 0.72)`,[r("--palette-text-tertiary")]:`rgba(${s(`palette-${n}-lightChannel`)} / 0.6)`,[r("--palette-divider")]:`rgba(${s(`palette-${n}-lightChannel`)} / 0.2)`,"--variant-plainColor":`rgba(${s(`palette-${n}-lightChannel`)} / 1)`,"--variant-plainHoverColor":s(`palette-${n}-50`),"--variant-plainHoverBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.16)`,"--variant-plainActiveBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-outlinedColor":`rgba(${s(`palette-${n}-lightChannel`)} / 1)`,"--variant-outlinedHoverColor":s(`palette-${n}-50`),"--variant-outlinedBg":"initial","--variant-outlinedBorder":`rgba(${s(`palette-${n}-mainChannel`)} / 0.4)`,"--variant-outlinedHoverBorder":s(`palette-${n}-600`),"--variant-outlinedHoverBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.16)`,"--variant-outlinedActiveBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":`rgba(${s(`palette-${n}-mainChannel`)} / 0.2)`,"--variant-softColor":s(`palette-${n}-100`),"--variant-softBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-softHoverColor":"#fff","--variant-softHoverBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-softActiveBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.48)`,"--variant-softDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-solidColor":"#fff","--variant-solidBg":s(`palette-${n}-500`),"--variant-solidHoverColor":"#fff","--variant-solidHoverBg":s(`palette-${n}-400`),"--variant-solidActiveBg":s(`palette-${n}-400`),"--variant-solidDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.12)`},[e.getColorSchemeSelector("light")]:{[r("--palette-focusVisible")]:s(`palette-${n}-500`),[r("--palette-background-body")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.1)`,[r("--palette-background-surface")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.08)`,[r("--palette-background-level1")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.32)`,[r("--palette-background-level3")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.48)`,[r("--palette-text-primary")]:s(`palette-${n}-700`),[r("--palette-text-secondary")]:`rgba(${s(`palette-${n}-darkChannel`)} / 0.8)`,[r("--palette-text-tertiary")]:`rgba(${s(`palette-${n}-darkChannel`)} / 0.68)`,[r("--palette-divider")]:`rgba(${s(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-plainColor":`rgba(${s(`palette-${n}-mainChannel`)} / 1)`,"--variant-plainHoverColor":s(`palette-${n}-600`),"--variant-plainHoverBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-plainDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-outlinedColor":`rgba(${s(`palette-${n}-mainChannel`)} / 1)`,"--variant-outlinedBorder":`rgba(${s(`palette-${n}-mainChannel`)} / 0.4)`,"--variant-outlinedHoverColor":s(`palette-${n}-600`),"--variant-outlinedHoverBorder":s(`palette-${n}-300`),"--variant-outlinedHoverBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-outlinedDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-outlinedDisabledBorder":`rgba(${s(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-softColor":s(`palette-${n}-600`),"--variant-softBg":`rgba(${s(`palette-${n}-lightChannel`)} / 0.72)`,"--variant-softHoverColor":s(`palette-${n}-700`),"--variant-softHoverBg":s(`palette-${n}-200`),"--variant-softActiveBg":s(`palette-${n}-300`),"--variant-softDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-softDisabledBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.08)`,"--variant-solidColor":s("palette-common-white"),"--variant-solidBg":s(`palette-${n}-600`),"--variant-solidHoverColor":s("palette-common-white"),"--variant-solidHoverBg":s(`palette-${n}-500`),"--variant-solidActiveBg":s(`palette-${n}-500`),"--variant-solidDisabledColor":`rgba(${s(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-solidDisabledBg":`rgba(${s(`palette-${n}-mainChannel`)} / 0.08)`}})})),l},c=(e,t)=>{const n=(0,o.Z)(e.cssVarPrefix),r=i(e.cssVarPrefix),l={},s=t?t=>{const r=t.split("-"),o=r[1],a=r[2];return n(t,e.palette[o][a])}:n;return Object.entries(e.palette).forEach((e=>{const[t,n]=e;a(n)&&("warning"===t?l.warning={"--Badge-ringColor":s(`palette-${t}-solidBg`),[r("--shadowChannel")]:s(`palette-${t}-darkChannel`),[r("--palette-focusVisible")]:s(`palette-${t}-700`),[r("--palette-background-body")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.16)`,[r("--palette-background-surface")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.1)`,[r("--palette-background-popup")]:s(`palette-${t}-100`),[r("--palette-background-level1")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.36)`,[r("--palette-background-level3")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.6)`,[r("--palette-text-primary")]:s(`palette-${t}-900`),[r("--palette-text-secondary")]:s(`palette-${t}-700`),[r("--palette-text-tertiary")]:s(`palette-${t}-500`),[r("--palette-divider")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.2)`,"--variant-plainColor":s(`palette-${t}-700`),"--variant-plainHoverColor":s(`palette-${t}-800`),"--variant-plainHoverBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${s(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-outlinedColor":s(`palette-${t}-700`),"--variant-outlinedBorder":`rgba(${s(`palette-${t}-mainChannel`)} / 0.5)`,"--variant-outlinedHoverColor":s(`palette-${t}-800`),"--variant-outlinedHoverBorder":`rgba(${s(`palette-${t}-mainChannel`)} / 0.6)`,"--variant-outlinedHoverBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${s(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":`rgba(${s(`palette-${t}-mainChannel`)} / 0.2)`,"--variant-softColor":s(`palette-${t}-800`),"--variant-softHoverColor":s(`palette-${t}-900`),"--variant-softBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.2)`,"--variant-softHoverBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.28)`,"--variant-softActiveBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-softDisabledColor":`rgba(${s(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.08)`,"--variant-solidColor":"#fff","--variant-solidBg":s(`palette-${t}-600`),"--variant-solidHoverColor":"#fff","--variant-solidHoverBg":s(`palette-${t}-700`),"--variant-solidActiveBg":s(`palette-${t}-800`),"--variant-solidDisabledColor":`rgba(${s(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${s(`palette-${t}-mainChannel`)} / 0.08)`}:l[t]={colorScheme:"dark","--Badge-ringColor":s(`palette-${t}-solidBg`),[r("--shadowChannel")]:s(`palette-${t}-darkChannel`),[r("--palette-focusVisible")]:s(`palette-${t}-200`),[r("--palette-background-body")]:"rgba(0 0 0 / 0.1)",[r("--palette-background-surface")]:"rgba(0 0 0 / 0.06)",[r("--palette-background-popup")]:s(`palette-${t}-700`),[r("--palette-background-level1")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.36)`,[r("--palette-background-level3")]:`rgba(${s(`palette-${t}-darkChannel`)} / 0.6)`,[r("--palette-text-primary")]:s("palette-common-white"),[r("--palette-text-secondary")]:s(`palette-${t}-100`),[r("--palette-text-tertiary")]:s(`palette-${t}-200`),[r("--palette-divider")]:`rgba(${s(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-plainColor":s(`palette-${t}-50`),"--variant-plainHoverColor":"#fff","--variant-plainHoverBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${s(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-outlinedColor":s(`palette-${t}-50`),"--variant-outlinedBorder":`rgba(${s(`palette-${t}-lightChannel`)} / 0.5)`,"--variant-outlinedHoverColor":"#fff","--variant-outlinedHoverBorder":s(`palette-${t}-300`),"--variant-outlinedHoverBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${s(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":"rgba(255 255 255 / 0.2)","--variant-softColor":s("palette-common-white"),"--variant-softHoverColor":s("palette-common-white"),"--variant-softBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.24)`,"--variant-softHoverBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.36)`,"--variant-softActiveBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.16)`,"--variant-softDisabledColor":`rgba(${s(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.1)`,"--variant-solidColor":s(`palette-${t}-${"neutral"===t?"600":"500"}`),"--variant-solidBg":s("palette-common-white"),"--variant-solidHoverColor":s(`palette-${t}-700`),"--variant-solidHoverBg":s("palette-common-white"),"--variant-solidActiveBg":s(`palette-${t}-200`),"--variant-solidDisabledColor":`rgba(${s(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${s(`palette-${t}-lightChannel`)} / 0.1)`})})),l}},220:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7462),o=n(3366),a=n(67),l=n(1276),i=n(9585),s=n(3474),u=n(8653);const c=["className","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps"],d=["component","slots","slotProps"],f=["component"],p=["disableColorInversion"];function h(e,t){const{className:n,elementType:h,ownerState:m,externalForwardedProps:v,getSlotOwnerState:g,internalForwardedProps:y}=t,b=(0,o.Z)(t,c),{component:w,slots:x={[e]:void 0},slotProps:S={[e]:void 0}}=v,C=(0,o.Z)(v,d),k=x[e]||h,E=(0,l.Z)(S[e],m),P=(0,i.Z)((0,r.Z)({className:n},b,{externalForwardedProps:"root"===e?C:void 0,externalSlotProps:E})),{props:{component:Z},internalRef:z}=P,I=(0,o.Z)(P.props,f),D=(0,a.Z)(z,null==E?void 0:E.ref,t.ref),R=g?g(I):{},{disableColorInversion:$=!1}=R,T=(0,o.Z)(R,p),O=(0,r.Z)({},m,T),{getColor:_}=(0,u.VT)(O.variant);var L;"root"===e?O.color=null!=(L=I.color)?L:m.color:$||(O.color=_(I.color,O.color));const B="root"===e?Z||w:Z,M=(0,s.Z)(k,(0,r.Z)({},"root"===e&&!w&&!x[e]&&y,"root"!==e&&!x[e]&&y,I,B&&{as:B},{ref:D}),O);return Object.keys(T).forEach((e=>{delete M[e]})),[k,M]}},5688:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>o,createChainedFunction:()=>a,createSvgIcon:()=>te,debounce:()=>ne,deprecatedPropType:()=>re,isMuiElement:()=>oe,ownerDocument:()=>ae,ownerWindow:()=>le,requirePropFactory:()=>ie,setRef:()=>se,unstable_ClassNameGenerator:()=>ve,unstable_useEnhancedEffect:()=>ue,unstable_useId:()=>ce,unsupportedProp:()=>de,useControlled:()=>fe,useEventCallback:()=>pe,useForkRef:()=>he,useIsFocusVisible:()=>me});var r=n(7078);const o=n(8320).Z,a=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};var l=n(7462),i=n(7294),s=n(3366),u=n(6010),c=n(4780),d=n(8805),f=n(1387),p=n(9766),h=n(2161),m=n(8010),v=n(6523),g=n(1796);const y={black:"#000",white:"#fff"},b={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},w={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},x={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},S={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},C={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},k={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},E={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},P=["mode","contrastThreshold","tonalOffset"],Z={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:y.white,default:y.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},z={text:{primary:y.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:y.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function I(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,g.$n)(e.main,o):"dark"===t&&(e.dark=(0,g._j)(e.main,a)))}const D=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],R={textTransform:"uppercase"},$='"Roboto", "Helvetica", "Arial", sans-serif';function T(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=$,fontSize:o=14,fontWeightLight:a=300,fontWeightRegular:i=400,fontWeightMedium:u=500,fontWeightBold:c=700,htmlFontSize:d=16,allVariants:f,pxToRem:h}=n,m=(0,s.Z)(n,D),v=o/14,g=h||(e=>e/d*v+"rem"),y=(e,t,n,o,a)=>{return(0,l.Z)({fontFamily:r,fontWeight:e,fontSize:g(t),lineHeight:n},r===$?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},a,f);var i},b={h1:y(a,96,1.167,-1.5),h2:y(a,60,1.2,-.5),h3:y(i,48,1.167,0),h4:y(i,34,1.235,.25),h5:y(i,24,1.334,0),h6:y(u,20,1.6,.15),subtitle1:y(i,16,1.75,.15),subtitle2:y(u,14,1.57,.1),body1:y(i,16,1.5,.15),body2:y(i,14,1.43,.15),button:y(u,14,1.75,.4,R),caption:y(i,12,1.66,.4),overline:y(i,12,2.66,1,R),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,p.Z)((0,l.Z)({htmlFontSize:d,pxToRem:g,fontFamily:r,fontSize:o,fontWeightLight:a,fontWeightRegular:i,fontWeightMedium:u,fontWeightBold:c},b),m,{clone:!1})}function O(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const _=["none",O(0,2,1,-1,0,1,1,0,0,1,3,0),O(0,3,1,-2,0,2,2,0,0,1,5,0),O(0,3,3,-2,0,3,4,0,0,1,8,0),O(0,2,4,-1,0,4,5,0,0,1,10,0),O(0,3,5,-1,0,5,8,0,0,1,14,0),O(0,3,5,-1,0,6,10,0,0,1,18,0),O(0,4,5,-2,0,7,10,1,0,2,16,1),O(0,5,5,-3,0,8,10,1,0,3,14,2),O(0,5,6,-3,0,9,12,1,0,3,16,2),O(0,6,6,-3,0,10,14,1,0,4,18,3),O(0,6,7,-4,0,11,15,1,0,4,20,3),O(0,7,8,-4,0,12,17,2,0,5,22,4),O(0,7,8,-4,0,13,19,2,0,5,24,4),O(0,7,9,-4,0,14,21,2,0,5,26,4),O(0,8,9,-5,0,15,22,2,0,6,28,5),O(0,8,10,-5,0,16,24,2,0,6,30,5),O(0,8,11,-5,0,17,26,2,0,6,32,5),O(0,9,11,-5,0,18,28,2,0,7,34,6),O(0,9,12,-6,0,19,29,2,0,7,36,6),O(0,10,13,-6,0,20,31,3,0,8,38,7),O(0,10,13,-6,0,21,33,3,0,8,40,7),O(0,10,14,-6,0,22,35,3,0,8,42,7),O(0,11,14,-7,0,23,36,3,0,9,44,8),O(0,11,15,-7,0,24,38,3,0,9,46,8)],L=["duration","easing","delay"],B={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},M={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function A(e){return`${Math.round(e)}ms`}function F(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function N(e){const t=(0,l.Z)({},B,e.easing),n=(0,l.Z)({},M,e.duration);return(0,l.Z)({getAutoHeightDuration:F,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:l=0}=r;return(0,s.Z)(r,L),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:A(o)} ${a} ${"string"==typeof l?l:A(l)}`)).join(",")}},e,{easing:t,duration:n})}const j={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},H=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const W=function(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:a={}}=e,i=(0,s.Z)(e,H);if(e.vars)throw new Error((0,f.Z)(18));const u=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=(0,s.Z)(e,P),a=e.primary||function(e="light"){return"dark"===e?{main:C[200],light:C[50],dark:C[400]}:{main:C[700],light:C[400],dark:C[800]}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:w[200],light:w[50],dark:w[400]}:{main:w[500],light:w[300],dark:w[700]}}(t),u=e.error||function(e="light"){return"dark"===e?{main:x[500],light:x[300],dark:x[700]}:{main:x[700],light:x[400],dark:x[800]}}(t),c=e.info||function(e="light"){return"dark"===e?{main:k[400],light:k[300],dark:k[700]}:{main:k[700],light:k[500],dark:k[900]}}(t),d=e.success||function(e="light"){return"dark"===e?{main:E[400],light:E[300],dark:E[700]}:{main:E[800],light:E[500],dark:E[900]}}(t),h=e.warning||function(e="light"){return"dark"===e?{main:S[400],light:S[300],dark:S[700]}:{main:"#ed6c02",light:S[500],dark:S[900]}}(t);function m(e){return(0,g.mi)(e,z.text.primary)>=n?z.text.primary:Z.text.primary}const v=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=(0,l.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,f.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,f.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return I(e,"light",o,r),I(e,"dark",a,r),e.contrastText||(e.contrastText=m(e.main)),e},D={dark:z,light:Z};return(0,p.Z)((0,l.Z)({common:(0,l.Z)({},y),mode:t,primary:v({color:a,name:"primary"}),secondary:v({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:v({color:u,name:"error"}),warning:v({color:h,name:"warning"}),info:v({color:c,name:"info"}),success:v({color:d,name:"success"}),grey:b,contrastThreshold:n,getContrastText:m,augmentColor:v,tonalOffset:r},D[t]),o)}(r),c=(0,h.Z)(e);let d=(0,p.Z)(c,{mixins:(D=c.breakpoints,R=n,(0,l.Z)({toolbar:{minHeight:56,[D.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[D.up("sm")]:{minHeight:64}}},R)),palette:u,shadows:_.slice(),typography:T(u,a),transitions:N(o),zIndex:(0,l.Z)({},j)});var D,R;return d=(0,p.Z)(d,i),d=t.reduce(((e,t)=>(0,p.Z)(e,t)),d),d.unstable_sxConfig=(0,l.Z)({},m.Z,null==i?void 0:i.unstable_sxConfig),d.unstable_sx=function(e){return(0,v.Z)({sx:e,theme:this})},d}();var V=n(2807);const U=(0,V.ZP)({defaultTheme:W,rootShouldForwardProp:e=>(0,V.x9)(e)&&"classes"!==e});var K=n(1588),q=n(4867);function J(e){return(0,q.Z)("MuiSvgIcon",e)}(0,K.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var Q=n(5893);const G=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],X=U("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${o(n.color)}`],t[`fontSize${o(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,a,l,i,s,u,c,d,f,p,h,m,v,g,y;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(a=o.duration)?void 0:a.shorter}),fontSize:{inherit:"inherit",small:(null==(l=e.typography)||null==(i=l.pxToRem)?void 0:i.call(l,20))||"1.25rem",medium:(null==(s=e.typography)||null==(u=s.pxToRem)?void 0:u.call(s,24))||"1.5rem",large:(null==(c=e.typography)||null==(d=c.pxToRem)?void 0:d.call(c,35))||"2.1875rem"}[t.fontSize],color:null!=(f=null==(p=(e.vars||e).palette)||null==(h=p[t.color])?void 0:h.main)?f:{action:null==(m=(e.vars||e).palette)||null==(v=m.action)?void 0:v.active,disabled:null==(g=(e.vars||e).palette)||null==(y=g.action)?void 0:y.disabled,inherit:void 0}[t.color]}})),Y=i.forwardRef((function(e,t){const n=function({props:e,name:t}){return(0,d.Z)({props:e,name:t,defaultTheme:W})}({props:e,name:"MuiSvgIcon"}),{children:r,className:a,color:i="inherit",component:f="svg",fontSize:p="medium",htmlColor:h,inheritViewBox:m=!1,titleAccess:v,viewBox:g="0 0 24 24"}=n,y=(0,s.Z)(n,G),b=(0,l.Z)({},n,{color:i,component:f,fontSize:p,instanceFontSize:e.fontSize,inheritViewBox:m,viewBox:g}),w={};m||(w.viewBox=g);const x=(e=>{const{color:t,fontSize:n,classes:r}=e,a={root:["root","inherit"!==t&&`color${o(t)}`,`fontSize${o(n)}`]};return(0,c.Z)(a,J,r)})(b);return(0,Q.jsxs)(X,(0,l.Z)({as:f,className:(0,u.Z)(x.root,a),focusable:"false",color:h,"aria-hidden":!v||void 0,role:v?"img":void 0,ref:t},w,y,{ownerState:b,children:[r,v?(0,Q.jsx)("title",{children:v}):null]}))}));Y.muiName="SvgIcon";const ee=Y;function te(e,t){function n(n,r){return(0,Q.jsx)(ee,(0,l.Z)({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=ee.muiName,i.memo(i.forwardRef(n))}const ne=n(7596).Z,re=function(e,t){return()=>null},oe=n(8719).Z,ae=n(7094).Z,le=n(8290).Z,ie=function(e,t){return()=>null},se=n(7960).Z,ue=n(6600).Z,ce=n(7579).Z,de=function(e,t,n,r,o){return null},fe=n(8925).Z,pe=n(3633).Z,he=n(67).Z,me=n(9962).Z,ve={configure:e=>{r.Z.configure(e)}}},4819:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},6760:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(4819);function a(){return r.useContext(o.Z)}},1234:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a}),n(7294);var r=n(917),o=n(5893);function a(e){const{styles:t,defaultTheme:n={}}=e,a="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,o.jsx)(r.xB,{styles:a})}},9378:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>b,Co:()=>w});var r=n(7294),o=n(7462),a=n(5042),l=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const i=(0,a.Z)((function(e){return l.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var s=n(2443),u=n(444),c=n(6797),d=n(7278),f=i,p=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?f:p},m=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},v=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,u.hC)(t,n,r),(0,d.L)((function(){return(0,u.My)(t,n,r)})),null};var g=function e(t,n){var a,l,i=t.__emotion_real===t,d=i&&t.__emotion_base||t;void 0!==n&&(a=n.label,l=n.target);var f=m(t,n,i),p=f||h(d),g=!p("as");return function(){var y=arguments,b=i&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&b.push("label:"+a+";"),null==y[0]||void 0===y[0].raw)b.push.apply(b,y);else{b.push(y[0][0]);for(var w=y.length,x=1;x<w;x++)b.push(y[x],y[0][x])}var S=(0,s.w)((function(e,t,n){var o=g&&e.as||d,a="",i=[],m=e;if(null==e.theme){for(var y in m={},e)m[y]=e[y];m.theme=(0,r.useContext)(s.T)}"string"==typeof e.className?a=(0,u.fp)(t.registered,i,e.className):null!=e.className&&(a=e.className+" ");var w=(0,c.O)(b.concat(i),t.registered,m);a+=t.key+"-"+w.name,void 0!==l&&(a+=" "+l);var x=g&&void 0===f?h(o):p,S={};for(var C in e)g&&"as"===C||x(C)&&(S[C]=e[C]);return S.className=a,S.ref=n,(0,r.createElement)(r.Fragment,null,(0,r.createElement)(v,{cache:t,serialized:w,isStringTag:"string"==typeof o}),(0,r.createElement)(o,S))}));return S.displayName=void 0!==a?a:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",S.defaultProps=t.defaultProps,S.__emotion_real=S,S.__emotion_base=d,S.__emotion_styles=b,S.__emotion_forwardProp=f,Object.defineProperty(S,"toString",{value:function(){return"."+l}}),S.withComponent=function(t,r){return e(t,(0,o.Z)({},n,r,{shouldForwardProp:m(S,r,!0)})).apply(void 0,b)},S}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));const y=g;function b(e,t){return y(e,t)}const w=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>s,P$:()=>c,VO:()=>o,W8:()=>i,dt:()=>u,k9:()=>l});var r=n(9766);const o={xs:0,sm:600,md:900,lg:1200,xl:1536},a={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${o[e]}px)`};function l(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||a;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||a;return Object.keys(t).reduce(((r,a)=>{if(-1!==Object.keys(e.values||o).indexOf(a))r[e.up(a)]=n(t[a],a);else{const e=a;r[e]=t[e]}return r}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function u(e,...t){const n=i(e),o=[n,...t].reduce(((e,t)=>(0,r.Z)(e,t)),{});return s(Object.keys(n),o)}function c({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),o=Object.keys(r);if(0===o.length)return e;let a;return o.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[a],a=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[a],a=n):t[n]=e,t)),{})}},1796:(e,t,n)=>{"use strict";n.d(t,{$n:()=>d,_j:()=>c,mi:()=>u,n8:()=>l});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,l=e.substring(t+1,e.length-1);if("color"===n){if(l=l.split(" "),o=l.shift(),4===l.length&&"/"===l[3].charAt(0)&&(l[3]=l[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else l=l.split(",");return l=l.map((e=>parseFloat(e))),{type:n,values:l,colorSpace:o}}const l=e=>{const t=a(e);return t.values.slice(0,3).map(((e,n)=>-1!==t.type.indexOf("hsl")&&0!==n?`${e}%`:e)).join(" ")};function i(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=a(e)).type||"hsla"===e.type?a(function(e){e=a(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),s=(e,t=(e+n/30)%12)=>o-l*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*s(0)),Math.round(255*s(8)),Math.round(255*s(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),i({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function c(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function d(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return i(e)}},2807:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>x,x9:()=>b});var r=n(3366),o=n(7462),a=n(9378),l=n(2161),i=n(8320);const s=["variant"];function u(e){return 0===e.length}function c(e){const{variant:t}=e,n=(0,r.Z)(e,s);let o=t||"";return Object.keys(n).sort().forEach((t=>{o+="color"===t?u(o)?e[t]:(0,i.Z)(e[t]):`${u(o)?t:(0,i.Z)(t)}${(0,i.Z)(e[t].toString())}`})),o}var d=n(6523);const f=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],p=["theme"],h=["theme"];function m(e){return 0===Object.keys(e).length}const v=(e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null,g=(e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=c(e.props);r[t]=e.style})),r},y=(e,t,n,r)=>{var o,a;const{ownerState:l={}}=e,i=[],s=null==n||null==(o=n.components)||null==(a=o[r])?void 0:a.variants;return s&&s.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{l[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&i.push(t[c(n.props)])})),i};function b(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const w=(0,l.Z)();function x(e={}){const{defaultTheme:t=w,rootShouldForwardProp:n=b,slotShouldForwardProp:l=b}=e,i=e=>{const n=m(e.theme)?t:e.theme;return(0,d.Z)((0,o.Z)({},e,{theme:n}))};return i.__mui_systemSx=!0,(e,s={})=>{(0,a.Co)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:u,slot:c,skipVariantsResolver:d,skipSx:w,overridesResolver:x}=s,S=(0,r.Z)(s,f),C=void 0!==d?d:c&&"Root"!==c||!1,k=w||!1;let E=b;"Root"===c?E=n:c?E=l:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(E=void 0);const P=(0,a.ZP)(e,(0,o.Z)({shouldForwardProp:E,label:void 0},S)),Z=(e,...n)=>{const a=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:a}=n,l=(0,r.Z)(n,p);return e((0,o.Z)({theme:m(a)?t:a},l))}:e)):[];let l=e;u&&x&&a.push((e=>{const n=m(e.theme)?t:e.theme,r=v(u,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a((0,o.Z)({},e,{theme:n})):a})),x(e,t)}return null})),u&&!C&&a.push((e=>{const n=m(e.theme)?t:e.theme;return y(e,g(u,n),n,u)})),k||a.push(i);const s=a.length-n.length;if(Array.isArray(e)&&s>0){const t=new Array(s).fill("");l=[...e,...t],l.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(l=n=>{let{theme:a}=n,l=(0,r.Z)(n,h);return e((0,o.Z)({theme:m(a)?t:a},l))});return P(l,...a)};return P.withConfig&&(Z.withConfig=P.withConfig),Z}}},1512:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(3366),o=n(7462);const a=["values","unit","step"],l=e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,o.Z)({},e,{[t.key]:t.val})),{})};function i(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:i=5}=e,s=(0,r.Z)(e,a),u=l(t),c=Object.keys(u);function d(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function f(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-i/100}${n})`}function p(e,r){const o=c.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[c[o]]?t[c[o]]:r)-i/100}${n})`}return(0,o.Z)({keys:c,values:u,up:d,down:f,between:p,only:function(e){return c.indexOf(e)+1<c.length?p(e,c[c.indexOf(e)+1]):d(e)},not:function(e){const t=c.indexOf(e);return 0===t?d(c[1]):t===c.length-1?f(c[t]):p(e,c[c.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}},8373:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2605);function o(e=8){if(e.mui)return e;const t=(0,r.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}},2161:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7462),o=n(3366),a=n(9766),l=n(1512);const i={borderRadius:4};var s=n(8373),u=n(6523),c=n(8010);const d=["breakpoints","palette","spacing","shape"],f=function(e={},...t){const{breakpoints:n={},palette:f={},spacing:p,shape:h={}}=e,m=(0,o.Z)(e,d),v=(0,l.Z)(n),g=(0,s.Z)(p);let y=(0,a.Z)({breakpoints:v,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},f),spacing:g,shape:(0,r.Z)({},i,h)},m);return y=t.reduce(((e,t)=>(0,a.Z)(e,t)),y),y.unstable_sxConfig=(0,r.Z)({},c.Z,null==m?void 0:m.unstable_sxConfig),y.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},y}},159:(e,t,n)=>{"use strict";function r(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}n.d(t,{Z:()=>r})},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>p,NA:()=>m,e6:()=>g,o3:()=>y});var r=n(5408),o=n(4844),a=n(7730);const l={m:"margin",p:"padding"},i={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},s={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!s[e])return[e];e=s[e]}const[t,n]=e.split(""),r=l[t],o=i[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],f=[...c,...d];function p(e,t,n,r){var a;const l=null!=(a=(0,o.DW)(e,t,!1))?a:n;return"number"==typeof l?e=>"string"==typeof e?e:l*e:Array.isArray(l)?e=>"string"==typeof e?e:l[e]:"function"==typeof l?l:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function v(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),l=e[n];return(0,r.k9)(e,l,a)}(e,t,o,n))).reduce(a.Z,{})}function g(e){return v(e,c)}function y(e){return v(e,d)}function b(e){return v(e,f)}g.propTypes={},g.filterProps=c,y.propTypes={},y.filterProps=d,b.propTypes={},b.filterProps=f},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>a,Jq:()=>l,ZP:()=>i});var r=n(8320),o=n(5408);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function l(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r,e)),o}const i=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:i,transform:s}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=a(e.theme,i)||{};return(0,o.k9)(e,u,(e=>{let o=l(c,s,e);return e===o&&"string"==typeof e&&(o=l(c,s,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},8010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>R});var r=n(2605),o=n(4844),a=n(7730);const l=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,a.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var i=n(5408);function s(e){return"number"!=typeof e?e:`${e}px solid`}const u=(0,o.ZP)({prop:"border",themeKey:"borders",transform:s}),c=(0,o.ZP)({prop:"borderTop",themeKey:"borders",transform:s}),d=(0,o.ZP)({prop:"borderRight",themeKey:"borders",transform:s}),f=(0,o.ZP)({prop:"borderBottom",themeKey:"borders",transform:s}),p=(0,o.ZP)({prop:"borderLeft",themeKey:"borders",transform:s}),h=(0,o.ZP)({prop:"borderColor",themeKey:"palette"}),m=(0,o.ZP)({prop:"borderTopColor",themeKey:"palette"}),v=(0,o.ZP)({prop:"borderRightColor",themeKey:"palette"}),g=(0,o.ZP)({prop:"borderBottomColor",themeKey:"palette"}),y=(0,o.ZP)({prop:"borderLeftColor",themeKey:"palette"}),b=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,i.k9)(e,e.borderRadius,n)}return null};b.propTypes={},b.filterProps=["borderRadius"],l(u,c,d,f,p,h,m,v,g,y,b);const w=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,i.k9)(e,e.gap,n)}return null};w.propTypes={},w.filterProps=["gap"];const x=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,i.k9)(e,e.columnGap,n)}return null};x.propTypes={},x.filterProps=["columnGap"];const S=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,i.k9)(e,e.rowGap,n)}return null};function C(e,t){return"grey"===t?t:e}function k(e){return e<=1&&0!==e?100*e+"%":e}S.propTypes={},S.filterProps=["rowGap"],l(w,x,S,(0,o.ZP)({prop:"gridColumn"}),(0,o.ZP)({prop:"gridRow"}),(0,o.ZP)({prop:"gridAutoFlow"}),(0,o.ZP)({prop:"gridAutoColumns"}),(0,o.ZP)({prop:"gridAutoRows"}),(0,o.ZP)({prop:"gridTemplateColumns"}),(0,o.ZP)({prop:"gridTemplateRows"}),(0,o.ZP)({prop:"gridTemplateAreas"}),(0,o.ZP)({prop:"gridArea"})),l((0,o.ZP)({prop:"color",themeKey:"palette",transform:C}),(0,o.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:C}),(0,o.ZP)({prop:"backgroundColor",themeKey:"palette",transform:C}));const E=(0,o.ZP)({prop:"width",transform:k}),P=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||i.VO[t]||k(t)}};return(0,i.k9)(e,e.maxWidth,t)}return null};P.filterProps=["maxWidth"];const Z=(0,o.ZP)({prop:"minWidth",transform:k}),z=(0,o.ZP)({prop:"height",transform:k}),I=(0,o.ZP)({prop:"maxHeight",transform:k}),D=(0,o.ZP)({prop:"minHeight",transform:k}),R=((0,o.ZP)({prop:"size",cssProperty:"width",transform:k}),(0,o.ZP)({prop:"size",cssProperty:"height",transform:k}),l(E,P,Z,z,I,D,(0,o.ZP)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:s},borderTop:{themeKey:"borders",transform:s},borderRight:{themeKey:"borders",transform:s},borderBottom:{themeKey:"borders",transform:s},borderLeft:{themeKey:"borders",transform:s},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:b},color:{themeKey:"palette",transform:C},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:C},backgroundColor:{themeKey:"palette",transform:C},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:w},rowGap:{style:S},columnGap:{style:x},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:k},maxWidth:{style:P},minWidth:{transform:k},height:{transform:k},maxHeight:{transform:k},minHeight:{transform:k},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},9707:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(7462),o=n(3366),a=n(9766),l=n(8010);const i=["sx"],s=e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:l.Z;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r};function u(e){const{sx:t}=e,n=(0,o.Z)(e,i),{systemProps:l,otherProps:u}=s(n);let c;return c=Array.isArray(t)?[l,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,a.P)(n)?(0,r.Z)({},l,n):l}:(0,r.Z)({},l,t),(0,r.Z)({},u,{sx:c})}},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(8320),o=n(7730),a=n(4844),l=n(5408),i=n(8010);const s=function(){function e(e,t,n,o){const i={[e]:t,theme:n},s=o[e];if(!s)return{[e]:t};const{cssProperty:u=e,themeKey:c,transform:d,style:f}=s;if(null==t)return null;if("typography"===c&&"inherit"===t)return{[e]:t};const p=(0,a.DW)(n,c)||{};return f?f(i):(0,l.k9)(i,t,(t=>{let n=(0,a.Jq)(p,d,t);return t===n&&"string"==typeof t&&(n=(0,a.Jq)(p,d,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:a,theme:s={}}=n||{};if(!a)return null;const u=null!=(r=s.unstable_sxConfig)?r:i.Z;function c(n){let r=n;if("function"==typeof n)r=n(s);else if("object"!=typeof n)return n;if(!r)return null;const a=(0,l.W8)(s.breakpoints),i=Object.keys(a);let c=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(i=r[n])?i(s):i;var i;if(null!=a)if("object"==typeof a)if(u[n])c=(0,o.Z)(c,e(n,a,s,u));else{const e=(0,l.k9)({theme:s},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?c=(0,o.Z)(c,e):c[n]=t({sx:a,theme:s})}else c=(0,o.Z)(c,e(n,a,s,u))})),(0,l.L7)(i,c)}return Array.isArray(a)?a.map(c):c(a)}}();s.filterProps=["sx"];const u=s},6631:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(2161),o=n(6760);const a=(0,r.Z)(),l=function(e=a){return function(e=null){const t=(0,o.Z)();return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)}},8805:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7462);function o(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((a=>{if(a.toString().match(/^(components|slots)$/))n[a]=(0,r.Z)({},e[a],n[a]);else if(a.toString().match(/^(componentsProps|slotProps)$/)){const l=e[a]||{},i=t[a];n[a]={},i&&Object.keys(i)?l&&Object.keys(l)?(n[a]=(0,r.Z)({},i),Object.keys(l).forEach((e=>{n[a][e]=o(l[e],i[e])}))):n[a]=i:n[a]=l}else void 0===n[a]&&(n[a]=e[a])})),n}function a(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?o(t.components[n].defaultProps,r):r}var l=n(6631);function i({props:e,name:t,defaultTheme:n}){return a({theme:(0,l.Z)(n),name:t,props:e})}},7078:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},8320:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:(e,t,n)=>{"use strict";function r(e,t,n=undefined){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{Z:()=>r})},7596:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>l});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function a(e){if(!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=a(e[n])})),t}function l(e,t,n={clone:!0}){const i=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?i[r]=l(e[r],t[r],n):n.clone?i[r]=o(t[r])?a(t[r]):t[r]:i[r]=t[r])})),i}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},4867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7078);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",readOnly:"readOnly",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.Z.generate(e)}-${t}`}},1588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4867);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Z)(e,t,n)})),o}},8719:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},7094:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},8290:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7094);function o(e){return(0,r.Z)(e).defaultView||window}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},8925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o({controlled:e,default:t,name:n,state:o="value"}){const{current:a}=r.useRef(void 0!==e),[l,i]=r.useState(t);return[a?e:l,r.useCallback((e=>{a||i(e)}),[])]}},6600:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3633:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(6600);function a(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},67:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(7960);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.Z)(e,t)}))}),e)}},7579:(e,t,n)=>{"use strict";var r;n.d(t,{Z:()=>i});var o=n(7294);let a=0;const l=(r||(r=n.t(o,2))).useId;function i(e){if(void 0!==l){const t=l();return null!=e?e:t}return function(e){const[t,n]=o.useState(e),r=e||t;return o.useEffect((()=>{null==t&&(a+=1,n(`mui-${a}`))}),[t]),r}(e)}},9962:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7294);let o,a=!0,l=!1;const i={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function s(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function u(){a=!1}function c(){"hidden"===this.visibilityState&&l&&(a=!0)}function d(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",s,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!i[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(l=!0,window.clearTimeout(o),o=window.setTimeout((()=>{l=!1}),100),t.current=!1,!0)},ref:e}}},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o});const o=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},1424:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7537),o=n.n(r),a=n(3645),l=n.n(a)()(o());l.push([e.id,"#root {\n  background-color: rgb(244, 244, 244);\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC",sourcesContent:["#root {\n  background-color: rgb(244, 244, 244);\n}\n"],sourceRoot:""}]);const i=l},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(l[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&l[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},l={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},i={};function s(e){return r.isMemo(e)?l:i[e.$$typeof]||o}i[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},i[r.Memo]=l;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var l=c(n);d&&(l=l.concat(d(n)));for(var i=s(t),m=s(n),v=0;v<l.length;++v){var g=l[v];if(!(a[g]||r&&r[g]||m&&m[g]||i&&i[g])){var y=f(n,g);try{u(t,g,y)}catch(e){}}}}return t}},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=l}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),Z=Symbol.for("react.context"),z=Symbol.for("react.forward_ref"),I=Symbol.for("react.suspense"),D=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),$=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function _(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var L,B=Object.assign;function M(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var A=!1;function F(e,t){if(!e||A)return"";A=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),l=o.length-1,i=a.length-1;1<=l&&0<=i&&o[l]!==a[i];)i--;for(;1<=l&&0<=i;l--,i--)if(o[l]!==a[i]){if(1!==l||1!==i)do{if(l--,0>--i||o[l]!==a[i]){var s="\n"+o[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=l&&0<=i);break}}}finally{A=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function N(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function j(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case S:return"Portal";case E:return"Profiler";case k:return"StrictMode";case I:return"Suspense";case D:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case Z:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case z:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:j(e.type)||"Memo";case $:t=e._payload,e=e._init;try{return j(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function U(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){G(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Y(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ae(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ce=null,ke=null;function Ee(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Pe(e){Ce?ke?ke.push(e):ke=[e]:Ce=e}function Ze(){if(Ce){var e=Ce,t=ke;if(ke=Ce=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function ze(e,t){return e(t)}function Ie(){}var De=!1;function Re(e,t,n){if(De)return e(t,n);De=!0;try{return ze(e,t,n)}finally{De=!1,(null!==Ce||null!==ke)&&(Ie(),Ze())}}function $e(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Te=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Te=!1}function _e(e,t,n,r,o,a,l,i,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Le=!1,Be=null,Me=!1,Ae=null,Fe={onError:function(e){Le=!0,Be=e}};function Ne(e,t,n,r,o,a,l,i,s){Le=!1,Be=null,_e.apply(Fe,arguments)}function je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(je(e)!==e)throw Error(a(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var l=o.alternate;if(null===l){if(null!==(r=o.return)){n=r;continue}break}if(o.child===l.child){for(l=o.child;l;){if(l===n)return We(o),e;if(l===r)return We(o),t;l=l.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=l;else{for(var i=!1,s=o.child;s;){if(s===n){i=!0,n=o,r=l;break}if(s===r){i=!0,r=o,n=l;break}s=s.sibling}if(!i){for(s=l.child;s;){if(s===n){i=!0,n=l,r=o;break}if(s===r){i=!0,r=l,n=o;break}s=s.sibling}if(!i)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ue(e):null}function Ue(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ue(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Je=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ge=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Ye=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/st|0)|0},it=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~o;0!==i?r=dt(i):0!=(a&=l)&&(r=dt(a))}else 0!=(l=n&~o)?r=dt(l):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-lt(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,Ct,kt,Et,Pt=!1,Zt=[],zt=null,It=null,Dt=null,Rt=new Map,$t=new Map,Tt=[],Ot="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function _t(e,t){switch(e){case"focusin":case"focusout":zt=null;break;case"dragenter":case"dragleave":It=null;break;case"mouseover":case"mouseout":Dt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":$t.delete(t.pointerId)}}function Lt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Bt(e){var t=bo(e.target);if(null!==t){var n=je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Et(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function At(e,t,n){Mt(e)&&n.delete(t)}function Ft(){Pt=!1,null!==zt&&Mt(zt)&&(zt=null),null!==It&&Mt(It)&&(It=null),null!==Dt&&Mt(Dt)&&(Dt=null),Rt.forEach(At),$t.forEach(At)}function Nt(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function jt(e){function t(t){return Nt(t,e)}if(0<Zt.length){Nt(Zt[0],e);for(var n=1;n<Zt.length;n++){var r=Zt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==zt&&Nt(zt,e),null!==It&&Nt(It,e),null!==Dt&&Nt(Dt,e),Rt.forEach(t),$t.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Bt(n),null===n.blockedOn&&Tt.shift()}var Ht=w.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Ut(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Kt(e,t,n,r){if(Wt){var o=Jt(e,t,n,r);if(null===o)Wr(e,t,r,qt,n),_t(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return zt=Lt(zt,e,t,n,r,o),!0;case"dragenter":return It=Lt(It,e,t,n,r,o),!0;case"mouseover":return Dt=Lt(Dt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Rt.set(a,Lt(Rt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,$t.set(a,Lt($t.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(_t(e,r),4&t&&-1<Ot.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Jt(e,t,n,r))&&Wr(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var qt=null;function Jt(e,t,n,r){if(qt=null,null!==(e=bo(e=xe(r))))if(null===(t=je(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ye:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Xt=null,Yt=null;function en(){if(Yt)return Yt;var e,t,n=Xt,r=n.length,o="value"in Gt?Gt.value:Gt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===o[a-t];t++);return Yt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(o):o[l]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),dn=B({},un,{view:0,detail:0}),fn=on(dn),pn=B({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(an=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=an=0,sn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(B({},pn,{dataTransfer:0})),vn=on(B({},dn,{relatedTarget:0})),gn=on(B({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=B({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),wn=on(B({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function En(){return kn}var Pn=B({},dn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Zn=on(Pn),zn=on(B({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=on(B({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Dn=on(B({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=B({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),$n=on(Rn),Tn=[9,13,27,32],On=c&&"CompositionEvent"in window,_n=null;c&&"documentMode"in document&&(_n=document.documentMode);var Ln=c&&"TextEvent"in window&&!_n,Bn=c&&(!On||_n&&8<_n&&11>=_n),Mn=String.fromCharCode(32),An=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){Pe(r),0<(t=Ur(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Un=null,Kn=null;function qn(e){Mr(e,0)}function Jn(e){if(K(xo(e)))return e}function Qn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Xn;if(c){var Yn="oninput"in document;if(!Yn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Yn="function"==typeof er.oninput}Xn=Yn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Un&&(Un.detachEvent("onpropertychange",nr),Kn=Un=null)}function nr(e){if("value"===e.propertyName&&Jn(Kn)){var t=[];Vn(t,Kn,e,xe(e)),Re(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Un=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Kn)}function ar(e,t){if("click"===e)return Jn(t)}function lr(e,t){if("input"===e||"change"===e)return Jn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!ir(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var l=cr(n,r);o&&l&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==q(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Ur(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Cr={},kr={};function Er(e){if(Cr[e])return Cr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return Cr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Pr=Er("animationend"),Zr=Er("animationiteration"),zr=Er("animationstart"),Ir=Er("transitionend"),Dr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function $r(e,t){Dr.set(e,t),s(t,[e])}for(var Tr=0;Tr<Rr.length;Tr++){var Or=Rr[Tr];$r(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}$r(Pr,"onAnimationEnd"),$r(Zr,"onAnimationIteration"),$r(zr,"onAnimationStart"),$r("dblclick","onDoubleClick"),$r("focusin","onFocus"),$r("focusout","onBlur"),$r(Ir,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,l,i,s,u){if(Ne.apply(this,arguments),Le){if(!Le)throw Error(a(198));var c=Be;Le=!1,Be=null,Me||(Me=!0,Ae=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],s=i.instance,u=i.currentTarget;if(i=i.listener,s!==a&&o.isPropagationStopped())break e;Br(o,i,u),a=s}else for(l=0;l<r.length;l++){if(s=(i=r[l]).instance,u=i.currentTarget,i=i.listener,s!==a&&o.isPropagationStopped())break e;Br(o,i,u),a=s}}}if(Me)throw e=Ae,Me=!1,Ae=null,e}function Ar(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Nr="_reactListening"+Math.random().toString(36).slice(2);function jr(e){if(!e[Nr]){e[Nr]=!0,l.forEach((function(t){"selectionchange"!==t&&(Lr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Nr]||(t[Nr]=!0,Fr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Qt(t)){case 1:var o=Vt;break;case 4:o=Ut;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===o||8===i.nodeType&&i.parentNode===o)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&((s=l.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;l=l.return}for(;null!==i;){if(null===(l=bo(i)))return;if(5===(s=l.tag)||6===s){r=a=l;continue e}i=i.parentNode}}r=r.return}Re((function(){var r=a,o=xe(n),l=[];e:{var i=Dr.get(e);if(void 0!==i){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Zn;break;case"focusin":u="focus",s=vn;break;case"focusout":u="blur",s=vn;break;case"beforeblur":case"afterblur":s=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=In;break;case Pr:case Zr:case zr:s=gn;break;case Ir:s=Dn;break;case"scroll":s=fn;break;case"wheel":s=$n;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=zn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=$e(h,f))&&c.push(Vr(h,m,p))),d)break;h=h.return}0<c.length&&(i=new s(i,u,null,n,o),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(s||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(d=je(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=zn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?i:xo(s),p=null==u?i:xo(u),(i=new c(m,h+"leave",s,n,o)).target=d,i.relatedTarget=p,m=null,bo(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Kr(p))h++;for(p=0,m=f;m;m=Kr(m))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)f=Kr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Kr(c),f=Kr(f)}c=null}else c=null;null!==s&&qr(l,i,s,c,!1),null!==u&&null!==d&&qr(l,d,u,c,!0)}if("select"===(s=(i=r?xo(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var v=Qn;else if(Wn(i))if(Gn)v=lr;else{v=or;var g=rr}else(s=i.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=ar);switch(v&&(v=v(e,r))?Vn(l,v,n,o):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?xo(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(l,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(l,n,o)}var y;if(On)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Bn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=en()):(Xt="value"in(Gt=o)?Gt.value:Gt.textContent,jn=!0)),0<(g=Ur(r,b)).length&&(b=new wn(b,e,null,n,o),l.push({event:b,listeners:g}),(y||null!==(y=Nn(n)))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Nn(t);case"keypress":return 32!==t.which?null:(An=!0,Mn);case"textInput":return(e=t.data)===Mn&&An?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!On&&Fn(e,t)?(e=en(),Yt=Xt=Gt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ur(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),l.push({event:o,listeners:r}),o.data=y)}Mr(l,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=$e(e,n))&&r.unshift(Vr(e,a,o)),null!=(a=$e(e,t))&&r.push(Vr(e,a,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,l=[];null!==n&&n!==r;){var i=n,s=i.alternate,u=i.stateNode;if(null!==s&&s===r)break;5===i.tag&&null!==u&&(i=u,o?null!=(s=$e(n,a))&&l.unshift(Vr(n,s,i)):o||null!=(s=$e(n,a))&&l.push(Vr(n,s,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Jr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Jr,"\n").replace(Qr,"")}function Xr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(a(425))}function Yr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,lo="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(io)}:ro;function io(e){setTimeout((function(){throw e}))}function so(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void jt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);jt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,go="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var Co=[],ko=-1;function Eo(e){return{current:e}}function Po(e){0>ko||(e.current=Co[ko],Co[ko]=null,ko--)}function Zo(e,t){ko++,Co[ko]=e.current,e.current=t}var zo={},Io=Eo(zo),Do=Eo(!1),Ro=zo;function $o(e,t){var n=e.type.contextTypes;if(!n)return zo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function To(e){return null!=e.childContextTypes}function Oo(){Po(Do),Po(Io)}function _o(e,t,n){if(Io.current!==zo)throw Error(a(168));Zo(Io,t),Zo(Do,n)}function Lo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,H(e)||"Unknown",o));return B({},n,r)}function Bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||zo,Ro=Io.current,Zo(Io,e),Zo(Do,Do.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Lo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,Po(Do),Po(Io),Zo(Io,e)):Po(Do),Zo(Do,n)}var Ao=null,Fo=!1,No=!1;function jo(e){null===Ao?Ao=[e]:Ao.push(e)}function Ho(){if(!No&&null!==Ao){No=!0;var e=0,t=bt;try{var n=Ao;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ao=null,Fo=!1}catch(t){throw null!==Ao&&(Ao=Ao.slice(e+1)),Ke(Ye,Ho),t}finally{bt=t,No=!1}}return null}var Wo=[],Vo=0,Uo=null,Ko=0,qo=[],Jo=0,Qo=null,Go=1,Xo="";function Yo(e,t){Wo[Vo++]=Ko,Wo[Vo++]=Uo,Uo=e,Ko=t}function ea(e,t,n){qo[Jo++]=Go,qo[Jo++]=Xo,qo[Jo++]=Qo,Qo=e;var r=Go;e=Xo;var o=32-lt(r)-1;r&=~(1<<o),n+=1;var a=32-lt(t)+o;if(30<a){var l=o-o%5;a=(r&(1<<l)-1).toString(32),r>>=l,o-=l,Go=1<<32-lt(t)+o|n<<o|r,Xo=a+e}else Go=1<<a|n<<o|r,Xo=e}function ta(e){null!==e.return&&(Yo(e,1),ea(e,1,0))}function na(e){for(;e===Uo;)Uo=Wo[--Vo],Wo[Vo]=null,Ko=Wo[--Vo],Wo[Vo]=null;for(;e===Qo;)Qo=qo[--Jo],qo[Jo]=null,Xo=qo[--Jo],qo[Jo]=null,Go=qo[--Jo],qo[Jo]=null}var ra=null,oa=null,aa=!1,la=null;function ia(e,t){var n=$u(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Go,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=$u(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!sa(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&sa(e,t)?ia(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function fa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw pa(),Error(a(418));for(;t;)ia(e,t),t=uo(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===la?la=[e]:la.push(e)}var va=w.ReactCurrentBatchConfig;function ga(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=Eo(null),ba=null,wa=null,xa=null;function Sa(){xa=wa=ba=null}function Ca(e){var t=ya.current;Po(ya),e._currentValue=t}function ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ea(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wi=!0),e.firstContext=null)}function Pa(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Za=null;function za(e){null===Za?Za=[e]:Za.push(e)}function Ia(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,za(t)):(n.next=o.next,o.next=n),t.interleaved=n,Da(e,r)}function Da(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ra=!1;function $a(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ta(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Oa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _a(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Is)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Da(e,n)}return null===(o=r.interleaved)?(t.next=t,za(r)):(t.next=o.next,o.next=t),r.interleaved=t,Da(e,n)}function La(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Ba(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=l:a=a.next=l,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ma(e,t,n,r){var o=e.updateQueue;Ra=!1;var a=o.firstBaseUpdate,l=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var s=i,u=s.next;s.next=null,null===l?a=u:l.next=u,l=s;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=u:i.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(l=0,c=u=s=null,i=a;;){var f=i.lane,p=i.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=B({},d,f);break e;case 2:Ra=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[i]:f.push(i))}else p={eventTime:p,lane:f,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,l|=f;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(f=i).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{l|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Bs|=l,e.lanes=l,e.memoizedState=d}}function Aa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Fa=(new r.Component).refs;function Na(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ja={isMounted:function(e){return!!(e=e._reactInternals)&&je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Oa(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=_a(e,a,o))&&(ru(t,e,o,r),La(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Oa(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=_a(e,a,o))&&(ru(t,e,o,r),La(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Oa(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=_a(e,o,r))&&(ru(t,e,r,n),La(t,e,r))}};function Ha(e,t,n,r,o,a,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,l):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,a))}function Wa(e,t,n){var r=!1,o=zo,a=t.contextType;return"object"==typeof a&&null!==a?a=Pa(a):(o=To(t)?Ro:Io.current,a=(r=null!=(r=t.contextTypes))?$o(e,o):zo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ja,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ja.enqueueReplaceState(t,t.state,null)}function Ua(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fa,$a(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Pa(a):(a=To(t)?Ro:Io.current,o.context=$o(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Na(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ja.enqueueReplaceState(o,o.state,null),Ma(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=o.refs;t===Fa&&(t=o.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ja(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ou(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===$&&Ja(a)===t.type)?((r=o(t,n.props)).ref=Ka(e,t,n),r.return=e,r):((r=_u(n.type,n.key,n.props,null,e.mode,r)).ref=Ka(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Au(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Lu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=_u(t.type,t.key,t.props,null,e.mode,n)).ref=Ka(e,null,t),n.return=e,n;case S:return(t=Au(t,e.mode,n)).return=e,t;case $:return f(e,(0,t._init)(t._payload),n)}if(te(t)||_(t))return(t=Lu(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?u(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null;case $:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||_(n))return null!==o?null:d(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case $:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||_(r))return d(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,i,s){for(var u=null,c=null,d=a,m=a=0,v=null;null!==d&&m<i.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var g=p(o,d,i[m],s);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),a=l(g,a,m),null===c?u=g:c.sibling=g,c=g,d=v}if(m===i.length)return n(o,d),aa&&Yo(o,m),u;if(null===d){for(;m<i.length;m++)null!==(d=f(o,i[m],s))&&(a=l(d,a,m),null===c?u=d:c.sibling=d,c=d);return aa&&Yo(o,m),u}for(d=r(o,d);m<i.length;m++)null!==(v=h(d,o,m,i[m],s))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),a=l(v,a,m),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),aa&&Yo(o,m),u}function v(o,i,s,u){var c=_(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,m=i,v=i=0,g=null,y=s.next();null!==m&&!y.done;v++,y=s.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),i=l(b,i,v),null===d?c=b:d.sibling=b,d=b,m=g}if(y.done)return n(o,m),aa&&Yo(o,v),c;if(null===m){for(;!y.done;v++,y=s.next())null!==(y=f(o,y.value,u))&&(i=l(y,i,v),null===d?c=y:d.sibling=y,d=y);return aa&&Yo(o,v),c}for(m=r(o,m);!y.done;v++,y=s.next())null!==(y=h(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),i=l(y,i,v),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Yo(o,v),c}return function e(r,a,l,s){if("object"==typeof l&&null!==l&&l.type===C&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case x:e:{for(var u=l.key,c=a;null!==c;){if(c.key===u){if((u=l.type)===C){if(7===c.tag){n(r,c.sibling),(a=o(c,l.props.children)).return=r,r=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===$&&Ja(u)===c.type){n(r,c.sibling),(a=o(c,l.props)).ref=Ka(r,c,l),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===C?((a=Lu(l.props.children,r.mode,s,l.key)).return=r,r=a):((s=_u(l.type,l.key,l.props,null,r.mode,s)).ref=Ka(r,a,l),s.return=r,r=s)}return i(r);case S:e:{for(c=l.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===l.containerInfo&&a.stateNode.implementation===l.implementation){n(r,a.sibling),(a=o(a,l.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Au(l,r.mode,s)).return=r,r=a}return i(r);case $:return e(r,a,(c=l._init)(l._payload),s)}if(te(l))return m(r,a,l,s);if(_(l))return v(r,a,l,s);qa(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,l)).return=r,r=a):(n(r,a),(a=Mu(l,r.mode,s)).return=r,r=a),i(r)):n(r,a)}}var Ga=Qa(!0),Xa=Qa(!1),Ya={},el=Eo(Ya),tl=Eo(Ya),nl=Eo(Ya);function rl(e){if(e===Ya)throw Error(a(174));return e}function ol(e,t){switch(Zo(nl,t),Zo(tl,e),Zo(el,Ya),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(el),Zo(el,t)}function al(){Po(el),Po(tl),Po(nl)}function ll(e){rl(nl.current);var t=rl(el.current),n=se(t,e.type);t!==n&&(Zo(tl,e),Zo(el,n))}function il(e){tl.current===e&&(Po(el),Po(tl))}var sl=Eo(0);function ul(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var cl=[];function dl(){for(var e=0;e<cl.length;e++)cl[e]._workInProgressVersionPrimary=null;cl.length=0}var fl=w.ReactCurrentDispatcher,pl=w.ReactCurrentBatchConfig,hl=0,ml=null,vl=null,gl=null,yl=!1,bl=!1,wl=0,xl=0;function Sl(){throw Error(a(321))}function Cl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function kl(e,t,n,r,o,l){if(hl=l,ml=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fl.current=null===e||null===e.memoizedState?ii:si,e=n(r,o),bl){l=0;do{if(bl=!1,wl=0,25<=l)throw Error(a(301));l+=1,gl=vl=null,t.updateQueue=null,fl.current=ui,e=n(r,o)}while(bl)}if(fl.current=li,t=null!==vl&&null!==vl.next,hl=0,gl=vl=ml=null,yl=!1,t)throw Error(a(300));return e}function El(){var e=0!==wl;return wl=0,e}function Pl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gl?ml.memoizedState=gl=e:gl=gl.next=e,gl}function Zl(){if(null===vl){var e=ml.alternate;e=null!==e?e.memoizedState:null}else e=vl.next;var t=null===gl?ml.memoizedState:gl.next;if(null!==t)gl=t,vl=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vl=e).memoizedState,baseState:vl.baseState,baseQueue:vl.baseQueue,queue:vl.queue,next:null},null===gl?ml.memoizedState=gl=e:gl=gl.next=e}return gl}function zl(e,t){return"function"==typeof t?t(e):t}function Il(e){var t=Zl(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vl,o=r.baseQueue,l=n.pending;if(null!==l){if(null!==o){var i=o.next;o.next=l.next,l.next=i}r.baseQueue=o=l,n.pending=null}if(null!==o){l=o.next,r=r.baseState;var s=i=null,u=null,c=l;do{var d=c.lane;if((hl&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=f,i=r):u=u.next=f,ml.lanes|=d,Bs|=d}c=c.next}while(null!==c&&c!==l);null===u?i=r:u.next=s,ir(r,t.memoizedState)||(wi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{l=o.lane,ml.lanes|=l,Bs|=l,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Dl(e){var t=Zl(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,l=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{l=e(l,i.action),i=i.next}while(i!==o);ir(l,t.memoizedState)||(wi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Rl(){}function $l(e,t){var n=ml,r=Zl(),o=t(),l=!ir(r.memoizedState,o);if(l&&(r.memoizedState=o,wi=!0),r=r.queue,Wl(_l.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==gl&&1&gl.memoizedState.tag){if(n.flags|=2048,Al(9,Ol.bind(null,n,r,o,t),void 0,null),null===Ds)throw Error(a(349));0!=(30&hl)||Tl(n,t,o)}return o}function Tl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ol(e,t,n,r){t.value=n,t.getSnapshot=r,Ll(t)&&Bl(e)}function _l(e,t,n){return n((function(){Ll(t)&&Bl(e)}))}function Ll(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Bl(e){var t=Da(e,1);null!==t&&ru(t,e,1,-1)}function Ml(e){var t=Pl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:zl,lastRenderedState:e},t.queue=e,e=e.dispatch=ni.bind(null,ml,e),[t.memoizedState,e]}function Al(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ml.updateQueue)?(t={lastEffect:null,stores:null},ml.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Fl(){return Zl().memoizedState}function Nl(e,t,n,r){var o=Pl();ml.flags|=e,o.memoizedState=Al(1|t,n,void 0,void 0===r?null:r)}function jl(e,t,n,r){var o=Zl();r=void 0===r?null:r;var a=void 0;if(null!==vl){var l=vl.memoizedState;if(a=l.destroy,null!==r&&Cl(r,l.deps))return void(o.memoizedState=Al(t,n,a,r))}ml.flags|=e,o.memoizedState=Al(1|t,n,a,r)}function Hl(e,t){return Nl(8390656,8,e,t)}function Wl(e,t){return jl(2048,8,e,t)}function Vl(e,t){return jl(4,2,e,t)}function Ul(e,t){return jl(4,4,e,t)}function Kl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ql(e,t,n){return n=null!=n?n.concat([e]):null,jl(4,4,Kl.bind(null,t,e),n)}function Jl(){}function Ql(e,t){var n=Zl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Cl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gl(e,t){var n=Zl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Cl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xl(e,t,n){return 0==(21&hl)?(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=n):(ir(n,t)||(n=mt(),ml.lanes|=n,Bs|=n,e.baseState=!0),t)}function Yl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pl.transition;pl.transition={};try{e(!1),t()}finally{bt=n,pl.transition=r}}function ei(){return Zl().memoizedState}function ti(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ri(e)?oi(t,n):null!==(n=Ia(e,t,n,r))&&(ru(n,e,r,tu()),ai(n,t,r))}function ni(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ri(e))oi(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=a(l,n);if(o.hasEagerState=!0,o.eagerState=i,ir(i,l)){var s=t.interleaved;return null===s?(o.next=o,za(t)):(o.next=s.next,s.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ia(e,t,o,r))&&(ru(n,e,r,o=tu()),ai(n,t,r))}}function ri(e){var t=e.alternate;return e===ml||null!==t&&t===ml}function oi(e,t){bl=yl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ai(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var li={readContext:Pa,useCallback:Sl,useContext:Sl,useEffect:Sl,useImperativeHandle:Sl,useInsertionEffect:Sl,useLayoutEffect:Sl,useMemo:Sl,useReducer:Sl,useRef:Sl,useState:Sl,useDebugValue:Sl,useDeferredValue:Sl,useTransition:Sl,useMutableSource:Sl,useSyncExternalStore:Sl,useId:Sl,unstable_isNewReconciler:!1},ii={readContext:Pa,useCallback:function(e,t){return Pl().memoizedState=[e,void 0===t?null:t],e},useContext:Pa,useEffect:Hl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Nl(4194308,4,Kl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Nl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Nl(4,2,e,t)},useMemo:function(e,t){var n=Pl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ti.bind(null,ml,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pl().memoizedState=e},useState:Ml,useDebugValue:Jl,useDeferredValue:function(e){return Pl().memoizedState=e},useTransition:function(){var e=Ml(!1),t=e[0];return e=Yl.bind(null,e[1]),Pl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ml,o=Pl();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Ds)throw Error(a(349));0!=(30&hl)||Tl(r,t,n)}o.memoizedState=n;var l={value:n,getSnapshot:t};return o.queue=l,Hl(_l.bind(null,r,l,e),[e]),r.flags|=2048,Al(9,Ol.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=Pl(),t=Ds.identifierPrefix;if(aa){var n=Xo;t=":"+t+"R"+(n=(Go&~(1<<32-lt(Go)-1)).toString(32)+n),0<(n=wl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},si={readContext:Pa,useCallback:Ql,useContext:Pa,useEffect:Wl,useImperativeHandle:ql,useInsertionEffect:Vl,useLayoutEffect:Ul,useMemo:Gl,useReducer:Il,useRef:Fl,useState:function(){return Il(zl)},useDebugValue:Jl,useDeferredValue:function(e){return Xl(Zl(),vl.memoizedState,e)},useTransition:function(){return[Il(zl)[0],Zl().memoizedState]},useMutableSource:Rl,useSyncExternalStore:$l,useId:ei,unstable_isNewReconciler:!1},ui={readContext:Pa,useCallback:Ql,useContext:Pa,useEffect:Wl,useImperativeHandle:ql,useInsertionEffect:Vl,useLayoutEffect:Ul,useMemo:Gl,useReducer:Dl,useRef:Fl,useState:function(){return Dl(zl)},useDebugValue:Jl,useDeferredValue:function(e){var t=Zl();return null===vl?t.memoizedState=e:Xl(t,vl.memoizedState,e)},useTransition:function(){return[Dl(zl)[0],Zl().memoizedState]},useMutableSource:Rl,useSyncExternalStore:$l,useId:ei,unstable_isNewReconciler:!1};function ci(e,t){try{var n="",r=t;do{n+=N(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function di(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,t,n){(n=Oa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vs||(Vs=!0,Us=r),fi(0,t)},n}function mi(e,t,n){(n=Oa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fi(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fi(0,t),"function"!=typeof r&&(null===Ks?Ks=new Set([this]):Ks.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Pu.bind(null,e,t,n),t.then(e,e))}function gi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yi(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Oa(-1,1)).tag=2,_a(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bi=w.ReactCurrentOwner,wi=!1;function xi(e,t,n,r){t.child=null===e?Xa(t,null,n,r):Ga(t,e.child,n,r)}function Si(e,t,n,r,o){n=n.render;var a=t.ref;return Ea(t,o),r=kl(e,t,n,r,a,o),n=El(),null===e||wi?(aa&&n&&ta(t),t.flags|=1,xi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vi(e,t,o))}function Ci(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Tu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=_u(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ki(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var l=a.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(l,r)&&e.ref===t.ref)return Vi(e,t,o)}return t.flags|=1,(e=Ou(a,r)).ref=t.ref,e.return=t,t.child=e}function ki(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(sr(a,r)&&e.ref===t.ref){if(wi=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Vi(e,t,o);0!=(131072&e.flags)&&(wi=!0)}}return Zi(e,t,n,r,o)}function Ei(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Zo(Os,Ts),Ts|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Zo(Os,Ts),Ts|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Zo(Os,Ts),Ts|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Zo(Os,Ts),Ts|=r;return xi(e,t,o,n),t.child}function Pi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Zi(e,t,n,r,o){var a=To(n)?Ro:Io.current;return a=$o(t,a),Ea(t,o),n=kl(e,t,n,r,a,o),r=El(),null===e||wi?(aa&&r&&ta(t),t.flags|=1,xi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vi(e,t,o))}function zi(e,t,n,r,o){if(To(n)){var a=!0;Bo(t)}else a=!1;if(Ea(t,o),null===t.stateNode)Wi(e,t),Wa(t,n,r),Ua(t,n,r,o),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var s=l.context,u=n.contextType;u="object"==typeof u&&null!==u?Pa(u):$o(t,u=To(n)?Ro:Io.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||s!==u)&&Va(t,l,r,u),Ra=!1;var f=t.memoizedState;l.state=f,Ma(t,r,l,o),s=t.memoizedState,i!==r||f!==s||Do.current||Ra?("function"==typeof c&&(Na(t,n,c,r),s=t.memoizedState),(i=Ra||Ha(t,n,i,r,f,s,u))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=u,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Ta(e,t),i=t.memoizedProps,u=t.type===t.elementType?i:ga(t.type,i),l.props=u,d=t.pendingProps,f=l.context,s="object"==typeof(s=n.contextType)&&null!==s?Pa(s):$o(t,s=To(n)?Ro:Io.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==d||f!==s)&&Va(t,l,r,s),Ra=!1,f=t.memoizedState,l.state=f,Ma(t,r,l,o);var h=t.memoizedState;i!==d||f!==h||Do.current||Ra?("function"==typeof p&&(Na(t,n,p,r),h=t.memoizedState),(u=Ra||Ha(t,n,u,r,f,h,s)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=s,r=u):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Ii(e,t,n,r,a,o)}function Ii(e,t,n,r,o,a){Pi(e,t);var l=0!=(128&t.flags);if(!r&&!l)return o&&Mo(t,n,!1),Vi(e,t,a);r=t.stateNode,bi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=Ga(t,e.child,null,a),t.child=Ga(t,null,i,a)):xi(e,t,i,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Di(e){var t=e.stateNode;t.pendingContext?_o(0,t.pendingContext,t.pendingContext!==t.context):t.context&&_o(0,t.context,!1),ol(e,t.containerInfo)}function Ri(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xi(e,t,n,r),t.child}var $i,Ti,Oi,_i,Li={dehydrated:null,treeContext:null,retryLane:0};function Bi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Mi(e,t,n){var r,o=t.pendingProps,l=sl.current,i=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Zo(sl,1&l),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=o.children,e=o.fallback,i?(o=t.mode,i=t.child,s={mode:"hidden",children:s},0==(1&o)&&null!==i?(i.childLanes=0,i.pendingProps=s):i=Bu(s,o,0,null),e=Lu(e,o,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Bi(n),t.memoizedState=Li,e):Ai(t,s));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,o,l,i){if(n)return 256&t.flags?(t.flags&=-257,Fi(e,t,i,r=di(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,o=t.mode,r=Bu({mode:"visible",children:r.children},o,0,null),(l=Lu(l,o,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,0!=(1&t.mode)&&Ga(t,e.child,null,i),t.child.memoizedState=Bi(i),t.memoizedState=Li,l);if(0==(1&t.mode))return Fi(e,t,i,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var s=r.dgst;return r=s,Fi(e,t,i,r=di(l=Error(a(419)),r,void 0))}if(s=0!=(i&e.childLanes),wi||s){if(null!==(r=Ds)){switch(i&-i){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|i))?0:o)&&o!==l.retryLane&&(l.retryLane=o,Da(e,o),ru(r,e,o,-1))}return vu(),Fi(e,t,i,r=di(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=zu.bind(null,e),o._reactRetry=t,null):(e=l.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,la=null,null!==e&&(qo[Jo++]=Go,qo[Jo++]=Xo,qo[Jo++]=Qo,Go=e.id,Xo=e.overflow,Qo=t),(t=Ai(t,r.children)).flags|=4096,t)}(e,t,s,o,r,l,n);if(i){i=o.fallback,s=t.mode,r=(l=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&s)&&t.child!==l?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Ou(l,u)).subtreeFlags=14680064&l.subtreeFlags,null!==r?i=Ou(r,i):(i=Lu(i,s,n,null)).flags|=2,i.return=t,o.return=t,o.sibling=i,t.child=o,o=i,i=t.child,s=null===(s=e.child.memoizedState)?Bi(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},i.memoizedState=s,i.childLanes=e.childLanes&~n,t.memoizedState=Li,o}return e=(i=e.child).sibling,o=Ou(i,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ai(e,t){return(t=Bu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fi(e,t,n,r){return null!==r&&ma(r),Ga(t,e.child,null,n),(e=Ai(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ni(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ka(e.return,t,n)}function ji(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Hi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xi(e,t,r.children,n),0!=(2&(r=sl.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ni(e,n,t);else if(19===e.tag)Ni(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Zo(sl,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ul(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ji(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ul(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ji(t,!0,n,null,a);break;case"together":ji(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wi(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Bs|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ou(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ou(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ui(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ki(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function qi(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ki(t),null;case 1:case 17:return To(t.type)&&Oo(),Ki(t),null;case 3:return r=t.stateNode,al(),Po(Do),Po(Io),dl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==la&&(iu(la),la=null))),Ti(e,t),Ki(t),null;case 5:il(t);var o=rl(nl.current);if(n=t.type,null!==e&&null!=t.stateNode)Oi(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Ki(t),null}if(e=rl(el.current),fa(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[po]=t,r[ho]=l,e=0!=(1&t.mode),n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(o=0;o<_r.length;o++)Ar(_r[o],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":Q(r,l),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ar("invalid",r);break;case"textarea":oe(r,l),Ar("invalid",r)}for(var s in ye(n,l),o=null,l)if(l.hasOwnProperty(s)){var u=l[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==l.suppressHydrationWarning&&Xr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==l.suppressHydrationWarning&&Xr(r.textContent,u,e),o=["children",""+u]):i.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Ar("scroll",r)}switch(n){case"input":U(r),Y(r,l,!0);break;case"textarea":U(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Yr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[po]=t,e[ho]=r,$i(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),o=r;break;case"iframe":case"object":case"embed":Ar("load",e),o=r;break;case"video":case"audio":for(o=0;o<_r.length;o++)Ar(_r[o],e);o=r;break;case"source":Ar("error",e),o=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),o=r;break;case"details":Ar("toggle",e),o=r;break;case"input":Q(e,r),o=J(e,r),Ar("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=B({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Ar("invalid",e)}for(l in ye(n,o),u=o)if(u.hasOwnProperty(l)){var c=u[l];"style"===l?ve(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&Ar("scroll",e):null!=c&&b(e,l,c,s))}switch(n){case"input":U(e),Y(e,r,!1);break;case"textarea":U(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Yr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ki(t),null;case 6:if(e&&null!=t.stateNode)_i(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=rl(nl.current),rl(el.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(l=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Ki(t),null;case 13:if(Po(sl),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,l=!1;else if(l=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(a(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(a(317));l[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ki(t),l=!1}else null!==la&&(iu(la),la=null),l=!0;if(!l)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&sl.current)?0===_s&&(_s=3):vu())),null!==t.updateQueue&&(t.flags|=4),Ki(t),null);case 4:return al(),Ti(e,t),null===e&&jr(t.stateNode.containerInfo),Ki(t),null;case 10:return Ca(t.type._context),Ki(t),null;case 19:if(Po(sl),null===(l=t.memoizedState))return Ki(t),null;if(r=0!=(128&t.flags),null===(s=l.rendering))if(r)Ui(l,!1);else{if(0!==_s||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ul(e))){for(t.flags|=128,Ui(l,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Zo(sl,1&sl.current|2),t.child}e=e.sibling}null!==l.tail&&Ge()>Hs&&(t.flags|=128,r=!0,Ui(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ul(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ui(l,!0),null===l.tail&&"hidden"===l.tailMode&&!s.alternate&&!aa)return Ki(t),null}else 2*Ge()-l.renderingStartTime>Hs&&1073741824!==n&&(t.flags|=128,r=!0,Ui(l,!1),t.lanes=4194304);l.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=l.last)?n.sibling=s:t.child=s,l.last=s)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Ge(),t.sibling=null,n=sl.current,Zo(sl,r?1&n|2:1&n),t):(Ki(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ts)&&(Ki(t),6&t.subtreeFlags&&(t.flags|=8192)):Ki(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Ji(e,t){switch(na(t),t.tag){case 1:return To(t.type)&&Oo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return al(),Po(Do),Po(Io),dl(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return il(t),null;case 13:if(Po(sl),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(sl),null;case 4:return al(),null;case 10:return Ca(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}$i=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ti=function(){},Oi=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,rl(el.current);var a,l=null;switch(n){case"input":o=J(e,o),r=J(e,r),l=[];break;case"select":o=B({},o,{value:void 0}),r=B({},r,{value:void 0}),l=[];break;case"textarea":o=re(e,o),r=re(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Yr)}for(c in ye(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var s=o[c];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(a in s)!s.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&s[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(l||(l=[]),l.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(l=l||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(l=l||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Ar("scroll",e),l||s===u||(l=[])):(l=l||[]).push(c,u))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},_i=function(e,t,n,r){n!==r&&(t.flags|=4)};var Qi=!1,Gi=!1,Xi="function"==typeof WeakSet?WeakSet:Set,Yi=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Eu(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){Eu(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&ts(t,n,a)}o=o.next}while(o!==r)}}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ls(e){var t=e.alternate;null!==t&&(e.alternate=null,ls(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[go],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function is(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||is(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Yr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var ds=null,fs=!1;function ps(e,t,n){for(n=n.child;null!==n;)hs(e,t,n),n=n.sibling}function hs(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Gi||es(n,t);case 6:var r=ds,o=fs;ds=null,ps(e,t,n),fs=o,null!==(ds=r)&&(fs?(e=ds,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ds.removeChild(n.stateNode));break;case 18:null!==ds&&(fs?(e=ds,n=n.stateNode,8===e.nodeType?so(e.parentNode,n):1===e.nodeType&&so(e,n),jt(e)):so(ds,n.stateNode));break;case 4:r=ds,o=fs,ds=n.stateNode.containerInfo,fs=!0,ps(e,t,n),ds=r,fs=o;break;case 0:case 11:case 14:case 15:if(!Gi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,l=a.destroy;a=a.tag,void 0!==l&&(0!=(2&a)||0!=(4&a))&&ts(n,t,l),o=o.next}while(o!==r)}ps(e,t,n);break;case 1:if(!Gi&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Eu(n,t,e)}ps(e,t,n);break;case 21:ps(e,t,n);break;case 22:1&n.mode?(Gi=(r=Gi)||null!==n.memoizedState,ps(e,t,n),Gi=r):ps(e,t,n);break;default:ps(e,t,n)}}function ms(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xi),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var l=e,i=t,s=i;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,fs=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,fs=!0;break e}s=s.return}if(null===ds)throw Error(a(160));hs(l,i,o),ds=null,fs=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Eu(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gs(t,e),t=t.sibling}function gs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vs(t,e),ys(e),4&r){try{rs(3,e,e.return),os(3,e)}catch(t){Eu(e,e.return,t)}try{rs(5,e,e.return)}catch(t){Eu(e,e.return,t)}}break;case 1:vs(t,e),ys(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(vs(t,e),ys(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Eu(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===l.type&&null!=l.name&&G(o,l),be(s,i);var c=be(s,l);for(i=0;i<u.length;i+=2){var d=u[i],f=u[i+1];"style"===d?ve(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,c)}switch(s){case"input":X(o,l);break;case"textarea":ae(o,l);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(o,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(o,!!l.multiple,l.defaultValue,!0):ne(o,!!l.multiple,l.multiple?[]:"",!1))}o[ho]=l}catch(t){Eu(e,e.return,t)}}break;case 6:if(vs(t,e),ys(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,l=e.memoizedProps;try{o.nodeValue=l}catch(t){Eu(e,e.return,t)}}break;case 3:if(vs(t,e),ys(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{jt(t.containerInfo)}catch(t){Eu(e,e.return,t)}break;case 4:default:vs(t,e),ys(e);break;case 13:vs(t,e),ys(e),8192&(o=e.child).flags&&(l=null!==o.memoizedState,o.stateNode.isHidden=l,!l||null!==o.alternate&&null!==o.alternate.memoizedState||(js=Ge())),4&r&&ms(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Gi=(c=Gi)||d,vs(t,e),Gi=c):vs(t,e),ys(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Yi=e,d=e.child;null!==d;){for(f=Yi=d;null!==Yi;){switch(h=(p=Yi).child,p.tag){case 0:case 11:case 14:case 15:rs(4,p,p.return);break;case 1:es(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Eu(r,n,e)}}break;case 5:es(p,p.return);break;case 22:if(null!==p.memoizedState){Ss(f);continue}}null!==h?(h.return=p,Yi=h):Ss(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,c?"function"==typeof(l=o.style).setProperty?l.setProperty("display","none","important"):l.display="none":(s=f.stateNode,i=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=me("display",i))}catch(t){Eu(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Eu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vs(t,e),ys(e),4&r&&ms(e);case 21:}}function ys(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(is(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),cs(e,ss(e),o);break;case 3:case 4:var l=r.stateNode.containerInfo;us(e,ss(e),l);break;default:throw Error(a(161))}}catch(t){Eu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,n){Yi=e,ws(e,t,n)}function ws(e,t,n){for(var r=0!=(1&e.mode);null!==Yi;){var o=Yi,a=o.child;if(22===o.tag&&r){var l=null!==o.memoizedState||Qi;if(!l){var i=o.alternate,s=null!==i&&null!==i.memoizedState||Gi;i=Qi;var u=Gi;if(Qi=l,(Gi=s)&&!u)for(Yi=o;null!==Yi;)s=(l=Yi).child,22===l.tag&&null!==l.memoizedState?Cs(o):null!==s?(s.return=l,Yi=s):Cs(o);for(;null!==a;)Yi=a,ws(a,t,n),a=a.sibling;Yi=o,Qi=i,Gi=u}xs(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Yi=a):xs(e)}}function xs(e){for(;null!==Yi;){var t=Yi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gi||os(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gi)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ga(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&Aa(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Aa(t,i,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&jt(f)}}}break;default:throw Error(a(163))}Gi||512&t.flags&&as(t)}catch(e){Eu(t,t.return,e)}}if(t===e){Yi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yi=n;break}Yi=t.return}}function Ss(e){for(;null!==Yi;){var t=Yi;if(t===e){Yi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yi=n;break}Yi=t.return}}function Cs(e){for(;null!==Yi;){var t=Yi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{os(4,t)}catch(e){Eu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Eu(t,o,e)}}var a=t.return;try{as(t)}catch(e){Eu(t,a,e)}break;case 5:var l=t.return;try{as(t)}catch(e){Eu(t,l,e)}}}catch(e){Eu(t,t.return,e)}if(t===e){Yi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Yi=i;break}Yi=t.return}}var ks,Es=Math.ceil,Ps=w.ReactCurrentDispatcher,Zs=w.ReactCurrentOwner,zs=w.ReactCurrentBatchConfig,Is=0,Ds=null,Rs=null,$s=0,Ts=0,Os=Eo(0),_s=0,Ls=null,Bs=0,Ms=0,As=0,Fs=null,Ns=null,js=0,Hs=1/0,Ws=null,Vs=!1,Us=null,Ks=null,qs=!1,Js=null,Qs=0,Gs=0,Xs=null,Ys=-1,eu=0;function tu(){return 0!=(6&Is)?Ge():-1!==Ys?Ys:Ys=Ge()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Is)&&0!==$s?$s&-$s:null!==va.transition?(0===eu&&(eu=mt()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function ru(e,t,n,r){if(50<Gs)throw Gs=0,Xs=null,Error(a(185));gt(e,n,r),0!=(2&Is)&&e===Ds||(e===Ds&&(0==(2&Is)&&(Ms|=n),4===_s&&su(e,$s)),ou(e,r),1===n&&0===Is&&0==(1&t.mode)&&(Hs=Ge()+500,Fo&&Ho()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var l=31-lt(a),i=1<<l,s=o[l];-1===s?0!=(i&n)&&0==(i&r)||(o[l]=pt(i,t)):s<=t&&(e.expiredLanes|=i),a&=~i}}(e,t);var r=ft(e,e===Ds?$s:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Fo=!0,jo(e)}(uu.bind(null,e)):jo(uu.bind(null,e)),lo((function(){0==(6&Is)&&Ho()})),n=null;else{switch(wt(r)){case 1:n=Ye;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Du(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Ys=-1,eu=0,0!=(6&Is))throw Error(a(327));var n=e.callbackNode;if(Cu()&&e.callbackNode!==n)return null;var r=ft(e,e===Ds?$s:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gu(e,r);else{t=r;var o=Is;Is|=2;var l=mu();for(Ds===e&&$s===t||(Ws=null,Hs=Ge()+500,pu(e,t));;)try{bu();break}catch(t){hu(e,t)}Sa(),Ps.current=l,Is=o,null!==Rs?t=0:(Ds=null,$s=0,t=_s)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=lu(e,o)),1===t)throw n=Ls,pu(e,0),su(e,r),ou(e,Ge()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!ir(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=gu(e,r))&&0!==(l=ht(e))&&(r=l,t=lu(e,l)),1===t))throw n=Ls,pu(e,0),su(e,r),ou(e,Ge()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Su(e,Ns,Ws);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=js+500-Ge())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Su.bind(null,e,Ns,Ws),t);break}Su(e,Ns,Ws);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>o&&(o=i),r&=~l}if(r=o,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Es(r/1960))-r)){e.timeoutHandle=ro(Su.bind(null,e,Ns,Ws),r);break}Su(e,Ns,Ws);break;default:throw Error(a(329))}}}return ou(e,Ge()),e.callbackNode===n?au.bind(null,e):null}function lu(e,t){var n=Fs;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=gu(e,t))&&(t=Ns,Ns=n,null!==t&&iu(t)),e}function iu(e){null===Ns?Ns=e:Ns.push.apply(Ns,e)}function su(e,t){for(t&=~As,t&=~Ms,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Is))throw Error(a(327));Cu();var t=ft(e,0);if(0==(1&t))return ou(e,Ge()),null;var n=gu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=lu(e,r))}if(1===n)throw n=Ls,pu(e,0),su(e,t),ou(e,Ge()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e,Ns,Ws),ou(e,Ge()),null}function cu(e,t){var n=Is;Is|=1;try{return e(t)}finally{0===(Is=n)&&(Hs=Ge()+500,Fo&&Ho())}}function du(e){null!==Js&&0===Js.tag&&0==(6&Is)&&Cu();var t=Is;Is|=1;var n=zs.transition,r=bt;try{if(zs.transition=null,bt=1,e)return e()}finally{bt=r,zs.transition=n,0==(6&(Is=t))&&Ho()}}function fu(){Ts=Os.current,Po(Os)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Rs)for(n=Rs.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oo();break;case 3:al(),Po(Do),Po(Io),dl();break;case 5:il(r);break;case 4:al();break;case 13:case 19:Po(sl);break;case 10:Ca(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Ds=e,Rs=e=Ou(e.current,null),$s=Ts=t,_s=0,Ls=null,As=Ms=Bs=0,Ns=Fs=null,null!==Za){for(t=0;t<Za.length;t++)if(null!==(r=(n=Za[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var l=a.next;a.next=o,r.next=l}n.pending=r}Za=null}return e}function hu(e,t){for(;;){var n=Rs;try{if(Sa(),fl.current=li,yl){for(var r=ml.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yl=!1}if(hl=0,gl=vl=ml=null,bl=!1,wl=0,Zs.current=null,null===n||null===n.return){_s=1,Ls=t,Rs=null;break}e:{var l=e,i=n.return,s=n,u=t;if(t=$s,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=gi(i);if(null!==h){h.flags&=-257,yi(h,i,s,0,t),1&h.mode&&vi(l,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(u),t.updateQueue=v}else m.add(u);break e}if(0==(1&t)){vi(l,c,t),vu();break e}u=Error(a(426))}else if(aa&&1&s.mode){var g=gi(i);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),yi(g,i,s,0,t),ma(ci(u,s));break e}}l=u=ci(u,s),4!==_s&&(_s=2),null===Fs?Fs=[l]:Fs.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Ba(l,hi(0,u,t));break e;case 1:s=u;var y=l.type,b=l.stateNode;if(0==(128&l.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ks||!Ks.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,Ba(l,mi(l,s,t));break e}}l=l.return}while(null!==l)}xu(n)}catch(e){t=e,Rs===n&&null!==n&&(Rs=n=n.return);continue}break}}function mu(){var e=Ps.current;return Ps.current=li,null===e?li:e}function vu(){0!==_s&&3!==_s&&2!==_s||(_s=4),null===Ds||0==(268435455&Bs)&&0==(268435455&Ms)||su(Ds,$s)}function gu(e,t){var n=Is;Is|=2;var r=mu();for(Ds===e&&$s===t||(Ws=null,pu(e,t));;)try{yu();break}catch(t){hu(e,t)}if(Sa(),Is=n,Ps.current=r,null!==Rs)throw Error(a(261));return Ds=null,$s=0,_s}function yu(){for(;null!==Rs;)wu(Rs)}function bu(){for(;null!==Rs&&!Je();)wu(Rs)}function wu(e){var t=ks(e.alternate,e,Ts);e.memoizedProps=e.pendingProps,null===t?xu(e):Rs=t,Zs.current=null}function xu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=qi(n,t,Ts)))return void(Rs=n)}else{if(null!==(n=Ji(n,t)))return n.flags&=32767,void(Rs=n);if(null===e)return _s=6,void(Rs=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Rs=t);Rs=t=e}while(null!==t);0===_s&&(_s=5)}function Su(e,t,n){var r=bt,o=zs.transition;try{zs.transition=null,bt=1,function(e,t,n,r){do{Cu()}while(null!==Js);if(0!=(6&Is))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-lt(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,l),e===Ds&&(Rs=Ds=null,$s=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qs||(qs=!0,Du(tt,(function(){return Cu(),null}))),l=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||l){l=zs.transition,zs.transition=null;var i=bt;bt=1;var s=Is;Is|=4,Zs.current=null,function(e,t){if(eo=Wt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(s=i+o),f!==l||0!==r&&3!==f.nodeType||(u=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===o&&(s=i),p===l&&++d===r&&(u=i),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Wt=!1,Yi=t;null!==Yi;)if(e=(t=Yi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Yi=e;else for(;null!==Yi;){t=Yi;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:ga(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Eu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Yi=e;break}Yi=t.return}m=ns,ns=!1}(e,n),gs(n,e),hr(to),Wt=!!eo,to=eo=null,e.current=n,bs(n,e,o),Qe(),Is=s,bt=i,zs.transition=l}else e.current=n;if(qs&&(qs=!1,Js=e,Qs=o),0===(l=e.pendingLanes)&&(Ks=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Vs)throw Vs=!1,e=Us,Us=null,e;0!=(1&Qs)&&0!==e.tag&&Cu(),0!=(1&(l=e.pendingLanes))?e===Xs?Gs++:(Gs=0,Xs=e):Gs=0,Ho()}(e,t,n,r)}finally{zs.transition=o,bt=r}return null}function Cu(){if(null!==Js){var e=wt(Qs),t=zs.transition,n=bt;try{if(zs.transition=null,bt=16>e?16:e,null===Js)var r=!1;else{if(e=Js,Js=null,Qs=0,0!=(6&Is))throw Error(a(331));var o=Is;for(Is|=4,Yi=e.current;null!==Yi;){var l=Yi,i=l.child;if(0!=(16&Yi.flags)){var s=l.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Yi=c;null!==Yi;){var d=Yi;switch(d.tag){case 0:case 11:case 15:rs(8,d,l)}var f=d.child;if(null!==f)f.return=d,Yi=f;else for(;null!==Yi;){var p=(d=Yi).sibling,h=d.return;if(ls(d),d===c){Yi=null;break}if(null!==p){p.return=h,Yi=p;break}Yi=h}}}var m=l.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Yi=l}}if(0!=(2064&l.subtreeFlags)&&null!==i)i.return=l,Yi=i;else e:for(;null!==Yi;){if(0!=(2048&(l=Yi).flags))switch(l.tag){case 0:case 11:case 15:rs(9,l,l.return)}var y=l.sibling;if(null!==y){y.return=l.return,Yi=y;break e}Yi=l.return}}var b=e.current;for(Yi=b;null!==Yi;){var w=(i=Yi).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Yi=w;else e:for(i=b;null!==Yi;){if(0!=(2048&(s=Yi).flags))try{switch(s.tag){case 0:case 11:case 15:os(9,s)}}catch(e){Eu(s,s.return,e)}if(s===i){Yi=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Yi=x;break e}Yi=s.return}}if(Is=o,Ho(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,zs.transition=t}}return!1}function ku(e,t,n){e=_a(e,t=hi(0,t=ci(n,t),1),1),t=tu(),null!==e&&(gt(e,1,t),ou(e,t))}function Eu(e,t,n){if(3===e.tag)ku(e,e,n);else for(;null!==t;){if(3===t.tag){ku(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r))){t=_a(t,e=mi(t,e=ci(n,e),1),1),e=tu(),null!==t&&(gt(t,1,e),ou(t,e));break}}t=t.return}}function Pu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Ds===e&&($s&n)===n&&(4===_s||3===_s&&(130023424&$s)===$s&&500>Ge()-js?pu(e,0):As|=n),ou(e,t)}function Zu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Da(e,t))&&(gt(e,t,n),ou(e,n))}function zu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Zu(e,n)}function Iu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Zu(e,n)}function Du(e,t){return Ke(e,t)}function Ru(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function $u(e,t,n,r){return new Ru(e,t,n,r)}function Tu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ou(e,t){var n=e.alternate;return null===n?((n=$u(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _u(e,t,n,r,o,l){var i=2;if(r=e,"function"==typeof e)Tu(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case C:return Lu(n.children,o,l,t);case k:i=8,o|=8;break;case E:return(e=$u(12,n,t,2|o)).elementType=E,e.lanes=l,e;case I:return(e=$u(13,n,t,o)).elementType=I,e.lanes=l,e;case D:return(e=$u(19,n,t,o)).elementType=D,e.lanes=l,e;case T:return Bu(n,o,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:i=10;break e;case Z:i=9;break e;case z:i=11;break e;case R:i=14;break e;case $:i=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=$u(i,n,t,o)).elementType=e,t.type=r,t.lanes=l,t}function Lu(e,t,n,r){return(e=$u(7,e,r,t)).lanes=n,e}function Bu(e,t,n,r){return(e=$u(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Mu(e,t,n){return(e=$u(6,e,null,t)).lanes=n,e}function Au(e,t,n){return(t=$u(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Nu(e,t,n,r,o,a,l,i,s){return e=new Fu(e,t,n,i,s),1===t?(t=1,!0===a&&(t|=8)):t=0,a=$u(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},$a(a),e}function ju(e){if(!e)return zo;e:{if(je(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(To(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(To(n))return Lo(e,n,t)}return t}function Hu(e,t,n,r,o,a,l,i,s){return(e=Nu(n,r,!0,e,0,a,0,i,s)).context=ju(null),n=e.current,(a=Oa(r=tu(),o=nu(n))).callback=null!=t?t:null,_a(n,a,o),e.current.lanes=o,gt(e,o,r),ou(e,r),e}function Wu(e,t,n,r){var o=t.current,a=tu(),l=nu(o);return n=ju(n),null===t.context?t.context=n:t.pendingContext=n,(t=Oa(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=_a(o,t,l))&&(ru(e,o,l,a),La(e,o,l)),l}function Vu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Uu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Uu(e,t),(e=e.alternate)&&Uu(e,t)}ks=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Do.current)wi=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wi=!1,function(e,t,n){switch(t.tag){case 3:Di(t),ha();break;case 5:ll(t);break;case 1:To(t.type)&&Bo(t);break;case 4:ol(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Zo(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Zo(sl,1&sl.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Mi(e,t,n):(Zo(sl,1&sl.current),null!==(e=Vi(e,t,n))?e.sibling:null);Zo(sl,1&sl.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hi(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Zo(sl,sl.current),r)break;return null;case 22:case 23:return t.lanes=0,Ei(e,t,n)}return Vi(e,t,n)}(e,t,n);wi=0!=(131072&e.flags)}else wi=!1,aa&&0!=(1048576&t.flags)&&ea(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wi(e,t),e=t.pendingProps;var o=$o(t,Io.current);Ea(t,n),o=kl(null,t,r,e,o,n);var l=El();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,To(r)?(l=!0,Bo(t)):l=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,$a(t),o.updater=ja,t.stateNode=o,o._reactInternals=t,Ua(t,r,e,n),t=Ii(null,t,r,!0,l,n)):(t.tag=0,aa&&l&&ta(t),xi(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wi(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Tu(e)?1:0;if(null!=e){if((e=e.$$typeof)===z)return 11;if(e===R)return 14}return 2}(r),e=ga(r,e),o){case 0:t=Zi(null,t,r,e,n);break e;case 1:t=zi(null,t,r,e,n);break e;case 11:t=Si(null,t,r,e,n);break e;case 14:t=Ci(null,t,r,ga(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Zi(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 1:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 3:e:{if(Di(t),null===e)throw Error(a(387));r=t.pendingProps,o=(l=t.memoizedState).element,Ta(e,t),Ma(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Ri(e,t,r,n,o=ci(Error(a(423)),t));break e}if(r!==o){t=Ri(e,t,r,n,o=ci(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,la=null,n=Xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Vi(e,t,n);break e}xi(e,t,r,n)}t=t.child}return t;case 5:return ll(t),null===e&&ca(t),r=t.type,o=t.pendingProps,l=null!==e?e.memoizedProps:null,i=o.children,no(r,o)?i=null:null!==l&&no(r,l)&&(t.flags|=32),Pi(e,t),xi(e,t,i,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Mi(e,t,n);case 4:return ol(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ga(t,null,r,n):xi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Si(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 7:return xi(e,t,t.pendingProps,n),t.child;case 8:case 12:return xi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value,Zo(ya,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===o.children&&!Do.current){t=Vi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){i=l.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===l.tag){(u=Oa(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ka(l.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(a(341));i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),ka(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}xi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ea(t,n),r=r(o=Pa(o)),t.flags|=1,xi(e,t,r,n),t.child;case 14:return o=ga(r=t.type,t.pendingProps),Ci(e,t,r,o=ga(r.type,o),n);case 15:return ki(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ga(r,o),Wi(e,t),t.tag=1,To(r)?(e=!0,Bo(t)):e=!1,Ea(t,n),Wa(t,r,o),Ua(t,r,o,n),Ii(null,t,r,!0,e,n);case 19:return Hi(e,t,n);case 22:return Ei(e,t,n)}throw Error(a(156,t.tag))};var qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ju(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Yu(){}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var l=a;if("function"==typeof o){var i=o;o=function(){var e=Vu(l);i.call(e)}}Wu(t,l,e,o)}else l=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Vu(l);a.call(e)}}var l=Hu(t,r,e,0,null,!1,0,"",Yu);return e._reactRootContainer=l,e[mo]=l.current,jr(8===e.nodeType?e.parentNode:e),du(),l}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var i=r;r=function(){var e=Vu(s);i.call(e)}}var s=Nu(e,0,!1,null,0,!1,0,"",Yu);return e._reactRootContainer=s,e[mo]=s.current,jr(8===e.nodeType?e.parentNode:e),du((function(){Wu(t,s,n,r)})),s}(n,t,e,o,r);return Vu(l)}Qu.prototype.render=Ju.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Wu(e,t,null,null)},Qu.prototype.unmount=Ju.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Wu(null,e,null,null)})),t[mo]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&Bt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ou(t,Ge()),0==(6&Is)&&(Hs=Ge()+500,Ho()))}break;case 13:du((function(){var t=Da(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Ku(e,1)}},St=function(e){if(13===e.tag){var t=Da(e,134217728);null!==t&&ru(t,e,134217728,tu()),Ku(e,134217728)}},Ct=function(e){if(13===e.tag){var t=nu(e),n=Da(e,t);null!==n&&ru(n,e,t,tu()),Ku(e,t)}},kt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));K(r),X(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},ze=cu,Ie=du;var tc={usingClientEntryPoint:!1,Events:[wo,xo,So,Pe,Ze,cu]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gu(e))throw Error(a(299));var n=!1,r="",o=qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Nu(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,jr(8===e.nodeType?e.parentNode:e),new Ju(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Xu(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,l="",i=qu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Hu(t,null,e,1,null!=n?n:null,o,0,l,i),e[mo]=t.current,jr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qu(t)},t.render=function(e,t,n){if(!Xu(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(a(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,i=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case i:case l:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case v:case m:case s:return e;default:return t}}case o:return t}}}function S(e){return x(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=i,t.StrictMode=l,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===f},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===i},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===i||e===l||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},9818:(e,t,n)=>{"use strict";n.r(t),n.d(t,{AbortedDeferredError:()=>U,Await:()=>_t,BrowserRouter:()=>rn,Form:()=>dn,HashRouter:()=>on,Link:()=>un,MemoryRouter:()=>It,NavLink:()=>cn,Navigate:()=>Dt,NavigationType:()=>r,Outlet:()=>Rt,Route:()=>$t,Router:()=>Tt,RouterProvider:()=>zt,Routes:()=>Ot,ScrollRestoration:()=>pn,UNSAFE_DataRouterContext:()=>je,UNSAFE_DataRouterStateContext:()=>He,UNSAFE_LocationContext:()=>Ue,UNSAFE_NavigationContext:()=>Ve,UNSAFE_RouteContext:()=>Ke,UNSAFE_useScrollRestoration:()=>zn,createBrowserRouter:()=>Yt,createHashRouter:()=>en,createMemoryRouter:()=>Ht,createPath:()=>m,createRoutesFromChildren:()=>Ft,createRoutesFromElements:()=>Ft,createSearchParams:()=>Jt,defer:()=>J,generatePath:()=>T,isRouteErrorResponse:()=>X,json:()=>V,matchPath:()=>O,matchRoutes:()=>x,parsePath:()=>v,redirect:()=>Q,renderMatches:()=>Nt,resolvePath:()=>B,unstable_HistoryRouter:()=>an,unstable_useBlocker:()=>Zt,unstable_usePrompt:()=>Dn,useActionData:()=>St,useAsyncError:()=>Et,useAsyncValue:()=>kt,useBeforeUnload:()=>In,useFetcher:()=>kn,useFetchers:()=>En,useFormAction:()=>Sn,useHref:()=>Qe,useInRouterContext:()=>Ge,useLinkClickHandler:()=>yn,useLoaderData:()=>wt,useLocation:()=>Xe,useMatch:()=>et,useMatches:()=>bt,useNavigate:()=>tt,useNavigation:()=>gt,useNavigationType:()=>Ye,useOutlet:()=>ot,useOutletContext:()=>rt,useParams:()=>at,useResolvedPath:()=>lt,useRevalidator:()=>yt,useRouteError:()=>Ct,useRouteLoaderData:()=>xt,useRoutes:()=>it,useSearchParams:()=>bn,useSubmit:()=>wn});var r,o=n(7294),a=n.t(o,2);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));const i="popstate";function s(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:o,v5Compat:a=!1}=e;t=n.map(((e,t)=>d(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let l=u(null==o?t.length-1:o),i=r.Pop,s=null;function u(e){return Math.min(Math.max(e,0),t.length-1)}function c(){return t[l]}function d(e,n,r){void 0===n&&(n=null);let o=h(t?c().pathname:"/",e,n,r);return f("/"===o.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),o}function p(e){return"string"==typeof e?e:m(e)}return{get index(){return l},get action(){return i},get location(){return c()},createHref:p,createURL:e=>new URL(p(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?v(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){i=r.Push;let o=d(e,n);l+=1,t.splice(l,t.length,o),a&&s&&s({action:i,location:o,delta:1})},replace(e,n){i=r.Replace;let o=d(e,n);t[l]=o,a&&s&&s({action:i,location:o,delta:0})},go(e){i=r.Pop;let n=u(l+e),o=t[n];l=n,s&&s({action:i,location:o,delta:e})},listen:e=>(s=e,()=>{s=null})}}function u(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return h("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:m(t)}),null,e)}function c(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=v(e.location.hash.substr(1));return h("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:m(t))}),(function(e,t){f("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!1===e||null==e)throw new Error(t)}function f(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function p(e,t){return{usr:e.state,key:e.key,idx:t}}function h(e,t,n,r){return void 0===n&&(n=null),l({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?v(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function v(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function g(e,t,n,o){void 0===o&&(o={});let{window:a=document.defaultView,v5Compat:s=!1}=o,u=a.history,c=r.Pop,f=null,v=g();function g(){return(u.state||{idx:null}).idx}function y(){c=r.Pop;let e=g(),t=null==e?null:e-v;v=e,f&&f({action:c,location:w.location,delta:t})}function b(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:m(e);return d(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,u.replaceState(l({},u.state,{idx:v}),""));let w={get action(){return c},get location(){return e(a,u)},listen(e){if(f)throw new Error("A history only accepts one active listener");return a.addEventListener(i,y),f=e,()=>{a.removeEventListener(i,y),f=null}},createHref:e=>t(a,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){c=r.Push;let o=h(w.location,e,t);n&&n(o,e),v=g()+1;let l=p(o,v),i=w.createHref(o);try{u.pushState(l,"",i)}catch(e){a.location.assign(i)}s&&f&&f({action:c,location:w.location,delta:1})},replace:function(e,t){c=r.Replace;let o=h(w.location,e,t);n&&n(o,e),v=g();let a=p(o,v),l=w.createHref(o);u.replaceState(a,"",l),s&&f&&f({action:c,location:w.location,delta:0})},go:e=>u.go(e)};return w}var y;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(y||(y={}));const b=new Set(["lazy","caseSensitive","path","id","index","children"]);function w(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,o)=>{let a=[...n,o],i="string"==typeof e.id?e.id:a.join("-");if(d(!0!==e.index||!e.children,"Cannot specify children on an index route"),d(!r[i],'Found a route id collision on id "'+i+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=l({},e,{hasErrorBoundary:t(e),id:i});return r[i]=n,n}{let n=l({},e,{id:i,hasErrorBoundary:t(e),children:void 0});return r[i]=n,e.children&&(n.children=w(e.children,t,a,r)),n}}))}function x(e,t,n){void 0===n&&(n="/");let r=L(("string"==typeof t?v(t):t).pathname||"/",n);if(null==r)return null;let o=S(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=$(o[e],_(r));return a}function S(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let l={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};l.relativePath.startsWith("/")&&(d(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=N([r,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),S(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:R(i,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of C(e.path))o(e,t,n);else o(e,t)})),t}function C(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let l=C(r.join("/")),i=[];return i.push(...l.map((e=>""===e?a:[a,e].join("/")))),o&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}const k=/^:\w+$/,E=3,P=2,Z=1,z=10,I=-2,D=e=>"*"===e;function R(e,t){let n=e.split("/"),r=n.length;return n.some(D)&&(r+=I),t&&(r+=P),n.filter((e=>!D(e))).reduce(((e,t)=>e+(k.test(t)?E:""===t?Z:z)),r)}function $(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let l=n[e],i=e===n.length-1,s="/"===o?t:t.slice(o.length)||"/",u=O({path:l.relativePath,caseSensitive:l.caseSensitive,end:i},s);if(!u)return null;Object.assign(r,u.params);let c=l.route;a.push({params:r,pathname:N([o,u.pathname]),pathnameBase:j(N([o,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(o=N([o,u.pathnameBase]))}return a}function T(e,t){void 0===t&&(t={});let n=e;return n.endsWith("*")&&"*"!==n&&!n.endsWith("/*")&&(f(!1,'Route path "'+n+'" will be treated as if it were "'+n.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+n.replace(/\*$/,"/*")+'".'),n=n.replace(/\*$/,"/*")),(n.startsWith("/")?"/":"")+n.split(/\/+/).map(((e,n,r)=>{if(n===r.length-1&&"*"===e)return t["*"];const o=e.match(/^:(\w+)(\??)$/);if(o){const[,e,n]=o;let r=t[e];return"?"===n?null==r?"":r:(null==r&&d(!1,'Missing ":'+e+'" param'),r)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),f("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],l=a.replace(/(.)\/+$/,"$1"),i=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=i[n]||"";l=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return f(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(i[n]||"",t),e}),{}),pathname:a,pathnameBase:l,pattern:e}}function _(e){try{return decodeURI(e)}catch(t){return f(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function L(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function B(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?v(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:H(r),hash:W(o)}}function M(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function A(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function F(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=v(e):(o=l({},e),d(!o.pathname||!o.pathname.includes("?"),M("?","pathname","search",o)),d(!o.pathname||!o.pathname.includes("#"),M("#","pathname","hash",o)),d(!o.search||!o.search.includes("#"),M("#","search","hash",o)));let a,i=""===e||""===o.pathname,s=i?"/":o.pathname;if(r||null==s)a=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let u=B(o,a),c=s&&"/"!==s&&s.endsWith("/"),f=(i||"."===s)&&n.endsWith("/");return u.pathname.endsWith("/")||!c&&!f||(u.pathname+="/"),u}const N=e=>e.join("/").replace(/\/\/+/g,"/"),j=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),H=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",W=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",V=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,r=new Headers(n.headers);return r.has("Content-Type")||r.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),l({},n,{headers:r}))};class U extends Error{}class K{constructor(e,t){let n;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],d(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>n=t)),this.controller=new AbortController;let r=()=>n(new U("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",r),this.controller.signal.addEventListener("abort",r),this.data=Object.entries(e).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:this.trackPromise(n,r)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,r){return this.controller.signal.aborted&&n instanceof U?(this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n)):(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),n?(Object.defineProperty(e,"_error",{get:()=>n}),this.emit(!1,t),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>r}),this.emit(!1,t),r))}emit(e,t){this.subscribers.forEach((n=>n(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((r=>{e.removeEventListener("abort",n),(r||this.done)&&t(r)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return d(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:q(r)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function q(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const J=function(e,t){return void 0===t&&(t={}),new K(e,"number"==typeof t?{status:t}:t)},Q=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,l({},n,{headers:r}))};class G{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function X(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const Y=["post","put","patch","delete"],ee=new Set(Y),te=["get",...Y],ne=new Set(te),re=new Set([301,302,303,307,308]),oe=new Set([307,308]),ae={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},le={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},ie={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},se=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ue="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ce=!ue,de=e=>Boolean(e.hasErrorBoundary);function fe(e){d(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t,n=e.detectErrorBoundary||de,o={},a=w(e.routes,n,void 0,o),i=l({v7_normalizeFormMethod:!1},e.future),s=null,u=new Set,c=null,p=null,m=null,v=null!=e.hydrationData,g=x(a,e.history.location,e.basename),b=null;if(null==g){let t=Ee(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=ke(a);g=n,b={[r.id]:t}}let S,C,k=!(g.some((e=>e.route.lazy))||g.some((e=>e.route.loader))&&null==e.hydrationData),E={historyAction:e.history.action,location:e.history.location,matches:g,initialized:k,navigation:ae,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||b,fetchers:new Map,blockers:new Map},P=r.Pop,Z=!1,z=!1,I=!1,D=[],R=[],$=new Map,T=0,O=-1,_=new Map,B=new Set,M=new Map,A=new Map,F=new Map,N=!1;function j(e){E=l({},E,e),u.forEach((e=>e(E)))}function H(n,o){var i,s;let u,c=null!=E.actionData&&null!=E.navigation.formMethod&&Re(E.navigation.formMethod)&&"loading"===E.navigation.state&&!0!==(null==(i=n.state)?void 0:i._isRedirect);u=o.actionData?Object.keys(o.actionData).length>0?o.actionData:null:c?E.actionData:null;let d=o.loaderData?Se(E.loaderData,o.loaderData,o.matches||[],o.errors):E.loaderData;for(let[e]of F)ee(e);let f=!0===Z||null!=E.navigation.formMethod&&Re(E.navigation.formMethod)&&!0!==(null==(s=n.state)?void 0:s._isRedirect);t&&(a=t,t=void 0),j(l({},o,{actionData:u,loaderData:d,historyAction:P,location:n,initialized:!0,navigation:ae,revalidation:"idle",restoreScrollPosition:fe(n,o.matches||E.matches),preventScrollReset:f,blockers:new Map(E.blockers)})),z||P===r.Pop||(P===r.Push?e.history.push(n,n.state):P===r.Replace&&e.history.replace(n,n.state)),P=r.Pop,Z=!1,z=!1,I=!1,D=[],R=[]}async function W(i,s,u){C&&C.abort(),C=null,P=i,z=!0===(u&&u.startUninterruptedRevalidation),function(e,t){if(c&&p&&m){let n=t.map((e=>_e(e,E.loaderData))),r=p(e,n)||e.key;c[r]=m()}}(E.location,E.matches),Z=!0===(u&&u.preventScrollReset);let f=t||a,h=u&&u.overrideNavigation,v=x(f,s,e.basename);if(!v){let e=Ee(404,{pathname:s.pathname}),{matches:t,route:n}=ke(f);return re(),void H(s,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(b=s,!((g=E.location).pathname!==b.pathname||g.search!==b.search||g.hash===b.hash||u&&u.submission&&Re(u.submission.formMethod)))return void H(s,{matches:v});var g,b;C=new AbortController;let w,k,_=be(e.history,s,C.signal,u&&u.submission);if(u&&u.pendingError)k={[Ce(v).route.id]:u.pendingError};else if(u&&u.submission&&Re(u.submission.formMethod)){let e=await async function(e,t,a,i,s){let u;q(),j({navigation:l({state:"submitting",location:t},a)});let c=Le(i,t);if(c.route.action||c.route.lazy){if(u=await ye("action",e,c,i,o,n,S.basename),e.signal.aborted)return{shortCircuited:!0}}else u={type:y.error,error:Ee(405,{method:e.method,pathname:t.pathname,routeId:c.route.id})};if(De(u)){let e;return e=s&&null!=s.replace?s.replace:u.location===E.location.pathname+E.location.search,await U(E,u,{submission:a,replace:e}),{shortCircuited:!0}}if(Ie(u)){let e=Ce(i,c.route.id);return!0!==(s&&s.replace)&&(P=r.Push),{pendingActionData:{},pendingActionError:{[e.route.id]:u.error}}}if(ze(u))throw Ee(400,{type:"defer-action"});return{pendingActionData:{[c.route.id]:u.data}}}(_,s,u.submission,v,{replace:u.replace});if(e.shortCircuited)return;w=e.pendingActionData,k=e.pendingActionError,h=l({state:"loading",location:s},u.submission),_=new Request(_.url,{signal:_.signal})}let{shortCircuited:L,loaderData:F,errors:N}=await async function(n,r,o,i,s,u,c,f,p){let h=i;h||(h=l({state:"loading",location:r,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},s));let m=s||u?s||u:h.formMethod&&h.formAction&&h.formData&&h.formEncType?{formMethod:h.formMethod,formAction:h.formAction,formData:h.formData,formEncType:h.formEncType}:void 0,v=t||a,[g,y]=he(e.history,E,o,m,r,I,D,R,M,v,e.basename,f,p);if(re((e=>!(o&&o.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),0===g.length&&0===y.length)return H(r,l({matches:o,loaderData:{},errors:p||null},f?{actionData:f}:{})),{shortCircuited:!0};if(!z){y.forEach((e=>{let t=E.fetchers.get(e.key),n={state:"loading",data:t&&t.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(e.key,n)}));let e=f||E.actionData;j(l({navigation:h},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},y.length>0?{fetchers:new Map(E.fetchers)}:{}))}O=++T,y.forEach((e=>$.set(e.key,C)));let{results:b,loaderResults:w,fetcherResults:x}=await K(E.matches,o,g,y,n);if(n.signal.aborted)return{shortCircuited:!0};y.forEach((e=>$.delete(e.key)));let S=Pe(b);if(S)return await U(E,S,{replace:c}),{shortCircuited:!0};let{loaderData:k,errors:P}=xe(E,o,g,w,p,y,x,A);return A.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&A.delete(t)}))})),function(){let e=[];for(let t of B){let n=E.fetchers.get(t);d(n,"Expected fetcher: "+t),"loading"===n.state&&(B.delete(t),e.push(t))}X(e)}(),l({loaderData:k,errors:P},Y(O)||y.length>0?{fetchers:new Map(E.fetchers)}:{})}(_,s,v,h,u&&u.submission,u&&u.fetcherSubmission,u&&u.replace,w,k);L||(C=null,H(s,l({matches:v},w?{actionData:w}:{},{loaderData:F,errors:N})))}function V(e){return E.fetchers.get(e)||le}async function U(t,n,o){var a;let{submission:i,replace:s,isFetchActionRedirect:u}=void 0===o?{}:o;n.revalidate&&(I=!0);let c=h(t.location,n.location,l({_isRedirect:!0},u?{_isFetchActionRedirect:!0}:{}));if(d(c,"Expected a location on the redirect navigation"),se.test(n.location)&&ue&&void 0!==(null==(a=window)?void 0:a.location)){let t=e.history.createURL(n.location),r=null==L(t.pathname,e.basename||"/");if(window.location.origin!==t.origin||r)return void(s?window.location.replace(n.location):window.location.assign(n.location))}C=null;let f=!0===s?r.Replace:r.Push,{formMethod:p,formAction:m,formEncType:v,formData:g}=t.navigation;!i&&p&&m&&g&&v&&(i={formMethod:p,formAction:m,formEncType:v,formData:g}),oe.has(n.status)&&i&&Re(i.formMethod)?await W(f,c,{submission:l({},i,{formAction:n.location}),preventScrollReset:Z}):u?await W(f,c,{overrideNavigation:{state:"loading",location:c,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},fetcherSubmission:i,preventScrollReset:Z}):await W(f,c,{overrideNavigation:{state:"loading",location:c,formMethod:i?i.formMethod:void 0,formAction:i?i.formAction:void 0,formEncType:i?i.formEncType:void 0,formData:i?i.formData:void 0},preventScrollReset:Z})}async function K(t,r,a,l,i){let s=await Promise.all([...a.map((e=>ye("loader",i,e,r,o,n,S.basename))),...l.map((t=>t.matches&&t.match?ye("loader",be(e.history,t.path,i.signal),t.match,t.matches,o,n,S.basename):{type:y.error,error:Ee(404,{pathname:t.path})}))]),u=s.slice(0,a.length),c=s.slice(a.length);return await Promise.all([$e(t,a,u,i.signal,!1,E.loaderData),$e(t,l.map((e=>e.match)),c,i.signal,!0)]),{results:s,loaderResults:u,fetcherResults:c}}function q(){I=!0,D.push(...re()),M.forEach(((e,t)=>{$.has(t)&&(R.push(t),G(t))}))}function J(e,t,n){let r=Ce(E.matches,t);Q(e),j({errors:{[r.route.id]:n},fetchers:new Map(E.fetchers)})}function Q(e){$.has(e)&&G(e),M.delete(e),_.delete(e),B.delete(e),E.fetchers.delete(e)}function G(e){let t=$.get(e);d(t,"Expected fetch controller: "+e),t.abort(),$.delete(e)}function X(e){for(let t of e){let e={state:"idle",data:V(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,e)}}function Y(e){let t=[];for(let[n,r]of _)if(r<e){let e=E.fetchers.get(n);d(e,"Expected fetcher: "+n),"loading"===e.state&&(G(n),_.delete(n),t.push(n))}return X(t),t.length>0}function ee(e){E.blockers.delete(e),F.delete(e)}function te(e,t){let n=E.blockers.get(e)||ie;d("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state),E.blockers.set(e,t),j({blockers:new Map(E.blockers)})}function ne(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===F.size)return;F.size>1&&f(!1,"A router only supports one blocker at a time");let o=Array.from(F.entries()),[a,l]=o[o.length-1],i=E.blockers.get(a);return i&&"proceeding"===i.state?void 0:l({currentLocation:t,nextLocation:n,historyAction:r})?a:void 0}function re(e){let t=[];return A.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),A.delete(r))})),t}function fe(e,t){if(c&&p&&m){let n=t.map((e=>_e(e,E.loaderData))),r=p(e,n)||e.key,o=c[r];if("number"==typeof o)return o}return null}return S={get basename(){return e.basename},get state(){return E},get routes(){return a},initialize:function(){return s=e.history.listen((t=>{let{action:n,location:r,delta:o}=t;if(N)return void(N=!1);f(0===F.size||null!=o,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let a=ne({currentLocation:E.location,nextLocation:r,historyAction:n});return a&&null!=o?(N=!0,e.history.go(-1*o),void te(a,{state:"blocked",location:r,proceed(){te(a,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),e.history.go(o)},reset(){ee(a),j({blockers:new Map(S.state.blockers)})}})):W(n,r)})),E.initialized||W(r.Pop,E.location),S},subscribe:function(e){return u.add(e),()=>u.delete(e)},enableScrollRestoration:function(e,t,n){if(c=e,m=t,p=n||(e=>e.key),!v&&E.navigation===ae){v=!0;let e=fe(E.location,E.matches);null!=e&&j({restoreScrollPosition:e})}return()=>{c=null,m=null,p=null}},navigate:async function t(n,o){if("number"==typeof n)return void e.history.go(n);let{path:a,submission:s,error:u}=pe(n,i,o),c=E.location,d=h(E.location,a,o&&o.state);d=l({},d,e.history.encodeLocation(d));let f=o&&null!=o.replace?o.replace:void 0,p=r.Push;!0===f?p=r.Replace:!1===f||null!=s&&Re(s.formMethod)&&s.formAction===E.location.pathname+E.location.search&&(p=r.Replace);let m=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,v=ne({currentLocation:c,nextLocation:d,historyAction:p});if(!v)return await W(p,d,{submission:s,pendingError:u,preventScrollReset:m,replace:o&&o.replace});te(v,{state:"blocked",location:d,proceed(){te(v,{state:"proceeding",proceed:void 0,reset:void 0,location:d}),t(n,o)},reset(){ee(v),j({blockers:new Map(E.blockers)})}})},fetch:function(r,s,u,c){if(ce)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");$.has(r)&&G(r);let f=x(t||a,u,e.basename);if(!f)return void J(r,s,Ee(404,{pathname:u}));let{path:p,submission:h}=pe(u,i,c,!0),m=Le(f,p);Z=!0===(c&&c.preventScrollReset),h&&Re(h.formMethod)?async function(r,i,s,u,c,f){if(q(),M.delete(r),!u.route.action&&!u.route.lazy){let e=Ee(405,{method:f.formMethod,pathname:s,routeId:i});return void J(r,i,e)}let p=E.fetchers.get(r),h=l({state:"submitting"},f,{data:p&&p.data," _hasFetcherDoneAnything ":!0});E.fetchers.set(r,h),j({fetchers:new Map(E.fetchers)});let m=new AbortController,v=be(e.history,s,m.signal,f);$.set(r,m);let g=await ye("action",v,u,c,o,n,S.basename);if(v.signal.aborted)return void($.get(r)===m&&$.delete(r));if(De(g)){$.delete(r),B.add(r);let e=l({state:"loading"},f,{data:void 0," _hasFetcherDoneAnything ":!0});return E.fetchers.set(r,e),j({fetchers:new Map(E.fetchers)}),U(E,g,{submission:f,isFetchActionRedirect:!0})}if(Ie(g))return void J(r,i,g.error);if(ze(g))throw Ee(400,{type:"defer-action"});let y=E.navigation.location||E.location,b=be(e.history,y,m.signal),w=t||a,k="idle"!==E.navigation.state?x(w,E.navigation.location,e.basename):E.matches;d(k,"Didn't find any matches after fetcher action");let Z=++T;_.set(r,Z);let z=l({state:"loading",data:g.data},f,{" _hasFetcherDoneAnything ":!0});E.fetchers.set(r,z);let[L,F]=he(e.history,E,k,f,y,I,D,R,M,w,e.basename,{[u.route.id]:g.data},void 0);F.filter((e=>e.key!==r)).forEach((e=>{let t=e.key,n=E.fetchers.get(t),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,r),$.set(t,m)})),j({fetchers:new Map(E.fetchers)});let{results:N,loaderResults:W,fetcherResults:V}=await K(E.matches,k,L,F,b);if(m.signal.aborted)return;_.delete(r),$.delete(r),F.forEach((e=>$.delete(e.key)));let Q=Pe(N);if(Q)return U(E,Q);let{loaderData:G,errors:X}=xe(E,E.matches,L,W,void 0,F,V,A),ee={state:"idle",data:g.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(r,ee);let te=Y(Z);"loading"===E.navigation.state&&Z>O?(d(P,"Expected pending action"),C&&C.abort(),H(E.navigation.location,{matches:k,loaderData:G,errors:X,fetchers:new Map(E.fetchers)})):(j(l({errors:X,loaderData:Se(E.loaderData,G,k,X)},te?{fetchers:new Map(E.fetchers)}:{})),I=!1)}(r,s,p,m,f,h):(M.set(r,{routeId:s,path:p}),async function(t,r,a,i,s,u){let c=E.fetchers.get(t),f=l({state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},u,{data:c&&c.data," _hasFetcherDoneAnything ":!0});E.fetchers.set(t,f),j({fetchers:new Map(E.fetchers)});let p=new AbortController,h=be(e.history,a,p.signal);$.set(t,p);let m=await ye("loader",h,i,s,o,n,S.basename);if(ze(m)&&(m=await Te(m,h.signal,!0)||m),$.get(t)===p&&$.delete(t),h.signal.aborted)return;if(De(m))return void await U(E,m);if(Ie(m)){let e=Ce(E.matches,r);return E.fetchers.delete(t),void j({fetchers:new Map(E.fetchers),errors:{[e.route.id]:m.error}})}d(!ze(m),"Unhandled fetcher deferred data");let v={state:"idle",data:m.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};E.fetchers.set(t,v),j({fetchers:new Map(E.fetchers)})}(r,s,p,m,f,h))},revalidate:function(){q(),j({revalidation:"loading"}),"submitting"!==E.navigation.state&&("idle"!==E.navigation.state?W(P||E.historyAction,E.navigation.location,{overrideNavigation:E.navigation}):W(E.historyAction,E.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:V,deleteFetcher:Q,dispose:function(){s&&s(),u.clear(),C&&C.abort(),E.fetchers.forEach(((e,t)=>Q(t))),E.blockers.forEach(((e,t)=>ee(t)))},getBlocker:function(e,t){let n=E.blockers.get(e)||ie;return F.get(e)!==t&&F.set(e,t),n},deleteBlocker:ee,_internalFetchControllers:$,_internalActiveDeferreds:A,_internalSetRoutes:function(e){t=e}},S}function pe(e,t,n,r){void 0===r&&(r=!1);let o,a="string"==typeof e?e:m(e);if(!n||!function(e){return null!=e&&"formData"in e}(n))return{path:a};if(n.formMethod&&(l=n.formMethod,!ne.has(l.toLowerCase())))return{path:a,error:Ee(405,{method:n.formMethod})};var l;if(n.formData){let e=n.formMethod||"get";if(o={formMethod:t.v7_normalizeFormMethod?e.toUpperCase():e.toLowerCase(),formAction:Ze(a),formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:n.formData},Re(o.formMethod))return{path:a,submission:o}}let i=v(a),s=we(n.formData);return r&&i.search&&Oe(i.search)&&s.append("index",""),i.search="?"+s,{path:m(i),submission:o}}function he(e,t,n,r,o,a,i,s,u,c,d,f,p){let h=p?Object.values(p)[0]:f?Object.values(f)[0]:void 0,m=e.createURL(t.location),v=e.createURL(o),g=a||m.toString()===v.toString()||m.search!==v.search,y=p?Object.keys(p)[0]:void 0,b=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,y).filter(((e,n)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=void 0===e[n.route.id];return r||o}(t.loaderData,t.matches[n],e)||i.some((t=>t===e.route.id)))return!0;let o=t.matches[n],a=e;return ve(e,l({currentUrl:m,currentParams:o.params,nextUrl:v,nextParams:a.params},r,{actionResult:h,defaultShouldRevalidate:g||me(o,a)}))})),w=[];return u.forEach(((e,o)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let a=x(c,e.path,d);if(!a)return void w.push(l({key:o},e,{matches:null,match:null}));let i=Le(a,e.path);(s.includes(o)||ve(i,l({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:v,nextParams:n[n.length-1].params},r,{actionResult:h,defaultShouldRevalidate:g})))&&w.push(l({key:o,matches:a,match:i},e))})),[b,w]}function me(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ve(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function ge(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];d(o,"No route found in manifest");let a={};for(let e in r){let t=void 0!==o[e]&&"hasErrorBoundary"!==e;f(!t,'Route "'+o.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||b.has(e)||(a[e]=r[e])}Object.assign(o,a),Object.assign(o,{hasErrorBoundary:t(l({},o)),lazy:void 0})}async function ye(e,t,n,r,o,a,l,i,s,u){let c,f,p;void 0===l&&(l="/"),void 0===i&&(i=!1),void 0===s&&(s=!1);let h=e=>{let r,o=new Promise(((e,t)=>r=t));return p=()=>r(),t.signal.addEventListener("abort",p),Promise.race([e({request:t,params:n.params,context:u}),o])};try{let r=n.route[e];if(n.route.lazy)if(r)f=(await Promise.all([h(r),ge(n.route,a,o)]))[0];else{if(await ge(n.route,a,o),r=n.route[e],!r){if("action"===e)throw Ee(405,{method:t.method,pathname:new URL(t.url).pathname,routeId:n.route.id});return{type:y.data,data:void 0}}f=await h(r)}else d(r,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),f=await h(r);d(void 0!==f,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){c=y.error,f=e}finally{p&&t.signal.removeEventListener("abort",p)}if(null!=(v=f)&&"number"==typeof v.status&&"string"==typeof v.statusText&&"object"==typeof v.headers&&void 0!==v.body){let e,o=f.status;if(re.has(o)){let e=f.headers.get("Location");if(d(e,"Redirects returned/thrown from loaders/actions must have a Location header"),se.test(e)){if(!i){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),o=null!=L(r.pathname,l);r.origin===n.origin&&o&&(e=r.pathname+r.search+r.hash)}}else{let o=F(e,A(r.slice(0,r.indexOf(n)+1)).map((e=>e.pathnameBase)),new URL(t.url).pathname);if(d(m(o),"Unable to resolve redirect location: "+e),l){let e=o.pathname;o.pathname="/"===e?l:N([l,e])}e=m(o)}if(i)throw f.headers.set("Location",e),f;return{type:y.redirect,status:o,location:e,revalidate:null!==f.headers.get("X-Remix-Revalidate")}}if(s)throw{type:c||y.data,response:f};let a=f.headers.get("Content-Type");return e=a&&/\bapplication\/json\b/.test(a)?await f.json():await f.text(),c===y.error?{type:c,error:new G(o,f.statusText,e),headers:f.headers}:{type:y.data,data:e,statusCode:f.status,headers:f.headers}}var v,g,b;return c===y.error?{type:c,error:f}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(f)?{type:y.deferred,deferredData:f,statusCode:null==(g=f.init)?void 0:g.status,headers:(null==(b=f.init)?void 0:b.headers)&&new Headers(f.init.headers)}:{type:y.data,data:f}}function be(e,t,n,r){let o=e.createURL(Ze(t)).toString(),a={signal:n};if(r&&Re(r.formMethod)){let{formMethod:e,formEncType:t,formData:n}=r;a.method=e.toUpperCase(),a.body="application/x-www-form-urlencoded"===t?we(n):n}return new Request(o,a)}function we(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,r instanceof File?r.name:r);return t}function xe(e,t,n,r,o,a,i,s){let{loaderData:u,errors:c}=function(e,t,n,r,o){let a,l={},i=null,s=!1,u={};return n.forEach(((n,c)=>{let f=t[c].route.id;if(d(!De(n),"Cannot handle redirect results in processLoaderData"),Ie(n)){let t=Ce(e,f),o=n.error;r&&(o=Object.values(r)[0],r=void 0),i=i||{},null==i[t.route.id]&&(i[t.route.id]=o),l[f]=void 0,s||(s=!0,a=X(n.error)?n.error.status:500),n.headers&&(u[f]=n.headers)}else ze(n)?(o.set(f,n.deferredData),l[f]=n.deferredData.data):l[f]=n.data,null==n.statusCode||200===n.statusCode||s||(a=n.statusCode),n.headers&&(u[f]=n.headers)})),r&&(i=r,l[Object.keys(r)[0]]=void 0),{loaderData:l,errors:i,statusCode:a||200,loaderHeaders:u}}(t,n,r,o,s);for(let t=0;t<a.length;t++){let{key:n,match:r}=a[t];d(void 0!==i&&void 0!==i[t],"Did not find corresponding fetcher result");let o=i[t];if(Ie(o)){let t=Ce(e.matches,null==r?void 0:r.route.id);c&&c[t.route.id]||(c=l({},c,{[t.route.id]:o.error})),e.fetchers.delete(n)}else if(De(o))d(!1,"Unhandled fetcher revalidation redirect");else if(ze(o))d(!1,"Unhandled fetcher deferred data");else{let t={state:"idle",data:o.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};e.fetchers.set(n,t)}}return{loaderData:u,errors:c}}function Se(e,t,n,r){let o=l({},t);for(let a of n){let n=a.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(o[n]=t[n]):void 0!==e[n]&&a.route.loader&&(o[n]=e[n]),r&&r.hasOwnProperty(n))break}return o}function Ce(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function ke(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ee(e,t){let{pathname:n,routeId:r,method:o,type:a}=void 0===t?{}:t,l="Unknown Server Error",i="Unknown @remix-run/router error";return 400===e?(l="Bad Request",o&&n&&r?i="You made a "+o+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===a&&(i="defer() is not supported in actions")):403===e?(l="Forbidden",i='Route "'+r+'" does not match URL "'+n+'"'):404===e?(l="Not Found",i='No route matches URL "'+n+'"'):405===e&&(l="Method Not Allowed",o&&n&&r?i="You made a "+o.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':o&&(i='Invalid request method "'+o.toUpperCase()+'"')),new G(e||500,l,new Error(i),!0)}function Pe(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(De(n))return n}}function Ze(e){return m(l({},"string"==typeof e?v(e):e,{hash:""}))}function ze(e){return e.type===y.deferred}function Ie(e){return e.type===y.error}function De(e){return(e&&e.type)===y.redirect}function Re(e){return ee.has(e.toLowerCase())}async function $e(e,t,n,r,o,a){for(let l=0;l<n.length;l++){let i=n[l],s=t[l];if(!s)continue;let u=e.find((e=>e.route.id===s.route.id)),c=null!=u&&!me(u,s)&&void 0!==(a&&a[s.route.id]);ze(i)&&(o||c)&&await Te(i,r,o).then((e=>{e&&(n[l]=e||n[l])}))}}async function Te(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:y.data,data:e.deferredData.unwrappedData}}catch(e){return{type:y.error,error:e}}return{type:y.data,data:e.deferredData.data}}}function Oe(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function _e(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}function Le(e,t){let n="string"==typeof t?v(t).search:t.search;if(e[e.length-1].route.index&&Oe(n||""))return e[e.length-1];let r=A(e);return r[r.length-1]}Symbol("deferred");"function"==typeof Object.is&&Object.is;const{useState:Be,useEffect:Me,useLayoutEffect:Ae,useDebugValue:Fe}=a;"undefined"==typeof window||void 0===window.document||window.document.createElement;const Ne=a.useSyncExternalStore,je=o.createContext(null),He=o.createContext(null),We=o.createContext(null),Ve=o.createContext(null),Ue=o.createContext(null),Ke=o.createContext({outlet:null,matches:[]}),qe=o.createContext(null);function Je(){return Je=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Je.apply(this,arguments)}function Qe(e,t){let{relative:n}=void 0===t?{}:t;Ge()||d(!1);let{basename:r,navigator:a}=o.useContext(Ve),{hash:l,pathname:i,search:s}=lt(e,{relative:n}),u=i;return"/"!==r&&(u="/"===i?r:N([r,i])),a.createHref({pathname:u,search:s,hash:l})}function Ge(){return null!=o.useContext(Ue)}function Xe(){return Ge()||d(!1),o.useContext(Ue).location}function Ye(){return o.useContext(Ue).navigationType}function et(e){Ge()||d(!1);let{pathname:t}=Xe();return o.useMemo((()=>O(e,t)),[t,e])}function tt(){Ge()||d(!1);let{basename:e,navigator:t}=o.useContext(Ve),{matches:n}=o.useContext(Ke),{pathname:r}=Xe(),a=JSON.stringify(A(n).map((e=>e.pathnameBase))),l=o.useRef(!1);return o.useEffect((()=>{l.current=!0})),o.useCallback((function(n,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof n)return void t.go(n);let i=F(n,JSON.parse(a),r,"path"===o.relative);"/"!==e&&(i.pathname="/"===i.pathname?e:N([e,i.pathname])),(o.replace?t.replace:t.push)(i,o.state,o)}),[e,t,a,r])}const nt=o.createContext(null);function rt(){return o.useContext(nt)}function ot(e){let t=o.useContext(Ke).outlet;return t?o.createElement(nt.Provider,{value:e},t):t}function at(){let{matches:e}=o.useContext(Ke),t=e[e.length-1];return t?t.params:{}}function lt(e,t){let{relative:n}=void 0===t?{}:t,{matches:r}=o.useContext(Ke),{pathname:a}=Xe(),l=JSON.stringify(A(r).map((e=>e.pathnameBase)));return o.useMemo((()=>F(e,JSON.parse(l),a,"path"===n)),[e,l,a,n])}function it(e,t){Ge()||d(!1);let{navigator:n}=o.useContext(Ve),a=o.useContext(He),{matches:l}=o.useContext(Ke),i=l[l.length-1],s=i?i.params:{},u=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let c,f=Xe();if(t){var p;let e="string"==typeof t?v(t):t;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||d(!1),c=e}else c=f;let h=c.pathname||"/",m=x(e,{pathname:"/"===u?h:h.slice(u.length)||"/"}),g=dt(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:N([u,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:N([u,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a||void 0);return t&&g?o.createElement(Ue.Provider,{value:{location:Je({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:r.Pop}},g):g}function st(){let e=Ct(),t=X(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return o.createElement(o.Fragment,null,o.createElement("h2",null,"Unexpected Application Error!"),o.createElement("h3",{style:{fontStyle:"italic"}},t),n?o.createElement("pre",{style:r},n):null,null)}class ut extends o.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?o.createElement(Ke.Provider,{value:this.props.routeContext},o.createElement(qe.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ct(e){let{routeContext:t,match:n,children:r}=e,a=o.useContext(je);return a&&a.static&&a.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=n.route.id),o.createElement(Ke.Provider,{value:t},r)}function dt(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,a=null==n?void 0:n.errors;if(null!=a){let e=r.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||d(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,l,i)=>{let s=l.route.id?null==a?void 0:a[l.route.id]:null,u=null;n&&(u=l.route.ErrorBoundary?o.createElement(l.route.ErrorBoundary,null):l.route.errorElement?l.route.errorElement:o.createElement(st,null));let c=t.concat(r.slice(0,i+1)),d=()=>{let t=e;return s?t=u:l.route.Component?t=o.createElement(l.route.Component,null):l.route.element&&(t=l.route.element),o.createElement(ct,{match:l,routeContext:{outlet:e,matches:c},children:t})};return n&&(l.route.ErrorBoundary||l.route.errorElement||0===i)?o.createElement(ut,{location:n.location,component:u,error:s,children:d(),routeContext:{outlet:null,matches:c}}):d()}),null)}var ft,pt;function ht(e){let t=o.useContext(je);return t||d(!1),t}function mt(e){let t=o.useContext(He);return t||d(!1),t}function vt(e){let t=function(e){let t=o.useContext(Ke);return t||d(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||d(!1),n.route.id}function gt(){return mt(pt.UseNavigation).navigation}function yt(){let e=ht(ft.UseRevalidator),t=mt(pt.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function bt(){let{matches:e,loaderData:t}=mt(pt.UseMatches);return o.useMemo((()=>e.map((e=>{let{pathname:n,params:r}=e;return{id:e.route.id,pathname:n,params:r,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function wt(){let e=mt(pt.UseLoaderData),t=vt(pt.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}function xt(e){return mt(pt.UseRouteLoaderData).loaderData[e]}function St(){let e=mt(pt.UseActionData);return o.useContext(Ke)||d(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function Ct(){var e;let t=o.useContext(qe),n=mt(pt.UseRouteError),r=vt(pt.UseRouteError);return t||(null==(e=n.errors)?void 0:e[r])}function kt(){let e=o.useContext(We);return null==e?void 0:e._data}function Et(){let e=o.useContext(We);return null==e?void 0:e._error}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(ft||(ft={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(pt||(pt={}));let Pt=0;function Zt(e){let{router:t}=ht(ft.UseBlocker),n=mt(pt.UseBlocker),[r]=o.useState((()=>String(++Pt))),a=o.useCallback((t=>"function"==typeof e?!!e(t):!!e),[e]),l=t.getBlocker(r,a);return o.useEffect((()=>()=>t.deleteBlocker(r)),[t,r]),n.blockers.get(r)||l}function zt(e){let{fallbackElement:t,router:n}=e,r=o.useCallback((()=>n.state),[n]),a=Ne(n.subscribe,r,r),l=o.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),i=n.basename||"/",s=o.useMemo((()=>({router:n,navigator:l,static:!1,basename:i})),[n,l,i]);return o.createElement(o.Fragment,null,o.createElement(je.Provider,{value:s},o.createElement(He.Provider,{value:a},o.createElement(Tt,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:l},n.state.initialized?o.createElement(Ot,null):t))),null)}function It(e){let{basename:t,children:n,initialEntries:r,initialIndex:a}=e,l=o.useRef();null==l.current&&(l.current=s({initialEntries:r,initialIndex:a,v5Compat:!0}));let i=l.current,[u,c]=o.useState({action:i.action,location:i.location});return o.useLayoutEffect((()=>i.listen(c)),[i]),o.createElement(Tt,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:i})}function Dt(e){let{to:t,replace:n,state:r,relative:a}=e;Ge()||d(!1);let l=o.useContext(He),i=tt();return o.useEffect((()=>{l&&"idle"!==l.navigation.state||i(t,{replace:n,state:r,relative:a})})),null}function Rt(e){return ot(e.context)}function $t(e){d(!1)}function Tt(e){let{basename:t="/",children:n=null,location:a,navigationType:l=r.Pop,navigator:i,static:s=!1}=e;Ge()&&d(!1);let u=t.replace(/^\/*/,"/"),c=o.useMemo((()=>({basename:u,navigator:i,static:s})),[u,i,s]);"string"==typeof a&&(a=v(a));let{pathname:f="/",search:p="",hash:h="",state:m=null,key:g="default"}=a,y=o.useMemo((()=>{let e=L(f,u);return null==e?null:{location:{pathname:e,search:p,hash:h,state:m,key:g},navigationType:l}}),[u,f,p,h,m,g,l]);return null==y?null:o.createElement(Ve.Provider,{value:c},o.createElement(Ue.Provider,{children:n,value:y}))}function Ot(e){let{children:t,location:n}=e,r=o.useContext(je);return it(r&&!t?r.router.routes:Ft(t),n)}function _t(e){let{children:t,errorElement:n,resolve:r}=e;return o.createElement(Mt,{resolve:r,errorElement:n},o.createElement(At,null,t))}var Lt;!function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(Lt||(Lt={}));const Bt=new Promise((()=>{}));class Mt extends o.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,a=Lt.pending;if(n instanceof Promise)if(this.state.error){a=Lt.error;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,a=void 0!==r._error?Lt.error:void 0!==r._data?Lt.success:Lt.pending):(a=Lt.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else a=Lt.success,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(a===Lt.error&&r._error instanceof U)throw Bt;if(a===Lt.error&&!t)throw r._error;if(a===Lt.error)return o.createElement(We.Provider,{value:r,children:t});if(a===Lt.success)return o.createElement(We.Provider,{value:r,children:e});throw r}}function At(e){let{children:t}=e,n=kt(),r="function"==typeof t?t(n):t;return o.createElement(o.Fragment,null,r)}function Ft(e,t){void 0===t&&(t=[]);let n=[];return o.Children.forEach(e,((e,r)=>{if(!o.isValidElement(e))return;let a=[...t,r];if(e.type===o.Fragment)return void n.push.apply(n,Ft(e.props.children,a));e.type!==$t&&d(!1),e.props.index&&e.props.children&&d(!1);let l={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(l.children=Ft(e.props.children,a)),n.push(l)})),n}function Nt(e){return dt(e)}function jt(e){return Boolean(e.ErrorBoundary)||Boolean(e.errorElement)}function Ht(e,t){return fe({basename:null==t?void 0:t.basename,future:null==t?void 0:t.future,history:s({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:e,detectErrorBoundary:jt}).initialize()}function Wt(){return Wt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wt.apply(this,arguments)}function Vt(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}const Ut="get",Kt="application/x-www-form-urlencoded";function qt(e){return null!=e&&"string"==typeof e.tagName}function Jt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}const Qt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],Gt=["aria-current","caseSensitive","className","end","style","to","children"],Xt=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative","preventScrollReset"];function Yt(e,t){return fe({basename:null==t?void 0:t.basename,future:null==t?void 0:t.future,history:u({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||tn(),routes:e,detectErrorBoundary:jt}).initialize()}function en(e,t){return fe({basename:null==t?void 0:t.basename,future:null==t?void 0:t.future,history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||tn(),routes:e,detectErrorBoundary:jt}).initialize()}function tn(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Wt({},t,{errors:nn(t.errors)})),t}function nn(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new G(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){let t=new Error(r.message);t.stack="",n[e]=t}else n[e]=r;return n}function rn(e){let{basename:t,children:n,window:r}=e,a=o.useRef();null==a.current&&(a.current=u({window:r,v5Compat:!0}));let l=a.current,[i,s]=o.useState({action:l.action,location:l.location});return o.useLayoutEffect((()=>l.listen(s)),[l]),o.createElement(Tt,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:l})}function on(e){let{basename:t,children:n,window:r}=e,a=o.useRef();null==a.current&&(a.current=c({window:r,v5Compat:!0}));let l=a.current,[i,s]=o.useState({action:l.action,location:l.location});return o.useLayoutEffect((()=>l.listen(s)),[l]),o.createElement(Tt,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:l})}function an(e){let{basename:t,children:n,history:r}=e;const[a,l]=o.useState({action:r.action,location:r.location});return o.useLayoutEffect((()=>r.listen(l)),[r]),o.createElement(Tt,{basename:t,children:n,location:a.location,navigationType:a.action,navigator:r})}const ln="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,sn=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,un=o.forwardRef((function(e,t){let n,{onClick:r,relative:a,reloadDocument:l,replace:i,state:s,target:u,to:c,preventScrollReset:d}=e,f=Vt(e,Qt),{basename:p}=o.useContext(Ve),h=!1;if("string"==typeof c&&sn.test(c)&&(n=c,ln)){let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=L(t.pathname,p);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:h=!0}let m=Qe(c,{relative:a}),v=yn(c,{replace:i,state:s,target:u,preventScrollReset:d,relative:a});return o.createElement("a",Wt({},f,{href:n||m,onClick:h||l?r:function(e){r&&r(e),e.defaultPrevented||v(e)},ref:t,target:u}))})),cn=o.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:r=!1,className:a="",end:l=!1,style:i,to:s,children:u}=e,c=Vt(e,Gt),d=lt(s,{relative:c.relative}),f=Xe(),p=o.useContext(He),{navigator:h}=o.useContext(Ve),m=h.encodeLocation?h.encodeLocation(d).pathname:d.pathname,v=f.pathname,g=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;r||(v=v.toLowerCase(),g=g?g.toLowerCase():null,m=m.toLowerCase());let y,b=v===m||!l&&v.startsWith(m)&&"/"===v.charAt(m.length),w=null!=g&&(g===m||!l&&g.startsWith(m)&&"/"===g.charAt(m.length)),x=b?n:void 0;y="function"==typeof a?a({isActive:b,isPending:w}):[a,b?"active":null,w?"pending":null].filter(Boolean).join(" ");let S="function"==typeof i?i({isActive:b,isPending:w}):i;return o.createElement(un,Wt({},c,{"aria-current":x,className:y,ref:t,style:S,to:s}),"function"==typeof u?u({isActive:b,isPending:w}):u)})),dn=o.forwardRef(((e,t)=>o.createElement(fn,Wt({},e,{ref:t})))),fn=o.forwardRef(((e,t)=>{let{reloadDocument:n,replace:r,method:a=Ut,action:l,onSubmit:i,fetcherKey:s,routeId:u,relative:c,preventScrollReset:d}=e,f=Vt(e,Xt),p=xn(s,u),h="get"===a.toLowerCase()?"get":"post",m=Sn(l,{relative:c});return o.createElement("form",Wt({ref:t,method:h,action:m,onSubmit:n?i:e=>{if(i&&i(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter,n=(null==t?void 0:t.getAttribute("formmethod"))||a;p(t||e.currentTarget,{method:n,replace:r,relative:c,preventScrollReset:d})}},f))}));function pn(e){let{getKey:t,storageKey:n}=e;return zn({getKey:t,storageKey:n}),null}var hn,mn;function vn(e){let t=o.useContext(je);return t||d(!1),t}function gn(e){let t=o.useContext(He);return t||d(!1),t}function yn(e,t){let{target:n,replace:r,state:a,preventScrollReset:l,relative:i}=void 0===t?{}:t,s=tt(),u=Xe(),c=lt(e,{relative:i});return o.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==r?r:m(u)===m(c);s(e,{replace:n,state:a,preventScrollReset:l,relative:i})}}),[u,s,c,r,a,n,e,l,i])}function bn(e){let t=o.useRef(Jt(e)),n=o.useRef(!1),r=Xe(),a=o.useMemo((()=>function(e,t){let n=Jt(e);if(t)for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(r.search,n.current?null:t.current)),[r.search]),l=tt(),i=o.useCallback(((e,t)=>{const r=Jt("function"==typeof e?e(a):e);n.current=!0,l("?"+r,t)}),[l,a]);return[a,i]}function wn(){return xn()}function xn(e,t){let{router:n}=vn(hn.UseSubmitImpl),r=Sn();return o.useCallback((function(o,a){if(void 0===a&&(a={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:l,encType:i,formData:s,url:u}=function(e,t,n){let r,o,a,l;if(qt(i=e)&&"form"===i.tagName.toLowerCase()){let i=n.submissionTrigger;r=n.method||e.getAttribute("method")||Ut,o=n.action||e.getAttribute("action")||t,a=n.encType||e.getAttribute("enctype")||Kt,l=new FormData(e),i&&i.name&&l.append(i.name,i.value)}else if(function(e){return qt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return qt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');r=n.method||e.getAttribute("formmethod")||i.getAttribute("method")||Ut,o=n.action||e.getAttribute("formaction")||i.getAttribute("action")||t,a=n.encType||e.getAttribute("formenctype")||i.getAttribute("enctype")||Kt,l=new FormData(i),e.name&&l.append(e.name,e.value)}else{if(qt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(r=n.method||Ut,o=n.action||t,a=n.encType||Kt,e instanceof FormData)l=e;else if(l=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)l.append(t,n);else if(null!=e)for(let t of Object.keys(e))l.append(t,e[t])}var i;let{protocol:s,host:u}=window.location;return{url:new URL(o,s+"//"+u),method:r.toLowerCase(),encType:a,formData:l}}(o,r,a),c=u.pathname+u.search,f={replace:a.replace,preventScrollReset:a.preventScrollReset,formData:s,formMethod:l,formEncType:i};e?(null==t&&d(!1),n.fetch(e,t,c,f)):n.navigate(c,f)}),[r,n,e,t])}function Sn(e,t){let{relative:n}=void 0===t?{}:t,{basename:r}=o.useContext(Ve),a=o.useContext(Ke);a||d(!1);let[l]=a.matches.slice(-1),i=Wt({},lt(e||".",{relative:n})),s=Xe();if(null==e&&(i.search=s.search,i.hash=s.hash,l.route.index)){let e=new URLSearchParams(i.search);e.delete("index"),i.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!l.route.index||(i.search=i.search?i.search.replace(/^\?/,"?index&"):"?index"),"/"!==r&&(i.pathname="/"===i.pathname?r:N([r,i.pathname])),m(i)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(hn||(hn={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(mn||(mn={}));let Cn=0;function kn(){var e;let{router:t}=vn(hn.UseFetcher),n=o.useContext(Ke);n||d(!1);let r=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==r&&d(!1);let[a]=o.useState((()=>String(++Cn))),[l]=o.useState((()=>(r||d(!1),function(e,t){return o.forwardRef(((n,r)=>o.createElement(fn,Wt({},n,{ref:r,fetcherKey:e,routeId:t}))))}(a,r)))),[i]=o.useState((()=>e=>{t||d(!1),r||d(!1),t.fetch(a,r,e)})),s=xn(a,r),u=t.getFetcher(a),c=o.useMemo((()=>Wt({Form:l,submit:s,load:i},u)),[u,l,s,i]);return o.useEffect((()=>()=>{t?t.deleteFetcher(a):console.warn("No fetcher available to clean up from useFetcher()")}),[t,a]),c}function En(){return[...gn(mn.UseFetchers).fetchers.values()]}const Pn="react-router-scroll-positions";let Zn={};function zn(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:r}=vn(hn.UseScrollRestoration),{restoreScrollPosition:a,preventScrollReset:l}=gn(mn.UseScrollRestoration),i=Xe(),s=bt(),u=gt();o.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e,t){let{capture:n}={};o.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("pagehide",e,t),()=>{window.removeEventListener("pagehide",e,t)}}),[e,n])}(o.useCallback((()=>{if("idle"===u.state){let e=(t?t(i,s):null)||i.key;Zn[e]=window.scrollY}sessionStorage.setItem(n||Pn,JSON.stringify(Zn)),window.history.scrollRestoration="auto"}),[n,t,u.state,i,s])),"undefined"!=typeof document&&(o.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||Pn);e&&(Zn=JSON.parse(e))}catch(e){}}),[n]),o.useLayoutEffect((()=>{let e=null==r?void 0:r.enableScrollRestoration(Zn,(()=>window.scrollY),t);return()=>e&&e()}),[r,t]),o.useLayoutEffect((()=>{if(!1!==a)if("number"!=typeof a){if(i.hash){let e=document.getElementById(i.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==l&&window.scrollTo(0,0)}else window.scrollTo(0,a)}),[i,a,l]))}function In(e,t){let{capture:n}=t||{};o.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,n])}function Dn(e){let{when:t,message:n}=e,r=Zt(t);o.useEffect((()=>{"blocked"!==r.state||t||r.reset()}),[r,t]),o.useEffect((()=>{"blocked"===r.state&&(window.confirm(n)?setTimeout(r.proceed,0):r.reset())}),[r,n])}},5251:(e,t,n)=>{"use strict";var r=n(7294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,a={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!s.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:a,_owner:i.current}}t.Fragment=a,t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,C={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},l=null,i=null;if(null!=t)for(o in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)S.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=t[o]);var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===a[o]&&(a[o]=s[o]);return{$$typeof:n,type:e,key:l,ref:i,props:a,_owner:C.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var Z=/\/+/g;function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,o,a,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s=!1;if(null===e)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return l=l(s=e),e=""===a?"."+z(s,0):a,x(l)?(o="",null!=e&&(o=e.replace(Z,"$&/")+"/"),I(l,t,o,"",(function(e){return e}))):null!=l&&(P(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,o+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(Z,"$&/")+"/")+e)),t.push(l)),1;if(s=0,a=""===a?".":a+":",x(e))for(var u=0;u<e.length;u++){var c=a+z(i=e[u],u);s+=I(i,t,o,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(i=e.next()).done;)s+=I(i=i.value,t,o,c=a+z(i,u++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function D(e,t,n){if(null==e)return e;var r=[],o=0;return I(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var $={current:null},T={transition:null},O={ReactCurrentDispatcher:$,ReactCurrentBatchConfig:T,ReactCurrentOwner:C};t.Children={map:D,forEach:function(e,t,n){D(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return D(e,(function(){t++})),t},toArray:function(e){return D(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=l,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)S.call(t,u)&&!k.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:n,type:e.type,key:a,ref:l,props:o,_owner:i}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return $.current.useCallback(e,t)},t.useContext=function(e){return $.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return $.current.useDeferredValue(e)},t.useEffect=function(e,t){return $.current.useEffect(e,t)},t.useId=function(){return $.current.useId()},t.useImperativeHandle=function(e,t,n){return $.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return $.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return $.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return $.current.useMemo(e,t)},t.useReducer=function(e,t,n){return $.current.useReducer(e,t,n)},t.useRef=function(e){return $.current.useRef(e)},t.useState=function(e){return $.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return $.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return $.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,l=o>>>1;r<l;){var i=2*(r+1)-1,s=e[i],u=i+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[i]=n,r=i);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();t.unstable_now=function(){return i.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function x(e){if(v=!1,w(e),!m)if(null!==r(u))m=!0,T(S);else{var t=r(c);null!==t&&O(x,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,y(P),P=-1),h=!0;var a=p;try{for(w(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!I());){var l=f.callback;if("function"==typeof l){f.callback=null,p=f.priorityLevel;var i=l(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?f.callback=i:f===r(u)&&o(u),w(n)}else o(u);f=r(u)}if(null!==f)var s=!0;else{var d=r(c);null!==d&&O(x,d.startTime-n),s=!1}return s}finally{f=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,k=!1,E=null,P=-1,Z=5,z=-1;function I(){return!(t.unstable_now()-z<Z)}function D(){if(null!==E){var e=t.unstable_now();z=e;var n=!0;try{n=E(!0,e)}finally{n?C():(k=!1,E=null)}}else k=!1}if("function"==typeof b)C=function(){b(D)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,$=R.port2;R.port1.onmessage=D,C=function(){$.postMessage(null)}}else C=function(){g(D,0)};function T(e){E=e,k||(k=!0,C())}function O(e,n){P=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Z=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>l?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(v?(y(P),P=-1):v=!0,O(x,a-l))):(e.sortIndex=i,n(u,e),m||h||(m=!0,T(S))),e},t.unstable_shouldYield=I,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},8548:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r=n(3379),o=n.n(r),a=n(7795),l=n.n(a),i=n(569),s=n.n(i),u=n(3565),c=n.n(u),d=n(9216),f=n.n(d),p=n(4589),h=n.n(p),m=n(1424),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=s().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),o()(m.Z,v);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},l=[],i=0;i<e.length;i++){var s=e[i],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:h,references:1})}l.push(d)}return l}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=n(a[l]);t[i].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4969:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=n(9818),l=r(n(4614)),i=r(n(3010)),s=r(n(1103));t.default=()=>{const e=(0,a.useNavigate)(),t=(0,a.useLocation)().pathname;return o.default.createElement(i.default,{component:"div",variant:"outlined",size:"sm",sx:{minWidth:200,maxWidth:200,overflow:"auto"}},o.default.createElement(l.default,null,[{name:"Code Review",path:"/code-review"},{name:"Tweet Gen",path:"/tweet-gen"},{name:"Chatbot",path:"/chatbot"}].map((({name:n,path:r},a)=>o.default.createElement(s.default,{selected:r===t,key:a,onClick:()=>e(r)},n)))))}},6389:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(477)),l=r(n(7201)),i=r(n(9755)),s=r(n(5418)),u=r(n(6191));t.default=({description:e,onClose:t})=>o.default.createElement(l.default,{sx:{alignItems:"flex-start",mb:2},startDecorator:o.default.createElement(s.default,{sx:{mt:"2px",mx:"4px",fontSize:"xl2"}}),variant:"soft",color:"danger",endDecorator:o.default.createElement(i.default,{variant:"soft",size:"sm",color:"danger",onClick:()=>t()},o.default.createElement(u.default,null))},o.default.createElement("div",null,o.default.createElement(a.default,{fontWeight:"lg",mt:.25},"Heads Up!"),o.default.createElement(a.default,{fontSize:"sm",sx:{opacity:.8}},e)))},7702:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=n(9818),l=r(n(8928)),i=r(n(5904)),s=r(n(7588));t.default=()=>{const e=(0,a.useNavigate)();return o.default.createElement(l.default,{color:"neutral",sx:{p:1,display:"flex",justifyContent:"space-between",alignItems:"center"}},o.default.createElement(i.default,{size:"sm",variant:"plain",onClick:()=>e("/")},"AI Apps"),o.default.createElement(s.default,null))}},2588:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(2968)),l=r(n(477));t.default=({value:e})=>o.default.createElement(a.default,{placeholder:"Results will display here!",value:null!=e?e:"",minRows:6,size:"md",endDecorator:o.default.createElement(l.default,{level:"body3",sx:{ml:"auto"}},e?e.length:0," character(s)")})},7588:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(4877)),l=r(n(969)),i=r(n(1637)),s=r(n(477)),u=r(n(7608)),c=n(2141);t.default=()=>{var e;const[t,n]=(0,c.useOpenAIToken)(),r=o.default.createElement(i.default,{sx:{width:350}},o.default.createElement(s.default,{level:"inherit"},"If you don't already have an API key, you can create one for free at ",o.default.createElement("a",{target:"_blank",rel:"noreferrer",href:"https://platform.openai.com/account/api-keys"},"https://platform.openai.com/account/api-keys"),"."));return o.default.createElement(a.default,{size:"sm",type:"password",sx:{width:300},placeholder:"OpenAI API Key",defaultValue:null!==(e=t())&&void 0!==e?e:void 0,onChange:e=>{return t=e.target.value,n(t);var t},endDecorator:o.default.createElement(l.default,{title:r,variant:"soft",size:"sm"},o.default.createElement(u.default,{color:"primary"}))})}},2141:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useOpenAIToken=void 0;const n="openai-token";t.useOpenAIToken=()=>[()=>localStorage.getItem(n),e=>e?localStorage.setItem(n,e):localStorage.removeItem(n)]},4648:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(745)),l=n(9818),i=r(n(6537));n(8548);const s=r(n(2413)),u=r(n(4260)),c=r(n(3024)),d=r(n(559)),f=(0,l.createHashRouter)([{path:"/",element:o.default.createElement(i.default,null),children:[{index:!0,element:o.default.createElement(u.default,null)},{path:"/code-review",element:o.default.createElement(s.default,null)},{path:"/tweet-gen",element:o.default.createElement(d.default,null)},{path:"/chatbot",element:o.default.createElement(c.default,null)}]}]),p=document.getElementById("root");a.default.createRoot(p).render(o.default.createElement(l.RouterProvider,{router:f}))},3024:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294));t.default=()=>o.default.createElement("span",null,"Sup Chatbot!")},2413:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(7294)),l=o(n(5904)),i=o(n(1637)),s=o(n(5665)),u=o(n(4877)),c=o(n(477)),d=o(n(2588)),f=n(1023),p=n(2141);t.default=()=>{const[e,t]=a.default.useState(""),[n,o]=a.default.useState(null),[h,m]=(0,p.useOpenAIToken)();return a.default.createElement(a.default.Fragment,null,a.default.createElement(s.default,{variant:"outlined",sx:{gap:2,width:350}},a.default.createElement(i.default,null,a.default.createElement(c.default,{level:"h2"},"Code Review"),a.default.createElement(c.default,{level:"body2"},"Bug squashin'")),a.default.createElement(i.default,null,a.default.createElement(u.default,{onChange:e=>t(e.target.value),placeholder:"https://...",size:"sm"}),a.default.createElement(c.default,{sx:{mt:1},level:"body3"},"URL of code file (eg. https://raw.githubusercontent...)")),a.default.createElement(l.default,{onClick:()=>{fetch(e).then((e=>e.text())).then((e=>{const t=(e=>`\nYou are an expert programmer in all programming languages. A peer programmer has asked you to review their code.\nGiven a code snippet, please provide a concise code review, with actionable suggestions for improvement.\n\nWhen reviewing the code, make sure you consider the following:\n  * Bugs or other issues that would make things not work as expected\n  * Security issues\n  * Performance improvements\n  * Code that would be complex to maintain, such as: code duplication, unclear variable and function names, etc.\n  * Any other issues you can think of\n\nPlease us the below template for your response:\n\n-template start-\n\nProgramming language: {language}\nCode quality score (out of 10): {score}\n\nWhat this code does: {description} (in 100 words or less)\n\nCode review:\n\n  1. Bugs: {bugs}\n  2. Security: {security}\n  3. Performance: {performance}\n  4. Maintainability: {maintainability}\n  5. Other: {other}\n\n-template end-\n\nHere is the code to review (do not include this in your response):\n${e}\n`)(e),n=[{role:"user",content:t}],a=h();if(!a)throw new Error("No token found");(0,f.streamChatGPTCompletions)({token:a},n).then((e=>r(void 0,void 0,void 0,(function*(){var t;const n=e.getReader();let r="";for(;;){const{done:e,value:a}=yield n.read();if(e)break;const l=null===(t=a.choices[0])||void 0===t?void 0:t.delta.content;void 0!==l&&(r+=l),o(r)}})))).catch((e=>{console.error(e)}))}))},variant:"outlined",disabled:!e},"Submit")),a.default.createElement(i.default,{sx:{minWidth:400,maxWidth:600,flexGrow:1}},a.default.createElement(d.default,{value:n})))}},4260:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294));t.default=()=>o.default.createElement("span",null,"Home Page!")},6537:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=n(9818),l=n(9082),i=r(n(3999)),s=r(n(4492)),u=r(n(1637)),c=r(n(7702)),d=r(n(4969));t.default=()=>o.default.createElement(l.CssVarsProvider,null,o.default.createElement(i.default,null),o.default.createElement(c.default,null),o.default.createElement(s.default,{direction:"row",sx:{gap:2,m:2,height:"100vh"}},o.default.createElement(u.default,null,o.default.createElement(d.default,null)),o.default.createElement(s.default,{direction:"row",sx:{gap:4},flexGrow:1,justifyContent:"center",alignItems:"flex-start"},o.default.createElement(a.Outlet,null))))},559:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}s((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(7294)),l=o(n(5904)),i=o(n(1637)),s=o(n(5665)),u=o(n(477)),c=o(n(2496)),d=o(n(4015)),f=o(n(2968)),p=o(n(2588)),h=o(n(6389)),m=n(2141),v=n(1023);t.default=()=>{const[e,t]=a.default.useState(""),[n,o]=a.default.useState(""),[g,y]=a.default.useState(null),[b,w]=a.default.useState(null),[x,S]=(0,m.useOpenAIToken)();return a.default.createElement(a.default.Fragment,null,a.default.createElement(s.default,{variant:"outlined",sx:{gap:2,width:350}},a.default.createElement(i.default,null,a.default.createElement(u.default,{level:"h2"},"Tweet Gen"),a.default.createElement(u.default,{level:"body2"},"Craft delightful tweets!")),a.default.createElement(i.default,null,a.default.createElement(f.default,{minRows:3,onChange:e=>t(e.target.value),placeholder:"Describe a Tweet...",size:"sm"}),a.default.createElement(u.default,{sx:{mt:1},level:"body3"},"Describe a Tweet you want. No need to be concise. Add details about format and hastags if you want 'em!")),a.default.createElement(i.default,null,a.default.createElement(d.default,{size:"sm",placeholder:"Select sentiment...",onChange:(e,t)=>o(t)},a.default.createElement(c.default,{value:"funny"},"Funny"),a.default.createElement(c.default,{value:"inspiring"},"Inspiring"),a.default.createElement(c.default,{value:"controversial"},"Controversial"),a.default.createElement(c.default,{value:"serious"},"Serious"),a.default.createElement(c.default,{value:"informative"},"Informative"),a.default.createElement(c.default,{value:"emotional"},"Emotional")),a.default.createElement(u.default,{sx:{mt:1},level:"body3"},"Select what sentiment you want the Tweet to have. ")),a.default.createElement(l.default,{onClick:()=>{const t=[{role:"user",content:`\n  You run a popular Twitter account with over a million followers, and want to write a new Tweet that will go viral. \n\n  Write a ${n} Tweet about "${e}". Make your response the Tweet itself, and do not include any other text. Do not adds quotes around the Tweet.\n\n  Use the following guidelines when drafting your tweet:\n\n  * Do NOT use more than 280 total characters in the Tweet\n  * Use any formatting or emojis seem to make sense for the Tweet\n  * Do NOT use hashtags (eg. #) unless specifically asked for in the description\n  * Make sure the tweet is concise and to the point, but also engaging and interesting\n\n`}],o=x();o?(0,v.streamChatGPTCompletions)({token:o},t).then((e=>r(void 0,void 0,void 0,(function*(){var t;const n=e.getReader();let r="";for(;;){const{done:e,value:o}=yield n.read();if(e)break;const a=null===(t=o.choices[0])||void 0===t?void 0:t.delta.content;void 0!==a&&(r+=a),y(r)}})))).catch((e=>{const t=e.message||"An unknown error occurred. Check your API key and try the request again.";w(t)})):w("Enter your OpenAI API key to get started.")},variant:"outlined",disabled:!(e&&n)},"Submit")),a.default.createElement(i.default,{sx:{minWidth:400,maxWidth:600,flexGrow:1}},b?a.default.createElement(h.default,{description:b,onClose:()=>w(null)}):null,a.default.createElement(p.default,{value:g})))}},1023:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.streamChatGPTCompletions=void 0,t.streamChatGPTCompletions=(e,t)=>n(void 0,void 0,void 0,(function*(){var r;const o=yield fetch("https://api.openai.com/v1/chat/completions",{headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.token}`},method:"POST",body:JSON.stringify({model:"gpt-3.5-turbo",messages:t,temperature:.5,stream:!0})}),a=new TextDecoder;if(200!==o.status){const e=o.statusText,t=yield null===(r=o.body)||void 0===r?void 0:r.getReader().read();throw new Error(`OpenAI API returned an error: ${a.decode(null==t?void 0:t.value)||e}`)}const l=o.body;if(!l)throw new Error("OpenAI API returned an empty response");return new ReadableStream({start(e){return n(this,void 0,void 0,(function*(){const t=l.getReader();for(;;){const{done:n,value:r}=yield t.read();if(n){e.close();break}const o=a.decode(r).split("\n").filter((e=>""!==e.trim()));for(const t of o){const n=t.replace(/^data: /,"");if("[DONE]"===n){e.close();break}const r=JSON.parse(n);e.enqueue(r)}}}))}})}))},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e].call(a.exports,a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,o.d(a,l),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,o(4648)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FB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QVNBLElBQy9FLElBQUksSUFBSTBMLEVBQWlCLEVBQVBxN0IsR0FBWXpqQyxFQUF5QixpQkFBWG9JLEtBQXlCM0wsRUFBZTZELFFBQVE4SCxHQUFVQSxFQUFVMUwsRUFBUzBMLEdBQ3hIdkksT0FBT3kwRSxvQkFBb0Jsc0UsR0FBUy9KLFNBQVNMLEdBQVMya0ksRUFBSTNrSSxHQUFPLElBQU9nQyxFQUFNaEMsS0FJL0UsT0FGQTJrSSxFQUFhLFFBQUksSUFBTSxFQUN2Qk4sRUFBb0Jwb0csRUFBRXlvRyxFQUFJQyxHQUNuQkQsQ0FDUixFbVV4QkFMLEVBQW9CcG9HLEVBQUksQ0FBQ04sRUFBUzRyQyxLQUNqQyxJQUFJLElBQUl2bkUsS0FBT3VuRSxFQUNYODhELEVBQW9CMXlHLEVBQUU0MUMsRUFBWXZuRSxLQUFTcWtJLEVBQW9CMXlHLEVBQUVnSyxFQUFTMzdCLElBQzVFNkIsT0FBTzY1QixlQUFlQyxFQUFTMzdCLEVBQUssQ0FBRWs4QixZQUFZLEVBQU12MUIsSUFBSzRnRSxFQUFXdm5FLElBRTFFLEVDTkRxa0ksRUFBb0IxeUcsRUFBSSxDQUFDMWlCLEVBQUs2cUIsSUFBVWo0QixPQUFPM0IsVUFBVXljLGVBQWVsVixLQUFLd0gsRUFBSzZxQixHQ0NsRnVxRyxFQUFvQjNqRyxFQUFLL0UsSUFDSCxvQkFBWHkyQixRQUEwQkEsT0FBT3d5RSxhQUMxQy9pSSxPQUFPNjVCLGVBQWVDLEVBQVN5MkIsT0FBT3d5RSxZQUFhLENBQUU1aUksTUFBTyxXQUU3REgsT0FBTzY1QixlQUFlQyxFQUFTLGFBQWMsQ0FBRTM1QixPQUFPLEdBQU8sRUNMOURxaUksRUFBb0JRLFFBQUtqbEksRUNHQ3lrSSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWFwcHMvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L2Vtb3Rpb24tc2hlZXQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1V0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvU2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9lbW90aW9uLWNhY2hlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9NaWRkbGV3YXJlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tZWxlbWVudC02YTg4M2RhOS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9lbW90aW9uLWhhc2guZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC9lbW90aW9uLXVuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L2Vtb3Rpb24tc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MvZGlzdC9lbW90aW9uLXVzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01lbnVVbnN0eWxlZC9NZW51VW5zdHlsZWRDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWF0aC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy91c2VyQWdlbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzTGF5b3V0Vmlld3BvcnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFBhcmVudE5vZGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZW51bXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvY3JlYXRlUG9wcGVyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvd2l0aGluLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL29mZnNldC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvUG9wcGVyVW5zdHlsZWQvcG9wcGVyVW5zdHlsZWRDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL0NsYXNzTmFtZUNvbmZpZ3VyYXRvci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Qb3BwZXJVbnN0eWxlZC9Qb3BwZXJVbnN0eWxlZC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9TZWxlY3RVbnN0eWxlZC9TZWxlY3RVbnN0eWxlZENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXNlQnV0dG9uL3VzZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91c2VMaXN0Ym94L2RlZmF1bHRMaXN0Ym94UmVkdWNlci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9hcmVBcnJheXNFcXVhbC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91c2VMaXN0Ym94L3VzZUNvbnRyb2xsYWJsZVJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvdXNlTGF0ZXN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3VzZVRleHROYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3VzZUxpc3Rib3gvdXNlTGlzdGJveC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91c2VMaXN0Ym94L3VzZUxpc3Rib3gudHlwZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9pc0hvc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvZXh0cmFjdEV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvb21pdEV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvbWVyZ2VTbG90UHJvcHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvcmVzb2x2ZUNvbXBvbmVudFByb3BzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3VzZUZvcmNlZFJlcmVuZGVyaW5nLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3VzZU1lc3NhZ2VCdXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvdXNlU2xvdFByb3BzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9DbG9zZVJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0hlbHBPdXRsaW5lLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9SZXBvcnQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9BbGVydC9hbGVydENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9BbGVydC9BbGVydC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVCb3guanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9Cb3gvQm94LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvQ2lyY3VsYXJQcm9ncmVzcy9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0J1dHRvbi9idXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0NhcmQvY2FyZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9DYXJkL0NhcmRDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvQ2FyZC9DYXJkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvQ3NzQmFzZWxpbmUvQ3NzQmFzZWxpbmUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9JY29uQnV0dG9uL2ljb25CdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvSW5wdXQvaW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvRm9ybUNvbnRyb2xVbnN0eWxlZC9Gb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0lucHV0L3VzZUZvcndhcmRlZElucHV0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3VzZUlucHV0L3VzZUlucHV0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL0Zvcm1Db250cm9sVW5zdHlsZWQvdXNlRm9ybUNvbnRyb2xVbnN0eWxlZENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9MaXN0L0NvbXBvbmVudExpc3RDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvUmFkaW9Hcm91cC9SYWRpb0dyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0xpc3QvV3JhcExpc3RDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvTGlzdC9MaXN0UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9MaXN0L05lc3RlZExpc3RDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvTGlzdC9Sb3dMaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L0xpc3QvbGlzdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9MaXN0SXRlbUJ1dHRvbi9saXN0SXRlbUJ1dHRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9MaXN0SXRlbUJ1dHRvbi9MaXN0SXRlbUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L01lbnVJdGVtL21lbnVJdGVtQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L01lbnVJdGVtL01lbnVJdGVtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3VzZU1lbnVJdGVtL3VzZU1lbnVJdGVtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01lbnVVbnN0eWxlZC91c2VNZW51Q2hhbmdlTm90aWZpZXJzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3VzZU1lbnUvdXNlTWVudS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L01lbnVMaXN0L21lbnVMaXN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvT3B0aW9uL29wdGlvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9PcHRpb24vT3B0aW9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3VzZU9wdGlvbi91c2VPcHRpb24uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2VsZWN0VW5zdHlsZWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXNlU2VsZWN0L3VzZVNlbGVjdC50eXBlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9TZWxlY3RVbnN0eWxlZC9kZWZhdWx0T3B0aW9uU3RyaW5naWZpZXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXNlU2VsZWN0L3VzZVNlbGVjdENoYW5nZU5vdGlmaWVycy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L1N2Z0ljb24vc3ZnSWNvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9pbnRlcm5hbC9zdmctaWNvbnMvVW5mb2xkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L1NlbGVjdC9zZWxlY3RDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91c2VTZWxlY3QvdXNlU2VsZWN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvU2hlZXQvc2hlZXRDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvU2hlZXQvU2hlZXQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1N0YWNrL2NyZWF0ZVN0YWNrLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvU3RhY2svU3RhY2suanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9TdGFjay9zdGFja0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvVGV4dGFyZWEvdGV4dGFyZWFDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvVGV4dGFyZWEvVGV4dGFyZWEuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9Ub29sdGlwL3Rvb2x0aXBDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvVG9vbHRpcC9Ub29sdGlwLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvVHlwb2dyYXBoeS90eXBvZ3JhcGh5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L2NsYXNzTmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L3N0eWxlcy9Db2xvckludmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9jc3NWYXJzUGFyc2VyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvcHJlcGFyZUNzc1ZhcnMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9zdHlsZXMvc3hDb25maWcuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9jb2xvcnMvY29sb3JzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvc3R5bGVzL2V4dGVuZFRoZW1lLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvVGhlbWVQcm92aWRlci9uZXN0ZWQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy9UaGVtZVByb3ZpZGVyL1RoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvdXNlQ3VycmVudENvbG9yU2NoZW1lLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvY3JlYXRlQ3NzVmFyc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvc3R5bGVzL0Nzc1ZhcnNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvam95L3N0eWxlcy9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL1N0eWxlZEVuZ2luZVByb3ZpZGVyL1N0eWxlZEVuZ2luZVByb3ZpZGVyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvc3R5bGVzL3Nob3VsZFNraXBHZW5lcmF0aW5nVmFyLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvc3R5bGVzL3N0eWxlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9zdHlsZXMvc3R5bGVkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvc3R5bGVzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL2pveS9zdHlsZXMvdmFyaWFudFV0aWxzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9qb3kvdXRpbHMvdXNlU2xvdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3B1cnBsZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N2Z0ljb24vc3ZnSWNvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlSWQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9jcmVhdGVHZXRDc3NWYXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NHcmlkLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2l6aW5nLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0NsYXNzTmFtZUdlbmVyYXRvci9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJZC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQHJlbWl4LXJ1bi9yb3V0ZXIvZGlzdC9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vc3JjL2luZGV4LmNzcz9jZmU0Iiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL3NyYy9jb21wb25lbnRzL0FwcE5hdi50c3giLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL3NyYy9jb21wb25lbnRzL0Vycm9yQWxlcnQudHN4Iiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIudHN4Iiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvY29tcG9uZW50cy9SZXNwb25zZURpc3BsYXkudHN4Iiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvY29tcG9uZW50cy9Ub2tlbklucHV0LnRzeCIsIndlYnBhY2s6Ly9haS1hcHBzLy4vc3JjL2hvb2tzL3VzZU9wZW5BSVRva2VuLnRzIiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvcGFnZXMvQ2hhdEJvdC50c3giLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL3NyYy9wYWdlcy9Db2RlUmV2aWV3LnRzeCIsIndlYnBhY2s6Ly9haS1hcHBzLy4vc3JjL3BhZ2VzL0hvbWUudHN4Iiwid2VicGFjazovL2FpLWFwcHMvLi9zcmMvcGFnZXMvUm9vdC50c3giLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL3NyYy9wYWdlcy9Ud2VldEdlbi50c3giLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL3NyYy91dGlsLnRzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vYWktYXBwcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2FpLWFwcHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9haS1hcHBzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FpLWFwcHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYWktYXBwcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYWktYXBwcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FpLWFwcHMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9haS1hcHBzL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9haS1hcHBzL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbiIsImltcG9ydCB7SU1QT1JULCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIFJVTEVTRVQsIGNvbWJpbmUsIG1hdGNoLCBzZXJpYWxpemUsIGNvcHksIHJlcGxhY2UsIFdFQktJVCwgTU9aLCBNUywgS0VZRlJBTUVTLCBERUNMQVJBVElPTiwgaGFzaCwgY2hhcmF0LCBzdHJsZW4sIGluZGV4b2YsIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgY2FjaGUuY29tcGF0KSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBlbGVtZW50LnBhcmVudCA9PT0gY2hpbGRyZW5bMF07IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGVcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gY2hpbGRyZW5bMF0uY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTtcbiAgdmFyIGNvbnRhaW5lcjtcbiAgdmFyIG5vZGVzVG9IeWRyYXRlID0gW107XG5cbiAge1xuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyIHx8IGRvY3VtZW50LmhlYWQ7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCggLy8gdGhpcyBtZWFucyB3ZSB3aWxsIGlnbm9yZSBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGEgc3BhY2UgaW4gdGhlbSB3aGljaFxuICAgIC8vIG1lYW5zIHRoYXQgdGhlIHN0eWxlIGVsZW1lbnRzIHdlJ3JlIGxvb2tpbmcgYXQgYXJlIG9ubHkgRW1vdGlvbiAxMSBzZXJ2ZXItcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXj1cXFwiXCIgKyBrZXkgKyBcIiBcXFwiXVwiKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvblwiKS5zcGxpdCgnICcpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXR0cmliLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydGVkW2F0dHJpYltpXV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2Rlc1RvSHlkcmF0ZS5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgdmFyIG9tbmlwcmVzZW50UGx1Z2lucyA9IFtjb21wYXQsIHJlbW92ZUxhYmVsXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIG9tbmlwcmVzZW50UGx1Z2lucy5wdXNoKGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKHtcbiAgICAgIGdldCBjb21wYXQoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5jb21wYXQ7XG4gICAgICB9XG5cbiAgICB9KSwgaW5jb3JyZWN0SW1wb3J0QWxhcm0pO1xuICB9XG5cbiAge1xuICAgIHZhciBjdXJyZW50U2hlZXQ7XG4gICAgdmFyIGZpbmFsaXppbmdQbHVnaW5zID0gW3N0cmluZ2lmeSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQucm9vdCkge1xuICAgICAgICBpZiAoZWxlbWVudFtcInJldHVyblwiXSkge1xuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudFtcInJldHVyblwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnR5cGUgIT09IENPTU1FTlQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgZW1wdHkgcnVsZSBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudHNcbiAgICAgICAgICAvLyBzbyBAZW1vdGlvbi9qZXN0IGNhbiBncmFiIGBrZXlgIGZyb20gdGhlIChKUylET00gZm9yIGNhY2hlcyB3aXRob3V0IGFueSBydWxlcyBpbnNlcnRlZCB5ZXRcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnQudmFsdWUgKyBcInt9XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VycmVudFNoZWV0ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgc2VyaWFsaXplZC5tYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yID8gc2VsZWN0b3IgKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCIgOiBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnRcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIGNhY2hlLnNoZWV0Lmh5ZHJhdGUobm9kZXNUb0h5ZHJhdGUpO1xuICByZXR1cm4gY2FjaGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDYWNoZTtcbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmV9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7Y29weSwgdG9rZW5pemV9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vU2VyaWFsaXplci5qcydcbmltcG9ydCB7cHJlZml4fSBmcm9tICcuL1ByZWZpeGVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gY29sbGVjdGlvblxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWRkbGV3YXJlIChjb2xsZWN0aW9uKSB7XG5cdHZhciBsZW5ndGggPSBzaXplb2YoY29sbGVjdGlvbilcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0XHR2YXIgb3V0cHV0ID0gJydcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRvdXRwdXQgKz0gY29sbGVjdGlvbltpXShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNoZWV0IChjYWxsYmFjaykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQucm9vdClcblx0XHRcdGlmIChlbGVtZW50ID0gZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRcdGNhbGxiYWNrKGVsZW1lbnQpXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVyIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKVxuXHRcdGlmICghZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdFx0XHRjYXNlIERFQ0xBUkFUSU9OOiBlbGVtZW50LnJldHVybiA9IHByZWZpeChlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxlbmd0aCwgY2hpbGRyZW4pXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTsgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IGNhbGwgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSBpbiBkZXZlbG9wbWVudCBhbmQgd2hlblxuICAvLyB0aGUgbGFiZWwgaGFzbid0IGFscmVhZHkgYmVlbiBjb21wdXRlZFxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEhcHJvcHMuY3NzICYmICh0eXBlb2YgcHJvcHMuY3NzICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcHMuY3NzLm5hbWUgIT09ICdzdHJpbmcnIHx8IHByb3BzLmNzcy5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpKSB7XG4gICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgaWYgKGxhYmVsKSBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IGxhYmVsO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgbmV3UHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufVxuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24gYXMgRSwgVGhlbWVDb250ZXh0IGFzIFQsIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSBhcyBfLCBUaGVtZVByb3ZpZGVyIGFzIGEsIHdpdGhUaGVtZSBhcyBiLCBjcmVhdGVFbW90aW9uUHJvcHMgYXMgYywgaGFzT3duUHJvcGVydHkgYXMgaCwgdXNlVGhlbWUgYXMgdSwgd2l0aEVtb3Rpb25DYWNoZSBhcyB3IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTZhODgzZGE5LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS4xMC42XCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdGV4cG9ydHM6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9faXNvbGF0ZWQtaG5yc1wiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LWRldi1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG5cdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XCIuL21hY3JvXCI6IFwiLi9tYWNyby5qc1wiXG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJFbW90aW9uIENvbnRyaWJ1dG9yc1wiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjE4LjNcIixcblx0XHRcIkBlbW90aW9uL2JhYmVsLXBsdWdpblwiOiBcIl4xMS4xMC42XCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJpYWxpemVcIjogXCJeMS4xLjFcIixcblx0XHRcIkBlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi91dGlsc1wiOiBcIl4xLjIuMFwiLFxuXHRcdFwiQGVtb3Rpb24vd2Vhay1tZW1vaXplXCI6IFwiXjAuMy4wXCIsXG5cdFx0XCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiOiBcIl4zLjMuMVwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXM6IHtcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGRlZmluaXRlbHl0eXBlZC9kdHNsaW50XCI6IFwiMC4wLjExMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMTAuNlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzLXByZXR0aWZpZXJcIjogXCIxLjEuMVwiLFxuXHRcdFwiQGVtb3Rpb24vc2VydmVyXCI6IFwiMTEuMTAuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuMTAuNlwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCIsXG5cdFx0dHlwZXNjcmlwdDogXCJeNC41LjVcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCIsXG5cdFx0ZXhwb3J0czoge1xuXHRcdFx0ZW52Q29uZGl0aW9uczogW1xuXHRcdFx0XHRcImJyb3dzZXJcIixcblx0XHRcdFx0XCJ3b3JrZXJcIlxuXHRcdFx0XSxcblx0XHRcdGV4dHJhOiB7XG5cdFx0XHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFx0XHRcIi4vbWFjcm9cIjogXCIuL21hY3JvLmpzXCJcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkQXJyW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplZEFyciA9IFtdO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBzZXJpYWxpemVkQXJyLnB1c2goc2VyaWFsaXplZCk7IC8vIHJlZ2lzdHJhdGlvbiBoYXMgdG8gaGFwcGVuIGhlcmUgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1pZ2h0IGdldCBjb25zdW1lZCBieSBgY3hgXG5cbiAgICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZEFycjogc2VyaWFsaXplZEFyclxuICB9KSwgZWxlKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNywgIzI5MDUgZm9yIHNvbWUgcmVhc29uIEplc3QgYW5kIFZpdGVzdCBldmFsdWF0ZSBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZFxuXG4gIHZhciBpc1Rlc3RFbnYgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZpICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc1Rlc3RFbnYpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IGhhc2hTdHJpbmcgZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG52YXIgVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IgPSBcIllvdSBoYXZlIHBhc3NlZCBpbiBmYWxzeSB2YWx1ZSBhcyBzdHlsZSBvYmplY3QncyBrZXkgKGNhbiBoYXBwZW4gd2hlbiBpbiBleGFtcGxlIHlvdSBwYXNzIHVuZXhwb3J0ZWQgY29tcG9uZW50IGFzIGNvbXB1dGVkIGtleSkuXCI7XG52YXIgaHlwaGVuYXRlUmVnZXggPSAvW0EtWl18Xm1zL2c7XG52YXIgYW5pbWF0aW9uUmVnZXggPSAvX0VNT18oW15fXSs/KV8oW15dKj8pX0VNT18vZztcblxudmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBmdW5jdGlvbiBpc0N1c3RvbVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDEpID09PSA0NTtcbn07XG5cbnZhciBpc1Byb2Nlc3NhYmxlVmFsdWUgPSBmdW5jdGlvbiBpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbic7XG59O1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaXNDdXN0b21Qcm9wZXJ0eShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogc3R5bGVOYW1lLnJlcGxhY2UoaHlwaGVuYXRlUmVnZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdhbmltYXRpb24nOlxuICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICBuYW1lOiBwMSxcbiAgICAgICAgICAgICAgc3R5bGVzOiBwMixcbiAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHAxO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNvbnRlbnRWYWx1ZVBhdHRlcm4gPSAvKHZhcnxhdHRyfGNvdW50ZXJzP3x1cmx8ZWxlbWVudHwoKChyZXBlYXRpbmctKT8obGluZWFyfHJhZGlhbCkpfGNvbmljKS1ncmFkaWVudClcXCh8KG5vLSk/KG9wZW58Y2xvc2UpLXF1b3RlLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcbiAgdmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgdmFyIGh5cGhlbmF0ZWRDYWNoZSA9IHt9O1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlID0gJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoICcgKyAnQGVtb3Rpb24vYmFiZWwtcGx1Z2luLCB0aGUgc3djIEVtb3Rpb24gcGx1Z2luLCBvciBhbm90aGVyIEVtb3Rpb24tYXdhcmUgJyArICdjb21waWxlciB0cmFuc2Zvcm0uJztcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0pICsgXCI7XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqKDt8JCkvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG52YXIgc3luY0ZhbGxiYWNrID0gZnVuY3Rpb24gc3luY0ZhbGxiYWNrKGNyZWF0ZSkge1xuICByZXR1cm4gY3JlYXRlKCk7XG59O1xuXG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0ID0gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gPyBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA6IGZhbHNlO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgPSAgdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgdXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gKyBcIjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIHJlZ2lzdGVyU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG59O1xudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBNZW51VW5zdHlsZWRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5NZW51VW5zdHlsZWRDb250ZXh0LmRpc3BsYXlOYW1lID0gJ01lbnVVbnN0eWxlZENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgTWVudVVuc3R5bGVkQ29udGV4dDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VUFTdHJpbmcoKSB7XG4gIHZhciB1YURhdGEgPSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YTtcblxuICBpZiAodWFEYXRhICE9IG51bGwgJiYgdWFEYXRhLmJyYW5kcyAmJiBBcnJheS5pc0FycmF5KHVhRGF0YS5icmFuZHMpKSB7XG4gICAgcmV0dXJuIHVhRGF0YS5icmFuZHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5icmFuZCArIFwiL1wiICsgaXRlbS52ZXJzaW9uO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O1xufSIsImltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0xheW91dFZpZXdwb3J0KCkge1xuICByZXR1cm4gIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUsIGlzRml4ZWRTdHJhdGVneSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0ZpeGVkU3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWRTdHJhdGVneSA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gMTtcbiAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgaWYgKGluY2x1ZGVTY2FsZSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgc2NhbGVYID0gZWxlbWVudC5vZmZzZXRXaWR0aCA+IDAgPyByb3VuZChjbGllbnRSZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMSA6IDE7XG4gICAgc2NhbGVZID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgPiAwID8gcm91bmQoY2xpZW50UmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMSA6IDE7XG4gIH1cblxuICB2YXIgX3JlZiA9IGlzRWxlbWVudChlbGVtZW50KSA/IGdldFdpbmRvdyhlbGVtZW50KSA6IHdpbmRvdyxcbiAgICAgIHZpc3VhbFZpZXdwb3J0ID0gX3JlZi52aXN1YWxWaWV3cG9ydDtcblxuICB2YXIgYWRkVmlzdWFsT2Zmc2V0cyA9ICFpc0xheW91dFZpZXdwb3J0KCkgJiYgaXNGaXhlZFN0cmF0ZWd5O1xuICB2YXIgeCA9IChjbGllbnRSZWN0LmxlZnQgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQgOiAwKSkgLyBzY2FsZVg7XG4gIHZhciB5ID0gKGNsaWVudFJlY3QudG9wICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3AgOiAwKSkgLyBzY2FsZVk7XG4gIHZhciB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGggLyBzY2FsZVg7XG4gIHZhciBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlWTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIGxlZnQ6IHgsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSIsImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iLCJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkLCBpc0ZpeGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjsgLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHZhciBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpOyAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG5cbiAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSAvZmlyZWZveC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG4gIHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgaWYgKGlzU2hhZG93Um9vdChjdXJyZW50Tm9kZSkpIHtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmhvc3Q7XG4gIH1cblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImltcG9ydCBnZXRDb21wb3NpdGVSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IG9yZGVyTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4vdXRpbHMvZGVib3VuY2UuanNcIjtcbmltcG9ydCB2YWxpZGF0ZU1vZGlmaWVycyBmcm9tIFwiLi91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IHVuaXF1ZUJ5IGZyb20gXCIuL3V0aWxzL3VuaXF1ZUJ5LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSBcIi4vdXRpbHMvbWVyZ2VCeU5hbWUuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi9lbnVtcy5qc1wiO1xudmFyIElOVkFMSURfRUxFTUVOVF9FUlJPUiA9ICdQb3BwZXI6IEludmFsaWQgcmVmZXJlbmNlIG9yIHBvcHBlciBhcmd1bWVudCBwcm92aWRlZC4gVGhleSBtdXN0IGJlIGVpdGhlciBhIERPTSBlbGVtZW50IG9yIHZpcnR1YWwgZWxlbWVudC4nO1xudmFyIElORklOSVRFX0xPT1BfRVJST1IgPSAnUG9wcGVyOiBBbiBpbmZpbml0ZSBsb29wIGluIHRoZSBtb2RpZmllcnMgY3ljbGUgaGFzIGJlZW4gZGV0ZWN0ZWQhIFRoZSBjeWNsZSBoYXMgYmVlbiBpbnRlcnJ1cHRlZCB0byBwcmV2ZW50IGEgYnJvd3NlciBjcmFzaC4nO1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbW9kaWZpZXJzOiBbXSxcbiAgc3RyYXRlZ3k6ICdhYnNvbHV0ZSdcbn07XG5cbmZ1bmN0aW9uIGFyZVZhbGlkRWxlbWVudHMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gIWFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiAhKGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYsIHdpbikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogcm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzLFxuICAgICAgaXNGaXhlZCA9IF9yZWYyLmlzRml4ZWQ7XG4gIHZhciBfb2Zmc2V0cyR4ID0gb2Zmc2V0cy54LFxuICAgICAgeCA9IF9vZmZzZXRzJHggPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR4LFxuICAgICAgX29mZnNldHMkeSA9IG9mZnNldHMueSxcbiAgICAgIHkgPSBfb2Zmc2V0cyR5ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeTtcblxuICB2YXIgX3JlZjMgPSB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWYzLng7XG4gIHkgPSBfcmVmMy55O1xuICB2YXIgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgdmFyIGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG4gIHZhciBzaWRlWCA9IGxlZnQ7XG4gIHZhciBzaWRlWSA9IHRvcDtcbiAgdmFyIHdpbiA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgdmFyIGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICB2YXIgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiYgcG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cblxuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCB8fCAocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIHZhciBvZmZzZXRZID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQuaGVpZ2h0IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF07XG4gICAgICB5IC09IG9mZnNldFkgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQgfHwgKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIHZhciBvZmZzZXRYID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFt3aWR0aFByb3BdO1xuICAgICAgeCAtPSBvZmZzZXRYIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgdmFyIF9yZWY0ID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9LCBnZXRXaW5kb3cocG9wcGVyKSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWY0Lng7XG4gIHkgPSBfcmVmNC55O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY1KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY1LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY1Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBmYWxzZSwgc3RyYXRlZ3kgPT09ICdmaXhlZCcpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSkgOiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICB2YXIgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keTtcbiAgdmFyIHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkc3RyYXRlZ3kgPSBfb3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIHN0cmF0ZWd5ID0gX29wdGlvbnMkc3RyYXRlZ3kgPT09IHZvaWQgMCA/IHN0YXRlLnN0cmF0ZWd5IDogX29wdGlvbnMkc3RyYXRlZ3ksXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluTWF4Q2xhbXAobWluLCB2YWx1ZSwgbWF4KSB7XG4gIHZhciB2ID0gd2l0aGluKG1pbiwgdmFsdWUsIG1heCk7XG4gIHJldHVybiB2ID4gbWF4ID8gbWF4IDogdjtcbn0iLCJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gXCIuLi91dGlscy9nZXRBbHRBeGlzLmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4sIHdpdGhpbk1heENsYW1wIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWluIGFzIG1hdGhNaW4sIG1heCBhcyBtYXRoTWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0VmFsdWUgPT09ICdudW1iZXInID8ge1xuICAgIG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSxcbiAgICBhbHRBeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZVxuICB9IDogT2JqZWN0LmFzc2lnbih7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgYWx0QXhpczogMFxuICB9LCB0ZXRoZXJPZmZzZXRWYWx1ZSk7XG4gIHZhciBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdIDogbnVsbDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkO1xuXG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IG9mZnNldCAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW21haW5BeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJCA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IG9mZnNldCArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDI7XG5cbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX2xlbiA9IGFsdEF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICB2YXIgaXNPcmlnaW5TaWRlID0gW3RvcCwgbGVmdF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICB2YXIgX29mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkMiA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbYWx0QXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIDogMDtcblxuICAgIHZhciBfdGV0aGVyTWluID0gaXNPcmlnaW5TaWRlID8gX21pbiA6IF9vZmZzZXQgLSByZWZlcmVuY2VSZWN0W19sZW5dIC0gcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXM7XG5cbiAgICB2YXIgX3RldGhlck1heCA9IGlzT3JpZ2luU2lkZSA/IF9vZmZzZXQgKyByZWZlcmVuY2VSZWN0W19sZW5dICsgcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXMgOiBfbWF4O1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlID8gd2l0aGluTWF4Q2xhbXAoX3RldGhlck1pbiwgX29mZnNldCwgX3RldGhlck1heCkgOiB3aXRoaW4odGV0aGVyID8gX3RldGhlck1pbiA6IF9taW4sIF9vZmZzZXQsIHRldGhlciA/IF90ZXRoZXJNYXggOiBfbWF4KTtcblxuICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCwgSFRNTEVsZW1lbnRUeXBlLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9zZXRSZWYgYXMgc2V0UmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuXG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1BvcnRhbF0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvcmVhY3QtcG9ydGFsLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbUG9ydGFsIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL3BvcnRhbC8pXG4gKi9cbmNvbnN0IFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW21vdW50Tm9kZSwgc2V0TW91bnROb2RlXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gdXBzdHJlYW0gZml4XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCByZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYocmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgaWYgKGRpc2FibGVQb3J0YWwpIHtcbiAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIGNvbnN0IG5ld1Byb3BzID0ge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBuZXdQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IG1vdW50Tm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGVcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gdG8gcmVuZGVyIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogVGhlIGBjaGlsZHJlbmAgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9wcGVyVW5zdHlsZWRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBvcHBlcicsIHNsb3QpO1xufVxuY29uc3QgcG9wcGVyVW5zdHlsZWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUG9wcGVyJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgcG9wcGVyVW5zdHlsZWRDbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBkZWZhdWx0Q29udGV4dFZhbHVlID0ge1xuICBkaXNhYmxlRGVmYXVsdENsYXNzZXM6IGZhbHNlXG59O1xuY29uc3QgQ2xhc3NOYW1lQ29uZmlndXJhdG9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRDb250ZXh0VmFsdWUpO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBXcmFwcyB0aGUgYGdlbmVyYXRlVXRpbGl0eUNsYXNzYCBmdW5jdGlvbiBhbmQgY29udHJvbHMgaG93IHRoZSBjbGFzc2VzIGFyZSBnZW5lcmF0ZWQuXG4gKiBDdXJyZW50bHkgaXQgb25seSBhZmZlY3RzIHdoZXRoZXIgdGhlIGNsYXNzZXMgYXJlIGFwcGxpZWQgb3Igbm90LlxuICpcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NgIGZ1bmN0aW9uIHNwZWNpZmljIHRvIGEgY29tcG9uZW50IHRvIGdlbmVyYXRlIHRoZSBjbGFzc2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2xhc3NOYW1lc092ZXJyaWRlKGdlbmVyYXRlVXRpbGl0eUNsYXNzKSB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlRGVmYXVsdENsYXNzZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoQ2xhc3NOYW1lQ29uZmlndXJhdG9yQ29udGV4dCk7XG4gIHJldHVybiBzbG90ID0+IHtcbiAgICBpZiAoZGlzYWJsZURlZmF1bHRDbGFzc2VzKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhzbG90KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBbGxvd3MgdG8gY29uZmlndXJlIHRoZSBjb21wb25lbnRzIHdpdGhpbiB0byBub3QgYXBwbHkgYW55IGJ1aWx0LWluIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsYXNzTmFtZUNvbmZpZ3VyYXRvcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZURlZmF1bHRDbGFzc2VzLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGRpc2FibGVEZWZhdWx0Q2xhc3NlczogZGlzYWJsZURlZmF1bHRDbGFzc2VzICE9IG51bGwgPyBkaXNhYmxlRGVmYXVsdENsYXNzZXMgOiBmYWxzZVxuICB9KSwgW2Rpc2FibGVEZWZhdWx0Q2xhc3Nlc10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2xhc3NOYW1lQ29uZmlndXJhdG9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JFbFwiLCBcImNoaWxkcmVuXCIsIFwiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJvd25lclN0YXRlXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyT3B0aW9uc1wiLCBcInBvcHBlclJlZlwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYW5jaG9yRWxcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXJPcHRpb25zXCIsIFwicG9wcGVyUmVmXCIsIFwic3R5bGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgSFRNTEVsZW1lbnRUeXBlLCByZWZUeXBlLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnLi4vY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuaW1wb3J0IHsgZ2V0UG9wcGVyVW5zdHlsZWRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3BvcHBlclVuc3R5bGVkQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VTbG90UHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyB1c2VDbGFzc05hbWVzT3ZlcnJpZGUgfSBmcm9tICcuLi91dGlscy9DbGFzc05hbWVDb25maWd1cmF0b3InO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGZsaXBQbGFjZW1lbnQocGxhY2VtZW50LCBkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAnYm90dG9tLWVuZCc6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1zdGFydCc7XG4gICAgY2FzZSAnYm90dG9tLXN0YXJ0JzpcbiAgICAgIHJldHVybiAnYm90dG9tLWVuZCc7XG4gICAgY2FzZSAndG9wLWVuZCc6XG4gICAgICByZXR1cm4gJ3RvcC1zdGFydCc7XG4gICAgY2FzZSAndG9wLXN0YXJ0JzpcbiAgICAgIHJldHVybiAndG9wLWVuZCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50Lm5vZGVUeXBlICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc1ZpcnR1YWxFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICFpc0hUTUxFbGVtZW50KGVsZW1lbnQpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgdXNlQ2xhc3NOYW1lc092ZXJyaWRlKGdldFBvcHBlclVuc3R5bGVkVXRpbGl0eUNsYXNzKSk7XG59O1xuY29uc3QgZGVmYXVsdFBvcHBlck9wdGlvbnMgPSB7fTtcbmNvbnN0IFBvcHBlclRvb2x0aXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXJUb29sdGlwKHByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWY7XG4gIGNvbnN0IHtcbiAgICAgIGFuY2hvckVsLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb21wb25lbnQsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBkaXNhYmxlUG9ydGFsLFxuICAgICAgbW9kaWZpZXJzLFxuICAgICAgb3BlbixcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICBwbGFjZW1lbnQ6IGluaXRpYWxQbGFjZW1lbnQsXG4gICAgICBwb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmOiBwb3BwZXJSZWZQcm9wLFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgVHJhbnNpdGlvblByb3BzXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRvb2x0aXBSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG93blJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgcmVmKTtcbiAgY29uc3QgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVQb3BwZXJSZWYgPSB1c2VGb3JrUmVmKHBvcHBlclJlZiwgcG9wcGVyUmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZVBvcHBlclJlZlJlZiA9IFJlYWN0LnVzZVJlZihoYW5kbGVQb3BwZXJSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQgPSBoYW5kbGVQb3BwZXJSZWY7XG4gIH0sIFtoYW5kbGVQb3BwZXJSZWZdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShwb3BwZXJSZWZQcm9wLCAoKSA9PiBwb3BwZXJSZWYuY3VycmVudCwgW10pO1xuICBjb25zdCBydGxQbGFjZW1lbnQgPSBmbGlwUGxhY2VtZW50KGluaXRpYWxQbGFjZW1lbnQsIGRpcmVjdGlvbik7XG4gIC8qKlxuICAgKiBwbGFjZW1lbnQgaW5pdGlhbGl6ZWQgZnJvbSBwcm9wIGJ1dCBjYW4gY2hhbmdlIGR1cmluZyBsaWZldGltZSBpZiBtb2RpZmllcnMuZmxpcC5cbiAgICogbW9kaWZpZXJzLmZsaXAgaXMgZXNzZW50aWFsbHkgYSBmbGlwIGZvciBjb250cm9sbGVkL3VuY29udHJvbGxlZCBiZWhhdmlvclxuICAgKi9cbiAgY29uc3QgW3BsYWNlbWVudCwgc2V0UGxhY2VtZW50XSA9IFJlYWN0LnVzZVN0YXRlKHJ0bFBsYWNlbWVudCk7XG4gIGNvbnN0IFtyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYW5jaG9yRWwpIHtcbiAgICAgIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudChyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgICB9XG4gIH0sIFthbmNob3JFbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFyZXNvbHZlZEFuY2hvckVsZW1lbnQgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVBvcHBlclVwZGF0ZSA9IGRhdGEgPT4ge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbGVtZW50ICYmIGlzSFRNTEVsZW1lbnQocmVzb2x2ZWRBbmNob3JFbGVtZW50KSAmJiByZXNvbHZlZEFuY2hvckVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcG9wcGVyTW9kaWZpZXJzID0gW3tcbiAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbHRCb3VuZGFyeTogZGlzYWJsZVBvcnRhbFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWx0Qm91bmRhcnk6IGRpc2FibGVQb3J0YWxcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAnb25VcGRhdGUnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnYWZ0ZXJXcml0ZScsXG4gICAgICBmbjogKHtcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaGFuZGxlUG9wcGVyVXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgICBpZiAobW9kaWZpZXJzICE9IG51bGwpIHtcbiAgICAgIHBvcHBlck1vZGlmaWVycyA9IHBvcHBlck1vZGlmaWVycy5jb25jYXQobW9kaWZpZXJzKTtcbiAgICB9XG4gICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgIT0gbnVsbCkge1xuICAgICAgcG9wcGVyTW9kaWZpZXJzID0gcG9wcGVyTW9kaWZpZXJzLmNvbmNhdChwb3BwZXJPcHRpb25zLm1vZGlmaWVycyk7XG4gICAgfVxuICAgIGNvbnN0IHBvcHBlciA9IGNyZWF0ZVBvcHBlcihyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHRvb2x0aXBSZWYuY3VycmVudCwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBydGxQbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IHBvcHBlck1vZGlmaWVyc1xuICAgIH0pKTtcbiAgICBoYW5kbGVQb3BwZXJSZWZSZWYuY3VycmVudChwb3BwZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwb3BwZXIuZGVzdHJveSgpO1xuICAgICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQobnVsbCk7XG4gICAgfTtcbiAgfSwgW3Jlc29sdmVkQW5jaG9yRWxlbWVudCwgZGlzYWJsZVBvcnRhbCwgbW9kaWZpZXJzLCBvcGVuLCBwb3BwZXJPcHRpb25zLCBydGxQbGFjZW1lbnRdKTtcbiAgY29uc3QgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9O1xuICBpZiAoVHJhbnNpdGlvblByb3BzICE9PSBudWxsKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSBUcmFuc2l0aW9uUHJvcHM7XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gIGNvbnN0IFJvb3QgPSAoX3JlZiA9IGNvbXBvbmVudCAhPSBudWxsID8gY29tcG9uZW50IDogc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9yZWYgOiAnZGl2JztcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogUm9vdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogc2xvdFByb3BzLnJvb3QsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByb2xlOiAndG9vbHRpcCcsXG4gICAgICByZWY6IG93blJlZlxuICAgIH0sXG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIHByb3BzLCBvd25lclN0YXRlKSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlblxuICB9KSk7XG59KTtcblxuLyoqXG4gKiBQb3BwZXJzIHJlbHkgb24gdGhlIDNyZCBwYXJ0eSBsaWJyYXJ5IFtQb3BwZXIuanNdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyLykgZm9yIHBvc2l0aW9uaW5nLlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1Vuc3R5bGVkIFBvcHBlcl0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvcmVhY3QtcG9wcGVyLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbUG9wcGVyVW5zdHlsZWQgQVBJXShodHRwczovL211aS5jb20vYmFzZS9hcGkvcG9wcGVyLXVuc3R5bGVkLylcbiAqL1xuY29uc3QgUG9wcGVyVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXJVbnN0eWxlZChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICAgIGFuY2hvckVsLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclByb3AsXG4gICAgICBkaXJlY3Rpb24gPSAnbHRyJyxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBmYWxzZSxcbiAgICAgIGtlZXBNb3VudGVkID0gZmFsc2UsXG4gICAgICBtb2RpZmllcnMsXG4gICAgICBvcGVuLFxuICAgICAgcGxhY2VtZW50ID0gJ2JvdHRvbScsXG4gICAgICBwb3BwZXJPcHRpb25zID0gZGVmYXVsdFBvcHBlck9wdGlvbnMsXG4gICAgICBwb3BwZXJSZWYsXG4gICAgICBzdHlsZSxcbiAgICAgIHRyYW5zaXRpb24gPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgW2V4aXRlZCwgc2V0RXhpdGVkXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9ICgpID0+IHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuICB9O1xuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG4gIGxldCBjb250YWluZXI7XG4gIGlmIChjb250YWluZXJQcm9wKSB7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyUHJvcDtcbiAgfSBlbHNlIGlmIChhbmNob3JFbCkge1xuICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpO1xuICAgIGNvbnRhaW5lciA9IHJlc29sdmVkQW5jaG9yRWwgJiYgaXNIVE1MRWxlbWVudChyZXNvbHZlZEFuY2hvckVsKSA/IG93bmVyRG9jdW1lbnQocmVzb2x2ZWRBbmNob3JFbCkuYm9keSA6IG93bmVyRG9jdW1lbnQobnVsbCkuYm9keTtcbiAgfVxuICBjb25zdCBkaXNwbGF5ID0gIW9wZW4gJiYga2VlcE1vdW50ZWQgJiYgKCF0cmFuc2l0aW9uIHx8IGV4aXRlZCkgPyAnbm9uZScgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IHRyYW5zaXRpb24gPyB7XG4gICAgaW46IG9wZW4sXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZFxuICB9IDogdW5kZWZpbmVkO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9ydGFsLCB7XG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goUG9wcGVyVG9vbHRpcCwgX2V4dGVuZHMoe1xuICAgICAgYW5jaG9yRWw6IGFuY2hvckVsLFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsLFxuICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXG4gICAgICByZWY6IHJlZixcbiAgICAgIG9wZW46IHRyYW5zaXRpb24gPyAhZXhpdGVkIDogb3BlbixcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgcG9wcGVyT3B0aW9uczogcG9wcGVyT3B0aW9ucyxcbiAgICAgIHBvcHBlclJlZjogcG9wcGVyUmVmLFxuICAgICAgc2xvdFByb3BzOiBzbG90UHJvcHMsXG4gICAgICBzbG90czogc2xvdHNcbiAgICB9LCBvdGhlciwge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgLy8gUHJldmVudHMgc2Nyb2xsIGlzc3VlLCB3YWl0aW5nIGZvciBQb3BwZXIuanMgdG8gYWRkIHRoaXMgc3R5bGUgb25jZSBpbml0aWF0ZWQuXG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAvLyBGaXggUG9wcGVyLmpzIGRpc3BsYXkgaXNzdWVcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBkaXNwbGF5XG4gICAgICB9LCBzdHlsZSksXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9wcGVyVW5zdHlsZWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBbdmlydHVhbEVsZW1lbnRdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyL3ZpcnR1YWwtZWxlbWVudHMvKSxcbiAgICogb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgcGFzc2VkIGFzIHRoZSByZWZlcmVuY2Ugb2JqZWN0IG9mIHRoZSBQb3BwZXIgaW5zdGFuY2UuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLm9wZW4pIHtcbiAgICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgaXNIVE1MRWxlbWVudChyZXNvbHZlZEFuY2hvckVsKSAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWRBbmNob3JFbCB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICdmdW5jdGlvbicgfHwgaXNWaXJ0dWFsRWxlbWVudChyZXNvbHZlZEFuY2hvckVsKSAmJiByZXNvbHZlZEFuY2hvckVsLmNvbnRleHRFbGVtZW50ICE9IG51bGwgJiYgcmVzb2x2ZWRBbmNob3JFbC5jb250ZXh0RWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnSXQgc2hvdWxkIGJlIGFuIEhUTUwgZWxlbWVudCBpbnN0YW5jZSBvciBhIHZpcnR1YWxFbGVtZW50ICcsICcoaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvdmlydHVhbC1lbGVtZW50cy8pLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogUG9wcGVyIHJlbmRlciBmdW5jdGlvbiBvciBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gb2YgdGhlIHRleHQuXG4gICAqIEBkZWZhdWx0ICdsdHInXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2x0cicsICdydGwnXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgUG9wcGVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUG9wcGVyLmpzIGlzIGJhc2VkIG9uIGEgXCJwbHVnaW4tbGlrZVwiIGFyY2hpdGVjdHVyZSxcbiAgICogbW9zdCBvZiBpdHMgZmVhdHVyZXMgYXJlIGZ1bGx5IGVuY2Fwc3VsYXRlZCBcIm1vZGlmaWVyc1wiLlxuICAgKlxuICAgKiBBIG1vZGlmaWVyIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIFBvcHBlci5qcyBuZWVkcyB0b1xuICAgKiBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBGb3IgdGhpcyByZWFzb24sIG1vZGlmaWVycyBzaG91bGQgYmUgdmVyeSBwZXJmb3JtYW50IHRvIGF2b2lkIGJvdHRsZW5lY2tzLlxuICAgKiBUbyBsZWFybiBob3cgdG8gY3JlYXRlIGEgbW9kaWZpZXIsIFtyZWFkIHRoZSBtb2RpZmllcnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvbW9kaWZpZXJzLykuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlZmZlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIGVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGZuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBuYW1lOiBQcm9wVHlwZXMuYW55LFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGhhc2U6IFByb3BUeXBlcy5vbmVPZihbJ2FmdGVyTWFpbicsICdhZnRlclJlYWQnLCAnYWZ0ZXJXcml0ZScsICdiZWZvcmVNYWluJywgJ2JlZm9yZVJlYWQnLCAnYmVmb3JlV3JpdGUnLCAnbWFpbicsICdyZWFkJywgJ3dyaXRlJ10pLFxuICAgIHJlcXVpcmVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgICByZXF1aXJlc0lmRXhpc3RzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxuICB9KSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICogQGRlZmF1bHQgJ2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0by1lbmQnLCAnYXV0by1zdGFydCcsICdhdXRvJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcbiAgLyoqXG4gICAqIE9wdGlvbnMgcHJvdmlkZWQgdG8gdGhlIFtgUG9wcGVyLmpzYF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvY29uc3RydWN0b3JzLyNvcHRpb25zKSBpbnN0YW5jZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHBvcHBlck9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgb25GaXJzdFVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydhdXRvLWVuZCcsICdhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAgIHN0cmF0ZWd5OiBQcm9wVHlwZXMub25lT2YoWydhYnNvbHV0ZScsICdmaXhlZCddKVxuICB9KSxcbiAgLyoqXG4gICAqIEEgcmVmIHRoYXQgcG9pbnRzIHRvIHRoZSB1c2VkIHBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIHBvcHBlclJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBQb3BwZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSGVscCBzdXBwb3J0aW5nIGEgcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wcGVyVW5zdHlsZWQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IFNlbGVjdFVuc3R5bGVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUlzRm9jdXNWaXNpYmxlIGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZXh0cmFjdEV2ZW50SGFuZGxlcnMgZnJvbSAnLi4vdXRpbHMvZXh0cmFjdEV2ZW50SGFuZGxlcnMnO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbVW5zdHlsZWQgQnV0dG9uXShodHRwczovL211aS5jb20vYmFzZS9yZWFjdC1idXR0b24vI2hvb2spXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW3VzZUJ1dHRvbiBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlL2FwaS91c2UtYnV0dG9uLylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQnV0dG9uKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZm9jdXNhYmxlV2hlbkRpc2FibGVkLFxuICAgIGhyZWYsXG4gICAgcmVmOiBleHRlcm5hbFJlZixcbiAgICB0YWJJbmRleCxcbiAgICB0byxcbiAgICB0eXBlXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgIWZvY3VzYWJsZVdoZW5EaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IGZvY3VzVmlzaWJsZTtcbiAgfSwgW2ZvY3VzVmlzaWJsZSwgaXNGb2N1c1Zpc2libGVSZWZdKTtcbiAgY29uc3QgW2hvc3RFbGVtZW50TmFtZSwgc2V0SG9zdEVsZW1lbnROYW1lXSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VMZWF2ZSA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbk1vdXM7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91cyA9IG90aGVySGFuZGxlcnMub25Nb3VzZUxlYXZlKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25Nb3VzLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCbHVyID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQmx1cjtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgICAoX290aGVySGFuZGxlcnMkb25CbHVyID0gb3RoZXJIYW5kbGVycy5vbkJsdXIpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkJsdXIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUZvY3VzID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uRm9jdTI7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuICAgIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkZvY3U7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAoX290aGVySGFuZGxlcnMkb25Gb2N1ID0gb3RoZXJIYW5kbGVycy5vbkZvY3VzVmlzaWJsZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uRm9jdS5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICB9XG4gICAgKF9vdGhlckhhbmRsZXJzJG9uRm9jdTIgPSBvdGhlckhhbmRsZXJzLm9uRm9jdXMpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkZvY3UyLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICB9O1xuICBjb25zdCBpc05hdGl2ZUJ1dHRvbiA9ICgpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBidXR0b25SZWYuY3VycmVudDtcbiAgICByZXR1cm4gaG9zdEVsZW1lbnROYW1lID09PSAnQlVUVE9OJyB8fCBob3N0RWxlbWVudE5hbWUgPT09ICdJTlBVVCcgJiYgWydidXR0b24nLCAnc3VibWl0JywgJ3Jlc2V0J10uaW5jbHVkZXMoYnV0dG9uID09IG51bGwgPyB2b2lkIDAgOiBidXR0b24udHlwZSkgfHwgaG9zdEVsZW1lbnROYW1lID09PSAnQScgJiYgKGJ1dHRvbiA9PSBudWxsID8gdm9pZCAwIDogYnV0dG9uLmhyZWYpO1xuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVDbGljayA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkNsaWM7XG4gICAgICAoX290aGVySGFuZGxlcnMkb25DbGljID0gb3RoZXJIYW5kbGVycy5vbkNsaWNrKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25DbGljLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VEb3duID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uTW91czI7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgc2V0QWN0aXZlKHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcbiAgICAgICAgc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgIH0sIHtcbiAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIChfb3RoZXJIYW5kbGVycyRvbk1vdXMyID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlRG93bikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uTW91czIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUtleURvd24gPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlEO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbktleUQgPSBvdGhlckhhbmRsZXJzLm9uS2V5RG93bikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uS2V5RC5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmICFpc05hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFkaXNhYmxlZCkge1xuICAgICAgc2V0QWN0aXZlKHRydWUpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgIWlzTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2xpYzI7XG4gICAgICAoX290aGVySGFuZGxlcnMkb25DbGljMiA9IG90aGVySGFuZGxlcnMub25DbGljaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQ2xpYzIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlS2V5VXAgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlVO1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICBzZXRBY3RpdmUoZmFsc2UpO1xuICAgIH1cbiAgICAoX290aGVySGFuZGxlcnMkb25LZXlVID0gb3RoZXJIYW5kbGVycy5vbktleVVwKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25LZXlVLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuXG4gICAgLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiAhaXNOYXRpdmVCdXR0b24oKSAmJiAhZGlzYWJsZWQgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkNsaWMzO1xuICAgICAgKF9vdGhlckhhbmRsZXJzJG9uQ2xpYzMgPSBvdGhlckhhbmRsZXJzLm9uQ2xpY2spID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkNsaWMzLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlSG9zdEVsZW1lbnROYW1lID0gUmVhY3QudXNlQ2FsbGJhY2soaW5zdGFuY2UgPT4ge1xuICAgIHZhciBfaW5zdGFuY2UkdGFnTmFtZTtcbiAgICBzZXRIb3N0RWxlbWVudE5hbWUoKF9pbnN0YW5jZSR0YWdOYW1lID0gaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLnRhZ05hbWUpICE9IG51bGwgPyBfaW5zdGFuY2UkdGFnTmFtZSA6ICcnKTtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHVwZGF0ZUhvc3RFbGVtZW50TmFtZSwgZXh0ZXJuYWxSZWYsIGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgY29uc3QgYnV0dG9uUHJvcHMgPSB7fTtcbiAgaWYgKGhvc3RFbGVtZW50TmFtZSA9PT0gJ0JVVFRPTicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSAhPSBudWxsID8gdHlwZSA6ICdidXR0b24nO1xuICAgIGlmIChmb2N1c2FibGVXaGVuRGlzYWJsZWQpIHtcbiAgICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaG9zdEVsZW1lbnROYW1lICE9PSAnJykge1xuICAgIGlmICghaHJlZiAmJiAhdG8pIHtcbiAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICAgIGJ1dHRvblByb3BzLnRhYkluZGV4ID0gdGFiSW5kZXggIT0gbnVsbCA/IHRhYkluZGV4IDogMDtcbiAgICB9XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgICBidXR0b25Qcm9wcy50YWJJbmRleCA9IGZvY3VzYWJsZVdoZW5EaXNhYmxlZCA/IHRhYkluZGV4ICE9IG51bGwgPyB0YWJJbmRleCA6IDAgOiAtMTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHByb3BzRXZlbnRIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKHBhcmFtZXRlcnMpO1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBwcm9wc0V2ZW50SGFuZGxlcnMsIG90aGVySGFuZGxlcnMpO1xuXG4gICAgLy8gb25Gb2N1c1Zpc2libGUgY2FuIGJlIHByZXNlbnQgb24gdGhlIHByb3BzLCBidXQgc2luY2UgaXQncyBub3QgYSB2YWxpZCBSZWFjdCBldmVudCBoYW5kbGVyLFxuICAgIC8vIGl0IG11c3Qgbm90IGJlIGZvcndhcmRlZCB0byB0aGUgaW5uZXIgY29tcG9uZW50LlxuICAgIGRlbGV0ZSBleHRlcm5hbEV2ZW50SGFuZGxlcnMub25Gb2N1c1Zpc2libGU7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHR5cGVcbiAgICB9LCBleHRlcm5hbEV2ZW50SGFuZGxlcnMsIGJ1dHRvblByb3BzLCB7XG4gICAgICBvbkJsdXI6IGNyZWF0ZUhhbmRsZUJsdXIoZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZUNsaWNrKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICBvbkZvY3VzOiBjcmVhdGVIYW5kbGVGb2N1cyhleHRlcm5hbEV2ZW50SGFuZGxlcnMpLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVLZXlEb3duKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICBvbktleVVwOiBjcmVhdGVIYW5kbGVLZXlVcChleHRlcm5hbEV2ZW50SGFuZGxlcnMpLFxuICAgICAgb25Nb3VzZURvd246IGNyZWF0ZUhhbmRsZU1vdXNlRG93bihleHRlcm5hbEV2ZW50SGFuZGxlcnMpLFxuICAgICAgb25Nb3VzZUxlYXZlOiBjcmVhdGVIYW5kbGVNb3VzZUxlYXZlKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgc2V0Rm9jdXNWaXNpYmxlLFxuICAgIGRpc2FibGVkLFxuICAgIGFjdGl2ZVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuL3VzZUxpc3Rib3gudHlwZXMnO1xuY29uc3QgcGFnZVNpemUgPSA1O1xuZnVuY3Rpb24gZmluZFZhbGlkT3B0aW9uVG9IaWdobGlnaHQoaW5kZXgsIGxvb2t1cERpcmVjdGlvbiwgb3B0aW9ucywgZm9jdXNEaXNhYmxlZCwgaXNPcHRpb25EaXNhYmxlZCwgd3JhcEFyb3VuZCkge1xuICBpZiAob3B0aW9ucy5sZW5ndGggPT09IDAgfHwgb3B0aW9ucy5ldmVyeSgobywgaSkgPT4gaXNPcHRpb25EaXNhYmxlZChvLCBpKSkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgbGV0IG5leHRGb2N1cyA9IGluZGV4O1xuICBmb3IgKDs7KSB7XG4gICAgLy8gTm8gdmFsaWQgb3B0aW9ucyBmb3VuZFxuICAgIGlmICghd3JhcEFyb3VuZCAmJiBsb29rdXBEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBuZXh0Rm9jdXMgPT09IG9wdGlvbnMubGVuZ3RoIHx8ICF3cmFwQXJvdW5kICYmIGxvb2t1cERpcmVjdGlvbiA9PT0gJ3ByZXZpb3VzJyAmJiBuZXh0Rm9jdXMgPT09IC0xKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGNvbnN0IG5leHRGb2N1c0Rpc2FibGVkID0gZm9jdXNEaXNhYmxlZCA/IGZhbHNlIDogaXNPcHRpb25EaXNhYmxlZChvcHRpb25zW25leHRGb2N1c10sIG5leHRGb2N1cyk7XG4gICAgaWYgKG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICBuZXh0Rm9jdXMgKz0gbG9va3VwRGlyZWN0aW9uID09PSAnbmV4dCcgPyAxIDogLTE7XG4gICAgICBpZiAod3JhcEFyb3VuZCkge1xuICAgICAgICBuZXh0Rm9jdXMgPSAobmV4dEZvY3VzICsgb3B0aW9ucy5sZW5ndGgpICUgb3B0aW9ucy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0Rm9jdXM7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXROZXdIaWdobGlnaHRlZE9wdGlvbihvcHRpb25zLCBwcmV2aW91c2x5SGlnaGxpZ2h0ZWRPcHRpb24sIGRpZmYsIGhpZ2hsaWdodERpc2FibGVkT3B0aW9ucywgaXNPcHRpb25EaXNhYmxlZCwgZGlzYWJsZUxpc3RXcmFwLCBvcHRpb25Db21wYXJlcikge1xuICB2YXIgX29wdGlvbnMkbmV4dEluZGV4O1xuICBjb25zdCBtYXhJbmRleCA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgY29uc3QgZGVmYXVsdEhpZ2hsaWdodGVkSW5kZXggPSAtMTtcbiAgY29uc3QgcHJldmlvdXNseUhpZ2hsaWdodGVkSW5kZXggPSBwcmV2aW91c2x5SGlnaGxpZ2h0ZWRPcHRpb24gPT0gbnVsbCA/IC0xIDogb3B0aW9ucy5maW5kSW5kZXgob3B0aW9uID0+IG9wdGlvbkNvbXBhcmVyKG9wdGlvbiwgcHJldmlvdXNseUhpZ2hsaWdodGVkT3B0aW9uKSk7XG4gIGxldCBuZXh0SW5kZXhDYW5kaWRhdGU7XG4gIGxldCBsb29rdXBEaXJlY3Rpb247XG4gIGxldCB3cmFwQXJvdW5kO1xuICBzd2l0Y2ggKGRpZmYpIHtcbiAgICBjYXNlICdyZXNldCc6XG4gICAgICBpZiAoZGVmYXVsdEhpZ2hsaWdodGVkSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgbmV4dEluZGV4Q2FuZGlkYXRlID0gMDtcbiAgICAgIGxvb2t1cERpcmVjdGlvbiA9ICduZXh0JztcbiAgICAgIHdyYXBBcm91bmQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgIG5leHRJbmRleENhbmRpZGF0ZSA9IDA7XG4gICAgICBsb29rdXBEaXJlY3Rpb24gPSAnbmV4dCc7XG4gICAgICB3cmFwQXJvdW5kID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgbmV4dEluZGV4Q2FuZGlkYXRlID0gbWF4SW5kZXg7XG4gICAgICBsb29rdXBEaXJlY3Rpb24gPSAncHJldmlvdXMnO1xuICAgICAgd3JhcEFyb3VuZCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgY29uc3QgbmV3SW5kZXggPSBwcmV2aW91c2x5SGlnaGxpZ2h0ZWRJbmRleCArIGRpZmY7XG4gICAgICAgIHdyYXBBcm91bmQgPSAhZGlzYWJsZUxpc3RXcmFwO1xuICAgICAgICBpZiAobmV3SW5kZXggPCAwKSB7XG4gICAgICAgICAgaWYgKCF3cmFwQXJvdW5kICYmIHByZXZpb3VzbHlIaWdobGlnaHRlZEluZGV4ICE9PSAtMSB8fCBNYXRoLmFicyhkaWZmKSA+IDEpIHtcbiAgICAgICAgICAgIG5leHRJbmRleENhbmRpZGF0ZSA9IDA7XG4gICAgICAgICAgICBsb29rdXBEaXJlY3Rpb24gPSAnbmV4dCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRJbmRleENhbmRpZGF0ZSA9IG1heEluZGV4O1xuICAgICAgICAgICAgbG9va3VwRGlyZWN0aW9uID0gJ3ByZXZpb3VzJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3SW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgICAgIGlmICghd3JhcEFyb3VuZCB8fCBNYXRoLmFicyhkaWZmKSA+IDEpIHtcbiAgICAgICAgICAgIG5leHRJbmRleENhbmRpZGF0ZSA9IG1heEluZGV4O1xuICAgICAgICAgICAgbG9va3VwRGlyZWN0aW9uID0gJ3ByZXZpb3VzJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dEluZGV4Q2FuZGlkYXRlID0gMDtcbiAgICAgICAgICAgIGxvb2t1cERpcmVjdGlvbiA9ICduZXh0JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dEluZGV4Q2FuZGlkYXRlID0gbmV3SW5kZXg7XG4gICAgICAgICAgbG9va3VwRGlyZWN0aW9uID0gZGlmZiA+PSAwID8gJ25leHQnIDogJ3ByZXZpb3VzJztcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG4gIGNvbnN0IG5leHRJbmRleCA9IGZpbmRWYWxpZE9wdGlvblRvSGlnaGxpZ2h0KG5leHRJbmRleENhbmRpZGF0ZSwgbG9va3VwRGlyZWN0aW9uLCBvcHRpb25zLCBoaWdobGlnaHREaXNhYmxlZE9wdGlvbnMsIGlzT3B0aW9uRGlzYWJsZWQsIHdyYXBBcm91bmQpO1xuICByZXR1cm4gKF9vcHRpb25zJG5leHRJbmRleCA9IG9wdGlvbnNbbmV4dEluZGV4XSkgIT0gbnVsbCA/IF9vcHRpb25zJG5leHRJbmRleCA6IG51bGw7XG59XG5mdW5jdGlvbiBtb3ZlSGlnaGxpZ2h0KHByZXZpb3VzbHlIaWdobGlnaHRlZE9wdGlvbiwgZGlmZiwgcHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnMsXG4gICAgaXNPcHRpb25EaXNhYmxlZCxcbiAgICBkaXNhYmxlTGlzdFdyYXAsXG4gICAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSxcbiAgICBvcHRpb25Db21wYXJlclxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBnZXROZXdIaWdobGlnaHRlZE9wdGlvbihvcHRpb25zLCBwcmV2aW91c2x5SGlnaGxpZ2h0ZWRPcHRpb24sIGRpZmYsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgIT0gbnVsbCA/IGRpc2FibGVkSXRlbXNGb2N1c2FibGUgOiBmYWxzZSwgaXNPcHRpb25EaXNhYmxlZCAhPSBudWxsID8gaXNPcHRpb25EaXNhYmxlZCA6ICgpID0+IGZhbHNlLCBkaXNhYmxlTGlzdFdyYXAgIT0gbnVsbCA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlLCBvcHRpb25Db21wYXJlciAhPSBudWxsID8gb3B0aW9uQ29tcGFyZXIgOiAobzEsIG8yKSA9PiBvMSA9PT0gbzIpO1xufVxuZnVuY3Rpb24gdG9nZ2xlU2VsZWN0aW9uKG9wdGlvbiwgc2VsZWN0ZWRPcHRpb25zLCBzZWxlY3Rpb25MaW1pdCwgb3B0aW9uQ29tcGFyZXIpIHtcbiAgaWYgKHNlbGVjdGlvbkxpbWl0ID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gU2VsZWN0aW9uIGxpbWl0ID0gMSBpcyBhIHNwZWNpYWwgY2FzZSAtIHdlIGRvbid0IHdhbnQgdG8gYWxsb3cgZGVzZWxlY3RpbmcgdGhlIG9wdGlvbi5cbiAgaWYgKHNlbGVjdGlvbkxpbWl0ID09PSAxKSB7XG4gICAgaWYgKG9wdGlvbkNvbXBhcmVyKHNlbGVjdGVkT3B0aW9uc1swXSwgb3B0aW9uKSkge1xuICAgICAgcmV0dXJuIHNlbGVjdGVkT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIFtvcHRpb25dO1xuICB9XG5cbiAgLy8gVGhlIHRvZ2dsZWQgb3B0aW9uIGlzIHNlbGVjdGVkOyByZW1vdmUgaXQgZnJvbSB0aGUgc2VsZWN0aW9uLlxuICBpZiAoc2VsZWN0ZWRPcHRpb25zLnNvbWUoc28gPT4gb3B0aW9uQ29tcGFyZXIoc28sIG9wdGlvbikpKSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkT3B0aW9ucy5maWx0ZXIoc28gPT4gIW9wdGlvbkNvbXBhcmVyKHNvLCBvcHRpb24pKTtcbiAgfVxuXG4gIC8vIFRoZSB0b2dnbGVkIG9wdGlvbiBpcyBub3Qgc2VsZWN0ZWQgYW5kIHRoZSBzZWxlY3RlZCBhcnJheSBpcyBzaG9ydGVyIHRoYW4gdGhlIGxpbWl0IC0gYWRkIHRvIHRoZSBzZWxlY3Rpb24uXG4gIGlmIChzZWxlY3Rpb25MaW1pdCA9PT0gbnVsbCB8fCBzZWxlY3RlZE9wdGlvbnMubGVuZ3RoIDwgc2VsZWN0aW9uTGltaXQpIHtcbiAgICByZXR1cm4gWy4uLnNlbGVjdGVkT3B0aW9ucywgb3B0aW9uXTtcbiAgfVxuXG4gIC8vIFRydW5jYXRlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGxpbWl0IChkaXNjYXJkIGl0ZW1zIHdpdGggbG93ZXIgaW5kZXhlcykuXG4gIGNvbnN0IG5ld1NlbGVjdGlvbiA9IHNlbGVjdGVkT3B0aW9ucy5zbGljZShzZWxlY3RlZE9wdGlvbnMubGVuZ3RoIC0gc2VsZWN0aW9uTGltaXQgKyAxKTtcbiAgbmV3U2VsZWN0aW9uLnB1c2gob3B0aW9uKTtcbiAgcmV0dXJuIG5ld1NlbGVjdGlvbjtcbn1cbmZ1bmN0aW9uIGhhbmRsZU9wdGlvblNlbGVjdGlvbihvcHRpb24sIHN0YXRlLCBwcm9wcykge1xuICBjb25zdCB7XG4gICAgb3B0aW9uQ29tcGFyZXIgPSAobywgdikgPT4gbyA9PT0gdixcbiAgICBpc09wdGlvbkRpc2FibGVkID0gKCkgPT4gZmFsc2UsXG4gICAgc2VsZWN0aW9uTGltaXRcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7XG4gICAgc2VsZWN0ZWRWYWx1ZXNcbiAgfSA9IHN0YXRlO1xuICBjb25zdCBvcHRpb25JbmRleCA9IHByb3BzLm9wdGlvbnMuZmluZEluZGV4KG8gPT4gcHJvcHMub3B0aW9uQ29tcGFyZXIob3B0aW9uLCBvKSk7XG4gIGlmIChpc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgb3B0aW9uSW5kZXgpKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgLy8gaWYgdGhlIG9wdGlvbiBpcyBhbHJlYWR5IHNlbGVjdGVkLCByZW1vdmUgaXQgZnJvbSB0aGUgc2VsZWN0aW9uLCBvdGhlcndpc2UgYWRkIGl0XG4gIGNvbnN0IG5ld1NlbGVjdGVkVmFsdWVzID0gdG9nZ2xlU2VsZWN0aW9uKG9wdGlvbiwgc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGlvbkxpbWl0LCBvcHRpb25Db21wYXJlcik7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWRWYWx1ZXM6IG5ld1NlbGVjdGVkVmFsdWVzLFxuICAgIGhpZ2hsaWdodGVkVmFsdWU6IG9wdGlvblxuICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCwgc3RhdGUsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgcHJldmlvdXNseVNlbGVjdGVkVmFsdWUgPSBzdGF0ZS5oaWdobGlnaHRlZFZhbHVlO1xuICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBoaWdobGlnaHRlZFZhbHVlOiBtb3ZlSGlnaGxpZ2h0KHByZXZpb3VzbHlTZWxlY3RlZFZhbHVlLCAnc3RhcnQnLCBwYXJhbWV0ZXJzKVxuICAgICAgfSk7XG4gICAgY2FzZSAnRW5kJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZTogbW92ZUhpZ2hsaWdodChwcmV2aW91c2x5U2VsZWN0ZWRWYWx1ZSwgJ2VuZCcsIHBhcmFtZXRlcnMpXG4gICAgICB9KTtcbiAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBoaWdobGlnaHRlZFZhbHVlOiBtb3ZlSGlnaGxpZ2h0KHByZXZpb3VzbHlTZWxlY3RlZFZhbHVlLCAtcGFnZVNpemUsIHBhcmFtZXRlcnMpXG4gICAgICB9KTtcbiAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGhpZ2hsaWdodGVkVmFsdWU6IG1vdmVIaWdobGlnaHQocHJldmlvdXNseVNlbGVjdGVkVmFsdWUsIHBhZ2VTaXplLCBwYXJhbWV0ZXJzKVxuICAgICAgfSk7XG4gICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAvLyBUT0RPOiBleHRlbmQgY3VycmVudCBzZWxlY3Rpb24gd2l0aCBTaGlmdCBtb2RpZmllclxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBoaWdobGlnaHRlZFZhbHVlOiBtb3ZlSGlnaGxpZ2h0KHByZXZpb3VzbHlTZWxlY3RlZFZhbHVlLCAtMSwgcGFyYW1ldGVycylcbiAgICAgIH0pO1xuICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAvLyBUT0RPOiBleHRlbmQgY3VycmVudCBzZWxlY3Rpb24gd2l0aCBTaGlmdCBtb2RpZmllclxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBoaWdobGlnaHRlZFZhbHVlOiBtb3ZlSGlnaGxpZ2h0KHByZXZpb3VzbHlTZWxlY3RlZFZhbHVlLCAxLCBwYXJhbWV0ZXJzKVxuICAgICAgfSk7XG4gICAgY2FzZSAnRW50ZXInOlxuICAgIGNhc2UgJyAnOlxuICAgICAgaWYgKHN0YXRlLmhpZ2hsaWdodGVkVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZU9wdGlvblNlbGVjdGlvbihzdGF0ZS5oaWdobGlnaHRlZFZhbHVlLCBzdGF0ZSwgcGFyYW1ldGVycyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUJsdXIoc3RhdGUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgIGhpZ2hsaWdodGVkVmFsdWU6IG51bGxcbiAgfSk7XG59XG5jb25zdCB0ZXh0Q3JpdGVyaWFNYXRjaGVzID0gKG5leHRGb2N1cywgc2VhcmNoU3RyaW5nLCBzdHJpbmdpZnlPcHRpb24pID0+IHtcbiAgdmFyIF9zdHJpbmdpZnlPcHRpb247XG4gIGNvbnN0IHRleHQgPSAoX3N0cmluZ2lmeU9wdGlvbiA9IHN0cmluZ2lmeU9wdGlvbihuZXh0Rm9jdXMpKSA9PSBudWxsID8gdm9pZCAwIDogX3N0cmluZ2lmeU9wdGlvbi50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCF0ZXh0IHx8IHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gTWFrZSBvcHRpb24gbm90IG5hdmlnYWJsZSBpZiBzdHJpbmdpZmljYXRpb24gZmFpbHMgb3IgcmVzdWx0cyBpbiBlbXB0eSBzdHJpbmcuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0ZXh0LmluZGV4T2Yoc2VhcmNoU3RyaW5nKSA9PT0gMDtcbn07XG5mdW5jdGlvbiBoYW5kbGVUZXh0TmF2aWdhdGlvbihzdGF0ZSwgc2VhcmNoU3RyaW5nLCBwcm9wcykge1xuICBjb25zdCB7XG4gICAgb3B0aW9ucyxcbiAgICBpc09wdGlvbkRpc2FibGVkLFxuICAgIGRpc2FibGVMaXN0V3JhcCxcbiAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLFxuICAgIG9wdGlvbkNvbXBhcmVyLFxuICAgIG9wdGlvblN0cmluZ2lmaWVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgc3RhcnRXaXRoQ3VycmVudE9wdGlvbiA9IHNlYXJjaFN0cmluZy5sZW5ndGggPiAxO1xuICBsZXQgbmV4dE9wdGlvbiA9IHN0YXJ0V2l0aEN1cnJlbnRPcHRpb24gPyBzdGF0ZS5oaWdobGlnaHRlZFZhbHVlIDogZ2V0TmV3SGlnaGxpZ2h0ZWRPcHRpb24ob3B0aW9ucywgc3RhdGUuaGlnaGxpZ2h0ZWRWYWx1ZSwgMSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSAhPSBudWxsID8gZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA6IGZhbHNlLCBpc09wdGlvbkRpc2FibGVkICE9IG51bGwgPyBpc09wdGlvbkRpc2FibGVkIDogKCkgPT4gZmFsc2UsIGRpc2FibGVMaXN0V3JhcCAhPSBudWxsID8gZGlzYWJsZUxpc3RXcmFwIDogZmFsc2UsIG9wdGlvbkNvbXBhcmVyKTtcblxuICAvLyB1c2UgYGZvcmAgaW5zdGVhZCBvZiBgd2hpbGVgIHByZXZlbnQgaW5maW5pdGUgbG9vcFxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9ucy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAvLyBSZXR1cm4gdW4tbXV0YXRlZCBzdGF0ZSBpZiBsb29wZWQgYmFjayB0byB0aGUgY3VycmVudGx5IGhpZ2hsaWdodGVkIHZhbHVlXG4gICAgaWYgKCFuZXh0T3B0aW9uIHx8ICFzdGFydFdpdGhDdXJyZW50T3B0aW9uICYmIHN0YXRlLmhpZ2hsaWdodGVkVmFsdWUgPT09IG5leHRPcHRpb24pIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgaWYgKHRleHRDcml0ZXJpYU1hdGNoZXMobmV4dE9wdGlvbiwgc2VhcmNoU3RyaW5nLCBvcHRpb25TdHJpbmdpZmllcikgJiYgKCFpc09wdGlvbkRpc2FibGVkKG5leHRPcHRpb24sIG9wdGlvbnMuaW5kZXhPZihuZXh0T3B0aW9uKSkgfHwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSkpIHtcbiAgICAgIC8vIFRoZSBuZXh0T3B0aW9uIGlzIHRoZSBlbGVtZW50IHRvIGJlIGhpZ2hsaWdodGVkXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGhpZ2hsaWdodGVkVmFsdWU6IG5leHRPcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgbmV4dE9wdGlvbiA9IGdldE5ld0hpZ2hsaWdodGVkT3B0aW9uKG9wdGlvbnMsIG5leHRPcHRpb24sIDEsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgIT0gbnVsbCA/IGRpc2FibGVkSXRlbXNGb2N1c2FibGUgOiBmYWxzZSwgaXNPcHRpb25EaXNhYmxlZCAhPSBudWxsID8gaXNPcHRpb25EaXNhYmxlZCA6ICgpID0+IGZhbHNlLCBkaXNhYmxlTGlzdFdyYXAgIT0gbnVsbCA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlLCBvcHRpb25Db21wYXJlcik7XG4gIH1cblxuICAvLyBObyBvcHRpb24gbWF0Y2ggdGV4dCBzZWFyY2ggY3JpdGVyaWFcbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gaGFuZGxlT3B0aW9uc0NoYW5nZShvcHRpb25zLCBzdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIF9vcHRpb25zJGZpbmQsIF9zdGF0ZSRzZWxlY3RlZFZhbHVlcztcbiAgY29uc3Qge1xuICAgIG9wdGlvbkNvbXBhcmVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgbmV3SGlnaGxpZ2h0ZWRPcHRpb24gPSBzdGF0ZS5oaWdobGlnaHRlZFZhbHVlID09IG51bGwgPyBudWxsIDogKF9vcHRpb25zJGZpbmQgPSBvcHRpb25zLmZpbmQob3B0aW9uID0+IG9wdGlvbkNvbXBhcmVyKG9wdGlvbiwgc3RhdGUuaGlnaGxpZ2h0ZWRWYWx1ZSkpKSAhPSBudWxsID8gX29wdGlvbnMkZmluZCA6IG51bGw7XG5cbiAgLy8gZXhjbHVkZSBzZWxlY3RlZCB2YWx1ZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBvcHRpb25zXG4gIGNvbnN0IHNlbGVjdGVkVmFsdWVzID0gKF9zdGF0ZSRzZWxlY3RlZFZhbHVlcyA9IHN0YXRlLnNlbGVjdGVkVmFsdWVzKSAhPSBudWxsID8gX3N0YXRlJHNlbGVjdGVkVmFsdWVzIDogW107XG4gIGNvbnN0IG5ld1NlbGVjdGVkVmFsdWVzID0gc2VsZWN0ZWRWYWx1ZXMuZmlsdGVyKHNlbGVjdGVkVmFsdWUgPT4gb3B0aW9ucy5zb21lKG9wdGlvbiA9PiBvcHRpb25Db21wYXJlcihvcHRpb24sIHNlbGVjdGVkVmFsdWUpKSk7XG4gIHJldHVybiB7XG4gICAgaGlnaGxpZ2h0ZWRWYWx1ZTogbmV3SGlnaGxpZ2h0ZWRPcHRpb24sXG4gICAgc2VsZWN0ZWRWYWx1ZXM6IG5ld1NlbGVjdGVkVmFsdWVzXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TGlzdGJveFJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBjb25zdCB7XG4gICAgdHlwZVxuICB9ID0gYWN0aW9uO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEFjdGlvblR5cGVzLmtleURvd246XG4gICAgICByZXR1cm4gaGFuZGxlS2V5RG93bihhY3Rpb24uZXZlbnQsIHN0YXRlLCBhY3Rpb24ucHJvcHMpO1xuICAgIGNhc2UgQWN0aW9uVHlwZXMub3B0aW9uQ2xpY2s6XG4gICAgICByZXR1cm4gaGFuZGxlT3B0aW9uU2VsZWN0aW9uKGFjdGlvbi5vcHRpb24sIHN0YXRlLCBhY3Rpb24ucHJvcHMpO1xuICAgIGNhc2UgQWN0aW9uVHlwZXMuYmx1cjpcbiAgICAgIHJldHVybiBoYW5kbGVCbHVyKHN0YXRlKTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLnNldFZhbHVlOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBzZWxlY3RlZFZhbHVlczogYWN0aW9uLnZhbHVlXG4gICAgICB9KTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLnNldEhpZ2hsaWdodDpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZTogYWN0aW9uLmhpZ2hsaWdodFxuICAgICAgfSk7XG4gICAgY2FzZSBBY3Rpb25UeXBlcy50ZXh0TmF2aWdhdGlvbjpcbiAgICAgIHJldHVybiBoYW5kbGVUZXh0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uLnNlYXJjaFN0cmluZywgYWN0aW9uLnByb3BzKTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLm9wdGlvbnNDaGFuZ2U6XG4gICAgICByZXR1cm4gaGFuZGxlT3B0aW9uc0NoYW5nZShhY3Rpb24ub3B0aW9ucywgc3RhdGUsIGFjdGlvbi5wcm9wcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGFycmF5MSwgYXJyYXkyLCBpdGVtQ29tcGFyZXIgPSAoYSwgYikgPT4gYSA9PT0gYikge1xuICByZXR1cm4gYXJyYXkxLmxlbmd0aCA9PT0gYXJyYXkyLmxlbmd0aCAmJiBhcnJheTEuZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gaXRlbUNvbXBhcmVyKHZhbHVlLCBhcnJheTJbaW5kZXhdKSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4vdXNlTGlzdGJveC50eXBlcyc7XG5pbXBvcnQgYXJlQXJyYXlzRXF1YWwgZnJvbSAnLi4vdXRpbHMvYXJlQXJyYXlzRXF1YWwnO1xuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgc3RhdGUuIElmIHRoZSBzZWxlY3RlZFZhbHVlIGlzIGNvbnRyb2xsZWQsXG4gKiB0aGUgYHZhbHVlYCBwcm9wIGlzIHRoZSBzb3VyY2Ugb2YgdHJ1dGggaW5zdGVhZCBvZiB0aGUgaW50ZXJuYWwgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRyb2xsZWRTdGF0ZShpbnRlcm5hbFN0YXRlLCBwcm9wcykge1xuICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTdGF0ZSwge1xuICAgICAgc2VsZWN0ZWRWYWx1ZTogcHJvcHMudmFsdWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaW50ZXJuYWxTdGF0ZTtcbn1cbmZ1bmN0aW9uIGFyZU9wdGlvbnNFcXVhbChvcHRpb24xLCBvcHRpb24yLCBvcHRpb25Db21wYXJlcikge1xuICBpZiAob3B0aW9uMSA9PT0gb3B0aW9uMikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvcHRpb24xID09PSBudWxsIHx8IG9wdGlvbjIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbkNvbXBhcmVyKG9wdGlvbjEsIG9wdGlvbjIpO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIGNoYW5nZSBldmVudCBoYW5kbGVycyAob25DaGFuZ2UgYW5kIG9uSGlnaGxpZ2h0Q2hhbmdlKSB3aGVuIHJlZHVjZXIgcmV0dXJucyBjaGFuZ2VkIHN0YXRlLlxuICpcbiAqIEBwYXJhbSBuZXh0U3RhdGUgVGhlIG5leHQgc3RhdGUgcmV0dXJuZWQgYnkgdGhlIHJlZHVjZXIuXG4gKiBAcGFyYW0gaW50ZXJuYWxQcmV2aW91c1N0YXRlIFRoZSBwcmV2aW91cyBzdGF0ZS4gSWYgdGhlIGNvbXBvbmVudCBpcyBjb250cm9sbGVkLCB0aGlzIGlzIG1lcmdlZCB3aXRoIHRoZSBwcm9wcyB0byBkZXRlcm1pbmUgdGhlIGZpbmFsIHN0YXRlLlxuICogQHBhcmFtIHByb3BzUmVmIFRoZSBwcm9wcyB3aXRoIGRlZmF1bHRzIGFwcGxpZWQuXG4gKiBAcGFyYW0gbGFzdEFjdGlvblJlZiBUaGUgbGFzdCBhY3Rpb24gdGhhdCB3YXMgZGlzcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gdXNlU3RhdGVDaGFuZ2VEZXRlY3Rpb24obmV4dFN0YXRlLCBpbnRlcm5hbFByZXZpb3VzU3RhdGUsIHByb3BzUmVmLCBsYXN0QWN0aW9uUmVmKSB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9wcmV2aW91c1N0YXRlJHNlbGVjdDtcbiAgICBpZiAoIXByb3BzUmVmLmN1cnJlbnQgfHwgbGFzdEFjdGlvblJlZi5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAvLyBEZXRlY3QgY2hhbmdlcyBvbmx5IGlmIGFuIGFjdGlvbiBoYXMgYmVlbiBkaXNwYXRjaGVkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobGFzdEFjdGlvblJlZi5jdXJyZW50LnR5cGUgPT09IEFjdGlvblR5cGVzLnNldFZhbHVlIHx8IGxhc3RBY3Rpb25SZWYuY3VycmVudC50eXBlID09PSBBY3Rpb25UeXBlcy5zZXRIaWdobGlnaHQpIHtcbiAgICAgIC8vIERvbid0IGZpcmUgY2hhbmdlIGV2ZW50cyB3aGVuIHRoZSB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkIGV4dGVybmFsbHkgKGUuZy4gYnkgY2hhbmdpbmcgdGhlIGNvbnRyb2xsZWQgcHJvcCkuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSBnZXRDb250cm9sbGVkU3RhdGUoaW50ZXJuYWxQcmV2aW91c1N0YXRlLCBwcm9wc1JlZi5jdXJyZW50KTtcbiAgICBjb25zdCB7XG4gICAgICBvcHRpb25Db21wYXJlcixcbiAgICAgIG9uQ2hhbmdlXG4gICAgfSA9IHByb3BzUmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgcHJldmlvdXNTZWxlY3RlZFZhbHVlcyA9IChfcHJldmlvdXNTdGF0ZSRzZWxlY3QgPSBwcmV2aW91c1N0YXRlID09IG51bGwgPyB2b2lkIDAgOiBwcmV2aW91c1N0YXRlLnNlbGVjdGVkVmFsdWVzKSAhPSBudWxsID8gX3ByZXZpb3VzU3RhdGUkc2VsZWN0IDogW107XG4gICAgY29uc3QgbmV4dFNlbGVjdGVkVmFsdWVzID0gbmV4dFN0YXRlLnNlbGVjdGVkVmFsdWVzO1xuICAgIGlmICghYXJlQXJyYXlzRXF1YWwobmV4dFNlbGVjdGVkVmFsdWVzLCBwcmV2aW91c1NlbGVjdGVkVmFsdWVzLCBvcHRpb25Db21wYXJlcikpIHtcbiAgICAgIG9uQ2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbkNoYW5nZShsYXN0QWN0aW9uUmVmLmN1cnJlbnQuZXZlbnQsIG5leHRTZWxlY3RlZFZhbHVlcyk7XG4gICAgfVxuXG4gICAgLy8gRmlyZXMgdGhlIGhpZ2hsaWdodENoYW5nZSBldmVudCB3aGVuIHJlZHVjZXIgcmV0dXJucyBjaGFuZ2VkIGBoaWdobGlnaHRlZFZhbHVlYC5cbiAgICBpZiAoIWFyZU9wdGlvbnNFcXVhbChpbnRlcm5hbFByZXZpb3VzU3RhdGUuaGlnaGxpZ2h0ZWRWYWx1ZSwgbmV4dFN0YXRlLmhpZ2hsaWdodGVkVmFsdWUsIHByb3BzUmVmLmN1cnJlbnQub3B0aW9uQ29tcGFyZXIpKSB7XG4gICAgICB2YXIgX3Byb3BzUmVmJGN1cnJlbnQsIF9wcm9wc1JlZiRjdXJyZW50JG9uSDtcbiAgICAgIChfcHJvcHNSZWYkY3VycmVudCA9IHByb3BzUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzUmVmJGN1cnJlbnQkb25IID0gX3Byb3BzUmVmJGN1cnJlbnQub25IaWdobGlnaHRDaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHNSZWYkY3VycmVudCRvbkguY2FsbChfcHJvcHNSZWYkY3VycmVudCwgbGFzdEFjdGlvblJlZi5jdXJyZW50LmV2ZW50LCBuZXh0U3RhdGUuaGlnaGxpZ2h0ZWRWYWx1ZSk7XG4gICAgfVxuICAgIGxhc3RBY3Rpb25SZWYuY3VycmVudCA9IG51bGw7XG4gIH0sIFtuZXh0U3RhdGUuc2VsZWN0ZWRWYWx1ZXMsIG5leHRTdGF0ZS5oaWdobGlnaHRlZFZhbHVlLCBpbnRlcm5hbFByZXZpb3VzU3RhdGUsIHByb3BzUmVmLCBsYXN0QWN0aW9uUmVmXSk7XG59XG5cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxhYmxlUmVkdWNlcihpbnRlcm5hbFJlZHVjZXIsIGV4dGVybmFsUmVkdWNlciwgcHJvcHMpIHtcbiAgdmFyIF9yZWY7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZSxcbiAgICBkZWZhdWx0VmFsdWVcbiAgfSA9IHByb3BzLmN1cnJlbnQ7XG4gIGNvbnN0IGFjdGlvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaW5pdGlhbFNlbGVjdGVkVmFsdWVzID0gKF9yZWYgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogdmFsdWUpICE9IG51bGwgPyBfcmVmIDogW107XG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBoaWdobGlnaHRlZFZhbHVlOiBudWxsLFxuICAgIHNlbGVjdGVkVmFsdWVzOiBpbml0aWFsU2VsZWN0ZWRWYWx1ZXNcbiAgfTtcbiAgY29uc3QgY29tYmluZWRSZWR1Y2VyID0gUmVhY3QudXNlQ2FsbGJhY2soKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb25SZWYuY3VycmVudCA9IGFjdGlvbjtcbiAgICBpZiAoZXh0ZXJuYWxSZWR1Y2VyKSB7XG4gICAgICByZXR1cm4gZXh0ZXJuYWxSZWR1Y2VyKGdldENvbnRyb2xsZWRTdGF0ZShzdGF0ZSwgYWN0aW9uLnByb3BzKSwgYWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVybmFsUmVkdWNlcihnZXRDb250cm9sbGVkU3RhdGUoc3RhdGUsIGFjdGlvbi5wcm9wcyksIGFjdGlvbik7XG4gIH0sIFtleHRlcm5hbFJlZHVjZXIsIGludGVybmFsUmVkdWNlcl0pO1xuICBjb25zdCBbbmV4dFN0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKGNvbWJpbmVkUmVkdWNlciwgaW5pdGlhbFN0YXRlKTtcbiAgY29uc3QgZGlzcGF0Y2hXaXRoUHJvcHMgPSBSZWFjdC51c2VDYWxsYmFjayhhY3Rpb24gPT4ge1xuICAgIGRpc3BhdGNoKF9leHRlbmRzKHtcbiAgICAgIHByb3BzOiBwcm9wcy5jdXJyZW50XG4gICAgfSwgYWN0aW9uKSk7XG4gIH0sIFtkaXNwYXRjaCwgcHJvcHNdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IFJlYWN0LnVzZVJlZihpbml0aWFsU3RhdGUpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByZXZpb3VzU3RhdGUuY3VycmVudCA9IG5leHRTdGF0ZTtcbiAgfSwgW3ByZXZpb3VzU3RhdGUsIG5leHRTdGF0ZV0pO1xuICB1c2VTdGF0ZUNoYW5nZURldGVjdGlvbihuZXh0U3RhdGUsIHByZXZpb3VzU3RhdGUuY3VycmVudCwgcHJvcHMsIGFjdGlvblJlZik7XG4gIHJldHVybiBbZ2V0Q29udHJvbGxlZFN0YXRlKG5leHRTdGF0ZSwgcHJvcHMuY3VycmVudCksIGRpc3BhdGNoV2l0aFByb3BzXTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGhvb2suXG4gKlxuICogSW5pdGlhbGl6ZXMgYSByZWYgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUgYW5kIHVwZGF0ZXMgaXQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc3RvcmUgaW4gdGhlIHJlZlxuICogQHBhcmFtIGRlcHMgQW4gb3B0aW9uYWwgYXJyYXkgb2YgZGVwZW5kZW5jaWVzIHRvIHdhdGNoIGZvciBjaGFuZ2VzLiBJZiBub3QgcHJvdmlkZWQsIHRoZSByZWYgd2lsbCBiZSB1cGRhdGVkIGVhY2ggdGltZSB0aGUgYHZhbHVlYCBjaGFuZ2VzLlxuICogQHJldHVybnMgQSBSZWFjdC5SZWZPYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHZhbHVlXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW3VzZUxhdGVzdCBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlL2FwaS91c2UtbGF0ZXN0LylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTGF0ZXN0KHZhbHVlLCBkZXBzKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIGRlcHMgIT0gbnVsbCA/IGRlcHMgOiBbdmFsdWVdKTtcbiAgcmV0dXJuIHJlZjtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBURVhUX05BVklHQVRJT05fUkVTRVRfVElNRU9VVCA9IDUwMDsgLy8gbWlsbGlzZWNvbmRzXG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGhvb2suXG4gKlxuICogUHJvdmlkZXMgYSBoYW5kbGVyIGZvciB0ZXh0IG5hdmlnYXRpb24uXG4gKiBJdCdzIHVzZWQgdG8gbmF2aWdhdGUgdGhlIGxpc3Rib3ggYnkgdHlwaW5nIHRoZSBmaXJzdCBsZXR0ZXJzIG9mIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBuYXZpZ2F0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQuXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRvIGJlIHVzZWQgaW4gYSBrZXlkb3duIGV2ZW50IGhhbmRsZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRleHROYXZpZ2F0aW9uKGNhbGxiYWNrKSB7XG4gIGNvbnN0IHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAgc2VhcmNoU3RyaW5nOiAnJyxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQua2V5Lmxlbmd0aCA9PT0gMSAmJiBldmVudC5rZXkgIT09ICcgJykge1xuICAgICAgY29uc3QgdGV4dENyaXRlcmlhID0gdGV4dENyaXRlcmlhUmVmLmN1cnJlbnQ7XG4gICAgICBjb25zdCBsb3dlcktleSA9IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmICh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLmxlbmd0aCA+IDAgJiYgdGV4dENyaXRlcmlhLmxhc3RUaW1lICYmIGN1cnJlbnRUaW1lIC0gdGV4dENyaXRlcmlhLmxhc3RUaW1lID4gVEVYVF9OQVZJR0FUSU9OX1JFU0VUX1RJTUVPVVQpIHtcbiAgICAgICAgdGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZyA9IGxvd2VyS2V5O1xuICAgICAgfSBlbHNlIGlmICh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLmxlbmd0aCAhPT0gMSB8fCBsb3dlcktleSAhPT0gdGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZykge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBqdXN0IG9uZSBjaGFyYWN0ZXIgaW4gdGhlIGJ1ZmZlciBhbmQgdGhlIGtleSBpcyB0aGUgc2FtZSwgZG8gbm90IGFwcGVuZFxuICAgICAgICB0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nICs9IGxvd2VyS2V5O1xuICAgICAgfVxuICAgICAgdGV4dENyaXRlcmlhLmxhc3RUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICBjYWxsYmFjayh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLCBldmVudCk7XG4gICAgfVxuICB9LCBbY2FsbGJhY2tdKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfdXNlSWQgYXMgdXNlSWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi91c2VMaXN0Ym94LnR5cGVzJztcbmltcG9ydCBkZWZhdWx0UmVkdWNlciBmcm9tICcuL2RlZmF1bHRMaXN0Ym94UmVkdWNlcic7XG5pbXBvcnQgdXNlQ29udHJvbGxhYmxlUmVkdWNlciBmcm9tICcuL3VzZUNvbnRyb2xsYWJsZVJlZHVjZXInO1xuaW1wb3J0IGFyZUFycmF5c0VxdWFsIGZyb20gJy4uL3V0aWxzL2FyZUFycmF5c0VxdWFsJztcbmltcG9ydCB1c2VMYXRlc3QgZnJvbSAnLi4vdXRpbHMvdXNlTGF0ZXN0JztcbmltcG9ydCB1c2VUZXh0TmF2aWdhdGlvbiBmcm9tICcuLi91dGlscy91c2VUZXh0TmF2aWdhdGlvbic7XG5jb25zdCBkZWZhdWx0T3B0aW9uQ29tcGFyZXIgPSAob3B0aW9uQSwgb3B0aW9uQikgPT4gb3B0aW9uQSA9PT0gb3B0aW9uQjtcbmNvbnN0IGRlZmF1bHRJc09wdGlvbkRpc2FibGVkID0gKCkgPT4gZmFsc2U7XG5jb25zdCBkZWZhdWx0T3B0aW9uU3RyaW5naWZpZXIgPSBvcHRpb24gPT4gdHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgPyBvcHRpb24gOiBTdHJpbmcob3B0aW9uKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBUaGUgdXNlTGlzdGJveCBpcyBhIGxvd2VyLWxldmVsIHV0aWxpdHkgdGhhdCBpcyB1c2VkIHRvIGJ1aWxkIGEgbGlzdGJveCBjb21wb25lbnQuXG4gKiBJdCdzIHVzZWQgdG8gbWFuYWdlIHRoZSBzdGF0ZSBvZiB0aGUgbGlzdGJveCBhbmQgaXRzIG9wdGlvbnMuXG4gKiBDb250YWlucyB0aGUgbG9naWMgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24sIHNlbGVjdGlvbiwgYW5kIGZvY3VzIG1hbmFnZW1lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxpc3Rib3gocHJvcHMpIHtcbiAgdmFyIF9wcm9wcyRvcHRpb25JZEdlbmVyYTtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICBmb2N1c01hbmFnZW1lbnQgPSAnYWN0aXZlRGVzY2VuZGFudCcsXG4gICAgaWQ6IGlkUHJvcCxcbiAgICBpc09wdGlvbkRpc2FibGVkID0gZGVmYXVsdElzT3B0aW9uRGlzYWJsZWQsXG4gICAgbGlzdGJveFJlZjogZXh0ZXJuYWxMaXN0Ym94UmVmLFxuICAgIG9wdGlvbkNvbXBhcmVyID0gZGVmYXVsdE9wdGlvbkNvbXBhcmVyLFxuICAgIG9wdGlvblN0cmluZ2lmaWVyID0gZGVmYXVsdE9wdGlvblN0cmluZ2lmaWVyLFxuICAgIG9wdGlvbnMsXG4gICAgc3RhdGVSZWR1Y2VyOiBleHRlcm5hbFJlZHVjZXIsXG4gICAgdmFsdWU6IHZhbHVlUGFyYW0sXG4gICAgc2VsZWN0aW9uTGltaXQgPSBudWxsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgaWQgPSB1c2VJZChpZFByb3ApO1xuICBjb25zdCBkZWZhdWx0SWRHZW5lcmF0b3IgPSBSZWFjdC51c2VDYWxsYmFjaygoXywgaW5kZXgpID0+IGAke2lkfS1vcHRpb24tJHtpbmRleH1gLCBbaWRdKTtcbiAgY29uc3Qgb3B0aW9uSWRHZW5lcmF0b3IgPSAoX3Byb3BzJG9wdGlvbklkR2VuZXJhID0gcHJvcHMub3B0aW9uSWRHZW5lcmF0b3IpICE9IG51bGwgPyBfcHJvcHMkb3B0aW9uSWRHZW5lcmEgOiBkZWZhdWx0SWRHZW5lcmF0b3I7XG4gIGNvbnN0IHByb3BzV2l0aERlZmF1bHRzID0gdXNlTGF0ZXN0KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsXG4gICAgZGlzYWJsZUxpc3RXcmFwLFxuICAgIGZvY3VzTWFuYWdlbWVudCxcbiAgICBpc09wdGlvbkRpc2FibGVkLFxuICAgIG9wdGlvbkNvbXBhcmVyLFxuICAgIG9wdGlvblN0cmluZ2lmaWVyLFxuICAgIHNlbGVjdGlvbkxpbWl0XG4gIH0pLCBbcHJvcHNdKTtcbiAgY29uc3QgbGlzdGJveFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihleHRlcm5hbExpc3Rib3hSZWYsIGxpc3Rib3hSZWYpO1xuICBjb25zdCBbe1xuICAgIGhpZ2hsaWdodGVkVmFsdWUsXG4gICAgc2VsZWN0ZWRWYWx1ZXM6IHNlbGVjdGVkVmFsdWVcbiAgfSwgZGlzcGF0Y2hdID0gdXNlQ29udHJvbGxhYmxlUmVkdWNlcihkZWZhdWx0UmVkdWNlciwgZXh0ZXJuYWxSZWR1Y2VyLCBwcm9wc1dpdGhEZWZhdWx0cyk7XG4gIGNvbnN0IGhhbmRsZVRleHROYXZpZ2F0aW9uID0gdXNlVGV4dE5hdmlnYXRpb24oKHNlYXJjaFN0cmluZywgZXZlbnQpID0+IGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy50ZXh0TmF2aWdhdGlvbixcbiAgICBldmVudCxcbiAgICBzZWFyY2hTdHJpbmdcbiAgfSkpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIGlmIGEgY29udHJvbGxlZCB2YWx1ZSBjaGFuZ2VzLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgc3RhdGUgdG8ga2VlcCB0aGluZ3MgaW4gc3luY1xuICAgIGlmICh2YWx1ZVBhcmFtICE9PSB1bmRlZmluZWQgJiYgdmFsdWVQYXJhbSAhPT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5zZXRWYWx1ZSxcbiAgICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVBhcmFtXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFt2YWx1ZVBhcmFtLCBzZWxlY3RlZFZhbHVlLCBkaXNwYXRjaF0pO1xuICBjb25zdCBoaWdobGlnaHRlZEluZGV4ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGhpZ2hsaWdodGVkVmFsdWUgPT0gbnVsbCA/IC0xIDogb3B0aW9ucy5maW5kSW5kZXgob3B0aW9uID0+IG9wdGlvbkNvbXBhcmVyKG9wdGlvbiwgaGlnaGxpZ2h0ZWRWYWx1ZSkpO1xuICB9LCBbaGlnaGxpZ2h0ZWRWYWx1ZSwgb3B0aW9ucywgb3B0aW9uQ29tcGFyZXJdKTtcblxuICAvLyBpbnRyb2R1Y2luZyByZWZzIHRvIGF2b2lkIHJlY3JlYXRpbmcgdGhlIGdldE9wdGlvblN0YXRlIGZ1bmN0aW9uIG9uIGVhY2ggY2hhbmdlLlxuICBjb25zdCBsYXRlc3RTZWxlY3RlZFZhbHVlID0gdXNlTGF0ZXN0KHNlbGVjdGVkVmFsdWUpO1xuICBjb25zdCBsYXRlc3RIaWdobGlnaHRlZEluZGV4ID0gdXNlTGF0ZXN0KGhpZ2hsaWdodGVkSW5kZXgpO1xuICBjb25zdCBwcmV2aW91c09wdGlvbnMgPSBSZWFjdC51c2VSZWYoW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhcmVBcnJheXNFcXVhbChwcmV2aW91c09wdGlvbnMuY3VycmVudCwgb3B0aW9ucywgb3B0aW9uQ29tcGFyZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLm9wdGlvbnNDaGFuZ2UsXG4gICAgICBldmVudDogbnVsbCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBwcmV2aW91c09wdGlvbnM6IHByZXZpb3VzT3B0aW9ucy5jdXJyZW50XG4gICAgfSk7XG4gICAgcHJldmlvdXNPcHRpb25zLmN1cnJlbnQgPSBvcHRpb25zO1xuICB9LCBbb3B0aW9ucywgb3B0aW9uQ29tcGFyZXIsIGRpc3BhdGNoXSk7XG4gIGNvbnN0IHNldFNlbGVjdGVkVmFsdWUgPSBSZWFjdC51c2VDYWxsYmFjayh2YWx1ZXMgPT4ge1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLnNldFZhbHVlLFxuICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICB2YWx1ZTogdmFsdWVzXG4gICAgfSk7XG4gIH0sIFtkaXNwYXRjaF0pO1xuICBjb25zdCBzZXRIaWdobGlnaHRlZFZhbHVlID0gUmVhY3QudXNlQ2FsbGJhY2sob3B0aW9uID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5zZXRIaWdobGlnaHQsXG4gICAgICBldmVudDogbnVsbCxcbiAgICAgIGhpZ2hsaWdodDogb3B0aW9uXG4gICAgfSk7XG4gIH0sIFtkaXNwYXRjaF0pO1xuICBjb25zdCBjcmVhdGVIYW5kbGVPcHRpb25DbGljayA9IFJlYWN0LnVzZUNhbGxiYWNrKChvcHRpb24sIG90aGVyKSA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlciRvbkNsaWNrO1xuICAgIChfb3RoZXIkb25DbGljayA9IG90aGVyLm9uQ2xpY2spID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXIkb25DbGljay5jYWxsKG90aGVyLCBldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5vcHRpb25DbGljayxcbiAgICAgIG9wdGlvbixcbiAgICAgIGV2ZW50XG4gICAgfSk7XG4gIH0sIFtkaXNwYXRjaF0pO1xuICBjb25zdCBjcmVhdGVIYW5kbGVPcHRpb25Qb2ludGVyT3ZlciA9IFJlYWN0LnVzZUNhbGxiYWNrKChvcHRpb24sIG90aGVyKSA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlciRvbk1vdXNlT3ZlcjtcbiAgICAoX290aGVyJG9uTW91c2VPdmVyID0gb3RoZXIub25Nb3VzZU92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXIkb25Nb3VzZU92ZXIuY2FsbChvdGhlciwgZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLm9wdGlvbkhvdmVyLFxuICAgICAgb3B0aW9uLFxuICAgICAgZXZlbnRcbiAgICB9KTtcbiAgfSwgW2Rpc3BhdGNoXSk7XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUtleURvd24gPSBvdGhlciA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlciRvbktleURvd247XG4gICAgKF9vdGhlciRvbktleURvd24gPSBvdGhlci5vbktleURvd24pID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXIkb25LZXlEb3duLmNhbGwob3RoZXIsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBrZXlzVG9QcmV2ZW50RGVmYXVsdCA9IFsnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAnSG9tZScsICdFbmQnLCAnUGFnZVVwJywgJ1BhZ2VEb3duJ107XG4gICAgaWYgKGZvY3VzTWFuYWdlbWVudCA9PT0gJ2FjdGl2ZURlc2NlbmRhbnQnKSB7XG4gICAgICAvLyBXaGVuIHRoZSBjaGlsZCBlbGVtZW50IGlzIGZvY3VzZWQgdXNpbmcgdGhlIGFjdGl2ZURlc2NlbmRhbnQgYXR0cmlidXRlLFxuICAgICAgLy8gdGhlIGxpc3Rib3ggaGFuZGxlcyBrZXlib2FyZCBldmVudHMgb24gaXRzIGJlaGFsZi5cbiAgICAgIC8vIFdlIGhhdmUgdG8gYHByZXZlbnREZWZhdWx0KClgIGlzIHRoaXMgY2FzZSB0byBwcmV2ZW50IHRoZSBicm93c2VyIGZyb21cbiAgICAgIC8vIHNjcm9sbGluZyB0aGUgdmlldyB3aGVuIHNwYWNlIGlzIHByZXNzZWQgb3Igc3VibWl0dGluZyBmb3JtcyB3aGVuIGVudGVyIGlzIHByZXNzZWQuXG4gICAgICBrZXlzVG9QcmV2ZW50RGVmYXVsdC5wdXNoKCcgJywgJ0VudGVyJyk7XG4gICAgfVxuICAgIGlmIChrZXlzVG9QcmV2ZW50RGVmYXVsdC5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5rZXlEb3duLFxuICAgICAgZXZlbnRcbiAgICB9KTtcbiAgICBoYW5kbGVUZXh0TmF2aWdhdGlvbihldmVudCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUJsdXIgPSBvdGhlciA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlciRvbkJsdXIsIF9saXN0Ym94UmVmJGN1cnJlbnQ7XG4gICAgKF9vdGhlciRvbkJsdXIgPSBvdGhlci5vbkJsdXIpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXIkb25CbHVyLmNhbGwob3RoZXIsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKF9saXN0Ym94UmVmJGN1cnJlbnQgPSBsaXN0Ym94UmVmLmN1cnJlbnQpICE9IG51bGwgJiYgX2xpc3Rib3hSZWYkY3VycmVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgLy8gZm9jdXMgaXMgd2l0aGluIHRoZSBsaXN0Ym94XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLmJsdXIsXG4gICAgICBldmVudFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRSb290UHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCB7XG4gICAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogZm9jdXNNYW5hZ2VtZW50ID09PSAnYWN0aXZlRGVzY2VuZGFudCcgJiYgaGlnaGxpZ2h0ZWRWYWx1ZSAhPSBudWxsID8gb3B0aW9uSWRHZW5lcmF0b3IoaGlnaGxpZ2h0ZWRWYWx1ZSwgaGlnaGxpZ2h0ZWRJbmRleCkgOiB1bmRlZmluZWQsXG4gICAgICBpZCxcbiAgICAgIG9uQmx1cjogY3JlYXRlSGFuZGxlQmx1cihvdGhlckhhbmRsZXJzKSxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlSGFuZGxlS2V5RG93bihvdGhlckhhbmRsZXJzKSxcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIHRhYkluZGV4OiBmb2N1c01hbmFnZW1lbnQgPT09ICdET00nID8gLTEgOiAwLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0T3B0aW9uU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhvcHRpb24gPT4ge1xuICAgIHZhciBfbGF0ZXN0U2VsZWN0ZWRWYWx1ZSQ7XG4gICAgY29uc3QgaW5kZXggPSBvcHRpb25zLmZpbmRJbmRleChvcHQgPT4gb3B0aW9uQ29tcGFyZXIob3B0LCBvcHRpb24pKTtcbiAgICBjb25zdCBzZWxlY3RlZCA9ICgoX2xhdGVzdFNlbGVjdGVkVmFsdWUkID0gbGF0ZXN0U2VsZWN0ZWRWYWx1ZS5jdXJyZW50KSAhPSBudWxsID8gX2xhdGVzdFNlbGVjdGVkVmFsdWUkIDogW10pLnNvbWUodmFsdWUgPT4gdmFsdWUgIT0gbnVsbCAmJiBvcHRpb25Db21wYXJlcihvcHRpb24sIHZhbHVlKSk7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBpc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgaW5kZXgpO1xuICAgIGNvbnN0IGhpZ2hsaWdodGVkID0gbGF0ZXN0SGlnaGxpZ2h0ZWRJbmRleC5jdXJyZW50ID09PSBpbmRleCAmJiBpbmRleCAhPT0gLTE7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaGlnaGxpZ2h0ZWQsXG4gICAgICBpbmRleCxcbiAgICAgIHNlbGVjdGVkXG4gICAgfTtcbiAgfSwgW29wdGlvbnMsIGlzT3B0aW9uRGlzYWJsZWQsIG9wdGlvbkNvbXBhcmVyLCBsYXRlc3RTZWxlY3RlZFZhbHVlLCBsYXRlc3RIaWdobGlnaHRlZEluZGV4XSk7XG4gIGNvbnN0IGdldE9wdGlvblRhYkluZGV4ID0gUmVhY3QudXNlQ2FsbGJhY2sob3B0aW9uU3RhdGUgPT4ge1xuICAgIGlmIChmb2N1c01hbmFnZW1lbnQgPT09ICdhY3RpdmVEZXNjZW5kYW50Jykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25TdGF0ZS5oaWdobGlnaHRlZCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAob3B0aW9uU3RhdGUuZGlzYWJsZWQgJiYgIWRpc2FibGVkSXRlbXNGb2N1c2FibGUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sIFtmb2N1c01hbmFnZW1lbnQsIGRpc2FibGVkSXRlbXNGb2N1c2FibGVdKTtcbiAgY29uc3QgZ2V0T3B0aW9uUHJvcHMgPSBSZWFjdC51c2VDYWxsYmFjaygob3B0aW9uLCBvdGhlckhhbmRsZXJzID0ge30pID0+IHtcbiAgICBjb25zdCBvcHRpb25TdGF0ZSA9IGdldE9wdGlvblN0YXRlKG9wdGlvbik7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCB7XG4gICAgICAnYXJpYS1kaXNhYmxlZCc6IG9wdGlvblN0YXRlLmRpc2FibGVkIHx8IHVuZGVmaW5lZCxcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogb3B0aW9uU3RhdGUuc2VsZWN0ZWQsXG4gICAgICBpZDogb3B0aW9uSWRHZW5lcmF0b3Iob3B0aW9uLCBvcHRpb25TdGF0ZS5pbmRleCksXG4gICAgICBvbkNsaWNrOiBjcmVhdGVIYW5kbGVPcHRpb25DbGljayhvcHRpb24sIG90aGVySGFuZGxlcnMpLFxuICAgICAgb25Qb2ludGVyT3ZlcjogY3JlYXRlSGFuZGxlT3B0aW9uUG9pbnRlck92ZXIob3B0aW9uLCBvdGhlckhhbmRsZXJzKSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgdGFiSW5kZXg6IGdldE9wdGlvblRhYkluZGV4KG9wdGlvblN0YXRlKVxuICAgIH0pO1xuICB9LCBbb3B0aW9uSWRHZW5lcmF0b3IsIGNyZWF0ZUhhbmRsZU9wdGlvbkNsaWNrLCBjcmVhdGVIYW5kbGVPcHRpb25Qb2ludGVyT3ZlciwgZ2V0T3B0aW9uVGFiSW5kZXgsIGdldE9wdGlvblN0YXRlXSk7XG4gIFJlYWN0LnVzZURlYnVnVmFsdWUoe1xuICAgIGhpZ2hsaWdodGVkT3B0aW9uOiBoaWdobGlnaHRlZFZhbHVlLFxuICAgIHNlbGVjdGVkT3B0aW9uOiBzZWxlY3RlZFZhbHVlXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRPcHRpb25Qcm9wcyxcbiAgICBnZXRPcHRpb25TdGF0ZSxcbiAgICBoaWdobGlnaHRlZE9wdGlvbjogaGlnaGxpZ2h0ZWRWYWx1ZSxcbiAgICBzZWxlY3RlZE9wdGlvbjogc2VsZWN0ZWRWYWx1ZSxcbiAgICBzZXRTZWxlY3RlZFZhbHVlLFxuICAgIHNldEhpZ2hsaWdodGVkVmFsdWVcbiAgfTtcbn0iLCJ2YXIgQWN0aW9uVHlwZXM7IC8vIHNwbGl0IGRlY2xhcmF0aW9uIGFuZCBleHBvcnQgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2Rlc2FuZGJveC9jb2Rlc2FuZGJveC1jbGllbnQvaXNzdWVzLzY0MzVcbihmdW5jdGlvbiAoQWN0aW9uVHlwZXMpIHtcbiAgQWN0aW9uVHlwZXNbXCJibHVyXCJdID0gXCJibHVyXCI7XG4gIEFjdGlvblR5cGVzW1wiZm9jdXNcIl0gPSBcImZvY3VzXCI7XG4gIEFjdGlvblR5cGVzW1wia2V5RG93blwiXSA9IFwia2V5RG93blwiO1xuICBBY3Rpb25UeXBlc1tcIm9wdGlvbkNsaWNrXCJdID0gXCJvcHRpb25DbGlja1wiO1xuICBBY3Rpb25UeXBlc1tcIm9wdGlvbkhvdmVyXCJdID0gXCJvcHRpb25Ib3ZlclwiO1xuICBBY3Rpb25UeXBlc1tcIm9wdGlvbnNDaGFuZ2VcIl0gPSBcIm9wdGlvbnNDaGFuZ2VcIjtcbiAgQWN0aW9uVHlwZXNbXCJzZXRWYWx1ZVwiXSA9IFwic2V0VmFsdWVcIjtcbiAgQWN0aW9uVHlwZXNbXCJzZXRIaWdobGlnaHRcIl0gPSBcInNldEhpZ2hsaWdodFwiO1xuICBBY3Rpb25UeXBlc1tcInRleHROYXZpZ2F0aW9uXCJdID0gXCJ0ZXh0TmFnaXZhdGlvblwiO1xufSkoQWN0aW9uVHlwZXMgfHwgKEFjdGlvblR5cGVzID0ge30pKTtcbmV4cG9ydCB7IEFjdGlvblR5cGVzIH07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gJy4vaXNIb3N0Q29tcG9uZW50JztcblxuLyoqXG4gKiBUeXBlIG9mIHRoZSBvd25lclN0YXRlIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGFuIGVsZW1lbnQgaXQgYXBwbGllcyB0by5cbiAqIFRoaXMgcmVzb2x2ZXMgdG8gdGhlIHByb3ZpZGVkIE93bmVyU3RhdGUgZm9yIFJlYWN0IGNvbXBvbmVudHMgYW5kIGB1bmRlZmluZWRgIGZvciBob3N0IGNvbXBvbmVudHMuXG4gKiBGYWxscyBiYWNrIHRvIGBPd25lclN0YXRlIHwgdW5kZWZpbmVkYCB3aGVuIHRoZSBleGFjdCB0eXBlIGNhbid0IGJlIGRldGVybWluZWQgaW4gZGV2ZWxvcG1lbnQgdGltZS5cbiAqL1xuXG4vKipcbiAqIEFwcGVuZHMgdGhlIG93bmVyU3RhdGUgb2JqZWN0IHRvIHRoZSBwcm9wcywgbWVyZ2luZyB3aXRoIHRoZSBleGlzdGluZyBvbmUgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50VHlwZSBUeXBlIG9mIHRoZSBlbGVtZW50IHRoYXQgb3ducyB0aGUgYGV4aXN0aW5nUHJvcHNgLiBJZiB0aGUgZWxlbWVudCBpcyBhIERPTSBub2RlIG9yIHVuZGVmaW5lZCwgYG93bmVyU3RhdGVgIGlzIG5vdCBhcHBsaWVkLlxuICogQHBhcmFtIG90aGVyUHJvcHMgUHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gb3duZXJTdGF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRPd25lclN0YXRlKGVsZW1lbnRUeXBlLCBvdGhlclByb3BzLCBvd25lclN0YXRlKSB7XG4gIGlmIChlbGVtZW50VHlwZSA9PT0gdW5kZWZpbmVkIHx8IGlzSG9zdENvbXBvbmVudChlbGVtZW50VHlwZSkpIHtcbiAgICByZXR1cm4gb3RoZXJQcm9wcztcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcy5vd25lclN0YXRlLCBvd25lclN0YXRlKVxuICB9KTtcbn0iLCIvKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGEgRE9NIGVsZW1lbnQgbmFtZSAoaS5lLiBub3QgYSBSZWFjdCBjb21wb25lbnQpLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0hvc3RDb21wb25lbnQoZWxlbWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xufSIsIi8qKlxuICogRXh0cmFjdHMgZXZlbnQgaGFuZGxlcnMgZnJvbSBhIGdpdmVuIG9iamVjdC5cbiAqIEEgcHJvcCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiBhbmQgaXRzIG5hbWUgc3RhcnRzIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IEFuIG9iamVjdCB0byBleHRyYWN0IGV2ZW50IGhhbmRsZXJzIGZyb20uXG4gKiBAcGFyYW0gZXhjbHVkZUtleXMgQW4gYXJyYXkgb2Yga2V5cyB0byBleGNsdWRlIGZyb20gdGhlIHJldHVybmVkIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEV2ZW50SGFuZGxlcnMob2JqZWN0LCBleGNsdWRlS2V5cyA9IFtdKSB7XG4gIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiBwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicgJiYgIWV4Y2x1ZGVLZXlzLmluY2x1ZGVzKHByb3ApKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiLyoqXG4gKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXJzIGZyb20gdGhlIGdpdmVuIG9iamVjdC5cbiAqIEEgZmllbGQgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gd2l0aCBhIG5hbWUgYmVnaW5uaW5nIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IE9iamVjdCB0byByZW1vdmUgZXZlbnQgaGFuZGxlcnMgZnJvbS5cbiAqIEByZXR1cm5zIE9iamVjdCB3aXRoIGV2ZW50IGhhbmRsZXJzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9taXRFdmVudEhhbmRsZXJzKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZmlsdGVyKHByb3AgPT4gIShwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicpKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBleHRyYWN0RXZlbnRIYW5kbGVycyBmcm9tICcuL2V4dHJhY3RFdmVudEhhbmRsZXJzJztcbmltcG9ydCBvbWl0RXZlbnRIYW5kbGVycyBmcm9tICcuL29taXRFdmVudEhhbmRsZXJzJztcbi8qKlxuICogTWVyZ2VzIHRoZSBzbG90IGNvbXBvbmVudCBpbnRlcm5hbCBwcm9wcyAodXN1YWxseSBjb21pbmcgZnJvbSBhIGhvb2spXG4gKiB3aXRoIHRoZSBleHRlcm5hbGx5IHByb3ZpZGVkIG9uZXMuXG4gKlxuICogVGhlIG1lcmdlIG9yZGVyIGlzICh0aGUgbGF0dGVyIG92ZXJyaWRlcyB0aGUgZm9ybWVyKTpcbiAqIDEuIFRoZSBpbnRlcm5hbCBwcm9wcyAoc3BlY2lmaWVkIGFzIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIHdvcmsgd2l0aCBnZXQqUHJvcHMgaG9vayByZXN1bHQpXG4gKiAyLiBBZGRpdGlvbmFsIHByb3BzIChzcGVjaWZpZWQgaW50ZXJuYWxseSBvbiBhbiB1bnN0eWxlZCBjb21wb25lbnQpXG4gKiAzLiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgb24gdGhlIG93bmVyIGNvbXBvbmVudC4gVGhlc2Ugc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiBhIHJvb3Qgc2xvdC5cbiAqIDQuIEV4dGVybmFsIHByb3BzIHNwZWNpZmllZCBpbiB0aGUgYHNsb3RQcm9wcy4qYCBwcm9wLlxuICogNS4gVGhlIGBjbGFzc05hbWVgIHByb3AgLSBjb21iaW5lZCBmcm9tIGFsbCB0aGUgYWJvdmUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyc1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VTbG90UHJvcHMocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgZ2V0U2xvdFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIGNsYXNzTmFtZVxuICB9ID0gcGFyYW1ldGVycztcbiAgaWYgKCFnZXRTbG90UHJvcHMpIHtcbiAgICAvLyBUaGUgc2ltcGxlciBjYXNlIC0gZ2V0U2xvdFByb3BzIGlzIG5vdCBkZWZpbmVkLCBzbyBubyBpbnRlcm5hbCBldmVudCBoYW5kbGVycyBhcmUgZGVmaW5lZCxcbiAgICAvLyBzbyB3ZSBjYW4gc2ltcGx5IG1lcmdlIGFsbCB0aGUgcHJvcHMgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZXh0cmFjdGluZyBldmVudCBoYW5kbGVycy5cbiAgICBjb25zdCBqb2luZWRDbGFzc2VzID0gY2xzeChleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5jbGFzc05hbWUpO1xuICAgIGNvbnN0IG1lcmdlZFN0eWxlID0gX2V4dGVuZHMoe30sIGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLnN0eWxlLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLnN0eWxlLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuc3R5bGUpO1xuICAgIGNvbnN0IHByb3BzID0gX2V4dGVuZHMoe30sIGFkZGl0aW9uYWxQcm9wcywgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcywgZXh0ZXJuYWxTbG90UHJvcHMpO1xuICAgIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BzLmNsYXNzTmFtZSA9IGpvaW5lZENsYXNzZXM7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgICAgcHJvcHMuc3R5bGUgPSBtZXJnZWRTdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BzLFxuICAgICAgaW50ZXJuYWxSZWY6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvLyBJbiB0aGlzIGNhc2UsIGdldFNsb3RQcm9wcyBpcyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyB0aGUgZXh0ZXJuYWwgZXZlbnQgaGFuZGxlcnMuXG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gaW5jbHVkZSB0aGVtIGluIHRoZSBtZXJnZWQgcHJvcHMgYmVjYXVzZSBvZiB0aGlzLlxuXG4gIGNvbnN0IGV2ZW50SGFuZGxlcnMgPSBleHRyYWN0RXZlbnRIYW5kbGVycyhfZXh0ZW5kcyh7fSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcywgZXh0ZXJuYWxTbG90UHJvcHMpKTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMgPSBvbWl0RXZlbnRIYW5kbGVycyhleHRlcm5hbFNsb3RQcm9wcyk7XG4gIGNvbnN0IG90aGVyUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyA9IG9taXRFdmVudEhhbmRsZXJzKGV4dGVybmFsRm9yd2FyZGVkUHJvcHMpO1xuICBjb25zdCBpbnRlcm5hbFNsb3RQcm9wcyA9IGdldFNsb3RQcm9wcyhldmVudEhhbmRsZXJzKTtcblxuICAvLyBUaGUgb3JkZXIgb2YgY2xhc3NlcyBpcyBpbXBvcnRhbnQgaGVyZS5cbiAgLy8gRW1vdGlvbiAodGhhdCB3ZSB1c2UgaW4gbGlicmFyaWVzIGNvbnN1bWluZyBNVUkgQmFzZSkgZGVwZW5kcyBvbiB0aGlzIG9yZGVyXG4gIC8vIHRvIHByb3Blcmx5IG92ZXJyaWRlIHN0eWxlLiBJdCByZXF1aXJlcyB0aGUgbW9zdCBpbXBvcnRhbnQgY2xhc3NlcyB0byBiZSBsYXN0XG4gIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzMzMjA1KSBmb3IgdGhlIHJlbGF0ZWQgZGlzY3Vzc2lvbi5cbiAgY29uc3Qgam9pbmVkQ2xhc3NlcyA9IGNsc3goaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuY2xhc3NOYW1lKTtcbiAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLnN0eWxlLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcbiAgY29uc3QgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMsIGFkZGl0aW9uYWxQcm9wcywgb3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzLCBjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyk7XG4gIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wcyxcbiAgICBpbnRlcm5hbFJlZjogaW50ZXJuYWxTbG90UHJvcHMucmVmXG4gIH07XG59IiwiLyoqXG4gKiBJZiBgY29tcG9uZW50UHJvcHNgIGlzIGEgZnVuY3Rpb24sIGNhbGxzIGl0IHdpdGggdGhlIHByb3ZpZGVkIGBvd25lclN0YXRlYC5cbiAqIE90aGVyd2lzZSwganVzdCByZXR1cm5zIGBjb21wb25lbnRQcm9wc2AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRQcm9wcyhjb21wb25lbnRQcm9wcywgb3duZXJTdGF0ZSkge1xuICBpZiAodHlwZW9mIGNvbXBvbmVudFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFByb3BzKG93bmVyU3RhdGUpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRQcm9wcztcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBob29rLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JjZWRSZXJlbmRlcmluZygpIHtcbiAgY29uc3QgWywgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe30pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFN0YXRlKHt9KTtcbiAgfSwgW10pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlQnVzKCkge1xuICBjb25zdCBsaXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG4gIGZ1bmN0aW9uIHN1YnNjcmliZSh0b3BpYywgY2FsbGJhY2spIHtcbiAgICBsZXQgdG9waWNMaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZ2V0KHRvcGljKTtcbiAgICBpZiAoIXRvcGljTGlzdGVuZXJzKSB7XG4gICAgICB0b3BpY0xpc3RlbmVycyA9IG5ldyBTZXQoW2NhbGxiYWNrXSk7XG4gICAgICBsaXN0ZW5lcnMuc2V0KHRvcGljLCB0b3BpY0xpc3RlbmVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcGljTGlzdGVuZXJzLmFkZChjYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0b3BpY0xpc3RlbmVycy5kZWxldGUoY2FsbGJhY2spO1xuICAgICAgaWYgKHRvcGljTGlzdGVuZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZSh0b3BpYyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBwdWJsaXNoKHRvcGljLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgdG9waWNMaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZ2V0KHRvcGljKTtcbiAgICBpZiAodG9waWNMaXN0ZW5lcnMpIHtcbiAgICAgIHRvcGljTGlzdGVuZXJzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soLi4uYXJncykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHN1YnNjcmliZSxcbiAgICBwdWJsaXNoXG4gIH07XG59XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGhvb2suXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lc3NhZ2VCdXMoKSB7XG4gIGNvbnN0IGJ1cyA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoIWJ1cy5jdXJyZW50KSB7XG4gICAgYnVzLmN1cnJlbnQgPSBjcmVhdGVNZXNzYWdlQnVzKCk7XG4gIH1cbiAgcmV0dXJuIGJ1cy5jdXJyZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJlbGVtZW50VHlwZVwiLCBcImV4dGVybmFsU2xvdFByb3BzXCIsIFwib3duZXJTdGF0ZVwiXTtcbmltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGFwcGVuZE93bmVyU3RhdGUgZnJvbSAnLi9hcHBlbmRPd25lclN0YXRlJztcbmltcG9ydCBtZXJnZVNsb3RQcm9wcyBmcm9tICcuL21lcmdlU2xvdFByb3BzJztcbmltcG9ydCByZXNvbHZlQ29tcG9uZW50UHJvcHMgZnJvbSAnLi9yZXNvbHZlQ29tcG9uZW50UHJvcHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICogQnVpbGRzIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgaW50byB0aGUgc2xvdCBvZiBhbiB1bnN0eWxlZCBjb21wb25lbnQuXG4gKiBJdCBtZXJnZXMgdGhlIGludGVybmFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgb25lcyBzdXBwbGllZCBieSB0aGUgdXNlciwgYWxsb3dpbmcgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvci5cbiAqIElmIHRoZSBzbG90IGNvbXBvbmVudCBpcyBub3QgYSBob3N0IGNvbXBvbmVudCwgaXQgYWxzbyBtZXJnZXMgaW4gdGhlIGBvd25lclN0YXRlYC5cbiAqXG4gKiBAcGFyYW0gcGFyYW1ldGVycy5nZXRTbG90UHJvcHMgLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcHJvcHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBzbG90IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgdmFyIF9wYXJhbWV0ZXJzJGFkZGl0aW9uYTtcbiAgY29uc3Qge1xuICAgICAgZWxlbWVudFR5cGUsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPSByZXNvbHZlQ29tcG9uZW50UHJvcHMoZXh0ZXJuYWxTbG90UHJvcHMsIG93bmVyU3RhdGUpO1xuICBjb25zdCB7XG4gICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgIGludGVybmFsUmVmXG4gIH0gPSBtZXJnZVNsb3RQcm9wcyhfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGV4dGVybmFsU2xvdFByb3BzOiByZXNvbHZlZENvbXBvbmVudHNQcm9wc1xuICB9KSk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIChfcGFyYW1ldGVycyRhZGRpdGlvbmEgPSBwYXJhbWV0ZXJzLmFkZGl0aW9uYWxQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJGFkZGl0aW9uYS5yZWYpO1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBtZXJnZWRQcm9wcywge1xuICAgIHJlZlxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiBwcm9wcztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE4LjMgNS43MWEuOTk1OS45OTU5IDAgMCAwLTEuNDEgMEwxMiAxMC41OSA3LjExIDUuN2EuOTk1OS45OTU5IDAgMCAwLTEuNDEgMGMtLjM5LjM5LS4zOSAxLjAyIDAgMS40MUwxMC41OSAxMiA1LjcgMTYuODljLS4zOS4zOS0uMzkgMS4wMiAwIDEuNDEuMzkuMzkgMS4wMi4zOSAxLjQxIDBMMTIgMTMuNDFsNC44OSA0Ljg5Yy4zOS4zOSAxLjAyLjM5IDEuNDEgMCAuMzktLjM5LjM5LTEuMDIgMC0xLjQxTDEzLjQxIDEybDQuODktNC44OWMuMzgtLjM4LjM4LTEuMDIgMC0xLjR6XCJcbn0pLCAnQ2xvc2VSb3VuZGVkJyk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExIDE4aDJ2LTJoLTJ2MnptMS0xNkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6bTAtMTRjLTIuMjEgMC00IDEuNzktNCA0aDJjMC0xLjEuOS0yIDItMnMyIC45IDIgMmMwIDItMyAxLjc1LTMgNWgyYzAtMi4yNSAzLTIuNSAzLTUgMC0yLjIxLTEuNzktNC00LTR6XCJcbn0pLCAnSGVscE91dGxpbmUnKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNzMgM0g4LjI3TDMgOC4yN3Y3LjQ2TDguMjcgMjFoNy40NkwyMSAxNS43M1Y4LjI3TDE1LjczIDN6TTEyIDE3LjNjLS43MiAwLTEuMy0uNTgtMS4zLTEuMyAwLS43Mi41OC0xLjMgMS4zLTEuMy43MiAwIDEuMy41OCAxLjMgMS4zIDAgLjcyLS41OCAxLjMtMS4zIDEuM3ptMS00LjNoLTJWN2gydjZ6XCJcbn0pLCAnUmVwb3J0Jyk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLmNyZWF0ZVN2Z0ljb247XG4gIH1cbn0pO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL21hdGVyaWFsL3V0aWxzXCIpOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGVydFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWxlcnQnLCBzbG90KTtcbn1cbmNvbnN0IGFsZXJ0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUFsZXJ0JywgWydyb290JywgJ3N0YXJ0RGVjb3JhdG9yJywgJ2VuZERlY29yYXRvcicsICdjb2xvclByaW1hcnknLCAnY29sb3JEYW5nZXInLCAnY29sb3JJbmZvJywgJ2NvbG9yTmV1dHJhbCcsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICdzaXplU20nLCAnc2l6ZU1kJywgJ3NpemVMZycsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCddKTtcbmV4cG9ydCBkZWZhdWx0IGFsZXJ0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInJvbGVcIiwgXCJ2YXJpYW50XCIsIFwic2l6ZVwiLCBcInN0YXJ0RGVjb3JhdG9yXCIsIFwiZW5kRGVjb3JhdG9yXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgeyBnZXRBbGVydFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYWxlcnRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBzaXplXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudCAmJiBgdmFyaWFudCR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gXSxcbiAgICBzdGFydERlY29yYXRvcjogWydzdGFydERlY29yYXRvciddLFxuICAgIGVuZERlY29yYXRvcjogWydlbmREZWNvcmF0b3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFsZXJ0VXRpbGl0eUNsYXNzLCB7fSk7XG59O1xuY29uc3QgQWxlcnRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdKb3lBbGVydCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cztcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAnLS1BbGVydC1yYWRpdXMnOiB0aGVtZS52YXJzLnJhZGl1cy5zbSxcbiAgICAnLS1BbGVydC1kZWNvcmF0b3JDaGlsZFJhZGl1cyc6ICdtYXgoKHZhcigtLUFsZXJ0LXJhZGl1cykgLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKSAtIHZhcigtLUFsZXJ0LXBhZGRpbmcpLCBtaW4odmFyKC0tQWxlcnQtcGFkZGluZykgKyB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpLCB2YXIoLS1BbGVydC1yYWRpdXMpIC8gMikpJyxcbiAgICAnLS1CdXR0b24tbWluSGVpZ2h0JzogJ3ZhcigtLUFsZXJ0LWRlY29yYXRvckNoaWxkSGVpZ2h0KScsXG4gICAgJy0tSWNvbkJ1dHRvbi1zaXplJzogJ3ZhcigtLUFsZXJ0LWRlY29yYXRvckNoaWxkSGVpZ2h0KScsXG4gICAgJy0tQnV0dG9uLXJhZGl1cyc6ICd2YXIoLS1BbGVydC1kZWNvcmF0b3JDaGlsZFJhZGl1cyknLFxuICAgICctLUljb25CdXR0b24tcmFkaXVzJzogJ3ZhcigtLUFsZXJ0LWRlY29yYXRvckNoaWxkUmFkaXVzKSdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc20nICYmIHtcbiAgICAnLS1BbGVydC1wYWRkaW5nJzogJzAuNXJlbScsXG4gICAgJy0tQWxlcnQtZ2FwJzogJzAuMzc1cmVtJyxcbiAgICAnLS1BbGVydC1kZWNvcmF0b3JDaGlsZEhlaWdodCc6ICcxLjVyZW0nLFxuICAgICctLUljb24tZm9udFNpemUnOiAnMS4xMjVyZW0nLFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnNtXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21kJyAmJiB7XG4gICAgJy0tQWxlcnQtcGFkZGluZyc6ICcwLjc1cmVtJyxcbiAgICAnLS1BbGVydC1nYXAnOiAnMC41cmVtJyxcbiAgICAnLS1BbGVydC1kZWNvcmF0b3JDaGlsZEhlaWdodCc6ICcycmVtJyxcbiAgICAnLS1JY29uLWZvbnRTaXplJzogJzEuMjVyZW0nLFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnNtLFxuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnZhcnMuZm9udFdlaWdodC5tZFxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsZycgJiYge1xuICAgICctLUFsZXJ0LXBhZGRpbmcnOiAnMXJlbScsXG4gICAgJy0tQWxlcnQtZ2FwJzogJzAuNzVyZW0nLFxuICAgICctLUFsZXJ0LWRlY29yYXRvckNoaWxkSGVpZ2h0JzogJzIuMzc1cmVtJyxcbiAgICAnLS1JY29uLWZvbnRTaXplJzogJzEuNXJlbScsXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUubWQsXG4gICAgZm9udFdlaWdodDogdGhlbWUudmFycy5mb250V2VpZ2h0Lm1kXG4gIH0sIHtcbiAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keSxcbiAgICBsaW5lSGVpZ2h0OiB0aGVtZS52YXJzLmxpbmVIZWlnaHQubWQsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiBgdmFyKC0tQWxlcnQtcGFkZGluZylgLFxuICAgIGJvcmRlclJhZGl1czogJ3ZhcigtLUFsZXJ0LXJhZGl1cyknXG4gIH0sIChfdGhlbWUkdmFyaWFudHMgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzW293bmVyU3RhdGUuY29sb3JdKTtcbn0pO1xuY29uc3QgQWxlcnRTdGFydERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveUFsZXJ0JyxcbiAgc2xvdDogJ1N0YXJ0RGVjb3JhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3RhcnREZWNvcmF0b3Jcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFycyRwYWxldHRlO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICBmbGV4OiAnbm9uZScsXG4gICAgbWFyZ2luSW5saW5lRW5kOiAndmFyKC0tQWxlcnQtZ2FwKSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2NvbnRleHQnICYmIHtcbiAgICBjb2xvcjogKF90aGVtZSR2YXJzJHBhbGV0dGUgPSB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRwYWxldHRlW2Ake293bmVyU3RhdGUudmFyaWFudH1Db2xvcmBdXG4gIH0pO1xufSk7XG5jb25zdCBBbGVydEVuZERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveUFsZXJ0JyxcbiAgc2xvdDogJ0VuZERlY29yYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmVuZERlY29yYXRvclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzJHBhbGV0dGUyO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICBmbGV4OiAnbm9uZScsXG4gICAgbWFyZ2luSW5saW5lU3RhcnQ6ICd2YXIoLS1BbGVydC1nYXApJyxcbiAgICBtYXJnaW5MZWZ0OiAnYXV0bydcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2NvbnRleHQnICYmIHtcbiAgICBjb2xvcjogKF90aGVtZSR2YXJzJHBhbGV0dGUyID0gdGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcnMkcGFsZXR0ZTJbYCR7b3duZXJTdGF0ZS52YXJpYW50fUNvbG9yYF1cbiAgfSk7XG59KTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0FsZXJ0XShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LWFsZXJ0LylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbQWxlcnQgQVBJXShodHRwczovL211aS5jb20vam95LXVpL2FwaS9hbGVydC8pXG4gKi9cbmNvbnN0IEFsZXJ0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQWxlcnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveUFsZXJ0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ3ByaW1hcnknLFxuICAgICAgcm9sZSA9ICdhbGVydCcsXG4gICAgICB2YXJpYW50ID0gJ3NvZnQnLFxuICAgICAgc2l6ZSA9ICdtZCcsXG4gICAgICBzdGFydERlY29yYXRvcixcbiAgICAgIGVuZERlY29yYXRvclxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICB2YXJpYW50LFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBlbGVtZW50VHlwZTogQWxlcnRSb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGUsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByb2xlXG4gICAgfVxuICB9KTtcbiAgY29uc3QgW1Nsb3RTdGFydERlY29yYXRvciwgc3RhcnREZWNvcmF0b3JQcm9wc10gPSB1c2VTbG90KCdzdGFydERlY29yYXRvcicsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3RhcnREZWNvcmF0b3IsXG4gICAgZWxlbWVudFR5cGU6IEFsZXJ0U3RhcnREZWNvcmF0b3IsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgW1Nsb3RFbmREZWNvcmF0b3IsIGVuZERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ2VuZERlY29yYXRvcicsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZW5kRGVjb3JhdG9yLFxuICAgIGVsZW1lbnRUeXBlOiBBbGVydEVuZERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtzdGFydERlY29yYXRvciAmJiAvKiNfX1BVUkVfXyovX2pzeChTbG90U3RhcnREZWNvcmF0b3IsIF9leHRlbmRzKHt9LCBzdGFydERlY29yYXRvclByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogc3RhcnREZWNvcmF0b3JcbiAgICB9KSksIGNoaWxkcmVuLCBlbmREZWNvcmF0b3IgJiYgLyojX19QVVJFX18qL19qc3goU2xvdEVuZERlY29yYXRvciwgX2V4dGVuZHMoe30sIGVuZERlY29yYXRvclByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogZW5kRGVjb3JhdG9yXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEFsZXJ0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkYW5nZXInLCAnaW5mbycsICduZXV0cmFsJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIEFSSUEgcm9sZSBhdHRyaWJ1dGUgb2YgdGhlIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdhbGVydCdcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWQnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJywgJ2xnJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBiZWZvcmUgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgc3RhcnREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3NvZnQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ291dGxpbmVkJywgJ3BsYWluJywgJ3NvZnQnLCAnc29saWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFsZXJ0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lID0gJ011aUJveC1yb290JyxcbiAgICBnZW5lcmF0ZUNsYXNzTmFtZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQm94Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICAgIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnXG4gIH0pKHN0eWxlRnVuY3Rpb25TeCk7XG4gIGNvbnN0IEJveCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJveChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gICAgY29uc3QgX2V4dGVuZFN4UHJvcCA9IGV4dGVuZFN4UHJvcChpblByb3BzKSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2J1xuICAgICAgfSA9IF9leHRlbmRTeFByb3AsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9leHRlbmRTeFByb3AsIF9leGNsdWRlZCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEJveFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsIGdlbmVyYXRlQ2xhc3NOYW1lID8gZ2VuZXJhdGVDbGFzc05hbWUoZGVmYXVsdENsYXNzTmFtZSkgOiBkZWZhdWx0Q2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIG90aGVyKSk7XG4gIH0pO1xuICByZXR1cm4gQm94O1xufSIsImltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi4vc3R5bGVzL2RlZmF1bHRUaGVtZSc7XG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm94LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnZGV0ZXJtaW5hdGUnLCAnc3ZnJywgJ3RyYWNrJywgJ3Byb2dyZXNzJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvck5ldXRyYWwnLCAnY29sb3JEYW5nZXInLCAnY29sb3JJbmZvJywgJ2NvbG9yU3VjY2VzcycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JDb250ZXh0JywgJ3NpemVTbScsICdzaXplTWQnLCAnc2l6ZUxnJywgJ3ZhcmlhbnRQbGFpbicsICd2YXJpYW50T3V0bGluZWQnLCAndmFyaWFudFNvZnQnLCAndmFyaWFudFNvbGlkJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmxldCBfID0gdCA9PiB0LFxuICBfdDtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbG9yXCIsIFwiYmFja2dyb3VuZENvbG9yXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCIsIFwidGhpY2tuZXNzXCIsIFwiZGV0ZXJtaW5hdGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgeyBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgY2lyY3VsYXRlID0ga2V5ZnJhbWVzKHtcbiAgJzAlJzoge1xuICAgIC8vIGxldCB0aGUgcHJvZ3Jlc3Mgc3RhcnQgYXQgdGhlIHRvcCBvZiB0aGUgcmluZ1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtOTBkZWcpJ1xuICB9LFxuICAnMTAwJSc6IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMjcwZGVnKSdcbiAgfVxufSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGV0ZXJtaW5hdGUsXG4gICAgY29sb3IsXG4gICAgdmFyaWFudCxcbiAgICBzaXplXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkZXRlcm1pbmF0ZSAmJiAnZGV0ZXJtaW5hdGUnLCBjb2xvciAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHZhcmlhbnQgJiYgYHZhcmlhbnQke2NhcGl0YWxpemUodmFyaWFudCl9YCwgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXSxcbiAgICBzdmc6IFsnc3ZnJ10sXG4gICAgdHJhY2s6IFsndHJhY2snXSxcbiAgICBwcm9ncmVzczogWydwcm9ncmVzcyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcywge30pO1xufTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnSm95Q2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cztcbiAgY29uc3QgX3JlZiA9ICgoX3RoZW1lJHZhcmlhbnRzID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXSkgfHwge30sXG4gICAge1xuICAgICAgY29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICB9ID0gX3JlZixcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAvLyBpbnRlZ3JhdGlvbiB3aXRoIGljb25cbiAgICAnLS1JY29uLWZvbnRTaXplJzogJ2NhbGMoMC40ICogdmFyKC0tX3Jvb3Qtc2l6ZSkpJyxcbiAgICAvLyBwdWJsaWMgdmFyaWFibGVzXG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy10cmFja0NvbG9yJzogYmFja2dyb3VuZENvbG9yLFxuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3MtcHJvZ3Jlc3NDb2xvcic6IGNvbG9yLFxuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3MtcGVyY2VudCc6IG93bmVyU3RhdGUudmFsdWUsXG4gICAgLy8gMCAtIDEwMFxuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3MtbGluZWNhcCc6ICdyb3VuZCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc20nICYmIHtcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXRyYWNrVGhpY2tuZXNzJzogJzNweCcsXG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy1wcm9ncmVzc1RoaWNrbmVzcyc6ICczcHgnLFxuICAgICctLV9yb290LXNpemUnOiAndmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplLCAyNHB4KScgLy8gdXNlIC0tX3Jvb3Qtc2l6ZSB0byBsZXQgb3RoZXIgY29tcG9uZW50cyBvdmVycmlkZXMgdmlhIC0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplXG4gIH0sIG93bmVyU3RhdGUuaW5zdGFuY2VTaXplID09PSAnc20nICYmIHtcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXNpemUnOiAnMjRweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWQnICYmIHtcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXRyYWNrVGhpY2tuZXNzJzogJzZweCcsXG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy1wcm9ncmVzc1RoaWNrbmVzcyc6ICc2cHgnLFxuICAgICctLV9yb290LXNpemUnOiAndmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplLCA0MHB4KSdcbiAgfSwgb3duZXJTdGF0ZS5pbnN0YW5jZVNpemUgPT09ICdtZCcgJiYge1xuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3Mtc2l6ZSc6ICc0MHB4J1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsZycgJiYge1xuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3MtdHJhY2tUaGlja25lc3MnOiAnOHB4JyxcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXByb2dyZXNzVGhpY2tuZXNzJzogJzhweCcsXG4gICAgJy0tX3Jvb3Qtc2l6ZSc6ICd2YXIoLS1DaXJjdWxhclByb2dyZXNzLXNpemUsIDY0cHgpJ1xuICB9LCBvd25lclN0YXRlLmluc3RhbmNlU2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplJzogJzY0cHgnXG4gIH0sIG93bmVyU3RhdGUudGhpY2tuZXNzICYmIHtcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXRyYWNrVGhpY2tuZXNzJzogYCR7b3duZXJTdGF0ZS50aGlja25lc3N9cHhgLFxuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3MtcHJvZ3Jlc3NUaGlja25lc3MnOiBgJHtvd25lclN0YXRlLnRoaWNrbmVzc31weGBcbiAgfSwge1xuICAgIC8vIGludGVybmFsIHZhcmlhYmxlc1xuICAgICctLV90aGlja25lc3MtZGlmZic6ICdjYWxjKHZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtdHJhY2tUaGlja25lc3MpIC0gdmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1wcm9ncmVzc1RoaWNrbmVzcykpJyxcbiAgICAnLS1faW5uZXItc2l6ZSc6ICdjYWxjKHZhcigtLV9yb290LXNpemUpIC0gMiAqIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICAnLS1fb3V0bGluZWQtaW5zZXQnOiAnbWF4KHZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtdHJhY2tUaGlja25lc3MpLCB2YXIoLS1DaXJjdWxhclByb2dyZXNzLXByb2dyZXNzVGhpY2tuZXNzKSknLFxuICAgIHdpZHRoOiAndmFyKC0tX3Jvb3Qtc2l6ZSknLFxuICAgIGhlaWdodDogJ3ZhcigtLV9yb290LXNpemUpJyxcbiAgICBib3JkZXJSYWRpdXM6ICd2YXIoLS1fcm9vdC1zaXplKScsXG4gICAgbWFyZ2luOiAndmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1tYXJnaW4pJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIC8vIHByZXZlbnQgZnJvbSBzaHJpbmtpbmcgd2hlbiBDaXJjdWxhclByb2dyZXNzIGlzIGluIGEgZmxleCBjb250YWluZXIuXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgY29sb3JcbiAgfSwgb3duZXJTdGF0ZS5jaGlsZHJlbiAmJiB7XG4gICAgLy8gb25seSBhZGQgZm9udCByZWxhdGVkIHByb3BlcnRpZXMgd2hlbiB0aGVyZSBpcyBhIGNoaWxkLlxuICAgIC8vIHNvIHRoYXQgd2hlbiB0aGVyZSBpcyBubyBjaGlsZCwgdGhlIHNpemUgY2FuIGJlIGNvbnRyb2xsZWQgYnkgdGhlIHBhcmVudCBmb250LXNpemUgZS5nLiBMaW5rXG4gICAgZm9udEZhbWlseTogdGhlbWUudmFycy5mb250RmFtaWx5LmJvZHksXG4gICAgZm9udFdlaWdodDogdGhlbWUudmFycy5mb250V2VpZ2h0Lm1kLFxuICAgIGZvbnRTaXplOiAnY2FsYygwLjIgKiB2YXIoLS1fcm9vdC1zaXplKSknXG4gIH0sIHJlc3QsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgJyY6YmVmb3JlJzogX2V4dGVuZHMoe1xuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICB0b3A6ICd2YXIoLS1fb3V0bGluZWQtaW5zZXQpJyxcbiAgICAgIGxlZnQ6ICd2YXIoLS1fb3V0bGluZWQtaW5zZXQpJyxcbiAgICAgIHJpZ2h0OiAndmFyKC0tX291dGxpbmVkLWluc2V0KScsXG4gICAgICBib3R0b206ICd2YXIoLS1fb3V0bGluZWQtaW5zZXQpJ1xuICAgIH0sIHJlc3QpXG4gIH0pO1xufSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzU3ZnID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdKb3lDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ1N2ZycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN2Z1xufSkoe1xuICB3aWR0aDogJ2luaGVyaXQnLFxuICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBib3hTaXppbmc6ICdpbmhlcml0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJ2NhbGMoLTEgKiB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gIC8vIGNlbnRlcmVkIGFsaWduXG4gIGxlZnQ6ICdjYWxjKC0xICogdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSknIC8vIGNlbnRlcmVkIGFsaWduXG59KTtcblxuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc1RyYWNrID0gc3R5bGVkKCdjaXJjbGUnLCB7XG4gIG5hbWU6ICdKb3lDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ3RyYWNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudHJhY2tcbn0pKHtcbiAgY3g6ICc1MCUnLFxuICBjeTogJzUwJScsXG4gIHI6ICdjYWxjKHZhcigtLV9pbm5lci1zaXplKSAvIDIgLSB2YXIoLS1DaXJjdWxhclByb2dyZXNzLXRyYWNrVGhpY2tuZXNzKSAvIDIgKyBtaW4oMHB4LCB2YXIoLS1fdGhpY2tuZXNzLWRpZmYpIC8gMikpJyxcbiAgZmlsbDogJ3RyYW5zcGFyZW50JyxcbiAgc3Ryb2tlV2lkdGg6ICd2YXIoLS1DaXJjdWxhclByb2dyZXNzLXRyYWNrVGhpY2tuZXNzKScsXG4gIHN0cm9rZTogJ3ZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtdHJhY2tDb2xvciknXG59KTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NQcm9ncmVzcyA9IHN0eWxlZCgnY2lyY2xlJywge1xuICBuYW1lOiAnSm95Q2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdwcm9ncmVzcycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnByb2dyZXNzXG59KSh7XG4gICctLV9wcm9ncmVzcy1yYWRpdXMnOiAnY2FsYyh2YXIoLS1faW5uZXItc2l6ZSkgLyAyIC0gdmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1wcm9ncmVzc1RoaWNrbmVzcykgLyAyIC0gbWF4KDBweCwgdmFyKC0tX3RoaWNrbmVzcy1kaWZmKSAvIDIpKScsXG4gICctLV9wcm9ncmVzcy1sZW5ndGgnOiAnY2FsYygyICogMy4xNDE1OTI2NTM1ICogdmFyKC0tX3Byb2dyZXNzLXJhZGl1cykpJyxcbiAgLy8gdGhlIGNpcmN1bWZlcmVuY2UgYXJvdW5kIHRoZSBwcm9ncmVzc1xuICBjeDogJzUwJScsXG4gIGN5OiAnNTAlJyxcbiAgcjogJ3ZhcigtLV9wcm9ncmVzcy1yYWRpdXMpJyxcbiAgZmlsbDogJ3RyYW5zcGFyZW50JyxcbiAgc3Ryb2tlV2lkdGg6ICd2YXIoLS1DaXJjdWxhclByb2dyZXNzLXByb2dyZXNzVGhpY2tuZXNzKScsXG4gIHN0cm9rZTogJ3ZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtcHJvZ3Jlc3NDb2xvciknLFxuICBzdHJva2VMaW5lY2FwOiAndmFyKC0tQ2lyY3VsYXJQcm9ncmVzcy1saW5lY2FwLCByb3VuZCknLFxuICAvLyBjYW4ndCB1c2UgQ1NTIHZhcmlhYmxlIGRpcmVjdGx5LCBuZWVkIHRvIGNhc3QgdHlwZS5cbiAgc3Ryb2tlRGFzaGFycmF5OiAndmFyKC0tX3Byb2dyZXNzLWxlbmd0aCknLFxuICBzdHJva2VEYXNob2Zmc2V0OiAnY2FsYyh2YXIoLS1fcHJvZ3Jlc3MtbGVuZ3RoKSAtIHZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtcGVyY2VudCkgKiB2YXIoLS1fcHJvZ3Jlc3MtbGVuZ3RoKSAvIDEwMCknLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXInLFxuICB0cmFuc2Zvcm06ICdyb3RhdGUoLTkwZGVnKScgLy8gdG8gaW5pdGlhbGx5IGFwcGVhciBhdCB0aGUgdG9wLWNlbnRlciBvZiB0aGUgY2lyY2xlLlxufSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gIW93bmVyU3RhdGUuZGV0ZXJtaW5hdGUgJiYgY3NzKF90IHx8IChfdCA9IF9gXG4gICAgICBhbmltYXRpb246IHZhcigtLUNpcmN1bGFyUHJvZ3Jlc3MtY2lyY3VsYXRpb24sIDAuOHMgbGluZWFyIDBzIGluZmluaXRlIG5vcm1hbCBub25lIHJ1bm5pbmcpXG4gICAgICAgICR7MH07XG4gICAgYCksIGNpcmN1bGF0ZSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbQ2lyY3VsYXIgUHJvZ3Jlc3NdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtY2lyY3VsYXItcHJvZ3Jlc3MvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtDaXJjdWxhclByb2dyZXNzIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvY2lyY3VsYXItcHJvZ3Jlc3MvKVxuICovXG5jb25zdCBDaXJjdWxhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnSm95Q2lyY3VsYXJQcm9ncmVzcydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3I6IGNvbG9yUHJvcCA9ICdwcmltYXJ5JyxcbiAgICAgIHNpemUgPSAnbWQnLFxuICAgICAgdmFyaWFudCA9ICdzb2Z0JyxcbiAgICAgIHRoaWNrbmVzcyxcbiAgICAgIGRldGVybWluYXRlID0gZmFsc2UsXG4gICAgICB2YWx1ZSA9IGRldGVybWluYXRlID8gMCA6IDI1XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZDIpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgdGhpY2tuZXNzLFxuICAgIHZhbHVlLFxuICAgIGRldGVybWluYXRlLFxuICAgIGluc3RhbmNlU2l6ZTogaW5Qcm9wcy5zaXplXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFtTbG90Um9vdCwgcm9vdFByb3BzXSA9IHVzZVNsb3QoJ3Jvb3QnLCB7XG4gICAgcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxlbWVudFR5cGU6IENpcmN1bGFyUHJvZ3Jlc3NSb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGUsXG4gICAgYWRkaXRpb25hbFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiAncHJvZ3Jlc3NiYXInLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgLy8gU2V0dGluZyB0aGlzIENTUyB2YXJhaWJsZSB2aWEgaW5saW5lLXN0eWxlXG4gICAgICAgIC8vIHByZXZlbnRzIHRoZSBnZW5lcmF0aW9uIG9mIG5ldyBDU1MgZXZlcnkgdGltZVxuICAgICAgICAvLyBgdmFsdWVgIHByb3AgdXBkYXRlc1xuICAgICAgICAnLS1DaXJjdWxhclByb2dyZXNzLXBlcmNlbnQnOiB2YWx1ZVxuICAgICAgfVxuICAgIH0sIHZhbHVlICYmIGRldGVybWluYXRlICYmIHtcbiAgICAgICdhcmlhLXZhbHVlbm93JzogdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IE1hdGgucm91bmQodmFsdWUpIDogTWF0aC5yb3VuZChOdW1iZXIodmFsdWUgfHwgMCkpXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IFtTbG90U3ZnLCBzdmdQcm9wc10gPSB1c2VTbG90KCdzdmcnLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN2ZyxcbiAgICBlbGVtZW50VHlwZTogQ2lyY3VsYXJQcm9ncmVzc1N2ZyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdFRyYWNrLCB0cmFja1Byb3BzXSA9IHVzZVNsb3QoJ3RyYWNrJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFjayxcbiAgICBlbGVtZW50VHlwZTogQ2lyY3VsYXJQcm9ncmVzc1RyYWNrLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGNvbnN0IFtTbG90UHJvZ3Jlc3MsIHByb2dyZXNzUHJvcHNdID0gdXNlU2xvdCgncHJvZ3Jlc3MnLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnByb2dyZXNzLFxuICAgIGVsZW1lbnRUeXBlOiBDaXJjdWxhclByb2dyZXNzUHJvZ3Jlc3MsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhTbG90Um9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3hzKFNsb3RTdmcsIF9leHRlbmRzKHt9LCBzdmdQcm9wcywge1xuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTbG90VHJhY2ssIF9leHRlbmRzKHt9LCB0cmFja1Byb3BzKSksIC8qI19fUFVSRV9fKi9fanN4KFNsb3RQcm9ncmVzcywgX2V4dGVuZHMoe30sIHByb2dyZXNzUHJvcHMpKV1cbiAgICB9KSksIGNoaWxkcmVuXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENpcmN1bGFyUHJvZ3Jlc3MucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBib29sZWFuIHRvIHNlbGVjdCBhIHZhcmlhbnQuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZXRlcm1pbmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBhY2NlcHRzIHRoZW1lIHZhbHVlcyBiZXR3ZWVuICdzbScgYW5kICdsZycuXG4gICAqIEBkZWZhdWx0ICdtZCdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc20nLCAnbWQnLCAnbGcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB0aGlja25lc3Mgb2YgdGhlIGNpcmNsZS5cbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGRldGVybWluYXRlID8gMCA6IDI1XG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdzb2Z0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCcsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnc2l6ZVNtJywgJ3NpemVNZCcsICdzaXplTGcnLCAnZnVsbFdpZHRoJywgJ3N0YXJ0RGVjb3JhdG9yJywgJ2VuZERlY29yYXRvcicsICdsb2FkaW5nJywgJ2xvYWRpbmdJbmRpY2F0b3JDZW50ZXInXSk7XG5leHBvcnQgZGVmYXVsdCBidXR0b25DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImFjdGlvblwiLCBcImNvbG9yXCIsIFwidmFyaWFudFwiLCBcInNpemVcIiwgXCJmdWxsV2lkdGhcIiwgXCJzdGFydERlY29yYXRvclwiLCBcImVuZERlY29yYXRvclwiLCBcImxvYWRpbmdcIiwgXCJsb2FkaW5nUG9zaXRpb25cIiwgXCJsb2FkaW5nSW5kaWNhdG9yXCIsIFwiZGlzYWJsZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHVzZUJ1dHRvbiBmcm9tICdAbXVpL2Jhc2UvdXNlQnV0dG9uJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCBDaXJjdWxhclByb2dyZXNzIGZyb20gJy4uL0NpcmN1bGFyUHJvZ3Jlc3MnO1xuaW1wb3J0IGJ1dHRvbkNsYXNzZXMsIHsgZ2V0QnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICBmdWxsV2lkdGgsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50LFxuICAgIGxvYWRpbmdcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJywgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBsb2FkaW5nICYmICdsb2FkaW5nJ10sXG4gICAgc3RhcnREZWNvcmF0b3I6IFsnc3RhcnREZWNvcmF0b3InXSxcbiAgICBlbmREZWNvcmF0b3I6IFsnZW5kRGVjb3JhdG9yJ10sXG4gICAgbG9hZGluZ0luZGljYXRvckNlbnRlcjogWydsb2FkaW5nSW5kaWNhdG9yQ2VudGVyJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvblV0aWxpdHlDbGFzcywge30pO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmNvbnN0IEJ1dHRvblN0YXJ0RGVjb3JhdG9yID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnSm95QnV0dG9uJyxcbiAgc2xvdDogJ1N0YXJ0RGVjb3JhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3RhcnREZWNvcmF0b3Jcbn0pKHtcbiAgJy0tSWNvbi1tYXJnaW4nOiAnMCAwIDAgY2FsYyh2YXIoLS1CdXR0b24tZ2FwKSAvIC0yKScsXG4gICctLUNpcmN1bGFyUHJvZ3Jlc3MtbWFyZ2luJzogJzAgMCAwIGNhbGModmFyKC0tQnV0dG9uLWdhcCkgLyAtMiknLFxuICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gIG1hcmdpblJpZ2h0OiAndmFyKC0tQnV0dG9uLWdhcCknXG59KTtcbmNvbnN0IEJ1dHRvbkVuZERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveUJ1dHRvbicsXG4gIHNsb3Q6ICdFbmREZWNvcmF0b3InLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5lbmREZWNvcmF0b3Jcbn0pKHtcbiAgJy0tSWNvbi1tYXJnaW4nOiAnMCBjYWxjKHZhcigtLUJ1dHRvbi1nYXApIC8gLTIpIDAgMCcsXG4gICctLUNpcmN1bGFyUHJvZ3Jlc3MtbWFyZ2luJzogJzAgY2FsYyh2YXIoLS1CdXR0b24tZ2FwKSAvIC0yKSAwIDAnLFxuICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gIG1hcmdpbkxlZnQ6ICd2YXIoLS1CdXR0b24tZ2FwKSdcbn0pO1xuY29uc3QgQnV0dG9uTG9hZGluZ0NlbnRlciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveUJ1dHRvbicsXG4gIHNsb3Q6ICdMb2FkaW5nQ2VudGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubG9hZGluZ0luZGljYXRvckNlbnRlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cywgX3RoZW1lJHZhcmlhbnRzMiwgX3RoZW1lJHZhcmlhbnRzMywgX3RoZW1lJHZhcmlhbnRzNDtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgY29sb3I6IChfdGhlbWUkdmFyaWFudHMgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR2YXJpYW50czIgPSBfdGhlbWUkdmFyaWFudHNbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHMyLmNvbG9yXG4gIH0sIG93bmVyU3RhdGUuZGlzYWJsZWQgJiYge1xuICAgIGNvbG9yOiAoX3RoZW1lJHZhcmlhbnRzMyA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1EaXNhYmxlZGBdKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR2YXJpYW50czQgPSBfdGhlbWUkdmFyaWFudHMzW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzNC5jb2xvclxuICB9KTtcbn0pO1xuZXhwb3J0IGNvbnN0IEJ1dHRvblJvb3QgPSBzdHlsZWQoJ2J1dHRvbicsIHtcbiAgbmFtZTogJ0pveUJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50czUsIF90aGVtZSR2YXJpYW50czYsIF90aGVtZSR2YXJpYW50czcsIF90aGVtZSR2YXJpYW50czg7XG4gIHJldHVybiBbX2V4dGVuZHMoe1xuICAgICctLUljb24tbWFyZ2luJzogJ2luaXRpYWwnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjI1cmVtJyxcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXNpemUnOiAnMjBweCcsXG4gICAgLy8gbXVzdCBiZSBgcHhgIHVuaXQsIG90aGVyd2lzZSB0aGUgQ2lyY3VsYXJQcm9ncmVzcyBpcyBicm9rZW4gaW4gU2FmYXJpXG4gICAgJy0tQnV0dG9uLWdhcCc6ICcwLjM3NXJlbScsXG4gICAgbWluSGVpZ2h0OiAndmFyKC0tQnV0dG9uLW1pbkhlaWdodCwgMnJlbSknLFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnNtLFxuICAgIHBhZGRpbmdCbG9jazogJzJweCcsXG4gICAgcGFkZGluZ0lubGluZTogJzAuNzVyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21kJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjVyZW0nLFxuICAgIC8vIGNvbnRyb2wgdGhlIFN2Z0ljb24gZm9udC1zaXplXG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplJzogJzI0cHgnLFxuICAgIC8vIG11c3QgYmUgYHB4YCB1bml0LCBvdGhlcndpc2UgdGhlIENpcmN1bGFyUHJvZ3Jlc3MgaXMgYnJva2VuIGluIFNhZmFyaVxuICAgICctLUJ1dHRvbi1nYXAnOiAnMC41cmVtJyxcbiAgICBtaW5IZWlnaHQ6ICd2YXIoLS1CdXR0b24tbWluSGVpZ2h0LCAyLjVyZW0pJyxcbiAgICAvLyB1c2UgbWluLWhlaWdodCBpbnN0ZWFkIG9mIGhlaWdodCB0byBtYWtlIHRoZSBidXR0b24gcmVzaWxpZW50IHRvIGl0cyBjb250ZW50XG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUuc20sXG4gICAgcGFkZGluZ0Jsb2NrOiAnMC4yNXJlbScsXG4gICAgLy8gdGhlIHBhZGRpbmctYmxvY2sgYWN0IGFzIGEgbWluaW11bSBzcGFjaW5nIGJldHdlZW4gY29udGVudCBhbmQgcm9vdCBlbGVtZW50XG4gICAgcGFkZGluZ0lubGluZTogJzFyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjc1cmVtJyxcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXNpemUnOiAnMjhweCcsXG4gICAgLy8gbXVzdCBiZSBgcHhgIHVuaXQsIG90aGVyd2lzZSB0aGUgQ2lyY3VsYXJQcm9ncmVzcyBpcyBicm9rZW4gaW4gU2FmYXJpXG4gICAgJy0tQnV0dG9uLWdhcCc6ICcwLjc1cmVtJyxcbiAgICBtaW5IZWlnaHQ6ICd2YXIoLS1CdXR0b24tbWluSGVpZ2h0LCAzcmVtKScsXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUubWQsXG4gICAgcGFkZGluZ0Jsb2NrOiAnMC4zNzVyZW0nLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcxLjVyZW0nXG4gIH0sIHtcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBib3JkZXJSYWRpdXM6IGB2YXIoLS1CdXR0b24tcmFkaXVzLCAke3RoZW1lLnZhcnMucmFkaXVzLnNtfSlgLFxuICAgIC8vIHRvIGJlIGNvbnRyb2xsZWQgYnkgb3RoZXIgY29tcG9uZW50cywgZWcuIElucHV0XG4gICAgbWFyZ2luOiBgdmFyKC0tQnV0dG9uLW1hcmdpbilgLFxuICAgIC8vIHRvIGJlIGNvbnRyb2xsZWQgYnkgb3RoZXIgY29tcG9uZW50cywgZWcuIElucHV0XG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgLy8gcHJldmVudCB1c2VyIGFnZW50IHVuZGVybGluZSB3aGVuIHVzZWQgYXMgYW5jaG9yXG4gICAgZm9udEZhbWlseTogdGhlbWUudmFycy5mb250RmFtaWx5LmJvZHksXG4gICAgZm9udFdlaWdodDogdGhlbWUudmFycy5mb250V2VpZ2h0LmxnLFxuICAgIGxpbmVIZWlnaHQ6IDFcbiAgfSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwge1xuICAgIFt0aGVtZS5mb2N1cy5zZWxlY3Rvcl06IHRoZW1lLmZvY3VzLmRlZmF1bHRcbiAgfSksIChfdGhlbWUkdmFyaWFudHM1ID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czVbb3duZXJTdGF0ZS5jb2xvcl0sIHtcbiAgICAnJjpob3Zlcic6IChfdGhlbWUkdmFyaWFudHM2ID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fUhvdmVyYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHM2W293bmVyU3RhdGUuY29sb3JdXG4gIH0sIHtcbiAgICAnJjphY3RpdmUnOiAoX3RoZW1lJHZhcmlhbnRzNyA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1BY3RpdmVgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czdbb3duZXJTdGF0ZS5jb2xvcl1cbiAgfSwgX2V4dGVuZHMoe1xuICAgIFtgJi4ke2J1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IChfdGhlbWUkdmFyaWFudHM4ID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fURpc2FibGVkYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHM4W293bmVyU3RhdGUuY29sb3JdXG4gIH0sIG93bmVyU3RhdGUubG9hZGluZ1Bvc2l0aW9uID09PSAnY2VudGVyJyAmJiB7XG4gICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5sb2FkaW5nfWBdOiB7XG4gICAgICBjb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfSldO1xufSk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtCdXR0b25dKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtYnV0dG9uLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbQnV0dG9uIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvYnV0dG9uLylcbiAqL1xuY29uc3QgQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdKb3lCdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGFjdGlvbixcbiAgICAgIGNvbG9yOiBjb2xvclByb3AgPSAncHJpbWFyeScsXG4gICAgICB2YXJpYW50ID0gJ3NvbGlkJyxcbiAgICAgIHNpemUgPSAnbWQnLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBzdGFydERlY29yYXRvcixcbiAgICAgIGVuZERlY29yYXRvcixcbiAgICAgIGxvYWRpbmcgPSBmYWxzZSxcbiAgICAgIGxvYWRpbmdQb3NpdGlvbiA9ICdjZW50ZXInLFxuICAgICAgbG9hZGluZ0luZGljYXRvcjogbG9hZGluZ0luZGljYXRvclByb3AsXG4gICAgICBkaXNhYmxlZFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWYsIHJlZik7XG4gIGNvbnN0IHtcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgc2V0Rm9jdXNWaXNpYmxlLFxuICAgIGdldFJvb3RQcm9wc1xuICB9ID0gdXNlQnV0dG9uKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCBsb2FkaW5nLFxuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pKTtcbiAgY29uc3QgbG9hZGluZ0luZGljYXRvciA9IGxvYWRpbmdJbmRpY2F0b3JQcm9wICE9IG51bGwgPyBsb2FkaW5nSW5kaWNhdG9yUHJvcCA6IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3MsIF9leHRlbmRzKHt9LCBjb2xvciAhPT0gJ2NvbnRleHQnICYmIHtcbiAgICBjb2xvclxuICB9LCB7XG4gICAgdGhpY2tuZXNzOiB7XG4gICAgICBzbTogMixcbiAgICAgIG1kOiAzLFxuICAgICAgbGc6IDRcbiAgICB9W3NpemVdIHx8IDNcbiAgfSkpO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHZhciBfYnV0dG9uUmVmJGN1cnJlbnQ7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAoX2J1dHRvblJlZiRjdXJyZW50ID0gYnV0dG9uUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYnV0dG9uUmVmJGN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbc2V0Rm9jdXNWaXNpYmxlXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgdmFyaWFudCxcbiAgICBzaXplLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBsb2FkaW5nLFxuICAgIGxvYWRpbmdQb3NpdGlvbixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgbG9hZGluZ1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBbU2xvdFJvb3QsIHJvb3RQcm9wc10gPSB1c2VTbG90KCdyb290Jywge1xuICAgIHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBlbGVtZW50VHlwZTogQnV0dG9uUm9vdCxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBnZXRTbG90UHJvcHM6IGdldFJvb3RQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdFN0YXJ0RGVjb3JhdG9yLCBzdGFydERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ3N0YXJ0RGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGFydERlY29yYXRvcixcbiAgICBlbGVtZW50VHlwZTogQnV0dG9uU3RhcnREZWNvcmF0b3IsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgW1Nsb3RFbmREZWNvcmF0b3IsIGVuZERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ2VuZERlY29yYXRvcicsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZW5kRGVjb3JhdG9yLFxuICAgIGVsZW1lbnRUeXBlOiBCdXR0b25FbmREZWNvcmF0b3IsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgW1Nsb3RMb2FkaW5nSW5kaWNhdG9yQ2VudGVyLCBsb2FkaW5nSW5kaWNhdG9yQ2VudGVyUHJvcHNdID0gdXNlU2xvdCgnbG9hZGluZ0luZGljYXRvckNlbnRlcicsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubG9hZGluZ0luZGljYXRvckNlbnRlcixcbiAgICBlbGVtZW50VHlwZTogQnV0dG9uTG9hZGluZ0NlbnRlcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IFsoc3RhcnREZWNvcmF0b3IgfHwgbG9hZGluZyAmJiBsb2FkaW5nUG9zaXRpb24gPT09ICdzdGFydCcpICYmIC8qI19fUFVSRV9fKi9fanN4KFNsb3RTdGFydERlY29yYXRvciwgX2V4dGVuZHMoe30sIHN0YXJ0RGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBsb2FkaW5nICYmIGxvYWRpbmdQb3NpdGlvbiA9PT0gJ3N0YXJ0JyA/IGxvYWRpbmdJbmRpY2F0b3IgOiBzdGFydERlY29yYXRvclxuICAgIH0pKSwgY2hpbGRyZW4sIGxvYWRpbmcgJiYgbG9hZGluZ1Bvc2l0aW9uID09PSAnY2VudGVyJyAmJiAvKiNfX1BVUkVfXyovX2pzeChTbG90TG9hZGluZ0luZGljYXRvckNlbnRlciwgX2V4dGVuZHMoe30sIGxvYWRpbmdJbmRpY2F0b3JDZW50ZXJQcm9wcywge1xuICAgICAgY2hpbGRyZW46IGxvYWRpbmdJbmRpY2F0b3JcbiAgICB9KSksIChlbmREZWNvcmF0b3IgfHwgbG9hZGluZyAmJiBsb2FkaW5nUG9zaXRpb24gPT09ICdlbmQnKSAmJiAvKiNfX1BVUkVfXyovX2pzeChTbG90RW5kRGVjb3JhdG9yLCBfZXh0ZW5kcyh7fSwgZW5kRGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBsb2FkaW5nICYmIGxvYWRpbmdQb3NpdGlvbiA9PT0gJ2VuZCcgPyBsb2FkaW5nSW5kaWNhdG9yIDogZW5kRGVjb3JhdG9yXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYWZ0ZXIgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgZW5kRGVjb3JhdG9yOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsb2FkaW5nIGluZGljYXRvciBpcyBzaG93bi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGxvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG5vZGUgc2hvdWxkIGNvbnRhaW4gYW4gZWxlbWVudCB3aXRoIGByb2xlPVwicHJvZ3Jlc3NiYXJcImAgd2l0aCBhbiBhY2Nlc3NpYmxlIG5hbWUuXG4gICAqIEJ5IGRlZmF1bHQgd2UgcmVuZGVyIGEgYENpcmN1bGFyUHJvZ3Jlc3NgIHRoYXQgaXMgbGFiZWxsZWQgYnkgdGhlIGJ1dHRvbiBpdHNlbGYuXG4gICAqIEBkZWZhdWx0IDxDaXJjdWxhclByb2dyZXNzIC8+XG4gICAqL1xuICBsb2FkaW5nSW5kaWNhdG9yOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBsb2FkaW5nIGluZGljYXRvciBjYW4gYmUgcG9zaXRpb25lZCBvbiB0aGUgc3RhcnQsIGVuZCwgb3IgdGhlIGNlbnRlciBvZiB0aGUgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCAnY2VudGVyJ1xuICAgKi9cbiAgbG9hZGluZ1Bvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnZW5kJywgJ3N0YXJ0J10pLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21kJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCcsICdsZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0RGVjb3JhdG9yOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3NvbGlkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmQnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZCcsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCcsICdzaXplU20nLCAnc2l6ZU1kJywgJ3NpemVMZycsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZENsYXNzZXM7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBpbnRlcm5hbCBsb2dpY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBjb25zdCBDYXJkUm93Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJpbnZlcnRlZENvbG9yc1wiLCBcInNpemVcIiwgXCJ2YXJpYW50XCIsIFwiY2hpbGRyZW5cIiwgXCJvcmllbnRhdGlvblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSwgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgQ29sb3JJbnZlcnNpb25Qcm92aWRlciwgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHsgZ2V0Q2FyZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZENsYXNzZXMnO1xuaW1wb3J0IHsgcmVzb2x2ZVN4VmFsdWUgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVVdGlscyc7XG5pbXBvcnQgeyBDYXJkUm93Q29udGV4dCB9IGZyb20gJy4vQ2FyZENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3IsXG4gICAgb3JpZW50YXRpb25cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG9yaWVudGF0aW9uLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRVdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5jb25zdCBDYXJkUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnSm95Q2FyZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cywgX3RoZW1lJGNvbG9ySW52ZXJzaW9uO1xuICByZXR1cm4gW19leHRlbmRzKHtcbiAgICAvLyBhIGNvbnRleHQgdmFyaWFibGUgZm9yIGFueSBjaGlsZCBjb21wb25lbnRcbiAgICAnLS1DYXJkLWNoaWxkUmFkaXVzJzogJ21heCgodmFyKC0tQ2FyZC1yYWRpdXMpIC0gdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSkgLSB2YXIoLS1DYXJkLXBhZGRpbmcpLCBtaW4odmFyKC0tQ2FyZC1wYWRkaW5nKSAvIDIsICh2YXIoLS1DYXJkLXJhZGl1cykgLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKSAvIDIpKScsXG4gICAgLy8gQXNwZWN0UmF0aW8gaW50ZWdyYXRpb25cbiAgICAnLS1Bc3BlY3RSYXRpby1yYWRpdXMnOiAndmFyKC0tQ2FyZC1jaGlsZFJhZGl1cyknLFxuICAgIC8vIExpbmsgaW50ZWdyYXRpb25cbiAgICAnLS11bnN0YWJsZV9hY3Rpb25NYXJnaW4nOiAnY2FsYygtMSAqIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICAvLyBMaW5rLCBSYWRpbywgQ2hlY2tib3ggaW50ZWdyYXRpb25cbiAgICAnLS11bnN0YWJsZV9hY3Rpb25SYWRpdXMnOiByZXNvbHZlU3hWYWx1ZSh7XG4gICAgICB0aGVtZSxcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9LCAnYm9yZGVyUmFkaXVzJywgJ3ZhcigtLUNhcmQtcmFkaXVzKScpLFxuICAgIC8vIENhcmRDb3ZlciBpbnRlZ3JhdGlvblxuICAgICctLUNhcmRDb3Zlci1yYWRpdXMnOiAnY2FsYyh2YXIoLS1DYXJkLXJhZGl1cykgLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gICAgLy8gQ2FyZE92ZXJmbG93IGludGVncmF0aW9uXG4gICAgJy0tQ2FyZE92ZXJmbG93LW9mZnNldCc6IGBjYWxjKC0xICogdmFyKC0tQ2FyZC1wYWRkaW5nKSlgLFxuICAgICctLUNhcmRPdmVyZmxvdy1yYWRpdXMnOiAnY2FsYyh2YXIoLS1DYXJkLXJhZGl1cykgLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gICAgLy8gRGl2aWRlciBpbnRlZ3JhdGlvblxuICAgICctLURpdmlkZXItaW5zZXQnOiAnY2FsYygtMSAqIHZhcigtLUNhcmQtcGFkZGluZykpJ1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgICctLUNhcmQtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMuc20sXG4gICAgJy0tQ2FyZC1wYWRkaW5nJzogJzAuNXJlbSdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWQnICYmIHtcbiAgICAnLS1DYXJkLXJhZGl1cyc6IHRoZW1lLnZhcnMucmFkaXVzLm1kLFxuICAgICctLUNhcmQtcGFkZGluZyc6ICcxcmVtJyxcbiAgICBmb250U2l6ZTogdGhlbWUudmFycy5mb250U2l6ZS5tZFxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsZycgJiYge1xuICAgICctLUNhcmQtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMubGcsXG4gICAgJy0tQ2FyZC1wYWRkaW5nJzogJzEuNXJlbSdcbiAgfSwge1xuICAgIHBhZGRpbmc6ICd2YXIoLS1DYXJkLXBhZGRpbmcpJyxcbiAgICBib3JkZXJSYWRpdXM6ICd2YXIoLS1DYXJkLXJhZGl1cyknLFxuICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93LnNtLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLmJhY2tncm91bmQuc3VyZmFjZSxcbiAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keSxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3JvdycgOiAnY29sdW1uJ1xuICB9KSwgKF90aGVtZSR2YXJpYW50cyA9IHRoZW1lLnZhcmlhbnRzW293bmVyU3RhdGUudmFyaWFudF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHNbb3duZXJTdGF0ZS5jb2xvcl0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdjb250ZXh0JyAmJiBvd25lclN0YXRlLmludmVydGVkQ29sb3JzICYmICgoX3RoZW1lJGNvbG9ySW52ZXJzaW9uID0gdGhlbWUuY29sb3JJbnZlcnNpb25bb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb2xvckludmVyc2lvbltvd25lclN0YXRlLmNvbG9yXSldO1xufSk7XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0NhcmRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtY2FyZC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW0NhcmQgQVBJXShodHRwczovL211aS5jb20vam95LXVpL2FwaS9jYXJkLylcbiAqL1xuY29uc3QgQ2FyZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveUNhcmQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ25ldXRyYWwnLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBpbnZlcnRlZENvbG9ycyA9IGZhbHNlLFxuICAgICAgc2l6ZSA9ICdtZCcsXG4gICAgICB2YXJpYW50ID0gJ3BsYWluJyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoaW5Qcm9wcy5jb2xvciwgY29sb3JQcm9wKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBvcmllbnRhdGlvbixcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgcmVzdWx0ID0gLyojX19QVVJFX18qL19qc3goQ2FyZFJvd0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2FyZFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHRyYVByb3BzID0ge307XG4gICAgICAgIGlmIChpc011aUVsZW1lbnQoY2hpbGQsIFsnRGl2aWRlciddKSkge1xuICAgICAgICAgIGV4dHJhUHJvcHMuaW5zZXQgPSAnaW5zZXQnIGluIGNoaWxkLnByb3BzID8gY2hpbGQucHJvcHMuaW5zZXQgOiAnY29udGV4dCc7XG4gICAgICAgICAgY29uc3QgZGl2aWRlck9yaWVudGF0aW9uID0gb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICAgIGV4dHJhUHJvcHMub3JpZW50YXRpb24gPSAnb3JpZW50YXRpb24nIGluIGNoaWxkLnByb3BzID8gY2hpbGQucHJvcHMub3JpZW50YXRpb24gOiBkaXZpZGVyT3JpZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgZXh0cmFQcm9wc1snZGF0YS1maXJzdC1jaGlsZCddID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgLSAxKSB7XG4gICAgICAgICAgZXh0cmFQcm9wc1snZGF0YS1sYXN0LWNoaWxkJ10gPSAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgZXh0cmFQcm9wcyk7XG4gICAgICB9KVxuICAgIH0pKVxuICB9KTtcbiAgaWYgKGludmVydGVkQ29sb3JzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbG9ySW52ZXJzaW9uUHJvdmlkZXIsIHtcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnQsXG4gICAgICBjaGlsZHJlbjogcmVzdWx0XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlbmRlciBpY29uIG9yIHRleHQgZWxlbWVudHMgaW5zaWRlIHRoZSBDYXJkIGlmIGBzcmNgIGlzIG5vdCBzZXQuXG4gICAqIFRoaXMgY2FuIGJlIGFuIGVsZW1lbnQsIG9yIGp1c3QgYSBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICduZXV0cmFsJ1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiB3aXRoIGFuIGltcGxpY2l0IGNvbG9yIHByb3AgaW52ZXJ0IHRoZWlyIGNvbG9ycyB0byBtYXRjaCB0aGUgY29tcG9uZW50J3MgdmFyaWFudCBhbmQgY29sb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZlcnRlZENvbG9yczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG9yaWVudGF0aW9uLlxuICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IGFjY2VwdHMgdGhlbWUgdmFsdWVzIGJldHdlZW4gJ3NtJyBhbmQgJ2xnJy5cbiAgICogQGRlZmF1bHQgJ21kJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydsZycsICdtZCcsICdzbSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3BsYWluJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi4vc3R5bGVzL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuLyoqXG4gKiBLaWNrc3RhcnQgYW4gZWxlZ2FudCwgY29uc2lzdGVudCwgYW5kIHNpbXBsZSBiYXNlbGluZSB0byBidWlsZCB1cG9uLlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0NTUyBCYXNlbGluZV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1jc3MtYmFzZWxpbmUvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtDc3NCYXNlbGluZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL2Nzcy1iYXNlbGluZS8pXG4gKi9cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQ29sb3JTY2hlbWUgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICAgICAgc3R5bGVzOiB0aGVtZSA9PiB7XG4gICAgICAgIHZhciBfY29tcG9uZW50cyRKb3lUeXBvZ3IsIF9jb21wb25lbnRzLCBfY29tcG9uZW50cyRKb3lUeXBvZ3IyLCBfY29tcG9uZW50cyRKb3lUeXBvZ3IzO1xuICAgICAgICBjb25zdCBjb2xvclNjaGVtZVN0eWxlcyA9IHt9O1xuICAgICAgICBpZiAoIWRpc2FibGVDb2xvclNjaGVtZSkge1xuICAgICAgICAgIC8vIFRoZSBDc3NCYXNlbGluZSBpcyB3cmFwcGVkIGluc2lkZSBhIENzc1ZhcnNQcm92aWRlclxuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoZW1lLmNvbG9yU2NoZW1lcykuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgICAgICAgICAgdmFyIF9zY2hlbWUkcGFsZXR0ZTtcbiAgICAgICAgICAgIGNvbG9yU2NoZW1lU3R5bGVzW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3Ioa2V5KS5yZXBsYWNlKC9cXHMqJi8sICcnKV0gPSB7XG4gICAgICAgICAgICAgIGNvbG9yU2NoZW1lOiAoX3NjaGVtZSRwYWxldHRlID0gc2NoZW1lLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiBfc2NoZW1lJHBhbGV0dGUubW9kZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZhdWx0VHlwb2dyYXBoeUxldmVsID0gKF9jb21wb25lbnRzJEpveVR5cG9nciA9IChfY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX2NvbXBvbmVudHMkSm95VHlwb2dyMiA9IF9jb21wb25lbnRzLkpveVR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX2NvbXBvbmVudHMkSm95VHlwb2dyMyA9IF9jb21wb25lbnRzJEpveVR5cG9ncjIuZGVmYXVsdFByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHMkSm95VHlwb2dyMy5sZXZlbCkgIT0gbnVsbCA/IF9jb21wb25lbnRzJEpveVR5cG9nciA6ICdib2R5MSc7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgICAgaHRtbDoge1xuICAgICAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAgICAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgICAgICAgICAgIC8vIGlzIG5vdCBhZmZlY3RlZCBieSBgcGFkZGluZ2Agb3IgYGJvcmRlcmAuXG4gICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIC8vIEZpeCBmb250IHJlc2l6ZSBwcm9ibGVtIGluIGlPU1xuICAgICAgICAgICAgV2Via2l0VGV4dFNpemVBZGp1c3Q6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJyosICo6OmJlZm9yZSwgKjo6YWZ0ZXInOiB7XG4gICAgICAgICAgICBib3hTaXppbmc6ICdpbmhlcml0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3N0cm9uZywgYic6IHtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYm9keTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICAgICAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keVxuICAgICAgICAgIH0sIHRoZW1lLnR5cG9ncmFwaHlbZGVmYXVsdFR5cG9ncmFwaHlMZXZlbF0sIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLmJhY2tncm91bmQuYm9keSxcbiAgICAgICAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgICAgICAgIC8vIFNhdmUgcHJpbnRlciBpbmsuXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsU2NyZWVuKCkuXG4gICAgICAgICAgICAvLyBPdGhlciBlbGVtZW50cywgaWYgYmFja2dyb3VuZCB0cmFuc3BhcmVudCwgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgICAgICAnJjo6YmFja2Ryb3AnOiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLmJhY2tncm91bmQuYmFja2Ryb3BcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9LCBjb2xvclNjaGVtZVN0eWxlcyk7XG4gICAgICB9LFxuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgICB9KSwgY2hpbGRyZW5dXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzQmFzZWxpbmUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIERpc2FibGUgYGNvbG9yLXNjaGVtZWAgQ1NTIHByb3BlcnR5LlxuICAgKlxuICAgKiBGb3IgbW9yZSBkZXRhaWxzLCBjaGVjayBvdXQgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yLXNjaGVtZVxuICAgKiBGb3IgYnJvd3NlciBzdXBwb3J0LCBjaGVjayBvdXQgaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWNvbG9yLXNjaGVtZVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUNvbG9yU2NoZW1lOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENzc0Jhc2VsaW5lOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IEZvcm1Db250cm9sQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUljb25CdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGljb25CdXR0b25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSWNvbkJ1dHRvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCcsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnc2l6ZVNtJywgJ3NpemVNZCcsICdzaXplTGcnXSk7XG5leHBvcnQgZGVmYXVsdCBpY29uQnV0dG9uQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJhY3Rpb25cIiwgXCJjb21wb25lbnRcIiwgXCJjb2xvclwiLCBcInZhcmlhbnRcIiwgXCJzaXplXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgdXNlQnV0dG9uIGZyb20gJ0BtdWkvYmFzZS91c2VCdXR0b24nO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQsIHVzZVRoZW1lUHJvcHMgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IHsgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgaWNvbkJ1dHRvbkNsYXNzZXMsIHsgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaWNvbkJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIHNpemUsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcywge30pO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBTdHlsZWRJY29uQnV0dG9uID0gc3R5bGVkKCdidXR0b24nKSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcmlhbnRzLCBfdGhlbWUkdmFyaWFudHMyLCBfdGhlbWUkdmFyaWFudHMzLCBfdGhlbWUkdmFyaWFudHM0O1xuICByZXR1cm4gW19leHRlbmRzKHtcbiAgICAnLS1JY29uLW1hcmdpbic6ICdpbml0aWFsJ1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgICctLUljb24tZm9udFNpemUnOiAnY2FsYyh2YXIoLS1JY29uQnV0dG9uLXNpemUsIDJyZW0pIC8gMS42KScsXG4gICAgLy8gMS4yNXJlbSBieSBkZWZhdWx0XG4gICAgJy0tQ2lyY3VsYXJQcm9ncmVzcy1zaXplJzogJzIwcHgnLFxuICAgIG1pbldpZHRoOiAndmFyKC0tSWNvbkJ1dHRvbi1zaXplLCAycmVtKScsXG4gICAgLy8gdXNlIG1pbi13aWR0aCBpbnN0ZWFkIG9mIGhlaWdodCB0byBtYWtlIHRoZSBidXR0b24gcmVzaWxpZW50IHRvIGl0cyBjb250ZW50XG4gICAgbWluSGVpZ2h0OiAndmFyKC0tSWNvbkJ1dHRvbi1zaXplLCAycmVtKScsXG4gICAgLy8gdXNlIG1pbi1oZWlnaHQgaW5zdGVhZCBvZiBoZWlnaHQgdG8gbWFrZSB0aGUgYnV0dG9uIHJlc2lsaWVudCB0byBpdHMgY29udGVudFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnNtLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcycHgnIC8vIGFkZCBhIGdhcCwgaW4gY2FzZSB0aGUgY29udGVudCBpcyBsb25nLCBlLmcuIG11bHRpcGxlIGljb25zXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21kJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICdjYWxjKHZhcigtLUljb25CdXR0b24tc2l6ZSwgMi41cmVtKSAvIDEuNjY3KScsXG4gICAgLy8gMS41cmVtIGJ5IGRlZmF1bHRcbiAgICAnLS1DaXJjdWxhclByb2dyZXNzLXNpemUnOiAnMjRweCcsXG4gICAgbWluV2lkdGg6ICd2YXIoLS1JY29uQnV0dG9uLXNpemUsIDIuNXJlbSknLFxuICAgIG1pbkhlaWdodDogJ3ZhcigtLUljb25CdXR0b24tc2l6ZSwgMi41cmVtKScsXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUubWQsXG4gICAgcGFkZGluZ0lubGluZTogJzAuMjVyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICdjYWxjKHZhcigtLUljb25CdXR0b24tc2l6ZSwgM3JlbSkgLyAxLjcxNCknLFxuICAgIC8vIDEuNzVyZW0gYnkgZGVmYXVsdFxuICAgICctLUNpcmN1bGFyUHJvZ3Jlc3Mtc2l6ZSc6ICcyOHB4JyxcbiAgICBtaW5XaWR0aDogJ3ZhcigtLUljb25CdXR0b24tc2l6ZSwgM3JlbSknLFxuICAgIG1pbkhlaWdodDogJ3ZhcigtLUljb25CdXR0b24tc2l6ZSwgM3JlbSknLFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLmxnLFxuICAgIHBhZGRpbmdJbmxpbmU6ICcwLjM3NXJlbSdcbiAgfSwge1xuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIHBhZGRpbmdCbG9jazogMCxcbiAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keSxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS52YXJzLmZvbnRXZWlnaHQubWQsXG4gICAgbWFyZ2luOiBgdmFyKC0tSWNvbkJ1dHRvbi1tYXJnaW4pYCxcbiAgICAvLyB0byBiZSBjb250cm9sbGVkIGJ5IG90aGVyIGNvbXBvbmVudHMsIGVnLiBJbnB1dFxuICAgIGJvcmRlclJhZGl1czogYHZhcigtLUljb25CdXR0b24tcmFkaXVzLCAke3RoZW1lLnZhcnMucmFkaXVzLnNtfSlgLFxuICAgIC8vIHRvIGJlIGNvbnRyb2xsZWQgYnkgb3RoZXIgY29tcG9uZW50cywgZWcuIElucHV0XG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFt0aGVtZS5mb2N1cy5zZWxlY3Rvcl06IHRoZW1lLmZvY3VzLmRlZmF1bHRcbiAgfSksIChfdGhlbWUkdmFyaWFudHMgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzW293bmVyU3RhdGUuY29sb3JdLCB7XG4gICAgJyY6aG92ZXInOiAoX3RoZW1lJHZhcmlhbnRzMiA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1Ib3ZlcmBdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzMltvd25lclN0YXRlLmNvbG9yXVxuICB9LCB7XG4gICAgJyY6YWN0aXZlJzogKF90aGVtZSR2YXJpYW50czMgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9QWN0aXZlYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHMzW293bmVyU3RhdGUuY29sb3JdXG4gIH0sIHtcbiAgICBbYCYuJHtpY29uQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXTogKF90aGVtZSR2YXJpYW50czQgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czRbb3duZXJTdGF0ZS5jb2xvcl1cbiAgfV07XG59KTtcbmV4cG9ydCBjb25zdCBJY29uQnV0dG9uUm9vdCA9IHN0eWxlZChTdHlsZWRJY29uQnV0dG9uLCB7XG4gIG5hbWU6ICdKb3lJY29uQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7fSk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtCdXR0b25dKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtYnV0dG9uLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbSWNvbkJ1dHRvbiBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL2ljb24tYnV0dG9uLylcbiAqL1xuY29uc3QgSWNvbkJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveUljb25CdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGFjdGlvbixcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgY29sb3I6IGNvbG9yUHJvcCA9ICdwcmltYXJ5JyxcbiAgICAgIHZhcmlhbnQgPSAnc29mdCcsXG4gICAgICBzaXplID0gJ21kJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWYsIHJlZik7XG4gIGNvbnN0IHtcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgc2V0Rm9jdXNWaXNpYmxlLFxuICAgIGdldFJvb3RQcm9wc1xuICB9ID0gdXNlQnV0dG9uKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sICgpID0+ICh7XG4gICAgZm9jdXNWaXNpYmxlOiAoKSA9PiB7XG4gICAgICB2YXIgX2J1dHRvblJlZiRjdXJyZW50O1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgKF9idXR0b25SZWYkY3VycmVudCA9IGJ1dHRvblJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2J1dHRvblJlZiRjdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW3NldEZvY3VzVmlzaWJsZV0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGNvbG9yLFxuICAgIHZhcmlhbnQsXG4gICAgc2l6ZSxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3QsXG4gICAgZWxlbWVudFR5cGU6IEljb25CdXR0b25Sb290LFxuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgY29tcG9uZW50XG4gICAgfSksXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZCdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc20nLCAnbWQnLCAnbGcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3NvZnQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ291dGxpbmVkJywgJ3BsYWluJywgJ3NvZnQnLCAnc29saWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXQnLCBbJ3Jvb3QnLCAnaW5wdXQnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdhZG9ybmVkU3RhcnQnLCAnYWRvcm5lZEVuZCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICdzaXplU20nLCAnc2l6ZU1kJywgJ3NpemVMZycsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCcsICdmdWxsV2lkdGgnLCAnc3RhcnREZWNvcmF0b3InLCAnZW5kRGVjb3JhdG9yJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJwcm9wc1RvRm9yd2FyZFwiLCBcInJvb3RTdGF0ZUNsYXNzZXNcIiwgXCJpbnB1dFN0YXRlQ2xhc3Nlc1wiLCBcImdldFJvb3RQcm9wc1wiLCBcImdldElucHV0UHJvcHNcIiwgXCJmb3JtQ29udHJvbFwiLCBcImZvY3VzZWRcIiwgXCJlcnJvclwiLCBcImRpc2FibGVkXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcImNvbG9yXCIsIFwidmFyaWFudFwiLCBcInN0YXJ0RGVjb3JhdG9yXCIsIFwiZW5kRGVjb3JhdG9yXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQsIHVzZVRoZW1lUHJvcHMgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IHsgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgaW5wdXRDbGFzc2VzLCB7IGdldElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dENsYXNzZXMnO1xuaW1wb3J0IHVzZUZvcndhcmRlZElucHV0IGZyb20gJy4vdXNlRm9yd2FyZGVkSW5wdXQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmdWxsV2lkdGgsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBzaXplXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIHZhcmlhbnQgJiYgYHZhcmlhbnQke2NhcGl0YWxpemUodmFyaWFudCl9YCwgY29sb3IgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGlucHV0OiBbJ2lucHV0J10sXG4gICAgc3RhcnREZWNvcmF0b3I6IFsnc3RhcnREZWNvcmF0b3InXSxcbiAgICBlbmREZWNvcmF0b3I6IFsnZW5kRGVjb3JhdG9yJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywge30pO1xufTtcbmV4cG9ydCBjb25zdCBTdHlsZWRJbnB1dFJvb3QgPSBzdHlsZWQoJ2RpdicpKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHMsIF90aGVtZSR2YXJzJHBhbGV0dGUsIF92YXJpYW50U3R5bGUkYmFja2dybywgX3RoZW1lJHZhcmlhbnRzMiwgX3RoZW1lJHZhcmlhbnRzMztcbiAgY29uc3QgdmFyaWFudFN0eWxlID0gKF90aGVtZSR2YXJpYW50cyA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1gXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIFtfZXh0ZW5kcyh7XG4gICAgJy0tSW5wdXQtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMuc20sXG4gICAgJy0tSW5wdXQtZ2FwJzogJzAuNXJlbScsXG4gICAgJy0tSW5wdXQtcGxhY2Vob2xkZXJDb2xvcic6ICdpbmhlcml0JyxcbiAgICAnLS1JbnB1dC1wbGFjZWhvbGRlck9wYWNpdHknOiAwLjUsXG4gICAgJy0tSW5wdXQtZm9jdXNlZFRoaWNrbmVzcyc6IHRoZW1lLnZhcnMuZm9jdXMudGhpY2tuZXNzXG4gIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdjb250ZXh0JyA/IHtcbiAgICAnLS1JbnB1dC1mb2N1c2VkSGlnaGxpZ2h0JzogdGhlbWUudmFycy5wYWxldHRlLmZvY3VzVmlzaWJsZVxuICB9IDoge1xuICAgICctLUlucHV0LWZvY3VzZWRIaWdobGlnaHQnOiAoX3RoZW1lJHZhcnMkcGFsZXR0ZSA9IHRoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yID09PSAnbmV1dHJhbCcgPyAncHJpbWFyeScgOiBvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJzJHBhbGV0dGVbNTAwXVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgICctLUlucHV0LW1pbkhlaWdodCc6ICcycmVtJyxcbiAgICAnLS1JbnB1dC1wYWRkaW5nSW5saW5lJzogJzAuNXJlbScsXG4gICAgJy0tSW5wdXQtZGVjb3JhdG9yQ2hpbGRIZWlnaHQnOiAnbWluKDEuNXJlbSwgdmFyKC0tSW5wdXQtbWluSGVpZ2h0KSknLFxuICAgICctLUljb24tZm9udFNpemUnOiAnMS4yNXJlbSdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWQnICYmIHtcbiAgICAnLS1JbnB1dC1taW5IZWlnaHQnOiAnMi41cmVtJyxcbiAgICAnLS1JbnB1dC1wYWRkaW5nSW5saW5lJzogJzAuNzVyZW0nLFxuICAgICctLUlucHV0LWRlY29yYXRvckNoaWxkSGVpZ2h0JzogJ21pbigycmVtLCB2YXIoLS1JbnB1dC1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjVyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tSW5wdXQtbWluSGVpZ2h0JzogJzNyZW0nLFxuICAgICctLUlucHV0LXBhZGRpbmdJbmxpbmUnOiAnMXJlbScsXG4gICAgJy0tSW5wdXQtZ2FwJzogJzAuNzVyZW0nLFxuICAgICctLUlucHV0LWRlY29yYXRvckNoaWxkSGVpZ2h0JzogJ21pbigyLjM3NXJlbSwgdmFyKC0tSW5wdXQtbWluSGVpZ2h0KSknLFxuICAgICctLUljb24tZm9udFNpemUnOiAnMS43NXJlbSdcbiAgfSwge1xuICAgIC8vIHZhcmlhYmxlcyBmb3IgY29udHJvbGxpbmcgY2hpbGQgY29tcG9uZW50c1xuICAgICctLUlucHV0LWRlY29yYXRvckNoaWxkT2Zmc2V0JzogJ21pbihjYWxjKHZhcigtLUlucHV0LXBhZGRpbmdJbmxpbmUpIC0gKHZhcigtLUlucHV0LW1pbkhlaWdodCkgLSAyICogdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAtIHZhcigtLUlucHV0LWRlY29yYXRvckNoaWxkSGVpZ2h0KSkgLyAyKSwgdmFyKC0tSW5wdXQtcGFkZGluZ0lubGluZSkpJyxcbiAgICAnLS1fSW5wdXQtcGFkZGluZ0Jsb2NrJzogJ21heCgodmFyKC0tSW5wdXQtbWluSGVpZ2h0KSAtIDIgKiB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpIC0gdmFyKC0tSW5wdXQtZGVjb3JhdG9yQ2hpbGRIZWlnaHQpKSAvIDIsIDBweCknLFxuICAgICctLUlucHV0LWRlY29yYXRvckNoaWxkUmFkaXVzJzogJ21heCh2YXIoLS1JbnB1dC1yYWRpdXMpIC0gdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAtIHZhcigtLV9JbnB1dC1wYWRkaW5nQmxvY2spLCBtaW4odmFyKC0tX0lucHV0LXBhZGRpbmdCbG9jaykgKyB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpLCB2YXIoLS1JbnB1dC1yYWRpdXMpIC8gMikpJyxcbiAgICAnLS1CdXR0b24tbWluSGVpZ2h0JzogJ3ZhcigtLUlucHV0LWRlY29yYXRvckNoaWxkSGVpZ2h0KScsXG4gICAgJy0tSWNvbkJ1dHRvbi1zaXplJzogJ3ZhcigtLUlucHV0LWRlY29yYXRvckNoaWxkSGVpZ2h0KScsXG4gICAgJy0tQnV0dG9uLXJhZGl1cyc6ICd2YXIoLS1JbnB1dC1kZWNvcmF0b3JDaGlsZFJhZGl1cyknLFxuICAgICctLUljb25CdXR0b24tcmFkaXVzJzogJ3ZhcigtLUlucHV0LWRlY29yYXRvckNoaWxkUmFkaXVzKScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgbWluV2lkdGg6IDAsXG4gICAgbWluSGVpZ2h0OiAndmFyKC0tSW5wdXQtbWluSGVpZ2h0KSdcbiAgfSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwge1xuICAgIGN1cnNvcjogJ3RleHQnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nSW5saW5lOiBgdmFyKC0tSW5wdXQtcGFkZGluZ0lubGluZSlgLFxuICAgIGJvcmRlclJhZGl1czogJ3ZhcigtLUlucHV0LXJhZGl1cyknLFxuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnZhcnMuZm9udEZhbWlseS5ib2R5LFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLm1kXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtJyAmJiB7XG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUuc21cbiAgfSwge1xuICAgICcmOmJlZm9yZSc6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgekluZGV4OiAxLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW46ICdjYWxjKHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkgKiAtMSknIC8vIGZvciBvdXRsaW5lZCB2YXJpYW50XG4gICAgfVxuICB9KSwgX2V4dGVuZHMoe30sIHZhcmlhbnRTdHlsZSwge1xuICAgIGJhY2tncm91bmRDb2xvcjogKF92YXJpYW50U3R5bGUkYmFja2dybyA9IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvcikgIT0gbnVsbCA/IF92YXJpYW50U3R5bGUkYmFja2dybyA6IHRoZW1lLnZhcnMucGFsZXR0ZS5iYWNrZ3JvdW5kLnN1cmZhY2UsXG4gICAgW2AmOmhvdmVyOm5vdCguJHtpbnB1dENsYXNzZXMuZm9jdXNlZH0pYF06IF9leHRlbmRzKHt9LCAoX3RoZW1lJHZhcmlhbnRzMiA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1Ib3ZlcmBdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzMltvd25lclN0YXRlLmNvbG9yXSwge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBudWxsIC8vIGl0IGlzIG5vdCBjb21tb24gdG8gY2hhbmdlIGJhY2tncm91bmQgb24gaG92ZXIgZm9yIElucHV0XG4gICAgfSksXG5cbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZGlzYWJsZWR9YF06IChfdGhlbWUkdmFyaWFudHMzID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fURpc2FibGVkYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHMzW293bmVyU3RhdGUuY29sb3JdLFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5mb2N1c2VkfWBdOiB7XG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIHZhcigtLUlucHV0LWZvY3VzZWRUaGlja25lc3MpIHZhcigtLUlucHV0LWZvY3VzZWRIaWdobGlnaHQpYFxuICAgICAgfVxuICAgIH1cbiAgfSldO1xufSk7XG5leHBvcnQgY29uc3QgU3R5bGVkSW5wdXRIdG1sID0gc3R5bGVkKCdpbnB1dCcpKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+ICh7XG4gIGJvcmRlcjogJ25vbmUnLFxuICAvLyByZW1vdmUgdGhlIG5hdGl2ZSBpbnB1dCB3aWR0aFxuICBtaW5XaWR0aDogMCxcbiAgLy8gcmVtb3ZlIHRoZSBuYXRpdmUgaW5wdXQgd2lkdGhcbiAgb3V0bGluZTogMCxcbiAgLy8gcmVtb3ZlIHRoZSBuYXRpdmUgaW5wdXQgb3V0bGluZVxuICBwYWRkaW5nOiAwLFxuICAvLyByZW1vdmUgdGhlIG5hdGl2ZSBpbnB1dCBwYWRkaW5nXG4gIGZsZXg6IDEsXG4gIGFsaWduU2VsZjogJ3N0cmV0Y2gnLFxuICBjb2xvcjogJ2luaGVyaXQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgZm9udFN0eWxlOiAnaW5oZXJpdCcsXG4gIGZvbnRXZWlnaHQ6ICdpbmhlcml0JyxcbiAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZ0lubGluZTogJ3ZhcigtLUlucHV0LXBhZGRpbmdJbmxpbmUpJ1xuICB9LCAhb3duZXJTdGF0ZS5zdGFydERlY29yYXRvciAmJiB7XG4gICAgbWFyZ2luSW5saW5lU3RhcnQ6ICdjYWxjKC0xICogdmFyKC0tSW5wdXQtcGFkZGluZ0lubGluZSkpJyxcbiAgICBwYWRkaW5nSW5saW5lU3RhcnQ6ICd2YXIoLS1JbnB1dC1wYWRkaW5nSW5saW5lKScsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2NhbGModmFyKC0tSW5wdXQtcmFkaXVzKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAnY2FsYyh2YXIoLS1JbnB1dC1yYWRpdXMpIC0gdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSknXG4gIH0sICFvd25lclN0YXRlLmVuZERlY29yYXRvciAmJiB7XG4gICAgbWFyZ2luSW5saW5lRW5kOiAnY2FsYygtMSAqIHZhcigtLUlucHV0LXBhZGRpbmdJbmxpbmUpKScsXG4gICAgcGFkZGluZ0lubGluZUVuZDogJ3ZhcigtLUlucHV0LXBhZGRpbmdJbmxpbmUpJyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2NhbGModmFyKC0tSW5wdXQtcmFkaXVzKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJ2NhbGModmFyKC0tSW5wdXQtcmFkaXVzKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJ1xuICB9KSxcbiAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiB7XG4gICAgY29sb3I6ICd2YXIoLS1JbnB1dC1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLUlucHV0LXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOjotbW96LXBsYWNlaG9sZGVyJzoge1xuICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgY29sb3I6ICd2YXIoLS1JbnB1dC1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLUlucHV0LXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHtcbiAgICAvLyBJRTExXG4gICAgY29sb3I6ICd2YXIoLS1JbnB1dC1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLUlucHV0LXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiB7XG4gICAgLy8gRWRnZVxuICAgIGNvbG9yOiAndmFyKC0tSW5wdXQtcGxhY2Vob2xkZXJDb2xvciknLFxuICAgIG9wYWNpdHk6ICd2YXIoLS1JbnB1dC1wbGFjZWhvbGRlck9wYWNpdHkpJ1xuICB9XG59KSk7XG5leHBvcnQgY29uc3QgU3R5bGVkSW5wdXRTdGFydERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicpKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHM0LCBfdGhlbWUkdmFyaWFudHM1LCBfdGhlbWUkdmFyaWFudHM2LCBfdGhlbWUkdmFyaWFudHM3O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICctLUJ1dHRvbi1tYXJnaW4nOiAnMCAwIDAgY2FsYyh2YXIoLS1JbnB1dC1kZWNvcmF0b3JDaGlsZE9mZnNldCkgKiAtMSknLFxuICAgICctLUljb25CdXR0b24tbWFyZ2luJzogJzAgMCAwIGNhbGModmFyKC0tSW5wdXQtZGVjb3JhdG9yQ2hpbGRPZmZzZXQpICogLTEpJyxcbiAgICAnLS1JY29uLW1hcmdpbic6ICcwIDAgMCBjYWxjKHZhcigtLUlucHV0LXBhZGRpbmdJbmxpbmUpIC8gLTQpJyxcbiAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZ0Jsb2NrOiAndmFyKC0tdW5zdGFibGVfSW5wdXRQYWRkaW5nQmxvY2spJyxcbiAgICAvLyBmb3Igd3JhcHBpbmcgQXV0b2NvbXBsZXRlJ3MgdGFnc1xuICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgLy8gZm9yIHdyYXBwaW5nIEF1dG9jb21wbGV0ZSdzIHRhZ3NcbiAgICBtYXJnaW5JbmxpbmVFbmQ6ICd2YXIoLS1JbnB1dC1nYXApJyxcbiAgICBjb2xvcjogdGhlbWUudmFycy5wYWxldHRlLnRleHQudGVydGlhcnksXG4gICAgY3Vyc29yOiAnaW5pdGlhbCdcbiAgfSwgb3duZXJTdGF0ZS5mb2N1c2VkICYmIHtcbiAgICBjb2xvcjogKF90aGVtZSR2YXJpYW50czQgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR2YXJpYW50czUgPSBfdGhlbWUkdmFyaWFudHM0W293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzNS5jb2xvclxuICB9LCBvd25lclN0YXRlLmRpc2FibGVkICYmIHtcbiAgICBjb2xvcjogKF90aGVtZSR2YXJpYW50czYgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdmFyaWFudHM3ID0gX3RoZW1lJHZhcmlhbnRzNltvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czcuY29sb3JcbiAgfSk7XG59KTtcbmV4cG9ydCBjb25zdCBTdHlsZWRJbnB1dEVuZERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicpKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHM4LCBfdGhlbWUkdmFyaWFudHM5LCBfdGhlbWUkdmFyaWFudHMxMCwgX3RoZW1lJHZhcmlhbnRzMTE7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgJy0tQnV0dG9uLW1hcmdpbic6ICcwIGNhbGModmFyKC0tSW5wdXQtZGVjb3JhdG9yQ2hpbGRPZmZzZXQpICogLTEpIDAgMCcsXG4gICAgJy0tSWNvbkJ1dHRvbi1tYXJnaW4nOiAnMCBjYWxjKHZhcigtLUlucHV0LWRlY29yYXRvckNoaWxkT2Zmc2V0KSAqIC0xKSAwIDAnLFxuICAgICctLUljb24tbWFyZ2luJzogJzAgY2FsYyh2YXIoLS1JbnB1dC1wYWRkaW5nSW5saW5lKSAvIC00KSAwIDAnLFxuICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogJ3ZhcigtLUlucHV0LWdhcCknLFxuICAgIGNvbG9yOiAoX3RoZW1lJHZhcmlhbnRzOCA9IHRoZW1lLnZhcmlhbnRzW293bmVyU3RhdGUudmFyaWFudF0pID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHZhcmlhbnRzOSA9IF90aGVtZSR2YXJpYW50czhbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHM5LmNvbG9yLFxuICAgIGN1cnNvcjogJ2luaXRpYWwnXG4gIH0sIG93bmVyU3RhdGUuZGlzYWJsZWQgJiYge1xuICAgIGNvbG9yOiAoX3RoZW1lJHZhcmlhbnRzMTAgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdmFyaWFudHMxMSA9IF90aGVtZSR2YXJpYW50czEwW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzMTEuY29sb3JcbiAgfSk7XG59KTtcbmNvbnN0IElucHV0Um9vdCA9IHN0eWxlZChTdHlsZWRJbnB1dFJvb3QsIHtcbiAgbmFtZTogJ0pveUlucHV0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7fSk7XG5jb25zdCBJbnB1dElucHV0ID0gc3R5bGVkKFN0eWxlZElucHV0SHRtbCwge1xuICBuYW1lOiAnSm95SW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5pbnB1dFxufSkoe30pO1xuY29uc3QgSW5wdXRTdGFydERlY29yYXRvciA9IHN0eWxlZChTdHlsZWRJbnB1dFN0YXJ0RGVjb3JhdG9yLCB7XG4gIG5hbWU6ICdKb3lJbnB1dCcsXG4gIHNsb3Q6ICdTdGFydERlY29yYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN0YXJ0RGVjb3JhdG9yXG59KSh7fSk7XG5jb25zdCBJbnB1dEVuZERlY29yYXRvciA9IHN0eWxlZChTdHlsZWRJbnB1dEVuZERlY29yYXRvciwge1xuICBuYW1lOiAnSm95SW5wdXQnLFxuICBzbG90OiAnRW5kRGVjb3JhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZW5kRGVjb3JhdG9yXG59KSh7fSk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtJbnB1dF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1pbnB1dC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW0lucHV0IEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvaW5wdXQvKVxuICovXG5jb25zdCBJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0KGluUHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX2luUHJvcHMkZXJyb3IsIF9yZWYyLCBfaW5Qcm9wcyRzaXplLCBfZm9ybUNvbnRyb2wkY29sb3I7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveUlucHV0J1xuICB9KTtcbiAgY29uc3QgX3VzZUZvcndhcmRlZElucHV0ID0gdXNlRm9yd2FyZGVkSW5wdXQocHJvcHMsIGlucHV0Q2xhc3NlcyksXG4gICAge1xuICAgICAgcHJvcHNUb0ZvcndhcmQsXG4gICAgICByb290U3RhdGVDbGFzc2VzLFxuICAgICAgaW5wdXRTdGF0ZUNsYXNzZXMsXG4gICAgICBnZXRSb290UHJvcHMsXG4gICAgICBnZXRJbnB1dFByb3BzLFxuICAgICAgZm9ybUNvbnRyb2wsXG4gICAgICBmb2N1c2VkLFxuICAgICAgZXJyb3I6IGVycm9yUHJvcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIHNpemU6IHNpemVQcm9wID0gJ21kJyxcbiAgICAgIGNvbG9yOiBjb2xvclByb3AgPSAnbmV1dHJhbCcsXG4gICAgICB2YXJpYW50ID0gJ291dGxpbmVkJyxcbiAgICAgIHN0YXJ0RGVjb3JhdG9yLFxuICAgICAgZW5kRGVjb3JhdG9yXG4gICAgfSA9IF91c2VGb3J3YXJkZWRJbnB1dCxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF91c2VGb3J3YXJkZWRJbnB1dCwgX2V4Y2x1ZGVkKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCByZWdpc3RlckVmZmVjdCA9IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5yZWdpc3RlckVmZmVjdDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKHJlZ2lzdGVyRWZmZWN0KSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckVmZmVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBbcmVnaXN0ZXJFZmZlY3RdKTtcbiAgfVxuICBjb25zdCBlcnJvciA9IChfcmVmID0gKF9pblByb3BzJGVycm9yID0gaW5Qcm9wcy5lcnJvcikgIT0gbnVsbCA/IF9pblByb3BzJGVycm9yIDogZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLmVycm9yKSAhPSBudWxsID8gX3JlZiA6IGVycm9yUHJvcDtcbiAgY29uc3Qgc2l6ZSA9IChfcmVmMiA9IChfaW5Qcm9wcyRzaXplID0gaW5Qcm9wcy5zaXplKSAhPSBudWxsID8gX2luUHJvcHMkc2l6ZSA6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5zaXplKSAhPSBudWxsID8gX3JlZjIgOiBzaXplUHJvcDtcbiAgY29uc3Qge1xuICAgIGdldENvbG9yXG4gIH0gPSB1c2VDb2xvckludmVyc2lvbih2YXJpYW50KTtcbiAgY29uc3QgY29sb3IgPSBnZXRDb2xvcihpblByb3BzLmNvbG9yLCBlcnJvciA/ICdkYW5nZXInIDogKF9mb3JtQ29udHJvbCRjb2xvciA9IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5jb2xvcikgIT0gbnVsbCA/IF9mb3JtQ29udHJvbCRjb2xvciA6IGNvbG9yUHJvcCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBmdWxsV2lkdGgsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZm9jdXNlZCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICByZWYsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCByb290U3RhdGVDbGFzc2VzXSxcbiAgICBlbGVtZW50VHlwZTogSW5wdXRSb290LFxuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGNvbnN0IFtTbG90SW5wdXQsIGlucHV0UHJvcHNdID0gdXNlU2xvdCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgZm9ybUNvbnRyb2wgJiYge1xuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgaWQ6IGZvcm1Db250cm9sLmh0bWxGb3IsXG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGZvcm1Db250cm9sWydhcmlhLWRlc2NyaWJlZGJ5J11cbiAgICB9XG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmlucHV0LCBpbnB1dFN0YXRlQ2xhc3Nlc10sXG4gICAgZWxlbWVudFR5cGU6IElucHV0SW5wdXQsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRJbnB1dFByb3BzLFxuICAgIGludGVybmFsRm9yd2FyZGVkUHJvcHM6IHByb3BzVG9Gb3J3YXJkLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSkpO1xuICBjb25zdCBbU2xvdFN0YXJ0RGVjb3JhdG9yLCBzdGFydERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ3N0YXJ0RGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGFydERlY29yYXRvcixcbiAgICBlbGVtZW50VHlwZTogSW5wdXRTdGFydERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEVuZERlY29yYXRvciwgZW5kRGVjb3JhdG9yUHJvcHNdID0gdXNlU2xvdCgnZW5kRGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmREZWNvcmF0b3IsXG4gICAgZWxlbWVudFR5cGU6IElucHV0RW5kRGVjb3JhdG9yLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU2xvdFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW3N0YXJ0RGVjb3JhdG9yICYmIC8qI19fUFVSRV9fKi9fanN4KFNsb3RTdGFydERlY29yYXRvciwgX2V4dGVuZHMoe30sIHN0YXJ0RGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBzdGFydERlY29yYXRvclxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU2xvdElucHV0LCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcykpLCBlbmREZWNvcmF0b3IgJiYgLyojX19QVVJFX18qL19qc3goU2xvdEVuZERlY29yYXRvciwgX2V4dGVuZHMoe30sIGVuZERlY29yYXRvclByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogZW5kRGVjb3JhdG9yXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBDbGFzcyBuYW1lIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ25ldXRyYWwnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkYW5nZXInLCAnaW5mbycsICduZXV0cmFsJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUcmFpbGluZyBhZG9ybm1lbnQgZm9yIHRoaXMgaW5wdXQuXG4gICAqL1xuICBlbmREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21kJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCcsICdsZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTGVhZGluZyBhZG9ybm1lbnQgZm9yIHRoaXMgaW5wdXQuXG4gICAqL1xuICBzdGFydERlY29yYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAncGxhaW4nLCAnc29mdCcsICdzb2xpZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBGb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBGb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiaWRcIiwgXCJuYW1lXCIsIFwib25DbGlja1wiLCBcIm9uQ2hhbmdlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uRm9jdXNcIiwgXCJvbkJsdXJcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlSW5wdXQgZnJvbSAnQG11aS9iYXNlL3VzZUlucHV0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcndhcmRlZElucHV0KHByb3BzLCBjbGFzc2VzKSB7XG4gIGNvbnN0IGZvcm1Db250cm9sID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZGJ5LFxuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCxcbiAgICAgIGVycm9yOiBlcnJvclByb3AsXG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbktleURvd24sXG4gICAgICBvbktleVVwLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uQmx1cixcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZXF1aXJlZCxcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldElucHV0UHJvcHMsXG4gICAgZm9jdXNlZCxcbiAgICBlcnJvcixcbiAgICBkaXNhYmxlZFxuICB9ID0gdXNlSW5wdXQoe1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZFByb3AgIT0gbnVsbCA/IGRpc2FibGVkUHJvcCA6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5kaXNhYmxlZCxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICAgZXJyb3I6IGVycm9yUHJvcCxcbiAgICBvbkJsdXIsXG4gICAgb25DbGljayxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkZvY3VzLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCAhPSBudWxsID8gcmVxdWlyZWQgOiBmb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogZm9ybUNvbnRyb2wucmVxdWlyZWQsXG4gICAgdmFsdWVcbiAgfSk7XG4gIGNvbnN0IHJvb3RTdGF0ZUNsYXNzZXMgPSB7XG4gICAgW2NsYXNzZXMuZGlzYWJsZWRdOiBkaXNhYmxlZCxcbiAgICBbY2xhc3Nlcy5lcnJvcl06IGVycm9yLFxuICAgIFtjbGFzc2VzLmZvY3VzZWRdOiBmb2N1c2VkLFxuICAgIFtjbGFzc2VzLmZvcm1Db250cm9sXTogQm9vbGVhbihmb3JtQ29udHJvbCksXG4gICAgW2NsYXNzTmFtZV06IGNsYXNzTmFtZVxuICB9O1xuICBjb25zdCBpbnB1dFN0YXRlQ2xhc3NlcyA9IHtcbiAgICBbY2xhc3Nlcy5kaXNhYmxlZF06IGRpc2FibGVkXG4gIH07XG4gIGNvbnN0IHByb3BzVG9Gb3J3YXJkID0ge1xuICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYURlc2NyaWJlZGJ5LFxuICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRieSxcbiAgICBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGRpc2FibGVkLFxuICAgIGlkLFxuICAgIG9uS2V5RG93bixcbiAgICBvbktleVVwLFxuICAgIG5hbWUsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgcmVhZE9ubHksXG4gICAgdHlwZVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvcm1Db250cm9sLFxuICAgIHByb3BzVG9Gb3J3YXJkLFxuICAgIHJvb3RTdGF0ZUNsYXNzZXMsXG4gICAgaW5wdXRTdGF0ZUNsYXNzZXMsXG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldElucHV0UHJvcHMsXG4gICAgZm9jdXNlZCxcbiAgICBlcnJvcixcbiAgICBkaXNhYmxlZFxuICB9LCBvdGhlcik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVzZUZvcm1Db250cm9sVW5zdHlsZWRDb250ZXh0IH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xVbnN0eWxlZCc7XG5pbXBvcnQgZXh0cmFjdEV2ZW50SGFuZGxlcnMgZnJvbSAnLi4vdXRpbHMvZXh0cmFjdEV2ZW50SGFuZGxlcnMnO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbVW5zdHlsZWQgSW5wdXRdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LWlucHV0LyNob29rKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VJbnB1dCBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlL2FwaS91c2UtaW5wdXQvKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJbnB1dChwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZVByb3AsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCA9IGZhbHNlLFxuICAgIGVycm9yOiBlcnJvclByb3AgPSBmYWxzZSxcbiAgICBvbkJsdXIsXG4gICAgb25DaGFuZ2UsXG4gICAgb25Gb2N1cyxcbiAgICByZXF1aXJlZDogcmVxdWlyZWRQcm9wID0gZmFsc2UsXG4gICAgdmFsdWU6IHZhbHVlUHJvcCxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBmb3JtQ29udHJvbENvbnRleHQgPSB1c2VGb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dCgpO1xuICBsZXQgZGVmYXVsdFZhbHVlO1xuICBsZXQgZGlzYWJsZWQ7XG4gIGxldCBlcnJvcjtcbiAgbGV0IHJlcXVpcmVkO1xuICBsZXQgdmFsdWU7XG4gIGlmIChmb3JtQ29udHJvbENvbnRleHQpIHtcbiAgICB2YXIgX2Zvcm1Db250cm9sQ29udGV4dCRkLCBfZm9ybUNvbnRyb2xDb250ZXh0JGUsIF9mb3JtQ29udHJvbENvbnRleHQkcjtcbiAgICBkZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgZGlzYWJsZWQgPSAoX2Zvcm1Db250cm9sQ29udGV4dCRkID0gZm9ybUNvbnRyb2xDb250ZXh0LmRpc2FibGVkKSAhPSBudWxsID8gX2Zvcm1Db250cm9sQ29udGV4dCRkIDogZmFsc2U7XG4gICAgZXJyb3IgPSAoX2Zvcm1Db250cm9sQ29udGV4dCRlID0gZm9ybUNvbnRyb2xDb250ZXh0LmVycm9yKSAhPSBudWxsID8gX2Zvcm1Db250cm9sQ29udGV4dCRlIDogZmFsc2U7XG4gICAgcmVxdWlyZWQgPSAoX2Zvcm1Db250cm9sQ29udGV4dCRyID0gZm9ybUNvbnRyb2xDb250ZXh0LnJlcXVpcmVkKSAhPSBudWxsID8gX2Zvcm1Db250cm9sQ29udGV4dCRyIDogZmFsc2U7XG4gICAgdmFsdWUgPSBmb3JtQ29udHJvbENvbnRleHQudmFsdWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGRlZmluZWRMb2NhbFByb3BzID0gWydkZWZhdWx0VmFsdWUnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAncmVxdWlyZWQnLCAndmFsdWUnXS5maWx0ZXIocHJvcCA9PiBwYXJhbWV0ZXJzW3Byb3BdICE9PSB1bmRlZmluZWQpO1xuICAgICAgaWYgKGRlZmluZWRMb2NhbFByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBZb3UgaGF2ZSBzZXQgcHJvcHMgb24gYW4gaW5wdXQgdGhhdCBpcyBpbnNpZGUgYSBGb3JtQ29udHJvbFVuc3R5bGVkLicsICdTZXQgdGhlc2UgcHJvcHMgb24gYSBGb3JtQ29udHJvbFVuc3R5bGVkIGluc3RlYWQuIE90aGVyd2lzZSB0aGV5IHdpbGwgYmUgaWdub3JlZC4nLCBgSWdub3JlZCBwcm9wczogJHtkZWZpbmVkTG9jYWxQcm9wcy5qb2luKCcsICcpfWBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlUHJvcDtcbiAgICBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcbiAgICBlcnJvciA9IGVycm9yUHJvcDtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkUHJvcDtcbiAgICB2YWx1ZSA9IHZhbHVlUHJvcDtcbiAgfVxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGluc3RhbmNlID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhIGBzbG90cy5pbnB1dGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGByZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYHJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWYgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBpbnB1dFJlZlByb3AsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZm9ybUNvbnRyb2xDb250ZXh0ICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBvbkJsdXIgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQmx1cigpO1xuICAgIH1cbiAgfSwgW2Zvcm1Db250cm9sQ29udGV4dCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkZvY3U7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZvcm1Db250cm9sQ29udGV4dCAhPSBudWxsICYmIGZvcm1Db250cm9sQ29udGV4dC5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIChfb3RoZXJIYW5kbGVycyRvbkZvY3UgPSBvdGhlckhhbmRsZXJzLm9uRm9jdXMpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkZvY3UuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKGZvcm1Db250cm9sQ29udGV4dCAmJiBmb3JtQ29udHJvbENvbnRleHQub25Gb2N1cykge1xuICAgICAgdmFyIF9mb3JtQ29udHJvbENvbnRleHQkbztcbiAgICAgIGZvcm1Db250cm9sQ29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogKF9mb3JtQ29udHJvbENvbnRleHQkbyA9IGZvcm1Db250cm9sQ29udGV4dC5vbkZvY3VzKSA9PSBudWxsID8gdm9pZCAwIDogX2Zvcm1Db250cm9sQ29udGV4dCRvLmNhbGwoZm9ybUNvbnRyb2xDb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25CbHVyO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbkJsdXIgPSBvdGhlckhhbmRsZXJzLm9uQmx1cikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQmx1ci5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICBpZiAoZm9ybUNvbnRyb2xDb250ZXh0ICYmIGZvcm1Db250cm9sQ29udGV4dC5vbkJsdXIpIHtcbiAgICAgIGZvcm1Db250cm9sQ29udGV4dC5vbkJsdXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBvdGhlckhhbmRsZXJzID0+IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgIHZhciBfZm9ybUNvbnRyb2xDb250ZXh0JG8yLCBfb3RoZXJIYW5kbGVycyRvbkNoYW47XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgc2xvdHMuaW5wdXRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE3KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvcm1Db250cm9sQ29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogKF9mb3JtQ29udHJvbENvbnRleHQkbzIgPSBmb3JtQ29udHJvbENvbnRleHQub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfZm9ybUNvbnRyb2xDb250ZXh0JG8yLmNhbGwoZm9ybUNvbnRyb2xDb250ZXh0LCBldmVudCk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uQ2hhbiA9IG90aGVySGFuZGxlcnMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkNoYW4uY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCwgLi4uYXJncyk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2xpYztcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgKF9vdGhlckhhbmRsZXJzJG9uQ2xpYyA9IG90aGVySGFuZGxlcnMub25DbGljaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQ2xpYy5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKGV4dGVybmFsUHJvcHMgPSB7fSkgPT4ge1xuICAgIC8vIG9uQmx1ciwgb25DaGFuZ2UgYW5kIG9uRm9jdXMgYXJlIGZvcndhcmRlZCB0byB0aGUgaW5wdXQgc2xvdC5cbiAgICBjb25zdCBwcm9wc0V2ZW50SGFuZGxlcnMgPSBleHRyYWN0RXZlbnRIYW5kbGVycyhwYXJhbWV0ZXJzLCBbJ29uQmx1cicsICdvbkNoYW5nZScsICdvbkZvY3VzJ10pO1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBwcm9wc0V2ZW50SGFuZGxlcnMsIGV4dHJhY3RFdmVudEhhbmRsZXJzKGV4dGVybmFsUHJvcHMpKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGV4dGVybmFsUHJvcHMsIGV4dGVybmFsRXZlbnRIYW5kbGVycywge1xuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2soZXh0ZXJuYWxFdmVudEhhbmRsZXJzKVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRJbnB1dFByb3BzID0gKGV4dGVybmFsUHJvcHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHByb3BzRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25Gb2N1c1xuICAgIH07XG4gICAgY29uc3QgZXh0ZXJuYWxFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIHByb3BzRXZlbnRIYW5kbGVycywgZXh0cmFjdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxQcm9wcykpO1xuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgZXh0ZXJuYWxQcm9wcywgZXh0ZXJuYWxFdmVudEhhbmRsZXJzLCB7XG4gICAgICBvbkJsdXI6IGhhbmRsZUJsdXIoZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UoZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzKGV4dGVybmFsRXZlbnRIYW5kbGVycylcbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG1lcmdlZEV2ZW50SGFuZGxlcnMsIHtcbiAgICAgICdhcmlhLWludmFsaWQnOiBlcnJvciB8fCB1bmRlZmluZWQsXG4gICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgIHJlZjogaGFuZGxlSW5wdXRSZWYsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXF1aXJlZCxcbiAgICAgIGRpc2FibGVkXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbENvbnRleHQsXG4gICAgZ2V0SW5wdXRQcm9wcyxcbiAgICBnZXRSb290UHJvcHMsXG4gICAgcmVxdWlyZWQsXG4gICAgdmFsdWVcbiAgfTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xVbnN0eWxlZENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dCc7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtVbnN0eWxlZCBGb3JtIENvbnRyb2xdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LWZvcm0tY29udHJvbC8jaG9vaylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbdXNlRm9ybUNvbnRyb2xVbnN0eWxlZENvbnRleHQgQVBJXShodHRwczovL211aS5jb20vYmFzZS9hcGkvdXNlLWZvcm0tY29udHJvbC11bnN0eWxlZC1jb250ZXh0LylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2xVbnN0eWxlZENvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sVW5zdHlsZWRDb250ZXh0KTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBDb21wb25lbnRMaXN0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnRMaXN0Q29udGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBSYWRpb0dyb3VwQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSYWRpb0dyb3VwQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdSYWRpb0dyb3VwQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBSYWRpb0dyb3VwQ29udGV4dDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJzaXplXCIsIFwib3JpZW50YXRpb25cIiwgXCJ3cmFwXCIsIFwidmFyaWFudFwiLCBcImNvbG9yXCIsIFwicm9sZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBNZW51VW5zdHlsZWRDb250ZXh0IH0gZnJvbSAnQG11aS9iYXNlL01lbnVVbnN0eWxlZCc7XG5pbXBvcnQgeyBTZWxlY3RVbnN0eWxlZENvbnRleHQgfSBmcm9tICdAbXVpL2Jhc2UvU2VsZWN0VW5zdHlsZWQnO1xuaW1wb3J0IHsgc3R5bGVkLCB1c2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IHVzZUNvbG9ySW52ZXJzaW9uIH0gZnJvbSAnLi4vc3R5bGVzL0NvbG9ySW52ZXJzaW9uJztcbmltcG9ydCB7IGdldExpc3RVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RDbGFzc2VzJztcbmltcG9ydCBOZXN0ZWRMaXN0Q29udGV4dCBmcm9tICcuL05lc3RlZExpc3RDb250ZXh0JztcbmltcG9ydCBDb21wb25lbnRMaXN0Q29udGV4dCBmcm9tICcuL0NvbXBvbmVudExpc3RDb250ZXh0JztcbmltcG9ydCBMaXN0UHJvdmlkZXIgZnJvbSAnLi9MaXN0UHJvdmlkZXInO1xuaW1wb3J0IFJhZGlvR3JvdXBDb250ZXh0IGZyb20gJy4uL1JhZGlvR3JvdXAvUmFkaW9Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHNpemUsXG4gICAgbmVzdGluZyxcbiAgICBvcmllbnRhdGlvbixcbiAgICBpbnN0YW5jZVNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG9yaWVudGF0aW9uLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgIWluc3RhbmNlU2l6ZSAmJiAhbmVzdGluZyAmJiBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGluc3RhbmNlU2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShpbnN0YW5jZVNpemUpfWAsIG5lc3RpbmcgJiYgJ25lc3RpbmcnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RVdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5leHBvcnQgY29uc3QgU3R5bGVkTGlzdCA9IHN0eWxlZCgndWwnKSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcmlhbnRzO1xuICBmdW5jdGlvbiBhcHBseVNpemVWYXJzKHNpemUpIHtcbiAgICBpZiAoc2l6ZSA9PT0gJ3NtJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJy0tTGlzdERpdmlkZXItZ2FwJzogJzAuMjVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1taW5IZWlnaHQnOiAnMnJlbScsXG4gICAgICAgICctLUxpc3RJdGVtLXBhZGRpbmdZJzogJzAuMjVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1wYWRkaW5nWCc6ICcwLjVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1mb250U2l6ZSc6IHRoZW1lLnZhcnMuZm9udFNpemUuc20sXG4gICAgICAgICctLUxpc3RJdGVtRGVjb3JhdG9yLXNpemUnOiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAnMS41cmVtJyA6ICcycmVtJyxcbiAgICAgICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjEyNXJlbSdcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzaXplID09PSAnbWQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnLS1MaXN0RGl2aWRlci1nYXAnOiAnMC4zNzVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1taW5IZWlnaHQnOiAnMi41cmVtJyxcbiAgICAgICAgJy0tTGlzdEl0ZW0tcGFkZGluZ1knOiAnMC4zNzVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1wYWRkaW5nWCc6ICcwLjc1cmVtJyxcbiAgICAgICAgJy0tTGlzdEl0ZW0tZm9udFNpemUnOiB0aGVtZS52YXJzLmZvbnRTaXplLm1kLFxuICAgICAgICAnLS1MaXN0SXRlbURlY29yYXRvci1zaXplJzogb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJzEuNzVyZW0nIDogJzIuNXJlbScsXG4gICAgICAgICctLUljb24tZm9udFNpemUnOiAnMS4yNXJlbSdcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzaXplID09PSAnbGcnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnLS1MaXN0RGl2aWRlci1nYXAnOiAnMC41cmVtJyxcbiAgICAgICAgJy0tTGlzdEl0ZW0tbWluSGVpZ2h0JzogJzNyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1wYWRkaW5nWSc6ICcwLjVyZW0nLFxuICAgICAgICAnLS1MaXN0SXRlbS1wYWRkaW5nWCc6ICcxcmVtJyxcbiAgICAgICAgJy0tTGlzdEl0ZW0tZm9udFNpemUnOiB0aGVtZS52YXJzLmZvbnRTaXplLm1kLFxuICAgICAgICAnLS1MaXN0SXRlbURlY29yYXRvci1zaXplJzogb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJzIuMjVyZW0nIDogJzNyZW0nLFxuICAgICAgICAnLS1JY29uLWZvbnRTaXplJzogJzEuNXJlbSdcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gW293bmVyU3RhdGUubmVzdGluZyAmJiBfZXh0ZW5kcyh7fSwgYXBwbHlTaXplVmFycyhvd25lclN0YXRlLmluc3RhbmNlU2l6ZSksIHtcbiAgICAnLS1MaXN0SXRlbS1wYWRkaW5nUmlnaHQnOiAndmFyKC0tTGlzdEl0ZW0tcGFkZGluZ1gpJyxcbiAgICAnLS1MaXN0SXRlbS1wYWRkaW5nTGVmdCc6ICd2YXIoLS1OZXN0ZWRMaXN0SXRlbS1wYWRkaW5nTGVmdCknLFxuICAgIC8vIHJlc2V0IExpc3RJdGVtLCBMaXN0SXRlbUJ1dHRvbiBuZWdhdGl2ZSBtYXJnaW4gKGNhdXNlZCBieSBOZXN0ZWRMaXN0SXRlbSlcbiAgICAnLS1MaXN0SXRlbUJ1dHRvbi1tYXJnaW5CbG9jayc6ICcwcHgnLFxuICAgICctLUxpc3RJdGVtQnV0dG9uLW1hcmdpbklubGluZSc6ICcwcHgnLFxuICAgICctLUxpc3RJdGVtLW1hcmdpbkJsb2NrJzogJzBweCcsXG4gICAgJy0tTGlzdEl0ZW0tbWFyZ2luSW5saW5lJzogJzBweCcsXG4gICAgcGFkZGluZzogMCxcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogJ3ZhcigtLU5lc3RlZExpc3QtbWFyZ2luTGVmdCknLFxuICAgIG1hcmdpbklubGluZUVuZDogJ3ZhcigtLU5lc3RlZExpc3QtbWFyZ2luUmlnaHQpJyxcbiAgICBtYXJnaW5CbG9ja1N0YXJ0OiAndmFyKC0tTGlzdC1nYXApJyxcbiAgICBtYXJnaW5CbG9ja0VuZDogJ2luaXRpYWwnIC8vIHJlc2V0IHVzZXIgYWdlbnQgc3R5bGVzaGVldC5cbiAgfSksICFvd25lclN0YXRlLm5lc3RpbmcgJiYgX2V4dGVuZHMoe30sIGFwcGx5U2l6ZVZhcnMob3duZXJTdGF0ZS5zaXplKSwge1xuICAgICctLUxpc3QtZ2FwJzogJzBweCcsXG4gICAgJy0tTGlzdEl0ZW1EZWNvcmF0b3ItY29sb3InOiB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC50ZXJ0aWFyeSxcbiAgICAnLS1MaXN0LW5lc3RlZEluc2V0U3RhcnQnOiAnMHB4JyxcbiAgICAnLS1MaXN0SXRlbS1wYWRkaW5nTGVmdCc6ICd2YXIoLS1MaXN0SXRlbS1wYWRkaW5nWCknLFxuICAgICctLUxpc3RJdGVtLXBhZGRpbmdSaWdodCc6ICd2YXIoLS1MaXN0SXRlbS1wYWRkaW5nWCknLFxuICAgIC8vIEF1dG9tYXRpYyByYWRpdXMgYWRqdXN0bWVudCBraWNrcyBpbiBvbmx5IGlmICctLUxpc3QtcGFkZGluZycgYW5kICctLUxpc3QtcmFkaXVzJyBhcmUgcHJvdmlkZWQuXG4gICAgJy0tdW5zdGFibGVfTGlzdC1jaGlsZFJhZGl1cyc6ICdjYWxjKG1heCh2YXIoLS1MaXN0LXJhZGl1cykgLSB2YXIoLS1MaXN0LXBhZGRpbmcpLCBtaW4odmFyKC0tTGlzdC1wYWRkaW5nKSAvIDIsIHZhcigtLUxpc3QtcmFkaXVzKSAvIDIpKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICAnLS1MaXN0SXRlbS1yYWRpdXMnOiAndmFyKC0tdW5zdGFibGVfTGlzdC1jaGlsZFJhZGl1cyknLFxuICAgIC8vIGJ5IGRlZmF1bHQsIFRoZSBMaXN0SXRlbSAmIExpc3RJdGVtQnV0dG9uIHVzZSBhdXRvbWF0aWMgcmFkaXVzIGFkanVzdG1lbnQgYmFzZWQgb24gdGhlIHBhcmVudCBMaXN0LlxuICAgICctLUxpc3RJdGVtLXN0YXJ0QWN0aW9uVHJhbnNsYXRlWCc6ICdjYWxjKDAuNSAqIHZhcigtLUxpc3RJdGVtLXBhZGRpbmdMZWZ0KSknLFxuICAgICctLUxpc3RJdGVtLWVuZEFjdGlvblRyYW5zbGF0ZVgnOiAnY2FsYygtMC41ICogdmFyKC0tTGlzdEl0ZW0tcGFkZGluZ1JpZ2h0KSknLFxuICAgIG1hcmdpbjogJ2luaXRpYWwnXG4gIH0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLndyYXAgPyB7XG4gICAgcGFkZGluZzogJ3ZhcigtLUxpc3QtcGFkZGluZyknLFxuICAgIC8vIEZhbGxiYWNrIGlzIG5vdCBuZWVkZWQgZm9yIHJvdy13cmFwIExpc3RcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogJ2NhbGMoLTEgKiB2YXIoLS1MaXN0LWdhcCkpJyxcbiAgICBtYXJnaW5CbG9ja1N0YXJ0OiAnY2FsYygtMSAqIHZhcigtLUxpc3QtZ2FwKSknXG4gIH0gOiB7XG4gICAgcGFkZGluZ0lubGluZTogJ3ZhcigtLUxpc3QtcGFkZGluZywgdmFyKC0tTGlzdERpdmlkZXItZ2FwKSknLFxuICAgIHBhZGRpbmdCbG9jazogJ3ZhcigtLUxpc3QtcGFkZGluZyknXG4gIH0pIDoge1xuICAgIHBhZGRpbmdCbG9jazogJ3ZhcigtLUxpc3QtcGFkZGluZywgdmFyKC0tTGlzdERpdmlkZXItZ2FwKSknLFxuICAgIHBhZGRpbmdJbmxpbmU6ICd2YXIoLS1MaXN0LXBhZGRpbmcpJ1xuICB9KSwgX2V4dGVuZHMoe1xuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGJvcmRlclJhZGl1czogJ3ZhcigtLUxpc3QtcmFkaXVzKScsXG4gICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246IG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/ICdyb3cnIDogJ2NvbHVtbidcbiAgfSwgb3duZXJTdGF0ZS53cmFwICYmIHtcbiAgICBmbGV4V3JhcDogJ3dyYXAnXG4gIH0sIHtcbiAgICBmbGV4R3JvdzogMSxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LCAoX3RoZW1lJHZhcmlhbnRzID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXSwge1xuICAgICctLXVuc3RhYmxlX0xpc3QtYm9yZGVyV2lkdGgnOiAndmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KScgLy8gRm9yIGNoaWxkcmVuIHRvIGxvb2t1cCB0aGUgTGlzdCdzIGJvcmRlciB3aWR0aC5cbiAgfSldO1xufSk7XG5cbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKFN0eWxlZExpc3QsIHtcbiAgbmFtZTogJ0pveUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0xpc3RzXShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LWxpc3QvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtMaXN0IEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvbGlzdC8pXG4gKi9cbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICB2YXIgX2luUHJvcHMkc2l6ZTtcbiAgY29uc3QgbmVzdGluZyA9IFJlYWN0LnVzZUNvbnRleHQoTmVzdGVkTGlzdENvbnRleHQpO1xuICBjb25zdCBtZW51Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTWVudVVuc3R5bGVkQ29udGV4dCk7XG4gIGNvbnN0IHNlbGVjdENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNlbGVjdFVuc3R5bGVkQ29udGV4dCk7XG4gIGNvbnN0IHJhZGlvR3JvdXBDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChSYWRpb0dyb3VwQ29udGV4dCk7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveUxpc3QnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHNpemU6IHNpemVQcm9wLFxuICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLFxuICAgICAgd3JhcCA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdwbGFpbicsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ25ldXRyYWwnLFxuICAgICAgcm9sZTogcm9sZVByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGdldENvbG9yXG4gIH0gPSB1c2VDb2xvckludmVyc2lvbih2YXJpYW50KTtcbiAgY29uc3QgY29sb3IgPSBnZXRDb2xvcihpblByb3BzLmNvbG9yLCBjb2xvclByb3ApO1xuICBjb25zdCBzaXplID0gc2l6ZVByb3AgfHwgKChfaW5Qcm9wcyRzaXplID0gaW5Qcm9wcy5zaXplKSAhPSBudWxsID8gX2luUHJvcHMkc2l6ZSA6ICdtZCcpO1xuICBsZXQgcm9sZTtcbiAgaWYgKG1lbnVDb250ZXh0IHx8IHNlbGVjdENvbnRleHQpIHtcbiAgICByb2xlID0gJ2dyb3VwJztcbiAgfVxuICBpZiAocmFkaW9Hcm91cENvbnRleHQpIHtcbiAgICByb2xlID0gJ3ByZXNlbnRhdGlvbic7XG4gIH1cbiAgaWYgKHJvbGVQcm9wKSB7XG4gICAgcm9sZSA9IHJvbGVQcm9wO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBpbnN0YW5jZVNpemU6IGluUHJvcHMuc2l6ZSxcbiAgICBzaXplLFxuICAgIG5lc3RpbmcsXG4gICAgb3JpZW50YXRpb24sXG4gICAgd3JhcCxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHJvbGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RSb290LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcm9sZTogcm9sZSxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiB0eXBlb2YgbmVzdGluZyA9PT0gJ3N0cmluZycgPyBuZXN0aW5nIDogdW5kZWZpbmVkXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENvbXBvbmVudExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogYCR7dHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycgPyBjb21wb25lbnQgOiAnJ306JHtyb2xlIHx8ICcnfWAsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTGlzdFByb3ZpZGVyLCB7XG4gICAgICAgIHJvdzogb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyxcbiAgICAgICAgd3JhcDogd3JhcCxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ3ZlcnRpY2FsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50IChhZmZlY3Qgb3RoZXIgbmVzdGVkIGxpc3QqIGNvbXBvbmVudHMpLlxuICAgKiBAZGVmYXVsdCAnbWQnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJywgJ2xnJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgW2dsb2JhbCB2YXJpYW50XShodHRwczovL211aS5jb20vam95LXVpL21haW4tZmVhdHVyZXMvZ2xvYmFsLXZhcmlhbnRzLykgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAncGxhaW4nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ291dGxpbmVkJywgJ3BsYWluJywgJ3NvZnQnLCAnc29saWQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE9ubHkgZm9yIGhvcml6b250YWwgbGlzdC5cbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBzZXRzIHRoZSBmbGV4LXdyYXAgdG8gXCJ3cmFwXCIgYW5kIGFkanVzdCBtYXJnaW4gdG8gaGF2ZSBnYXAtbGlrZSBiZWhhdmlvciAod2lsbCBtb3ZlIHRvIGBnYXBgIGluIHRoZSBmdXR1cmUpLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgd3JhcDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFdyYXBMaXN0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbmV4cG9ydCBkZWZhdWx0IFdyYXBMaXN0Q29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSb3dMaXN0Q29udGV4dCBmcm9tICcuL1Jvd0xpc3RDb250ZXh0JztcbmltcG9ydCBXcmFwTGlzdENvbnRleHQgZnJvbSAnLi9XcmFwTGlzdENvbnRleHQnO1xuaW1wb3J0IE5lc3RlZExpc3RDb250ZXh0IGZyb20gJy4vTmVzdGVkTGlzdENvbnRleHQnO1xuXG4vKipcbiAqIFRoaXMgdmFyaWFibGVzIHNob3VsZCBiZSB1c2VkIGluIGEgTGlzdCB0byBjcmVhdGUgYSBzY29wZVxuICogdGhhdCB3aWxsIG5vdCBpbmhlcml0IHZhcmlhYmxlcyBmcm9tIHRoZSB1cHBlciBzY29wZS5cbiAqXG4gKiBVc2VkIGluIGBNZW51YCwgYE1lbnVMaXN0YCwgYFRhYkxpc3RgLCBgU2VsZWN0YCwgYW5kIGBBdXRvY29tcGxldGVgIHRvIGNvbW11bmljYXRlIHdpdGggbmVzdGVkIExpc3QuXG4gKlxuICogZS5nLiBtZW51IGdyb3VwOlxuICogPE1lbnU+XG4gKiAgIDxMaXN0Pi4uLjwvTGlzdD5cbiAqICAgPExpc3Q+Li4uPC9MaXN0PlxuICogPC9NZW51PlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHNjb3BlZFZhcmlhYmxlcyA9IHtcbiAgJy0tTmVzdGVkTGlzdC1tYXJnaW5SaWdodCc6ICcwcHgnLFxuICAnLS1OZXN0ZWRMaXN0LW1hcmdpbkxlZnQnOiAnMHB4JyxcbiAgJy0tTmVzdGVkTGlzdEl0ZW0tcGFkZGluZ0xlZnQnOiAndmFyKC0tTGlzdEl0ZW0tcGFkZGluZ1gpJyxcbiAgLy8gcmVzZXQgTGlzdEl0ZW0sIExpc3RJdGVtQnV0dG9uIG5lZ2F0aXZlIG1hcmdpbiAoY2F1c2VkIGJ5IE5lc3RlZExpc3RJdGVtKVxuICAnLS1MaXN0SXRlbUJ1dHRvbi1tYXJnaW5CbG9jayc6ICcwcHgnLFxuICAnLS1MaXN0SXRlbUJ1dHRvbi1tYXJnaW5JbmxpbmUnOiAnMHB4JyxcbiAgJy0tTGlzdEl0ZW0tbWFyZ2luQmxvY2snOiAnMHB4JyxcbiAgJy0tTGlzdEl0ZW0tbWFyZ2luSW5saW5lJzogJzBweCdcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIExpc3RQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbmVzdGVkLFxuICAgIHJvdyA9IGZhbHNlLFxuICAgIHdyYXAgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGJhc2VQcm92aWRlcnMgPSAvKiNfX1BVUkVfXyovX2pzeChSb3dMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3csXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFdyYXBMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHdyYXAsXG4gICAgICBjaGlsZHJlbjogUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe30sIGluZGV4ID09PSAwICYmIHtcbiAgICAgICAgJ2RhdGEtZmlyc3QtY2hpbGQnOiAnJ1xuICAgICAgfSkpIDogY2hpbGQpXG4gICAgfSlcbiAgfSk7XG4gIGlmIChuZXN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYXNlUHJvdmlkZXJzO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChOZXN0ZWRMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuZXN0ZWQsXG4gICAgY2hpbGRyZW46IGJhc2VQcm92aWRlcnNcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBMaXN0UHJvdmlkZXI7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgTmVzdGVkTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG5leHBvcnQgZGVmYXVsdCBOZXN0ZWRMaXN0Q29udGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBSb3dMaXN0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbmV4cG9ydCBkZWZhdWx0IFJvd0xpc3RDb250ZXh0OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3QnLCBbJ3Jvb3QnLCAnbmVzdGluZycsICdzY29wZWQnLCAnc2l6ZVNtJywgJ3NpemVNZCcsICdzaXplTGcnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yTmV1dHJhbCcsICdjb2xvckRhbmdlcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdjb2xvckNvbnRleHQnLCAndmFyaWFudFBsYWluJywgJ3ZhcmlhbnRPdXRsaW5lZCcsICd2YXJpYW50U29mdCcsICd2YXJpYW50U29saWQnLCAnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RDbGFzc2VzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1CdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtQnV0dG9uJywgWydyb290JywgJ2hvcml6b250YWwnLCAndmVydGljYWwnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yTmV1dHJhbCcsICdjb2xvckRhbmdlcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdjb2xvckNvbnRleHQnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ3NlbGVjdGVkJywgJ3ZhcmlhbnRQbGFpbicsICd2YXJpYW50U29mdCcsICd2YXJpYW50T3V0bGluZWQnLCAndmFyaWFudFNvbGlkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1CdXR0b25DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGlvblwiLCBcImNvbXBvbmVudFwiLCBcIm9yaWVudGF0aW9uXCIsIFwicm9sZVwiLCBcInNlbGVjdGVkXCIsIFwiY29sb3JcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZUJ1dHRvbiBmcm9tICdAbXVpL2Jhc2UvdXNlQnV0dG9uJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgbGlzdEl0ZW1CdXR0b25DbGFzc2VzLCB7IGdldExpc3RJdGVtQnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbUJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IExpc3RJdGVtQnV0dG9uT3JpZW50YXRpb25Db250ZXh0IGZyb20gJy4vTGlzdEl0ZW1CdXR0b25PcmllbnRhdGlvbkNvbnRleHQnO1xuaW1wb3J0IFJvd0xpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvUm93TGlzdENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIHNlbGVjdGVkLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJywgY29sb3IgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWBdXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcywge30pO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBTdHlsZWRMaXN0SXRlbUJ1dHRvbiA9IHN0eWxlZCgnZGl2JykoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cywgX3RoZW1lJHZhcmlhbnRzMiwgX3RoZW1lJHZhcmlhbnRzMywgX3RoZW1lJHZhcmlhbnRzNCwgX3RoZW1lJHZhcmlhbnRzNSwgX3RoZW1lJHZhcmlhbnRzNiwgX3RoZW1lJHZhcmlhbnRzNztcbiAgcmV0dXJuIFtfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5zZWxlY3RlZCAmJiB7XG4gICAgJy0tTGlzdEl0ZW1EZWNvcmF0b3ItY29sb3InOiAnaW5pdGlhbCdcbiAgfSwgb3duZXJTdGF0ZS5kaXNhYmxlZCAmJiB7XG4gICAgJy0tTGlzdEl0ZW1EZWNvcmF0b3ItY29sb3InOiAoX3RoZW1lJHZhcmlhbnRzID0gdGhlbWUudmFyaWFudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHZhcmlhbnRzMiA9IF90aGVtZSR2YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdmFyaWFudHMzID0gX3RoZW1lJHZhcmlhbnRzMltvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czMuY29sb3JcbiAgfSwge1xuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnID8gJ2NvbHVtbicgOiAncm93JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdpbml0aWFsJyxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ2luaXRpYWwnLFxuICAgIC8vIHJlc2V0IG5hdGl2ZSBhbmNob3IgdGFnXG4gICAgYmFja2dyb3VuZENvbG9yOiAnaW5pdGlhbCcsXG4gICAgLy8gcmVzZXQgYnV0dG9uIGJhY2tncm91bmRcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAvLyBJbiBzb21lIGNhc2VzLCBMaXN0SXRlbUJ1dHRvbiBpcyBhIGNoaWxkIG9mIExpc3RJdGVtIHNvIHRoZSBtYXJnaW4gbmVlZHMgdG8gYmUgY29udHJvbGxlZCBieSB0aGUgTGlzdEl0ZW0uIFRoZSB2YWx1ZSBpcyBuZWdhdGl2ZSB0byBhY2NvdW50IGZvciB0aGUgTGlzdEl0ZW0ncyBwYWRkaW5nXG4gICAgbWFyZ2luSW5saW5lOiAndmFyKC0tTGlzdEl0ZW1CdXR0b24tbWFyZ2luSW5saW5lKScsXG4gICAgbWFyZ2luQmxvY2s6ICd2YXIoLS1MaXN0SXRlbUJ1dHRvbi1tYXJnaW5CbG9jayknXG4gIH0sIG93bmVyU3RhdGVbJ2RhdGEtZmlyc3QtY2hpbGQnXSA9PT0gdW5kZWZpbmVkICYmIHtcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogb3duZXJTdGF0ZS5yb3cgPyAndmFyKC0tTGlzdC1nYXApJyA6IHVuZGVmaW5lZCxcbiAgICBtYXJnaW5CbG9ja1N0YXJ0OiBvd25lclN0YXRlLnJvdyA/IHVuZGVmaW5lZCA6ICd2YXIoLS1MaXN0LWdhcCknXG4gIH0sIHtcbiAgICAvLyBhY2NvdW50IGZvciB0aGUgYm9yZGVyIHdpZHRoLCBzbyB0aGF0IGFsbCBvZiB0aGUgTGlzdEl0ZW1CdXR0b25zIGNvbnRlbnQgYWxpZ25lZCBob3Jpem9udGFsbHlcbiAgICBwYWRkaW5nQmxvY2s6ICdjYWxjKHZhcigtLUxpc3RJdGVtLXBhZGRpbmdZKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICAvLyBhY2NvdW50IGZvciB0aGUgYm9yZGVyIHdpZHRoLCBzbyB0aGF0IGFsbCBvZiB0aGUgTGlzdEl0ZW1CdXR0b25zIGNvbnRlbnQgYWxpZ25lZCB2ZXJ0aWNhbGx5XG4gICAgcGFkZGluZ0lubGluZVN0YXJ0OiAnY2FsYyh2YXIoLS1MaXN0SXRlbS1wYWRkaW5nTGVmdCkgKyB2YXIoLS1MaXN0SXRlbS1zdGFydEFjdGlvbldpZHRoLCB2YXIoLS11bnN0YWJsZV9zdGFydEFjdGlvbldpZHRoLCAwcHgpKSknLFxuICAgIC8vIC0taW50ZXJuYWwgdmFyaWFibGUgbWFrZXMgaXQgcG9zc2libGUgdG8gY3VzdG9taXplIHRoZSBhY3Rpb25XaWR0aCBmcm9tIHRoZSB0b3AgTGlzdFxuICAgIHBhZGRpbmdJbmxpbmVFbmQ6ICdjYWxjKHZhcigtLUxpc3RJdGVtLXBhZGRpbmdSaWdodCkgKyB2YXIoLS1MaXN0SXRlbS1lbmRBY3Rpb25XaWR0aCwgdmFyKC0tdW5zdGFibGVfZW5kQWN0aW9uV2lkdGgsIDBweCkpKScsXG4gICAgLy8gLS1pbnRlcm5hbCB2YXJpYWJsZSBtYWtlcyBpdCBwb3NzaWJsZSB0byBjdXN0b21pemUgdGhlIGFjdGlvbldpZHRoIGZyb20gdGhlIHRvcCBMaXN0XG4gICAgbWluQmxvY2tTaXplOiAndmFyKC0tTGlzdEl0ZW0tbWluSGVpZ2h0KScsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYm9yZGVyUmFkaXVzOiAndmFyKC0tTGlzdEl0ZW0tcmFkaXVzKScsXG4gICAgZmxleEdyb3c6IG93bmVyU3RhdGUucm93ID8gMCA6IDEsXG4gICAgZmxleEJhc2lzOiBvd25lclN0YXRlLnJvdyA/ICdhdXRvJyA6ICcwJScsXG4gICAgLy8gZm9yIGxvbmcgdGV4dCAoaW4gdmVydGljYWwpLCBkaXNwbGF5cyBpbiBtdWx0aXBsZSBsaW5lcy5cbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIG1pbklubGluZVNpemU6IDAsXG4gICAgZm9udFNpemU6ICd2YXIoLS1MaXN0SXRlbS1mb250U2l6ZSknLFxuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnZhcnMuZm9udEZhbWlseS5ib2R5XG4gIH0sIG93bmVyU3RhdGUuc2VsZWN0ZWQgJiYge1xuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnZhcnMuZm9udFdlaWdodC5tZFxuICB9LCB7XG4gICAgW3RoZW1lLmZvY3VzLnNlbGVjdG9yXTogdGhlbWUuZm9jdXMuZGVmYXVsdFxuICB9KSwgX2V4dGVuZHMoe30sIChfdGhlbWUkdmFyaWFudHM0ID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czRbb3duZXJTdGF0ZS5jb2xvcl0sICFvd25lclN0YXRlLnNlbGVjdGVkICYmIHtcbiAgICAnJjpob3Zlcic6IChfdGhlbWUkdmFyaWFudHM1ID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fUhvdmVyYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHM1W293bmVyU3RhdGUuY29sb3JdLFxuICAgICcmOmFjdGl2ZSc6IChfdGhlbWUkdmFyaWFudHM2ID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fUFjdGl2ZWBdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzNltvd25lclN0YXRlLmNvbG9yXVxuICB9KSwge1xuICAgIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXTogKF90aGVtZSR2YXJpYW50czcgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czdbb3duZXJTdGF0ZS5jb2xvcl1cbiAgfV07XG59KTtcbmNvbnN0IExpc3RJdGVtQnV0dG9uUm9vdCA9IHN0eWxlZChTdHlsZWRMaXN0SXRlbUJ1dHRvbiwge1xuICBuYW1lOiAnSm95TGlzdEl0ZW1CdXR0b24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0xpc3RzXShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LWxpc3QvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtMaXN0SXRlbUJ1dHRvbiBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL2xpc3QtaXRlbS1idXR0b24vKVxuICovXG5jb25zdCBMaXN0SXRlbUJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdKb3lMaXN0SXRlbUJ1dHRvbidcbiAgfSk7XG4gIGNvbnN0IHJvdyA9IFJlYWN0LnVzZUNvbnRleHQoUm93TGlzdENvbnRleHQpO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGFjdGlvbixcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gICAgICByb2xlLFxuICAgICAgc2VsZWN0ZWQgPSBmYWxzZSxcbiAgICAgIGNvbG9yOiBjb2xvclByb3AgPSBzZWxlY3RlZCA/ICdwcmltYXJ5JyA6ICduZXV0cmFsJyxcbiAgICAgIHZhcmlhbnQgPSAncGxhaW4nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoaW5Qcm9wcy5jb2xvciwgY29sb3JQcm9wKTtcbiAgY29uc3QgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZiwgcmVmKTtcbiAgY29uc3Qge1xuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBzZXRGb2N1c1Zpc2libGUsXG4gICAgZ2V0Um9vdFByb3BzXG4gIH0gPSB1c2VCdXR0b24oX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSkpO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHZhciBfYnV0dG9uUmVmJGN1cnJlbnQ7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAoX2J1dHRvblJlZiRjdXJyZW50ID0gYnV0dG9uUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYnV0dG9uUmVmJGN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbc2V0Rm9jdXNWaXNpYmxlXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgY29sb3IsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHJvdyxcbiAgICBzZWxlY3RlZCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGdldFJvb3RQcm9wcygpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1CdXR0b25PcmllbnRhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogb3JpZW50YXRpb24sXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtQnV0dG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHJvb3RQcm9wcywge1xuICAgICAgcm9sZTogcm9sZSAhPSBudWxsID8gcm9sZSA6IHJvb3RQcm9wcy5yb2xlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBzZWxlY3RlZCA/ICdwcmltYXJ5JyA6ICduZXV0cmFsJ1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IGRpcmVjdGlvbiBmbG93LlxuICAgKiBAZGVmYXVsdCAnaG9yaXpvbnRhbCdcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8uc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNlbGVjdGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgW2dsb2JhbCB2YXJpYW50XShodHRwczovL211aS5jb20vam95LXVpL21haW4tZmVhdHVyZXMvZ2xvYmFsLXZhcmlhbnRzLykgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAncGxhaW4nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ291dGxpbmVkJywgJ3BsYWluJywgJ3NvZnQnLCAnc29saWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtQnV0dG9uOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudUl0ZW0nLCBzbG90KTtcbn1cbmNvbnN0IG1lbnVJdGVtQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnVJdGVtJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdkaXNhYmxlZCcsICdzZWxlY3RlZCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudFNvZnQnLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2xpZCddKTtcbmV4cG9ydCBkZWZhdWx0IG1lbnVJdGVtQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJkaXNhYmxlZFwiLCBcImNvbXBvbmVudFwiLCBcInNlbGVjdGVkXCIsIFwiY29sb3JcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VTbG90UHJvcHMgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuaW1wb3J0IHVzZU1lbnVJdGVtIGZyb20gJ0BtdWkvYmFzZS91c2VNZW51SXRlbSc7XG5pbXBvcnQgeyBTdHlsZWRMaXN0SXRlbUJ1dHRvbiB9IGZyb20gJy4uL0xpc3RJdGVtQnV0dG9uL0xpc3RJdGVtQnV0dG9uJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgeyBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbWVudUl0ZW1DbGFzc2VzJztcbmltcG9ydCBSb3dMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L1Jvd0xpc3RDb250ZXh0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIGRpc2FibGVkLFxuICAgIHNlbGVjdGVkLFxuICAgIGNvbG9yLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJywgY29sb3IgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWBdXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcywge30pO1xuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmNvbnN0IE1lbnVJdGVtUm9vdCA9IHN0eWxlZChTdHlsZWRMaXN0SXRlbUJ1dHRvbiwge1xuICBuYW1lOiAnSm95TWVudUl0ZW0nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW01lbnVdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtbWVudS8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW01lbnVJdGVtIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvbWVudS1pdGVtLylcbiAqIC0gaW5oZXJpdHMgW0xpc3RJdGVtQnV0dG9uIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvbGlzdC1pdGVtLWJ1dHRvbi8pXG4gKi9cbmNvbnN0IE1lbnVJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveU1lbnVJdGVtJ1xuICB9KTtcbiAgY29uc3Qgcm93ID0gUmVhY3QudXNlQ29udGV4dChSb3dMaXN0Q29udGV4dCk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCA9IGZhbHNlLFxuICAgICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICAgIHNlbGVjdGVkID0gZmFsc2UsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gc2VsZWN0ZWQgPyAncHJpbWFyeScgOiAnbmV1dHJhbCcsXG4gICAgICB2YXJpYW50ID0gJ3BsYWluJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IHtcbiAgICBnZXRSb290UHJvcHMsXG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlXG4gIH0gPSB1c2VNZW51SXRlbSh7XG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCxcbiAgICByZWZcbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIHNlbGVjdGVkLFxuICAgIHJvdyxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IE1lbnVJdGVtUm9vdCxcbiAgICBnZXRTbG90UHJvcHM6IGdldFJvb3RQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wczoge30sXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICBhczogY29tcG9uZW50XG4gICAgfSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTWVudUl0ZW1Sb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudUl0ZW0ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgc2VsZWN0ZWQgPyAncHJpbWFyeScgOiAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNlbGVjdGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3BsYWluJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb250YWluZWQnLCAnbGlnaHQnLCAnb3V0bGluZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBNZW51VW5zdHlsZWRDb250ZXh0IH0gZnJvbSAnLi4vTWVudVVuc3R5bGVkJztcbmltcG9ydCB1c2VCdXR0b24gZnJvbSAnLi4vdXNlQnV0dG9uJztcbmltcG9ydCB1c2VGb3JjZWRSZXJlbmRlcmluZyBmcm9tICcuLi91dGlscy91c2VGb3JjZWRSZXJlbmRlcmluZyc7XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1Vuc3R5bGVkIE1lbnVdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LW1lbnUvI2hvb2tzKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VNZW51SXRlbSBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlL2FwaS91c2UtbWVudS1pdGVtLylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTWVudUl0ZW0ocHJvcHMpIHtcbiAgdmFyIF9pdGVtU3RhdGUkZGlzYWJsZWQ7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIHJlZixcbiAgICBsYWJlbFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlkID0gdXNlSWQoKTtcbiAgY29uc3QgbWVudUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KE1lbnVVbnN0eWxlZENvbnRleHQpO1xuICBjb25zdCBpdGVtUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGl0ZW1SZWYsIHJlZik7XG4gIGlmIChtZW51Q29udGV4dCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWVudUl0ZW1VbnN0eWxlZCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgTWVudVVuc3R5bGVkJyk7XG4gIH1cbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVySXRlbSxcbiAgICB1bnJlZ2lzdGVySXRlbSxcbiAgICBvcGVuLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlclxuICB9ID0gbWVudUNvbnRleHQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJlZ2lzdGVySXRlbShpZCwge1xuICAgICAgZGlzYWJsZWQsXG4gICAgICBpZCxcbiAgICAgIHJlZjogaXRlbVJlZixcbiAgICAgIGxhYmVsXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHVucmVnaXN0ZXJJdGVtKGlkKTtcbiAgfSwgW2lkLCByZWdpc3Rlckl0ZW0sIHVucmVnaXN0ZXJJdGVtLCBkaXNhYmxlZCwgcmVmLCBsYWJlbF0pO1xuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzOiBnZXRCdXR0b25Qcm9wcyxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSA9IHVzZUJ1dHRvbih7XG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNhYmxlV2hlbkRpc2FibGVkOiB0cnVlLFxuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pO1xuXG4gIC8vIEVuc3VyZSB0aGUgbWVudSBpdGVtIGlzIGZvY3VzZWQgd2hlbiBoaWdobGlnaHRlZFxuICBjb25zdCBbZm9jdXNSZXF1ZXN0ZWQsIHJlcXVlc3RGb2N1c10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGZvY3VzSWZSZXF1ZXN0ZWQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGZvY3VzUmVxdWVzdGVkICYmIGl0ZW1SZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICBpdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIHJlcXVlc3RGb2N1cyhmYWxzZSk7XG4gICAgfVxuICB9LCBbZm9jdXNSZXF1ZXN0ZWRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBmb2N1c0lmUmVxdWVzdGVkKCk7XG4gIH0pO1xuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHtcbiAgICBpZCxcbiAgICBkaXNhYmxlZCxcbiAgICBsYWJlbFxuICB9KTtcbiAgY29uc3QgaXRlbVN0YXRlID0gbWVudUNvbnRleHQuZ2V0SXRlbVN0YXRlKGlkICE9IG51bGwgPyBpZCA6ICcnKTtcbiAgY29uc3Qge1xuICAgIGhpZ2hsaWdodGVkXG4gIH0gPSBpdGVtU3RhdGUgIT0gbnVsbCA/IGl0ZW1TdGF0ZSA6IHtcbiAgICBoaWdobGlnaHRlZDogZmFsc2VcbiAgfTtcbiAgY29uc3QgcmVyZW5kZXIgPSB1c2VGb3JjZWRSZXJlbmRlcmluZygpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUhpZ2hsaWdodGVkU3RhdGUoaGlnaGxpZ2h0ZWRJdGVtSWQpIHtcbiAgICAgIGlmIChoaWdobGlnaHRlZEl0ZW1JZCA9PT0gaWQgJiYgIWhpZ2hsaWdodGVkKSB7XG4gICAgICAgIHJlcmVuZGVyKCk7XG4gICAgICB9IGVsc2UgaWYgKGhpZ2hsaWdodGVkSXRlbUlkICE9PSBpZCAmJiBoaWdobGlnaHRlZCkge1xuICAgICAgICByZXJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyKHVwZGF0ZUhpZ2hsaWdodGVkU3RhdGUpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBNZW51QnV0dG9uXG4gICAgcmVxdWVzdEZvY3VzKGhpZ2hsaWdodGVkICYmIG9wZW4pO1xuICB9LCBbaGlnaGxpZ2h0ZWQsIG9wZW5dKTtcbiAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0Um9vdFByb3BzOiAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgZ2V0QnV0dG9uUHJvcHMob3RoZXJIYW5kbGVycyksIHtcbiAgICAgICAgcm9sZTogJ21lbnVpdGVtJ1xuICAgICAgfSksXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICBmb2N1c1Zpc2libGUsXG4gICAgICBoaWdobGlnaHRlZDogZmFsc2VcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzOiAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25Qcm9wcyA9IG1lbnVDb250ZXh0LmdldEl0ZW1Qcm9wcyhpZCwgb3RoZXJIYW5kbGVycyk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVySGFuZGxlcnMsIGdldEJ1dHRvblByb3BzKG90aGVySGFuZGxlcnMpLCB7XG4gICAgICAgIHRhYkluZGV4OiBvcHRpb25Qcm9wcy50YWJJbmRleCxcbiAgICAgICAgaWQ6IG9wdGlvblByb3BzLmlkLFxuICAgICAgICByb2xlOiAnbWVudWl0ZW0nXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRpc2FibGVkOiAoX2l0ZW1TdGF0ZSRkaXNhYmxlZCA9IGl0ZW1TdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogaXRlbVN0YXRlLmRpc2FibGVkKSAhPSBudWxsID8gX2l0ZW1TdGF0ZSRkaXNhYmxlZCA6IGZhbHNlLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBoaWdobGlnaHRlZFxuICB9O1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VNZXNzYWdlQnVzIGZyb20gJy4uL3V0aWxzL3VzZU1lc3NhZ2VCdXMnO1xuY29uc3QgSElHSExJR0hUX0NIQU5HRV9UT1BJQyA9ICdtZW51OmNoYW5nZS1oaWdobGlnaHQnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBUaGlzIGhvb2sgaXMgdXNlZCB0byBub3RpZnkgYW55IGludGVyZXN0ZWQgY29tcG9uZW50cyBhYm91dCBjaGFuZ2VzIGluIHRoZSBNZW51J3Mgc2VsZWN0aW9uIGFuZCBoaWdobGlnaHQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lbnVDaGFuZ2VOb3RpZmllcnMoKSB7XG4gIGNvbnN0IG1lc3NhZ2VCdXMgPSB1c2VNZXNzYWdlQnVzKCk7XG4gIGNvbnN0IG5vdGlmeUhpZ2hsaWdodENoYW5nZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgbWVzc2FnZUJ1cy5wdWJsaXNoKEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMsIG5ld1ZhbHVlKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgY29uc3QgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soaGFuZGxlciA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2VCdXMuc3Vic2NyaWJlKEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMsIGhhbmRsZXIpO1xuICB9LCBbbWVzc2FnZUJ1c10pO1xuICByZXR1cm4ge1xuICAgIG5vdGlmeUhpZ2hsaWdodENoYW5nZWQsXG4gICAgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB1c2VMaXN0Ym94LCB7IGRlZmF1bHRMaXN0Ym94UmVkdWNlciwgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi91c2VMaXN0Ym94JztcbmltcG9ydCB1c2VNZW51Q2hhbmdlTm90aWZpZXJzIGZyb20gJy4uL01lbnVVbnN0eWxlZC91c2VNZW51Q2hhbmdlTm90aWZpZXJzJztcbmZ1bmN0aW9uIHN0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuYmx1ciB8fCBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMub3B0aW9uSG92ZXIgfHwgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLnNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG4gIGNvbnN0IG5ld1N0YXRlID0gZGVmYXVsdExpc3Rib3hSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICBpZiAoYWN0aW9uLnR5cGUgIT09IEFjdGlvblR5cGVzLnNldEhpZ2hsaWdodCAmJiBuZXdTdGF0ZS5oaWdobGlnaHRlZFZhbHVlID09PSBudWxsICYmIGFjdGlvbi5wcm9wcy5vcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBoaWdobGlnaHRlZFZhbHVlOiBhY3Rpb24ucHJvcHMub3B0aW9uc1swXVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXdTdGF0ZTtcbn1cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1Vuc3R5bGVkIE1lbnVdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LW1lbnUvI2hvb2tzKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VNZW51IEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL3VzZS1tZW51LylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTWVudShwYXJhbWV0ZXJzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGxpc3Rib3hSZWY6IGxpc3Rib3hSZWZQcm9wLFxuICAgIG9wZW4gPSBmYWxzZSxcbiAgICBvbkNsb3NlLFxuICAgIGxpc3Rib3hJZFxuICB9ID0gcGFyYW1ldGVycztcbiAgY29uc3QgW21lbnVJdGVtcywgc2V0TWVudUl0ZW1zXSA9IFJlYWN0LnVzZVN0YXRlKHt9KTtcbiAgY29uc3QgbGlzdGJveFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0Ym94UmVmLCBsaXN0Ym94UmVmUHJvcCk7XG4gIGNvbnN0IHJlZ2lzdGVySXRlbSA9IFJlYWN0LnVzZUNhbGxiYWNrKChpZCwgbWV0YWRhdGEpID0+IHtcbiAgICBzZXRNZW51SXRlbXMocHJldmlvdXNTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcmV2aW91c1N0YXRlKTtcbiAgICAgIG5ld1N0YXRlW2lkXSA9IG1ldGFkYXRhO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIGNvbnN0IHVucmVnaXN0ZXJJdGVtID0gUmVhY3QudXNlQ2FsbGJhY2soaWQgPT4ge1xuICAgIHNldE1lbnVJdGVtcyhwcmV2aW91c1N0YXRlID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIHByZXZpb3VzU3RhdGUpO1xuICAgICAgZGVsZXRlIG5ld1N0YXRlW2lkXTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICBjb25zdCB7XG4gICAgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZCxcbiAgICByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXJcbiAgfSA9IHVzZU1lbnVDaGFuZ2VOb3RpZmllcnMoKTtcbiAgY29uc3Qge1xuICAgIGdldE9wdGlvblN0YXRlLFxuICAgIGdldE9wdGlvblByb3BzLFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBoaWdobGlnaHRlZE9wdGlvbixcbiAgICBzZXRIaWdobGlnaHRlZFZhbHVlOiBzZXRMaXN0Ym94SGlnaGxpZ2h0XG4gIH0gPSB1c2VMaXN0Ym94KHtcbiAgICBvcHRpb25zOiBPYmplY3Qua2V5cyhtZW51SXRlbXMpLFxuICAgIG9wdGlvblN0cmluZ2lmaWVyOiBpZCA9PiB7XG4gICAgICB2YXIgX21lbnVJdGVtcyRpZCRyZWYkY3VyO1xuICAgICAgcmV0dXJuIG1lbnVJdGVtc1tpZF0ubGFiZWwgfHwgKChfbWVudUl0ZW1zJGlkJHJlZiRjdXIgPSBtZW51SXRlbXNbaWRdLnJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX21lbnVJdGVtcyRpZCRyZWYkY3VyLmlubmVyVGV4dCk7XG4gICAgfSxcbiAgICBpc09wdGlvbkRpc2FibGVkOiBpZCA9PiB7XG4gICAgICB2YXIgX21lbnVJdGVtcyRpZDtcbiAgICAgIHJldHVybiAobWVudUl0ZW1zID09IG51bGwgPyB2b2lkIDAgOiAoX21lbnVJdGVtcyRpZCA9IG1lbnVJdGVtc1tpZF0pID09IG51bGwgPyB2b2lkIDAgOiBfbWVudUl0ZW1zJGlkLmRpc2FibGVkKSB8fCBmYWxzZTtcbiAgICB9LFxuICAgIGxpc3Rib3hSZWY6IGhhbmRsZVJlZixcbiAgICBmb2N1c01hbmFnZW1lbnQ6ICdET00nLFxuICAgIGlkOiBsaXN0Ym94SWQsXG4gICAgc3RhdGVSZWR1Y2VyLFxuICAgIHNlbGVjdGlvbkxpbWl0OiAwLFxuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IHRydWVcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZChoaWdobGlnaHRlZE9wdGlvbik7XG4gIH0sIFtoaWdobGlnaHRlZE9wdGlvbiwgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZF0pO1xuICBjb25zdCBoaWdobGlnaHRGaXJzdEl0ZW0gPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKE9iamVjdC5rZXlzKG1lbnVJdGVtcykubGVuZ3RoID4gMCkge1xuICAgICAgc2V0TGlzdGJveEhpZ2hsaWdodChtZW51SXRlbXNbT2JqZWN0LmtleXMobWVudUl0ZW1zKVswXV0uaWQpO1xuICAgIH1cbiAgfSwgW21lbnVJdGVtcywgc2V0TGlzdGJveEhpZ2hsaWdodF0pO1xuICBjb25zdCBoaWdobGlnaHRMYXN0SXRlbSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoT2JqZWN0LmtleXMobWVudUl0ZW1zKS5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRMaXN0Ym94SGlnaGxpZ2h0KG1lbnVJdGVtc1tPYmplY3Qua2V5cyhtZW51SXRlbXMpW09iamVjdC5rZXlzKG1lbnVJdGVtcykubGVuZ3RoIC0gMV1dLmlkKTtcbiAgICB9XG4gIH0sIFttZW51SXRlbXMsIHNldExpc3Rib3hIaWdobGlnaHRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIGhpZ2hsaWdodEZpcnN0SXRlbSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGhpZ2hsaWdodEZpcnN0SXRlbV0pO1xuICBjb25zdCBjcmVhdGVIYW5kbGVLZXlEb3duID0gb3RoZXJIYW5kbGVycyA9PiBlID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlEO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbktleUQgPSBvdGhlckhhbmRsZXJzLm9uS2V5RG93bikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uS2V5RC5jYWxsKG90aGVySGFuZGxlcnMsIGUpO1xuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJyAmJiBvcGVuKSB7XG4gICAgICBvbkNsb3NlID09IG51bGwgPyB2b2lkIDAgOiBvbkNsb3NlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCbHVyID0gb3RoZXJIYW5kbGVycyA9PiBlID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25CbHVyLCBfbGlzdGJveFJlZiRjdXJyZW50O1xuICAgIChfb3RoZXJIYW5kbGVycyRvbkJsdXIgPSBvdGhlckhhbmRsZXJzLm9uQmx1cikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQmx1ci5jYWxsKG90aGVySGFuZGxlcnMsIGUpO1xuICAgIGlmICghKChfbGlzdGJveFJlZiRjdXJyZW50ID0gbGlzdGJveFJlZi5jdXJyZW50KSAhPSBudWxsICYmIF9saXN0Ym94UmVmJGN1cnJlbnQuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSkpIHtcbiAgICAgIG9uQ2xvc2UgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQ2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9saXN0Ym94UmVmJGN1cnJlbnQyO1xuICAgIC8vIHNldCBmb2N1cyB0byB0aGUgaGlnaGxpZ2h0ZWQgaXRlbSAoYnV0IHByZXZlbnQgc3RlYWxpbmcgZm9jdXMgZnJvbSBvdGhlciBlbGVtZW50cyBvbiB0aGUgcGFnZSlcbiAgICBpZiAoKF9saXN0Ym94UmVmJGN1cnJlbnQyID0gbGlzdGJveFJlZi5jdXJyZW50KSAhPSBudWxsICYmIF9saXN0Ym94UmVmJGN1cnJlbnQyLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmIGhpZ2hsaWdodGVkT3B0aW9uICE9PSBudWxsKSB7XG4gICAgICB2YXIgX21lbnVJdGVtcyRoaWdobGlnaHRlLCBfbWVudUl0ZW1zJGhpZ2hsaWdodGUyO1xuICAgICAgbWVudUl0ZW1zID09IG51bGwgPyB2b2lkIDAgOiAoX21lbnVJdGVtcyRoaWdobGlnaHRlID0gbWVudUl0ZW1zW2hpZ2hsaWdodGVkT3B0aW9uXSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfbWVudUl0ZW1zJGhpZ2hsaWdodGUyID0gX21lbnVJdGVtcyRoaWdobGlnaHRlLnJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX21lbnVJdGVtcyRoaWdobGlnaHRlMi5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2hpZ2hsaWdodGVkT3B0aW9uLCBtZW51SXRlbXNdKTtcbiAgY29uc3QgZ2V0TGlzdGJveFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHJvb3RQcm9wcyA9IGdldFJvb3RQcm9wcyhfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywge1xuICAgICAgb25CbHVyOiBjcmVhdGVIYW5kbGVCbHVyKG90aGVySGFuZGxlcnMpLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVLZXlEb3duKG90aGVySGFuZGxlcnMpXG4gICAgfSkpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgcm9vdFByb3BzLCB7XG4gICAgICByb2xlOiAnbWVudSdcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0SXRlbVN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soaWQgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaGlnaGxpZ2h0ZWRcbiAgICB9ID0gZ2V0T3B0aW9uU3RhdGUoaWQpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGhpZ2hsaWdodGVkXG4gICAgfTtcbiAgfSwgW2dldE9wdGlvblN0YXRlXSk7XG4gIFJlYWN0LnVzZURlYnVnVmFsdWUoe1xuICAgIG1lbnVJdGVtcyxcbiAgICBoaWdobGlnaHRlZE9wdGlvblxuICB9KTtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGdldEl0ZW1Qcm9wczogZ2V0T3B0aW9uUHJvcHMsXG4gICAgZ2V0SXRlbVN0YXRlLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3Rlckl0ZW0sXG4gICAgdW5yZWdpc3Rlckl0ZW0sXG4gICAgb3BlblxuICB9KSwgW2dldE9wdGlvblByb3BzLCBnZXRJdGVtU3RhdGUsIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciwgcmVnaXN0ZXJJdGVtLCB1bnJlZ2lzdGVySXRlbSwgb3Blbl0pO1xuICByZXR1cm4ge1xuICAgIGNvbnRleHRWYWx1ZSxcbiAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgaGlnaGxpZ2h0ZWRPcHRpb24sXG4gICAgaGlnaGxpZ2h0Rmlyc3RJdGVtLFxuICAgIGhpZ2hsaWdodExhc3RJdGVtLFxuICAgIG1lbnVJdGVtc1xuICB9O1xufSIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudUxpc3QnLCBzbG90KTtcbn1cbmNvbnN0IG1lbnVDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTWVudUxpc3QnLCBbJ3Jvb3QnLCAnbmVzdGVkJywgJ3NpemVTbScsICdzaXplTWQnLCAnc2l6ZUxnJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvck5ldXRyYWwnLCAnY29sb3JEYW5nZXInLCAnY29sb3JJbmZvJywgJ2NvbG9yU3VjY2VzcycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JDb250ZXh0JywgJ3ZhcmlhbnRQbGFpbicsICd2YXJpYW50T3V0bGluZWQnLCAndmFyaWFudFNvZnQnLCAndmFyaWFudFNvbGlkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbWVudUNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJpZFwiLCBcImNvbXBvbmVudFwiLCBcImNoaWxkcmVuXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJjb2xvclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdXNlU2xvdFByb3BzIH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCB7IE1lbnVVbnN0eWxlZENvbnRleHQgfSBmcm9tICdAbXVpL2Jhc2UvTWVudVVuc3R5bGVkJztcbmltcG9ydCB1c2VNZW51IGZyb20gJ0BtdWkvYmFzZS91c2VNZW51JztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgeyBTdHlsZWRMaXN0IH0gZnJvbSAnLi4vTGlzdC9MaXN0JztcbmltcG9ydCBMaXN0UHJvdmlkZXIsIHsgc2NvcGVkVmFyaWFibGVzIH0gZnJvbSAnLi4vTGlzdC9MaXN0UHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0TWVudUxpc3RVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL21lbnVMaXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIHZhcmlhbnQsXG4gICAgY29sb3IsXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCAmJiBgdmFyaWFudCR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBjb2xvciAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHNpemUgJiYgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51TGlzdFV0aWxpdHlDbGFzcywge30pO1xufTtcbmNvbnN0IE1lbnVMaXN0Um9vdCA9IHN0eWxlZChTdHlsZWRMaXN0LCB7XG4gIG5hbWU6ICdKb3lNZW51TGlzdCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cztcbiAgY29uc3QgdmFyaWFudFN0eWxlID0gKF90aGVtZSR2YXJpYW50cyA9IHRoZW1lLnZhcmlhbnRzW293bmVyU3RhdGUudmFyaWFudF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHNbb3duZXJTdGF0ZS5jb2xvcl07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgJy0tZm9jdXMtb3V0bGluZS1vZmZzZXQnOiBgY2FsYygke3RoZW1lLnZhcnMuZm9jdXMudGhpY2tuZXNzfSAqIC0xKWAsXG4gICAgLy8gdG8gcHJldmVudCB0aGUgZm9jdXMgb3V0bGluZSBmcm9tIGJlaW5nIGN1dCBieSBvdmVyZmxvd1xuICAgICctLUxpc3QtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMuc20sXG4gICAgJy0tTGlzdEl0ZW0tc3RpY2t5QmFja2dyb3VuZCc6ICh2YXJpYW50U3R5bGUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhcmlhbnRTdHlsZS5iYWNrZ3JvdW5kQ29sb3IpIHx8ICh2YXJpYW50U3R5bGUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhcmlhbnRTdHlsZS5iYWNrZ3JvdW5kKSB8fCB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlLFxuICAgICctLUxpc3RJdGVtLXN0aWNreVRvcCc6ICdjYWxjKHZhcigtLUxpc3QtcGFkZGluZywgdmFyKC0tTGlzdERpdmlkZXItZ2FwKSkgKiAtMSknXG4gIH0sIHNjb3BlZFZhcmlhYmxlcywge1xuICAgIG92ZXJmbG93OiAnYXV0bydcbiAgfSwgISh2YXJpYW50U3R5bGUgIT0gbnVsbCAmJiB2YXJpYW50U3R5bGUuYmFja2dyb3VuZENvbG9yKSAmJiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlXG4gIH0pO1xufSk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtNZW51XShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LW1lbnUvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtNZW51TGlzdCBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL21lbnUtbGlzdC8pXG4gKi9cbmNvbnN0IE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveU1lbnVMaXN0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkOiBpZFByb3AsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHNpemUgPSAnbWQnLFxuICAgICAgdmFyaWFudCA9ICdvdXRsaW5lZCcsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ25ldXRyYWwnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoaW5Qcm9wcy5jb2xvciwgY29sb3JQcm9wKTtcbiAgY29uc3Qge1xuICAgIGNvbnRleHRWYWx1ZSxcbiAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgaGlnaGxpZ2h0Rmlyc3RJdGVtLFxuICAgIGhpZ2hsaWdodExhc3RJdGVtXG4gIH0gPSB1c2VNZW51KHtcbiAgICBsaXN0Ym94UmVmOiByZWYsXG4gICAgbGlzdGJveElkOiBpZFByb3BcbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgKCkgPT4gKHtcbiAgICBoaWdobGlnaHRGaXJzdEl0ZW0sXG4gICAgaGlnaGxpZ2h0TGFzdEl0ZW1cbiAgfSksIFtoaWdobGlnaHRGaXJzdEl0ZW0sIGhpZ2hsaWdodExhc3RJdGVtXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHNpemUsXG4gICAgbmVzdGluZzogZmFsc2UsXG4gICAgcm93OiBmYWxzZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBsaXN0Ym94UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBNZW51TGlzdFJvb3QsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRMaXN0Ym94UHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHt9LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgYXM6IGNvbXBvbmVudFxuICAgIH0sXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9KTtcbiAgY29uc3QgbWVudUNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgIGdldExpc3Rib3hQcm9wcyxcbiAgICBvcGVuOiB0cnVlXG4gIH0pLCBbY29udGV4dFZhbHVlLCBnZXRMaXN0Ym94UHJvcHNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1lbnVMaXN0Um9vdCwgX2V4dGVuZHMoe30sIGxpc3Rib3hQcm9wcywge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChNZW51VW5zdHlsZWRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogbWVudUNvbnRleHRWYWx1ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChMaXN0UHJvdmlkZXIsIHtcbiAgICAgICAgbmVzdGVkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBBIHJlZiB3aXRoIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgYWxsb3dzIHRvIHNlbGVjdCB0aGUgZmlyc3Qgb3IgbGFzdCBtZW51IGl0ZW0uXG4gICAqL1xuICBhY3Rpb25zOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgaGlnaGxpZ2h0Rmlyc3RJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgaGlnaGxpZ2h0TGFzdEl0ZW06IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KVxuICB9KV0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50IChhZmZlY3Qgb3RoZXIgbmVzdGVkIGxpc3QqIGNvbXBvbmVudHMgYmVjYXVzZSB0aGUgYE1lbnVgIGluaGVyaXRzIGBMaXN0YCkuXG4gICAqIEBkZWZhdWx0ICdtZCdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc20nLCAnbWQnLCAnbGcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAncGxhaW4nLCAnc29mdCcsICdzb2xpZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUxpc3Q7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpT3B0aW9uJywgc2xvdCk7XG59XG5jb25zdCBvcHRpb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpT3B0aW9uJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvck5ldXRyYWwnLCAnY29sb3JEYW5nZXInLCAnY29sb3JJbmZvJywgJ2NvbG9yU3VjY2VzcycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JDb250ZXh0JywgJ2ZvY3VzVmlzaWJsZScsICdkaXNhYmxlZCcsICdzZWxlY3RlZCcsICdoaWdobGlnaHRlZCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudFNvZnQnLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2xpZCddKTtcbmV4cG9ydCBkZWZhdWx0IG9wdGlvbkNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbXBvbmVudFwiLCBcImNoaWxkcmVuXCIsIFwiZGlzYWJsZWRcIiwgXCJ2YWx1ZVwiLCBcImxhYmVsXCIsIFwidmFyaWFudFwiLCBcImNvbG9yXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZU9wdGlvbiBmcm9tICdAbXVpL2Jhc2UvdXNlT3B0aW9uJztcbmltcG9ydCB7IHVzZVNsb3RQcm9wcyB9IGZyb20gJ0BtdWkvYmFzZS91dGlscyc7XG5pbXBvcnQgeyBTdHlsZWRMaXN0SXRlbUJ1dHRvbiB9IGZyb20gJy4uL0xpc3RJdGVtQnV0dG9uL0xpc3RJdGVtQnV0dG9uJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgb3B0aW9uQ2xhc3NlcywgeyBnZXRPcHRpb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL29wdGlvbkNsYXNzZXMnO1xuaW1wb3J0IFJvd0xpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvUm93TGlzdENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBoaWdobGlnaHRlZCxcbiAgICBzZWxlY3RlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgaGlnaGxpZ2h0ZWQgJiYgJ2hpZ2hsaWdodGVkJywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRPcHRpb25VdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5jb25zdCBPcHRpb25Sb290ID0gc3R5bGVkKFN0eWxlZExpc3RJdGVtQnV0dG9uLCB7XG4gIG5hbWU6ICdKb3lPcHRpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHM7XG4gIGNvbnN0IHZhcmlhbnRTdHlsZSA9IChfdGhlbWUkdmFyaWFudHMgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9SG92ZXJgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIHtcbiAgICBbYCYuJHtvcHRpb25DbGFzc2VzLmhpZ2hsaWdodGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvclxuICAgIH1cbiAgfTtcbn0pO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbU2VsZWN0XShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LXNlbGVjdC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW09wdGlvbiBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL29wdGlvbi8pXG4gKi9cbmNvbnN0IE9wdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE9wdGlvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnSm95T3B0aW9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFudCA9ICdwbGFpbicsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ25ldXRyYWwnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHJvdyA9IFJlYWN0LnVzZUNvbnRleHQoUm93TGlzdENvbnRleHQpO1xuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIHNlbGVjdGVkLFxuICAgIGhpZ2hsaWdodGVkLFxuICAgIGluZGV4XG4gIH0gPSB1c2VPcHRpb24oe1xuICAgIGRpc2FibGVkLFxuICAgIHZhbHVlLFxuICAgIG9wdGlvblJlZjogcmVmXG4gIH0pO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIHNlbGVjdGVkID8gJ3ByaW1hcnknIDogY29sb3JQcm9wKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHNlbGVjdGVkLFxuICAgIGhpZ2hsaWdodGVkLFxuICAgIGluZGV4LFxuICAgIGNvbXBvbmVudCxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHJvd1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByb290UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGVsZW1lbnRUeXBlOiBPcHRpb25Sb290LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiB7fSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIGFzOiBjb21wb25lbnRcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290LFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChPcHRpb25Sb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gT3B0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICduZXV0cmFsJ1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbidzIGNvbnRlbnQuXG4gICAqIFVzZWQgZm9yIGtleWJvYXJkIHRleHQgbmF2aWdhdGlvbiBtYXRjaGluZy5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZWxlbWVudCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3BsYWluJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBPcHRpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFNlbGVjdFVuc3R5bGVkQ29udGV4dCB9IGZyb20gJy4uL1NlbGVjdFVuc3R5bGVkL1NlbGVjdFVuc3R5bGVkQ29udGV4dCc7XG5pbXBvcnQgdXNlRm9yY2VkUmVyZW5kZXJpbmcgZnJvbSAnLi4vdXRpbHMvdXNlRm9yY2VkUmVyZW5kZXJpbmcnO1xuXG4vKipcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbdXNlT3B0aW9uIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL3VzZS1vcHRpb24vKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VPcHRpb24ocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZSxcbiAgICBvcHRpb25SZWY6IG9wdGlvblJlZlBhcmFtXG4gIH0gPSBwYXJhbXM7XG4gIGNvbnN0IHNlbGVjdENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNlbGVjdFVuc3R5bGVkQ29udGV4dCk7XG4gIGlmICghc2VsZWN0Q29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignT3B0aW9uIG11c3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIFNlbGVjdFVuc3R5bGVkQ29udGV4dCAoaS5lLiwgYmUgdXNlZCBpbnNpZGUgYSBTZWxlY3RVbnN0eWxlZCBjb21wb25lbnQpLicpO1xuICB9XG4gIGNvbnN0IHtcbiAgICBnZXRPcHRpb25Qcm9wcyxcbiAgICBnZXRPcHRpb25TdGF0ZSxcbiAgICBsaXN0Ym94UmVmLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXJcbiAgfSA9IHNlbGVjdENvbnRleHQ7XG4gIGNvbnN0IG9wdGlvblN0YXRlID0gZ2V0T3B0aW9uU3RhdGUodmFsdWUpO1xuICBjb25zdCB7XG4gICAgc2VsZWN0ZWQsXG4gICAgaGlnaGxpZ2h0ZWRcbiAgfSA9IG9wdGlvblN0YXRlO1xuICBjb25zdCByZXJlbmRlciA9IHVzZUZvcmNlZFJlcmVuZGVyaW5nKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWRTdGF0ZShzZWxlY3RlZFZhbHVlcykge1xuICAgICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RlZFZhbHVlcykpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICByZXJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlcyA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0ZWRWYWx1ZXMpKSB7XG4gICAgICAgIGlmICghc2VsZWN0ZWRWYWx1ZXMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgcmVyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlcyAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmVyZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlcih1cGRhdGVTZWxlY3RlZFN0YXRlKTtcbiAgfSwgW3JlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlciwgcmVyZW5kZXIsIHNlbGVjdGVkLCB2YWx1ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUhpZ2hsaWdodGVkU3RhdGUoaGlnaGxpZ2h0ZWRWYWx1ZSkge1xuICAgICAgaWYgKGhpZ2hsaWdodGVkVmFsdWUgPT09IHZhbHVlICYmICFoaWdobGlnaHRlZCkge1xuICAgICAgICByZXJlbmRlcigpO1xuICAgICAgfSBlbHNlIGlmIChoaWdobGlnaHRlZFZhbHVlICE9PSB2YWx1ZSAmJiBoaWdobGlnaHRlZCkge1xuICAgICAgICByZXJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyKHVwZGF0ZUhpZ2hsaWdodGVkU3RhdGUpO1xuICB9LCBbcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyLCByZXJlbmRlciwgdmFsdWUsIGhpZ2hsaWdodGVkXSk7XG4gIGNvbnN0IG9wdGlvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihvcHRpb25SZWZQYXJhbSwgb3B0aW9uUmVmKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBTY3JvbGwgdG8gdGhlIGN1cnJlbnRseSBoaWdobGlnaHRlZCBvcHRpb25cbiAgICBpZiAoaGlnaGxpZ2h0ZWQpIHtcbiAgICAgIGlmICghbGlzdGJveFJlZi5jdXJyZW50IHx8ICFvcHRpb25SZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBsaXN0Ym94Q2xpZW50UmVjdCA9IGxpc3Rib3hSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IG9wdGlvbkNsaWVudFJlY3QgPSBvcHRpb25SZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChvcHRpb25DbGllbnRSZWN0LnRvcCA8IGxpc3Rib3hDbGllbnRSZWN0LnRvcCkge1xuICAgICAgICBsaXN0Ym94UmVmLmN1cnJlbnQuc2Nyb2xsVG9wIC09IGxpc3Rib3hDbGllbnRSZWN0LnRvcCAtIG9wdGlvbkNsaWVudFJlY3QudG9wO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25DbGllbnRSZWN0LmJvdHRvbSA+IGxpc3Rib3hDbGllbnRSZWN0LmJvdHRvbSkge1xuICAgICAgICBsaXN0Ym94UmVmLmN1cnJlbnQuc2Nyb2xsVG9wICs9IG9wdGlvbkNsaWVudFJlY3QuYm90dG9tIC0gbGlzdGJveENsaWVudFJlY3QuYm90dG9tO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2hpZ2hsaWdodGVkLCBsaXN0Ym94UmVmXSk7XG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzOiAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgZ2V0T3B0aW9uUHJvcHModmFsdWUsIG90aGVySGFuZGxlcnMpLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pLFxuICAgIGhpZ2hsaWdodGVkLFxuICAgIGluZGV4OiBvcHRpb25TdGF0ZS5pbmRleCxcbiAgICBzZWxlY3RlZFxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNPcHRpb25Hcm91cCB9IGZyb20gJy4uL3VzZVNlbGVjdCc7XG5leHBvcnQgZnVuY3Rpb24gYXJlT3B0aW9uc0VxdWFsKG9wdGlvbjEsIG9wdGlvbjIpIHtcbiAgcmV0dXJuIG9wdGlvbjEubGFiZWwgPT09IG9wdGlvbjIubGFiZWwgJiYgb3B0aW9uMS52YWx1ZSA9PT0gb3B0aW9uMi52YWx1ZSAmJiBvcHRpb24xLmRpc2FibGVkID09PSBvcHRpb24yLmRpc2FibGVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3Qgc2VsZWN0Q2hpbGRyZW4gPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgbm9kZSA9PiB7XG4gICAgdmFyIF9wcm9wcywgX3Byb3BzMiwgX2VsZW1lbnQkcHJvcHMkZGlzYWJsMjtcbiAgICBjb25zdCBub2RlQ2hpbGRyZW4gPSBub2RlID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzID0gbm9kZS5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoKG5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMyID0gbm9kZS5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wczIudmFsdWUpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChub2RlQ2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMkZGlzYWJsO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gbm9kZTtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB7XG4gICAgICAgICAgb3B0aW9uczogZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbihub2RlQ2hpbGRyZW4pLFxuICAgICAgICAgIGxhYmVsOiBlbGVtZW50LnByb3BzLmxhYmVsLFxuICAgICAgICAgIGRpc2FibGVkOiAoX2VsZW1lbnQkcHJvcHMkZGlzYWJsID0gZWxlbWVudC5wcm9wcy5kaXNhYmxlZCkgIT0gbnVsbCA/IF9lbGVtZW50JHByb3BzJGRpc2FibCA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHNlbGVjdENoaWxkcmVuLnB1c2goZ3JvdXApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gbm9kZTtcbiAgICBjb25zdCBvcHRpb24gPSB7XG4gICAgICB2YWx1ZTogZWxlbWVudC5wcm9wcy52YWx1ZSxcbiAgICAgIGxhYmVsOiBlbGVtZW50LnByb3BzLmxhYmVsIHx8IGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICBkaXNhYmxlZDogKF9lbGVtZW50JHByb3BzJGRpc2FibDIgPSBlbGVtZW50LnByb3BzLmRpc2FibGVkKSAhPSBudWxsID8gX2VsZW1lbnQkcHJvcHMkZGlzYWJsMiA6IGZhbHNlXG4gICAgfTtcbiAgICBzZWxlY3RDaGlsZHJlbi5wdXNoKG9wdGlvbik7XG4gIH0pO1xuICByZXR1cm4gc2VsZWN0Q2hpbGRyZW4gIT0gbnVsbCA/IHNlbGVjdENoaWxkcmVuIDogW107XG59XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbk9wdGlvbkdyb3Vwcyhncm91cGVkT3B0aW9ucywgaXNHcm91cERpc2FibGVkID0gZmFsc2UpIHtcbiAgbGV0IGZsYXRPcHRpb25zID0gW107XG4gIGdyb3VwZWRPcHRpb25zLmZvckVhY2gob3B0aW9uT3JHcm91cCA9PiB7XG4gICAgaWYgKGlzT3B0aW9uR3JvdXAob3B0aW9uT3JHcm91cCkpIHtcbiAgICAgIGZsYXRPcHRpb25zID0gZmxhdE9wdGlvbnMuY29uY2F0KGZsYXR0ZW5PcHRpb25Hcm91cHMob3B0aW9uT3JHcm91cC5vcHRpb25zLCBvcHRpb25Pckdyb3VwLmRpc2FibGVkKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsYXRPcHRpb25zLnB1c2goX2V4dGVuZHMoe30sIG9wdGlvbk9yR3JvdXAsIHtcbiAgICAgICAgZGlzYWJsZWQ6IGlzR3JvdXBEaXNhYmxlZCB8fCBvcHRpb25Pckdyb3VwLmRpc2FibGVkXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXRPcHRpb25zO1xufSIsImV4cG9ydCBmdW5jdGlvbiBpc09wdGlvbkdyb3VwKGNoaWxkKSB7XG4gIHJldHVybiAhIWNoaWxkLm9wdGlvbnM7XG59IiwiY29uc3QgZGVmYXVsdE9wdGlvblN0cmluZ2lmaWVyID0gb3B0aW9uID0+IHtcbiAgY29uc3Qge1xuICAgIGxhYmVsLFxuICAgIHZhbHVlXG4gIH0gPSBvcHRpb247XG4gIGlmICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gRmFsbGJhY2sgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gIHJldHVybiBTdHJpbmcob3B0aW9uKTtcbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0T3B0aW9uU3RyaW5naWZpZXI7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZU1lc3NhZ2VCdXMgZnJvbSAnLi4vdXRpbHMvdXNlTWVzc2FnZUJ1cyc7XG5jb25zdCBTRUxFQ1RJT05fQ0hBTkdFX1RPUElDID0gJ3NlbGVjdDpjaGFuZ2Utc2VsZWN0aW9uJztcbmNvbnN0IEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMgPSAnc2VsZWN0OmNoYW5nZS1oaWdobGlnaHQnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBUaGlzIGhvb2sgaXMgdXNlZCB0byBub3RpZnkgYW55IGludGVyZXN0ZWQgY29tcG9uZW50cyBhYm91dCBjaGFuZ2VzIGluIHRoZSBTZWxlY3QncyBzZWxlY3Rpb24gYW5kIGhpZ2hsaWdodC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU2VsZWN0Q2hhbmdlTm90aWZpZXJzKCkge1xuICBjb25zdCBtZXNzYWdlQnVzID0gdXNlTWVzc2FnZUJ1cygpO1xuICBjb25zdCBub3RpZnlTZWxlY3Rpb25DaGFuZ2VkID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3VmFsdWUgPT4ge1xuICAgIG1lc3NhZ2VCdXMucHVibGlzaChTRUxFQ1RJT05fQ0hBTkdFX1RPUElDLCBuZXdWYWx1ZSk7XG4gIH0sIFttZXNzYWdlQnVzXSk7XG4gIGNvbnN0IG5vdGlmeUhpZ2hsaWdodENoYW5nZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgbWVzc2FnZUJ1cy5wdWJsaXNoKEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMsIG5ld1ZhbHVlKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgY29uc3QgcmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soaGFuZGxlciA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2VCdXMuc3Vic2NyaWJlKFNFTEVDVElPTl9DSEFOR0VfVE9QSUMsIGhhbmRsZXIpO1xuICB9LCBbbWVzc2FnZUJ1c10pO1xuICBjb25zdCByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjayhoYW5kbGVyID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZUJ1cy5zdWJzY3JpYmUoSElHSExJR0hUX0NIQU5HRV9UT1BJQywgaGFuZGxlcik7XG4gIH0sIFttZXNzYWdlQnVzXSk7XG4gIHJldHVybiB7XG4gICAgbm90aWZ5U2VsZWN0aW9uQ2hhbmdlZCxcbiAgICBub3RpZnlIaWdobGlnaHRDaGFuZ2VkLFxuICAgIHJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXJcbiAgfTtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4uL2NsYXNzTmFtZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3ZnSWNvbicsIHNsb3QpO1xufVxuY29uc3Qgc3ZnSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdmdJY29uJywgWydyb290JywgJ2NvbG9ySW5oZXJpdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVhzJywgJ2ZvbnRTaXplU20nLCAnZm9udFNpemVNZCcsICdmb250U2l6ZUxnJywgJ2ZvbnRTaXplWGwnLCAnZm9udFNpemVYbDInLCAnZm9udFNpemVYbDMnLCAnZm9udFNpemVYbDQnLCAnZm9udFNpemVYbDUnLCAnZm9udFNpemVYbDYnXSk7XG5leHBvcnQgZGVmYXVsdCBzdmdJY29uQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCB7IGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N2Z0ljb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZm9udFNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZm9udFNpemUgJiYgYGZvbnRTaXplJHtjYXBpdGFsaXplKGZvbnRTaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5jb25zdCBTdmdJY29uUm9vdCA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnSm95U3ZnSWNvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cyRwbGFpbiwgX3RoZW1lJHZhcmlhbnRzJHBsYWluMjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmluc3RhbmNlRm9udFNpemUgJiYgb3duZXJTdGF0ZS5pbnN0YW5jZUZvbnRTaXplICE9PSAnaW5oZXJpdCcgJiYge1xuICAgICctLUljb24tZm9udFNpemUnOiB0aGVtZS52YXJzLmZvbnRTaXplW293bmVyU3RhdGUuaW5zdGFuY2VGb250U2l6ZV1cbiAgfSwge1xuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICBtYXJnaW46ICd2YXIoLS1JY29uLW1hcmdpbiknLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDBcbiAgfSwgb3duZXJTdGF0ZS5mb250U2l6ZSAmJiBvd25lclN0YXRlLmZvbnRTaXplICE9PSAnaW5oZXJpdCcgJiYge1xuICAgIGZvbnRTaXplOiBgdmFyKC0tSWNvbi1mb250U2l6ZSwgJHt0aGVtZS5mb250U2l6ZVtvd25lclN0YXRlLmZvbnRTaXplXX0pYFxuICB9LCB7XG4gICAgY29sb3I6ICd2YXIoLS1JY29uLWNvbG9yKSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdjb250ZXh0JyAmJiB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0gJiYge1xuICAgIGNvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ucGxhaW5Db2xvclxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnY29udGV4dCcgJiYge1xuICAgIGNvbG9yOiAoX3RoZW1lJHZhcmlhbnRzJHBsYWluID0gdGhlbWUudmFyaWFudHMucGxhaW4pID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHZhcmlhbnRzJHBsYWluMiA9IF90aGVtZSR2YXJpYW50cyRwbGFpbltvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50cyRwbGFpbjIuY29sb3JcbiAgfSk7XG59KTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0F2YXRhcl0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1hdmF0YXIvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtTdmdJY29uIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvc3ZnLWljb24vKVxuICovXG5jb25zdCBTdmdJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3ZnSWNvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnSm95U3ZnSWNvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAnaW5oZXJpdCcsXG4gICAgICBjb21wb25lbnQgPSAnc3ZnJyxcbiAgICAgIGZvbnRTaXplID0gJ3hsJyxcbiAgICAgIGh0bWxDb2xvcixcbiAgICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgICB0aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSAnMCAwIDI0IDI0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvbnRTaXplLFxuICAgIGluc3RhbmNlRm9udFNpemU6IGluUHJvcHMuZm9udFNpemUsXG4gICAgaW5oZXJpdFZpZXdCb3gsXG4gICAgdmlld0JveFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBbU2xvdFJvb3QsIHJvb3RQcm9wc10gPSB1c2VTbG90KCdyb290Jywge1xuICAgIHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGVsZW1lbnRUeXBlOiBTdmdJY29uUm9vdCxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgIGNvbXBvbmVudFxuICAgIH0pLFxuICAgIG93bmVyU3RhdGUsXG4gICAgYWRkaXRpb25hbFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgICAgZm9jdXNhYmxlOiBmYWxzZVxuICAgIH0sIHRpdGxlQWNjZXNzICYmIHtcbiAgICAgIHJvbGU6ICdpbWcnXG4gICAgfSwgIXRpdGxlQWNjZXNzICYmIHtcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICB9LCAhaW5oZXJpdFZpZXdCb3ggJiYge1xuICAgICAgdmlld0JveFxuICAgIH0pXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovX2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aXRsZUFjY2Vzc1xuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYGh0bWxDb2xvcmAgcHJvcCB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnaW5oZXJpdCcsICduZXV0cmFsJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAxcmVtLCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ3hsJ1xuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGcnLCAnbWQnLCAnc20nLCAneGwnLCAneGwyJywgJ3hsMycsICd4bDQnLCAneGw1JywgJ3hsNicsICd4bDcnLCAneHMnLCAneHMyJywgJ3hzMyddKSxcbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcm9vdCBub2RlIHdpbGwgaW5oZXJpdCB0aGUgY3VzdG9tIGBjb21wb25lbnRgJ3Mgdmlld0JveCBhbmQgdGhlIGB2aWV3Qm94YFxuICAgKiBwcm9wIHdpbGwgYmUgaWdub3JlZC5cbiAgICogVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gcmVmZXJlbmNlIGEgY3VzdG9tIGBjb21wb25lbnRgIGFuZCBoYXZlIGBTdmdJY29uYCBwYXNzIHRoYXRcbiAgICogYGNvbXBvbmVudGAncyB2aWV3Qm94IHRvIHRoZSByb290IG5vZGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmhlcml0Vmlld0JveDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wLlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHJlZGVmaW5lIHdoYXQgdGhlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdW5pdHMgbWVhbiBpbnNpZGUgYW4gU1ZHIGVsZW1lbnQuXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgU1ZHIGVsZW1lbnQgaXMgNTAwICh3aWR0aCkgYnkgMjAwIChoZWlnaHQpLFxuICAgKiBhbmQgeW91IHBhc3Mgdmlld0JveD1cIjAgMCA1MCAyMFwiLFxuICAgKiB0aGlzIG1lYW5zIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGluc2lkZSB0aGUgU1ZHIHdpbGwgZ28gZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyICgwLDApXG4gICAqIHRvIGJvdHRvbSByaWdodCAoNTAsMjApIGFuZCBlYWNoIHVuaXQgd2lsbCBiZSB3b3J0aCAxMHB4LlxuICAgKiBAZGVmYXVsdCAnMCAwIDI0IDI0J1xuICAgKi9cbiAgdmlld0JveDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN2Z0ljb247IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwibTEyIDUuODMgMi40NiAyLjQ2Yy4zOS4zOSAxLjAyLjM5IDEuNDEgMCAuMzktLjM5LjM5LTEuMDIgMC0xLjQxTDEyLjcgMy43YS45OTU5Ljk5NTkgMCAwIDAtMS40MSAwTDguMTIgNi44OGMtLjM5LjM5LS4zOSAxLjAyIDAgMS40MS4zOS4zOSAxLjAyLjM5IDEuNDEgMEwxMiA1Ljgzem0wIDEyLjM0LTIuNDYtMi40NmEuOTk1OS45OTU5IDAgMCAwLTEuNDEgMGMtLjM5LjM5LS4zOSAxLjAyIDAgMS40MWwzLjE3IDMuMThjLjM5LjM5IDEuMDIuMzkgMS40MSAwbDMuMTctMy4xN2MuMzktLjM5LjM5LTEuMDIgMC0xLjQxYS45OTU5Ljk5NTkgMCAwIDAtMS40MSAwTDEyIDE4LjE3elwiXG59KSwgJ1VuZm9sZCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vU3ZnSWNvbic7XG5cbi8qKlxuICogUHJpdmF0ZSBtb2R1bGUgcmVzZXJ2ZWQgZm9yIEBtdWkgcGFja2FnZXMuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgY29tcG9uZW50XG4gIGZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN2Z0ljb24sIF9leHRlbmRzKHtcbiAgICAgIFwiZGF0YS10ZXN0aWRcIjogYCR7ZGlzcGxheU5hbWV9SWNvbmAsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogcGF0aFxuICAgIH0pKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIE5lZWQgdG8gc2V0IGBkaXNwbGF5TmFtZWAgb24gdGhlIGlubmVyIGNvbXBvbmVudCBmb3IgUmVhY3QubWVtby5cbiAgICAvLyBSZWFjdCBwcmlvciB0byAxNi4xNCBpZ25vcmVzIGBkaXNwbGF5TmFtZWAgb24gdGhlIHdyYXBwZXIuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYCR7ZGlzcGxheU5hbWV9SWNvbmA7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGNvbXBvbmVudFxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcblxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGNvbXBvbmVudFxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oIC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENvbXBvbmVudCkpO1xufSIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNlbGVjdCcsIFsncm9vdCcsICdidXR0b24nLCAnaW5kaWNhdG9yJywgJ3N0YXJ0RGVjb3JhdG9yJywgJ2VuZERlY29yYXRvcicsICdwb3BwZXInLCAnbGlzdGJveCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCcsICdzaXplU20nLCAnc2l6ZU1kJywgJ3NpemVMZycsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnZXhwYW5kZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBzZWxlY3RDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX1VuZm9sZDtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGVmYXVsdExpc3Rib3hPcGVuXCIsIFwiZGlzYWJsZWRcIiwgXCJnZXRTZXJpYWxpemVkVmFsdWVcIiwgXCJwbGFjZWhvbGRlclwiLCBcImxpc3Rib3hJZFwiLCBcImxpc3Rib3hPcGVuXCIsIFwib25DaGFuZ2VcIiwgXCJvbkxpc3Rib3hPcGVuQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcInJlbmRlclZhbHVlXCIsIFwidmFsdWVcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiLCBcImNvbG9yXCIsIFwic3RhcnREZWNvcmF0b3JcIiwgXCJlbmREZWNvcmF0b3JcIiwgXCJpbmRpY2F0b3JcIiwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiLCBcImlkXCIsIFwibmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBQb3BwZXJVbnN0eWxlZCBmcm9tICdAbXVpL2Jhc2UvUG9wcGVyVW5zdHlsZWQnO1xuaW1wb3J0IHsgU2VsZWN0VW5zdHlsZWRDb250ZXh0LCBmbGF0dGVuT3B0aW9uR3JvdXBzLCBnZXRPcHRpb25zRnJvbUNoaWxkcmVuIH0gZnJvbSAnQG11aS9iYXNlL1NlbGVjdFVuc3R5bGVkJztcbmltcG9ydCB1c2VTZWxlY3QgZnJvbSAnQG11aS9iYXNlL3VzZVNlbGVjdCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IFN0eWxlZExpc3QgfSBmcm9tICcuLi9MaXN0L0xpc3QnO1xuaW1wb3J0IExpc3RQcm92aWRlciwgeyBzY29wZWRWYXJpYWJsZXMgfSBmcm9tICcuLi9MaXN0L0xpc3RQcm92aWRlcic7XG5pbXBvcnQgVW5mb2xkIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9VbmZvbGQnO1xuaW1wb3J0IHsgc3R5bGVkLCB1c2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCBDb2xvckludmVyc2lvbiwgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCBzZWxlY3RDbGFzc2VzLCB7IGdldFNlbGVjdFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZGVmYXVsdFJlbmRlclNpbmdsZVZhbHVlKHNlbGVjdGVkT3B0aW9uKSB7XG4gIHZhciBfc2VsZWN0ZWRPcHRpb24kbGFiZWw7XG4gIHJldHVybiAoX3NlbGVjdGVkT3B0aW9uJGxhYmVsID0gc2VsZWN0ZWRPcHRpb24gPT0gbnVsbCA/IHZvaWQgMCA6IHNlbGVjdGVkT3B0aW9uLmxhYmVsKSAhPSBudWxsID8gX3NlbGVjdGVkT3B0aW9uJGxhYmVsIDogJyc7XG59XG5mdW5jdGlvbiBkZWZhdWx0Rm9ybVZhbHVlUHJvdmlkZXIoc2VsZWN0ZWRPcHRpb24pIHtcbiAgaWYgKChzZWxlY3RlZE9wdGlvbiA9PSBudWxsID8gdm9pZCAwIDogc2VsZWN0ZWRPcHRpb24udmFsdWUpID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBzZWxlY3RlZE9wdGlvbi52YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHNlbGVjdGVkT3B0aW9uLnZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBzZWxlY3RlZE9wdGlvbi52YWx1ZTtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xufVxuY29uc3QgZGVmYXVsdE1vZGlmaWVycyA9IFt7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBvcHRpb25zOiB7XG4gICAgb2Zmc2V0OiBbMCwgNF1cbiAgfVxufSwge1xuICAvLyBwb3BwZXIgd2lsbCBoYXZlIHRoZSBzYW1lIHdpZHRoIGFzIHJvb3QgZWxlbWVudCB3aGVuIG9wZW5cbiAgbmFtZTogJ2VxdWFsV2lkdGgnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddLFxuICBmbjogKHtcbiAgICBzdGF0ZVxuICB9KSA9PiB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlci53aWR0aCA9IGAke3N0YXRlLnJlY3RzLnJlZmVyZW5jZS53aWR0aH1weGA7XG4gIH1cbn1dO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgb3BlblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnLCBvcGVuICYmICdleHBhbmRlZCcsIHZhcmlhbnQgJiYgYHZhcmlhbnQke2NhcGl0YWxpemUodmFyaWFudCl9YCwgY29sb3IgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGJ1dHRvbjogWydidXR0b24nXSxcbiAgICBzdGFydERlY29yYXRvcjogWydzdGFydERlY29yYXRvciddLFxuICAgIGVuZERlY29yYXRvcjogWydlbmREZWNvcmF0b3InXSxcbiAgICBpbmRpY2F0b3I6IFsnaW5kaWNhdG9yJywgb3BlbiAmJiAnZXhwYW5kZWQnXSxcbiAgICBsaXN0Ym94OiBbJ2xpc3Rib3gnLCBvcGVuICYmICdleHBhbmRlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzLCB7fSk7XG59O1xuY29uc3QgU2VsZWN0Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnSm95U2VsZWN0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcmlhbnRzLCBfdGhlbWUkdmFycyRwYWxldHRlLCBfdGhlbWUkdmFyaWFudHMyLCBfdGhlbWUkdmFyaWFudHMzO1xuICBjb25zdCB2YXJpYW50U3R5bGUgPSAoX3RoZW1lJHZhcmlhbnRzID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fWBdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzW293bmVyU3RhdGUuY29sb3JdO1xuICByZXR1cm4gW19leHRlbmRzKHtcbiAgICAnLS1TZWxlY3QtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMuc20sXG4gICAgJy0tU2VsZWN0LWdhcCc6ICcwLjVyZW0nLFxuICAgICctLVNlbGVjdC1wbGFjZWhvbGRlck9wYWNpdHknOiAwLjUsXG4gICAgJy0tU2VsZWN0LWZvY3VzZWRUaGlja25lc3MnOiB0aGVtZS52YXJzLmZvY3VzLnRoaWNrbmVzc1xuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnY29udGV4dCcgPyB7XG4gICAgJy0tU2VsZWN0LWZvY3VzZWRIaWdobGlnaHQnOiB0aGVtZS52YXJzLnBhbGV0dGUuZm9jdXNWaXNpYmxlXG4gIH0gOiB7XG4gICAgJy0tU2VsZWN0LWZvY3VzZWRIaWdobGlnaHQnOiAoX3RoZW1lJHZhcnMkcGFsZXR0ZSA9IHRoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yID09PSAnbmV1dHJhbCcgPyAncHJpbWFyeScgOiBvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJzJHBhbGV0dGVbNTAwXVxuICB9LCB7XG4gICAgJy0tU2VsZWN0LWluZGljYXRvckNvbG9yJzogdmFyaWFudFN0eWxlICE9IG51bGwgJiYgdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvciA/IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmNvbG9yIDogdGhlbWUudmFycy5wYWxldHRlLnRleHQudGVydGlhcnlcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc20nICYmIHtcbiAgICAnLS1TZWxlY3QtbWluSGVpZ2h0JzogJzJyZW0nLFxuICAgICctLVNlbGVjdC1wYWRkaW5nSW5saW5lJzogJzAuNXJlbScsXG4gICAgJy0tU2VsZWN0LWRlY29yYXRvckNoaWxkSGVpZ2h0JzogJ21pbigxLjVyZW0sIHZhcigtLVNlbGVjdC1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjI1cmVtJ1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdtZCcgJiYge1xuICAgICctLVNlbGVjdC1taW5IZWlnaHQnOiAnMi41cmVtJyxcbiAgICAnLS1TZWxlY3QtcGFkZGluZ0lubGluZSc6ICcwLjc1cmVtJyxcbiAgICAnLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRIZWlnaHQnOiAnbWluKDJyZW0sIHZhcigtLVNlbGVjdC1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjVyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tU2VsZWN0LW1pbkhlaWdodCc6ICczcmVtJyxcbiAgICAnLS1TZWxlY3QtcGFkZGluZ0lubGluZSc6ICcxcmVtJyxcbiAgICAnLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRIZWlnaHQnOiAnbWluKDIuMzc1cmVtLCB2YXIoLS1TZWxlY3QtbWluSGVpZ2h0KSknLFxuICAgICctLUljb24tZm9udFNpemUnOiAnMS43NXJlbSdcbiAgfSwge1xuICAgIC8vIHZhcmlhYmxlcyBmb3IgY29udHJvbGxpbmcgY2hpbGQgY29tcG9uZW50c1xuICAgICctLVNlbGVjdC1kZWNvcmF0b3JDaGlsZE9mZnNldCc6ICdtaW4oY2FsYyh2YXIoLS1TZWxlY3QtcGFkZGluZ0lubGluZSkgLSAodmFyKC0tU2VsZWN0LW1pbkhlaWdodCkgLSAyICogdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAtIHZhcigtLVNlbGVjdC1kZWNvcmF0b3JDaGlsZEhlaWdodCkpIC8gMiksIHZhcigtLVNlbGVjdC1wYWRkaW5nSW5saW5lKSknLFxuICAgICctLV9TZWxlY3QtcGFkZGluZ0Jsb2NrJzogJ21heCgodmFyKC0tU2VsZWN0LW1pbkhlaWdodCkgLSAyICogdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAtIHZhcigtLVNlbGVjdC1kZWNvcmF0b3JDaGlsZEhlaWdodCkpIC8gMiwgMHB4KScsXG4gICAgJy0tU2VsZWN0LWRlY29yYXRvckNoaWxkUmFkaXVzJzogJ21heCh2YXIoLS1TZWxlY3QtcmFkaXVzKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkgLSB2YXIoLS1fU2VsZWN0LXBhZGRpbmdCbG9jayksIG1pbih2YXIoLS1fU2VsZWN0LXBhZGRpbmdCbG9jaykgKyB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpLCB2YXIoLS1TZWxlY3QtcmFkaXVzKSAvIDIpKScsXG4gICAgJy0tQnV0dG9uLW1pbkhlaWdodCc6ICd2YXIoLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRIZWlnaHQpJyxcbiAgICAnLS1JY29uQnV0dG9uLXNpemUnOiAndmFyKC0tU2VsZWN0LWRlY29yYXRvckNoaWxkSGVpZ2h0KScsXG4gICAgJy0tQnV0dG9uLXJhZGl1cyc6ICd2YXIoLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRSYWRpdXMpJyxcbiAgICAnLS1JY29uQnV0dG9uLXJhZGl1cyc6ICd2YXIoLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRSYWRpdXMpJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBtaW5IZWlnaHQ6ICd2YXIoLS1TZWxlY3QtbWluSGVpZ2h0KScsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGJvcmRlclJhZGl1czogJ3ZhcigtLVNlbGVjdC1yYWRpdXMpJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICB9LCAhdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvciAmJiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSAmJiB7XG4gICAgcGFkZGluZ0Jsb2NrOiB7XG4gICAgICBzbTogMixcbiAgICAgIG1kOiAzLFxuICAgICAgbGc6IDRcbiAgICB9W293bmVyU3RhdGUuc2l6ZV0gLy8gdGhlIHBhZGRpbmctYmxvY2sgYWN0IGFzIGEgbWluaW11bSBzcGFjaW5nIGJldHdlZW4gY29udGVudCBhbmQgcm9vdCBlbGVtZW50XG4gIH0sIHtcbiAgICBwYWRkaW5nSW5saW5lOiBgdmFyKC0tU2VsZWN0LXBhZGRpbmdJbmxpbmUpYCxcbiAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keSxcbiAgICBmb250U2l6ZTogdGhlbWUudmFycy5mb250U2l6ZS5tZFxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnNtXG4gIH0sIHtcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIG1hcmdpbjogJ2NhbGModmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAqIC0xKScgLy8gZm9yIG91dGxpbmVkIHZhcmlhbnRcbiAgICB9LFxuXG4gICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgICctLVNlbGVjdC1pbmRpY2F0b3JDb2xvcic6IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmNvbG9yLFxuICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgdmFyKC0tU2VsZWN0LWZvY3VzZWRUaGlja25lc3MpIHZhcigtLVNlbGVjdC1mb2N1c2VkSGlnaGxpZ2h0KWBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgICctLVNlbGVjdC1pbmRpY2F0b3JDb2xvcic6ICdpbmhlcml0J1xuICAgIH1cbiAgfSksIF9leHRlbmRzKHt9LCB2YXJpYW50U3R5bGUsIHtcbiAgICAnJjpob3Zlcic6IChfdGhlbWUkdmFyaWFudHMyID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fUhvdmVyYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHMyW293bmVyU3RhdGUuY29sb3JdLFxuICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuZGlzYWJsZWR9YF06IChfdGhlbWUkdmFyaWFudHMzID0gdGhlbWUudmFyaWFudHNbYCR7b3duZXJTdGF0ZS52YXJpYW50fURpc2FibGVkYF0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFyaWFudHMzW293bmVyU3RhdGUuY29sb3JdXG4gIH0pXTtcbn0pO1xuY29uc3QgU2VsZWN0QnV0dG9uID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdKb3lTZWxlY3QnLFxuICBzbG90OiAnQnV0dG9uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYnV0dG9uXG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIHJlc2V0IHVzZXItYWdlbnQgYnV0dG9uIHN0eWxlXG4gIGJvcmRlcjogMCxcbiAgb3V0bGluZTogMCxcbiAgYmFja2dyb3VuZDogJ25vbmUnLFxuICBwYWRkaW5nOiAwLFxuICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICBjb2xvcjogJ2luaGVyaXQnLFxuICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgLy8gbWFrZSBjaGlsZHJlbiBob3Jpem9udGFsbHkgYWxpZ25lZFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBmbGV4OiAxLFxuICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgb3ZlcmZsb3c6ICdhdXRvJ1xufSwgKG93bmVyU3RhdGUudmFsdWUgPT09IG51bGwgfHwgb3duZXJTdGF0ZS52YWx1ZSA9PT0gdW5kZWZpbmVkKSAmJiB7XG4gIG9wYWNpdHk6ICd2YXIoLS1TZWxlY3QtcGxhY2Vob2xkZXJPcGFjaXR5KSdcbn0pKTtcbmNvbnN0IFNlbGVjdExpc3Rib3ggPSBzdHlsZWQoU3R5bGVkTGlzdCwge1xuICBuYW1lOiAnSm95U2VsZWN0JyxcbiAgc2xvdDogJ0xpc3Rib3gnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5saXN0Ym94XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcmlhbnRzNDtcbiAgY29uc3QgdmFyaWFudFN0eWxlID0gb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2NvbnRleHQnID8gdW5kZWZpbmVkIDogKF90aGVtZSR2YXJpYW50czQgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzNFtvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAnLS1mb2N1cy1vdXRsaW5lLW9mZnNldCc6IGBjYWxjKCR7dGhlbWUudmFycy5mb2N1cy50aGlja25lc3N9ICogLTEpYCxcbiAgICAvLyB0byBwcmV2ZW50IHRoZSBmb2N1cyBvdXRsaW5lIGZyb20gYmVpbmcgY3V0IGJ5IG92ZXJmbG93XG4gICAgJy0tTGlzdC1yYWRpdXMnOiB0aGVtZS52YXJzLnJhZGl1cy5zbSxcbiAgICAnLS1MaXN0SXRlbS1zdGlja3lCYWNrZ3JvdW5kJzogKHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvcikgfHwgKHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmQpIHx8IHRoZW1lLnZhcnMucGFsZXR0ZS5iYWNrZ3JvdW5kLnBvcHVwLFxuICAgICctLUxpc3RJdGVtLXN0aWNreVRvcCc6ICdjYWxjKHZhcigtLUxpc3QtcGFkZGluZywgdmFyKC0tTGlzdERpdmlkZXItZ2FwKSkgKiAtMSknXG4gIH0sIHNjb3BlZFZhcmlhYmxlcywge1xuICAgIG1pbldpZHRoOiAnbWF4LWNvbnRlbnQnLFxuICAgIC8vIHByZXZlbnQgb3B0aW9ucyBmcm9tIHNocmlua2luZyBpZiBzb21lIG9mIHRoZW0gaXMgd2lkZXIgdGhhbiB0aGUgU2VsZWN0J3Mgcm9vdC5cbiAgICBtYXhIZWlnaHQ6ICc0NHZoJyxcbiAgICAvLyB0aGUgYmVzdCB2YWx1ZSBmcm9tIHdoYXQgSSB0cmllZCBzbyBmYXIgd2hpY2ggZG9lcyBub3QgY2F1c2Ugc2NyZWVuIGZsaWNrZXIgd2hlbiBsaXN0Ym94IGlzIG9wZW4uXG4gICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICBvdXRsaW5lOiAwLFxuICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93Lm1kLFxuICAgIHpJbmRleDogdGhlbWUudmFycy56SW5kZXgucG9wdXBcbiAgfSwgISh2YXJpYW50U3R5bGUgIT0gbnVsbCAmJiB2YXJpYW50U3R5bGUuYmFja2dyb3VuZENvbG9yKSAmJiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5wb3B1cFxuICB9KTtcbn0pO1xuY29uc3QgU2VsZWN0U3RhcnREZWNvcmF0b3IgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdKb3lTZWxlY3QnLFxuICBzbG90OiAnU3RhcnREZWNvcmF0b3InLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zdGFydERlY29yYXRvclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgJy0tQnV0dG9uLW1hcmdpbic6ICcwIDAgMCBjYWxjKHZhcigtLVNlbGVjdC1kZWNvcmF0b3JDaGlsZE9mZnNldCkgKiAtMSknLFxuICAnLS1JY29uQnV0dG9uLW1hcmdpbic6ICcwIDAgMCBjYWxjKHZhcigtLVNlbGVjdC1kZWNvcmF0b3JDaGlsZE9mZnNldCkgKiAtMSknLFxuICAnLS1JY29uLW1hcmdpbic6ICcwIDAgMCBjYWxjKHZhcigtLVNlbGVjdC1wYWRkaW5nSW5saW5lKSAvIC00KScsXG4gIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIG1hcmdpbklubGluZUVuZDogJ3ZhcigtLVNlbGVjdC1nYXApJyxcbiAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnRlcnRpYXJ5XG59LCBvd25lclN0YXRlLmZvY3VzVmlzaWJsZSAmJiB7XG4gIGNvbG9yOiAndmFyKC0tU2VsZWN0LWZvY3VzZWRIaWdobGlnaHQpJ1xufSkpO1xuY29uc3QgU2VsZWN0RW5kRGVjb3JhdG9yID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnSm95U2VsZWN0JyxcbiAgc2xvdDogJ0VuZERlY29yYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmVuZERlY29yYXRvclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50czU7XG4gIGNvbnN0IHZhcmlhbnRTdHlsZSA9IChfdGhlbWUkdmFyaWFudHM1ID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czVbb3duZXJTdGF0ZS5jb2xvcl07XG4gIHJldHVybiB7XG4gICAgJy0tQnV0dG9uLW1hcmdpbic6ICcwIGNhbGModmFyKC0tU2VsZWN0LWRlY29yYXRvckNoaWxkT2Zmc2V0KSAqIC0xKSAwIDAnLFxuICAgICctLUljb25CdXR0b24tbWFyZ2luJzogJzAgY2FsYyh2YXIoLS1TZWxlY3QtZGVjb3JhdG9yQ2hpbGRPZmZzZXQpICogLTEpIDAgMCcsXG4gICAgJy0tSWNvbi1tYXJnaW4nOiAnMCBjYWxjKHZhcigtLVNlbGVjdC1wYWRkaW5nSW5saW5lKSAvIC00KSAwIDAnLFxuICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogJ3ZhcigtLVNlbGVjdC1nYXApJyxcbiAgICBjb2xvcjogdmFyaWFudFN0eWxlID09IG51bGwgPyB2b2lkIDAgOiB2YXJpYW50U3R5bGUuY29sb3JcbiAgfTtcbn0pO1xuY29uc3QgU2VsZWN0SW5kaWNhdG9yID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnSm95U2VsZWN0JyxcbiAgc2xvdDogJ0luZGljYXRvcidcbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAnLS1JY29uLWZvbnRTaXplJzogJzEuMTI1cmVtJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWQnICYmIHtcbiAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjI1cmVtJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGcnICYmIHtcbiAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjVyZW0nXG59LCB7XG4gIGNvbG9yOiAndmFyKC0tU2VsZWN0LWluZGljYXRvckNvbG9yKScsXG4gIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIG1hcmdpbklubGluZVN0YXJ0OiAndmFyKC0tU2VsZWN0LWdhcCknLFxuICBtYXJnaW5JbmxpbmVFbmQ6ICdjYWxjKHZhcigtLVNlbGVjdC1wYWRkaW5nSW5saW5lKSAvIC00KScsXG4gIFtgLiR7c2VsZWN0Q2xhc3Nlcy5lbmREZWNvcmF0b3J9ICsgJmBdOiB7XG4gICAgbWFyZ2luSW5saW5lU3RhcnQ6ICdjYWxjKHZhcigtLVNlbGVjdC1nYXApIC8gMiknXG4gIH1cbn0pKTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1NlbGVjdF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1zZWxlY3QvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtTZWxlY3QgQVBJXShodHRwczovL211aS5jb20vam95LXVpL2FwaS9zZWxlY3QvKVxuICovXG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmMiwgX2luUHJvcHMkZGlzYWJsZWQsIF9yZWYzLCBfaW5Qcm9wcyRzaXplLCBfZm9ybUNvbnRyb2wkY29sb3I7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveVNlbGVjdCdcbiAgfSk7XG4gIGNvbnN0IF9yZWYgPSBwcm9wcyxcbiAgICB7XG4gICAgICBhY3Rpb24sXG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlZmF1bHRMaXN0Ym94T3BlbiA9IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkRXh0ZXJuYWxQcm9wLFxuICAgICAgZ2V0U2VyaWFsaXplZFZhbHVlID0gZGVmYXVsdEZvcm1WYWx1ZVByb3ZpZGVyLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBsaXN0Ym94SWQsXG4gICAgICBsaXN0Ym94T3BlbjogbGlzdGJveE9wZW5Qcm9wLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkxpc3Rib3hPcGVuQ2hhbmdlLFxuICAgICAgb25DbG9zZSxcbiAgICAgIHJlbmRlclZhbHVlOiByZW5kZXJWYWx1ZVByb3AsXG4gICAgICB2YWx1ZTogdmFsdWVQcm9wLFxuICAgICAgc2l6ZTogc2l6ZVByb3AgPSAnbWQnLFxuICAgICAgdmFyaWFudCA9ICdvdXRsaW5lZCcsXG4gICAgICBjb2xvcjogY29sb3JQcm9wID0gJ25ldXRyYWwnLFxuICAgICAgc3RhcnREZWNvcmF0b3IsXG4gICAgICBlbmREZWNvcmF0b3IsXG4gICAgICBpbmRpY2F0b3IgPSBfVW5mb2xkIHx8IChfVW5mb2xkID0gLyojX19QVVJFX18qL19qc3goVW5mb2xkLCB7fSkpLFxuICAgICAgLy8gcHJvcHMgdG8gZm9yd2FyZCB0byB0aGUgYnV0dG9uIChhbGwgaGFuZGxlcnMgc2hvdWxkIGdvIHRocm91Z2ggc2xvdFByb3BzLmJ1dHRvbilcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnksXG4gICAgICBpZCxcbiAgICAgIG5hbWVcbiAgICB9ID0gX3JlZixcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGZvcm1Db250cm9sID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IHJlZ2lzdGVyRWZmZWN0ID0gZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAocmVnaXN0ZXJFZmZlY3QpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFtyZWdpc3RlckVmZmVjdF0pO1xuICB9XG4gIGNvbnN0IGRpc2FibGVkUHJvcCA9IChfcmVmMiA9IChfaW5Qcm9wcyRkaXNhYmxlZCA9IGluUHJvcHMuZGlzYWJsZWQpICE9IG51bGwgPyBfaW5Qcm9wcyRkaXNhYmxlZCA6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5kaXNhYmxlZCkgIT0gbnVsbCA/IF9yZWYyIDogZGlzYWJsZWRFeHRlcm5hbFByb3A7XG4gIGNvbnN0IHNpemUgPSAoX3JlZjMgPSAoX2luUHJvcHMkc2l6ZSA9IGluUHJvcHMuc2l6ZSkgIT0gbnVsbCA/IF9pblByb3BzJHNpemUgOiBmb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogZm9ybUNvbnRyb2wuc2l6ZSkgIT0gbnVsbCA/IF9yZWYzIDogc2l6ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoaW5Qcm9wcy5jb2xvciwgZm9ybUNvbnRyb2wgIT0gbnVsbCAmJiBmb3JtQ29udHJvbC5lcnJvciA/ICdkYW5nZXInIDogKF9mb3JtQ29udHJvbCRjb2xvciA9IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5jb2xvcikgIT0gbnVsbCA/IF9mb3JtQ29udHJvbCRjb2xvciA6IGNvbG9yUHJvcCk7XG4gIGNvbnN0IHJlbmRlclZhbHVlID0gcmVuZGVyVmFsdWVQcm9wICE9IG51bGwgPyByZW5kZXJWYWx1ZVByb3AgOiBkZWZhdWx0UmVuZGVyU2luZ2xlVmFsdWU7XG4gIGNvbnN0IFthbmNob3JFbCwgc2V0QW5jaG9yRWxdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtncm91cGVkT3B0aW9ucywgc2V0R3JvdXBlZE9wdGlvbnNdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICBjb25zdCBvcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiBmbGF0dGVuT3B0aW9uR3JvdXBzKGdyb3VwZWRPcHRpb25zKSwgW2dyb3VwZWRPcHRpb25zXSk7XG4gIGNvbnN0IFtsaXN0Ym94T3Blbiwgc2V0TGlzdGJveE9wZW5dID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogbGlzdGJveE9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRMaXN0Ym94T3BlbixcbiAgICBuYW1lOiAnU2VsZWN0VW5zdHlsZWQnLFxuICAgIHN0YXRlOiAnbGlzdGJveE9wZW4nXG4gIH0pO1xuICBjb25zdCByb290UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGxpc3Rib3hSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCByb290UmVmKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sICgpID0+ICh7XG4gICAgZm9jdXNWaXNpYmxlOiAoKSA9PiB7XG4gICAgICB2YXIgX2J1dHRvblJlZiRjdXJyZW50O1xuICAgICAgKF9idXR0b25SZWYkY3VycmVudCA9IGJ1dHRvblJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2J1dHRvblJlZiRjdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEdyb3VwZWRPcHRpb25zKGdldE9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pKTtcbiAgfSwgW2NoaWxkcmVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0QW5jaG9yRWwocm9vdFJlZi5jdXJyZW50KTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzXSk7XG4gIGNvbnN0IGhhbmRsZU9wZW5DaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhpc09wZW4gPT4ge1xuICAgIHNldExpc3Rib3hPcGVuKGlzT3Blbik7XG4gICAgb25MaXN0Ym94T3BlbkNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25MaXN0Ym94T3BlbkNoYW5nZShpc09wZW4pO1xuICAgIGlmICghaXNPcGVuKSB7XG4gICAgICBvbkNsb3NlID09IG51bGwgPyB2b2lkIDAgOiBvbkNsb3NlKCk7XG4gICAgfVxuICB9LCBbb25DbG9zZSwgb25MaXN0Ym94T3BlbkNoYW5nZSwgc2V0TGlzdGJveE9wZW5dKTtcbiAgY29uc3Qge1xuICAgIGJ1dHRvbkFjdGl2ZSxcbiAgICBidXR0b25Gb2N1c1Zpc2libGUsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGdldEJ1dHRvblByb3BzLFxuICAgIGdldExpc3Rib3hQcm9wcyxcbiAgICB2YWx1ZVxuICB9ID0gdXNlU2VsZWN0KHtcbiAgICBidXR0b25SZWYsXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFByb3AsXG4gICAgbGlzdGJveElkLFxuICAgIG11bHRpcGxlOiBmYWxzZSxcbiAgICBvbkNoYW5nZSxcbiAgICBvbk9wZW5DaGFuZ2U6IGhhbmRsZU9wZW5DaGFuZ2UsXG4gICAgb3BlbjogbGlzdGJveE9wZW4sXG4gICAgb3B0aW9ucyxcbiAgICB2YWx1ZTogdmFsdWVQcm9wXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWN0aXZlOiBidXR0b25BY3RpdmUsXG4gICAgZGVmYXVsdExpc3Rib3hPcGVuLFxuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZTogYnV0dG9uRm9jdXNWaXNpYmxlLFxuICAgIG9wZW46IGxpc3Rib3hPcGVuLFxuICAgIHJlbmRlclZhbHVlLFxuICAgIHZhbHVlLFxuICAgIHNpemUsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHZhciBfb3B0aW9ucyRmaW5kO1xuICAgIHJldHVybiAoX29wdGlvbnMkZmluZCA9IG9wdGlvbnMuZmluZChvID0+IHZhbHVlID09PSBvLnZhbHVlKSkgIT0gbnVsbCA/IF9vcHRpb25zJGZpbmQgOiBudWxsO1xuICB9LCBbb3B0aW9ucywgdmFsdWVdKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBlbGVtZW50VHlwZTogU2VsZWN0Um9vdCxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBnZXRTbG90UHJvcHM6IGhhbmRsZXJzID0+ICh7XG4gICAgICBvbk1vdXNlRG93bjogZXZlbnQgPT4ge1xuICAgICAgICB2YXIgX2J1dHRvblJlZiRjdXJyZW50MiwgX2hhbmRsZXJzJG9uTW91c2VEb3duO1xuICAgICAgICBpZiAoIWxpc3Rib3hPcGVuICYmICEoKF9idXR0b25SZWYkY3VycmVudDIgPSBidXR0b25SZWYuY3VycmVudCkgIT0gbnVsbCAmJiBfYnV0dG9uUmVmJGN1cnJlbnQyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgLy8gc2hvdyB0aGUgcG9wdXAgaWYgdXNlciBjbGljayBvdXRzaWRlIG9mIHRoZSBidXR0b24gZWxlbWVudC5cbiAgICAgICAgICAvLyB0aGUgY2xvc2UgYWN0aW9uIGlzIGFscmVhZHkgaGFuZGxlZCBieSBibHVyIGV2ZW50LlxuICAgICAgICAgIGhhbmRsZU9wZW5DaGFuZ2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9oYW5kbGVycyRvbk1vdXNlRG93biA9IGhhbmRsZXJzLm9uTW91c2VEb3duKSA9PSBudWxsID8gdm9pZCAwIDogX2hhbmRsZXJzJG9uTW91c2VEb3duLmNhbGwoaGFuZGxlcnMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEJ1dHRvbiwgYnV0dG9uUHJvcHNdID0gdXNlU2xvdCgnYnV0dG9uJywge1xuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnkgIT0gbnVsbCA/IGFyaWFEZXNjcmliZWRieSA6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbFsnYXJpYS1kZXNjcmliZWRieSddLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnkgIT0gbnVsbCA/IGFyaWFMYWJlbGxlZGJ5IDogZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLmxhYmVsSWQsXG4gICAgICBpZDogaWQgIT0gbnVsbCA/IGlkIDogZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLmh0bWxGb3IsXG4gICAgICBuYW1lXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYnV0dG9uLFxuICAgIGVsZW1lbnRUeXBlOiBTZWxlY3RCdXR0b24sXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRCdXR0b25Qcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdExpc3Rib3gsIGxpc3Rib3hQcm9wc10gPSB1c2VTbG90KCdsaXN0Ym94Jywge1xuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmOiBsaXN0Ym94UmVmLFxuICAgICAgYW5jaG9yRWwsXG4gICAgICBkaXNhYmxlUG9ydGFsOiB0cnVlLFxuICAgICAgb3BlbjogbGlzdGJveE9wZW4sXG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGlzdGJveCxcbiAgICBlbGVtZW50VHlwZTogUG9wcGVyVW5zdHlsZWQsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRMaXN0Ym94UHJvcHMsXG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHtcbiAgICAgIG5lc3Rpbmc6IGZhbHNlLFxuICAgICAgcm93OiBmYWxzZSxcbiAgICAgIHdyYXA6IGZhbHNlXG4gICAgfSksXG4gICAgZ2V0U2xvdE93bmVyU3RhdGU6IG1lcmdlZFByb3BzID0+ICh7XG4gICAgICBzaXplOiBtZXJnZWRQcm9wcy5zaXplIHx8IHNpemUsXG4gICAgICB2YXJpYW50OiBtZXJnZWRQcm9wcy52YXJpYW50IHx8ICdvdXRsaW5lZCcsXG4gICAgICBjb2xvcjogbWVyZ2VkUHJvcHMuY29sb3IgfHwgJ25ldXRyYWwnLFxuICAgICAgZGlzYWJsZUNvbG9ySW52ZXJzaW9uOiAhbWVyZ2VkUHJvcHMuZGlzYWJsZVBvcnRhbFxuICAgIH0pLFxuICAgIGludGVybmFsRm9yd2FyZGVkUHJvcHM6IHtcbiAgICAgIGNvbXBvbmVudDogU2VsZWN0TGlzdGJveFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IFtTbG90U3RhcnREZWNvcmF0b3IsIHN0YXJ0RGVjb3JhdG9yUHJvcHNdID0gdXNlU2xvdCgnc3RhcnREZWNvcmF0b3InLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN0YXJ0RGVjb3JhdG9yLFxuICAgIGVsZW1lbnRUeXBlOiBTZWxlY3RTdGFydERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEVuZERlY29yYXRvciwgZW5kRGVjb3JhdG9yUHJvcHNdID0gdXNlU2xvdCgnZW5kRGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmREZWNvcmF0b3IsXG4gICAgZWxlbWVudFR5cGU6IFNlbGVjdEVuZERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEluZGljYXRvciwgaW5kaWNhdG9yUHJvcHNdID0gdXNlU2xvdCgnaW5kaWNhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbmRpY2F0b3IsXG4gICAgZWxlbWVudFR5cGU6IFNlbGVjdEluZGljYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgY29sb3JcbiAgfSksIFtjb2xvciwgY29udGV4dFZhbHVlXSk7XG4gIGNvbnN0IG1vZGlmaWVycyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gWy4uLmRlZmF1bHRNb2RpZmllcnMsIC4uLihsaXN0Ym94UHJvcHMubW9kaWZpZXJzIHx8IFtdKV0sIFtsaXN0Ym94UHJvcHMubW9kaWZpZXJzXSk7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuICBpZiAoYW5jaG9yRWwpIHtcbiAgICB2YXIgX2xpc3Rib3hQcm9wcyRvd25lclN0O1xuICAgIHJlc3VsdCA9IC8qI19fUFVSRV9fKi9fanN4KFNsb3RMaXN0Ym94LCBfZXh0ZW5kcyh7fSwgbGlzdGJveFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3gobGlzdGJveFByb3BzLmNsYXNzTmFtZSwgKChfbGlzdGJveFByb3BzJG93bmVyU3QgPSBsaXN0Ym94UHJvcHMub3duZXJTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9saXN0Ym94UHJvcHMkb3duZXJTdC5jb2xvcikgPT09ICdjb250ZXh0JyAmJiBzZWxlY3RDbGFzc2VzLmNvbG9yQ29udGV4dCksXG4gICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RVbnN0eWxlZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChMaXN0UHJvdmlkZXIsIHtcbiAgICAgICAgICBuZXN0ZWQ6IHRydWUsXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pKTtcbiAgICBpZiAoIWxpc3Rib3hQcm9wcy5kaXNhYmxlUG9ydGFsKSB7XG4gICAgICByZXN1bHQgPVxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gRm9yIHBvcnRhbCBwb3B1cCwgdGhlIGNoaWxkcmVuIHNob3VsZCBub3QgaW5oZXJpdCBjb2xvciBpbnZlcnNpb24gZnJvbSB0aGUgdXBwZXIgcGFyZW50LlxuICAgICAgX2pzeChDb2xvckludmVyc2lvbi5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBjaGlsZHJlbjogcmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3hzKFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogW3N0YXJ0RGVjb3JhdG9yICYmIC8qI19fUFVSRV9fKi9fanN4KFNsb3RTdGFydERlY29yYXRvciwgX2V4dGVuZHMoe30sIHN0YXJ0RGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgICAgY2hpbGRyZW46IHN0YXJ0RGVjb3JhdG9yXG4gICAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFNsb3RCdXR0b24sIF9leHRlbmRzKHt9LCBidXR0b25Qcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogc2VsZWN0ZWRPcHRpb24gPyByZW5kZXJWYWx1ZShzZWxlY3RlZE9wdGlvbikgOiBwbGFjZWhvbGRlclxuICAgICAgfSkpLCBlbmREZWNvcmF0b3IgJiYgLyojX19QVVJFX18qL19qc3goU2xvdEVuZERlY29yYXRvciwgX2V4dGVuZHMoe30sIGVuZERlY29yYXRvclByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiBlbmREZWNvcmF0b3JcbiAgICAgIH0pKSwgaW5kaWNhdG9yICYmIC8qI19fUFVSRV9fKi9fanN4KFNsb3RJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBpbmRpY2F0b3JQcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogaW5kaWNhdG9yXG4gICAgICB9KSldXG4gICAgfSkpLCByZXN1bHQsIG5hbWUgJiYgLyojX19QVVJFX18qL19qc3goXCJpbnB1dFwiLCB7XG4gICAgICB0eXBlOiBcImhpZGRlblwiLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiBnZXRTZXJpYWxpemVkVmFsdWUoc2VsZWN0ZWRPcHRpb24pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy4gSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBmb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KVxuICB9KV0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IHdpbGwgYmUgaW5pdGlhbGx5IG9wZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0TGlzdGJveE9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc2VsZWN0ZWQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUcmFpbGluZyBhZG9ybm1lbnQgZm9yIHRoZSBzZWxlY3QuXG4gICAqL1xuICBlbmREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBjb252ZXJ0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAqIFVzZWQgdG8gc2V0IGEgdmFsdWUgb2YgYSBoaWRkZW4gaW5wdXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZWxlY3QsXG4gICAqIHNvIHRoYXQgdGhlIHNlbGVjdGVkIHZhbHVlIGNhbiBiZSBwb3N0ZWQgd2l0aCBhIGZvcm0uXG4gICAqL1xuICBnZXRTZXJpYWxpemVkVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIGluZGljYXRvcigqKSBmb3IgdGhlIHNlbGVjdC5cbiAgICogICAgX19fX19fX19fX19fX19fX1xuICAgKiAgIFsgdmFsdWUgICAgICAgICogXVxuICAgKiAgICDigL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL7igL5cbiAgICovXG4gIGluZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBgaWRgIGF0dHJpYnV0ZSBvZiB0aGUgbGlzdGJveCBlbGVtZW50LlxuICAgKiBBbHNvIHVzZWQgdG8gZGVyaXZlIHRoZSBgaWRgIGF0dHJpYnV0ZXMgb2Ygb3B0aW9ucy5cbiAgICovXG4gIGxpc3Rib3hJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSBvcGVuIHN0YXRlIG9mIHRoZSBzZWxlY3QncyBsaXN0Ym94LlxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIGxpc3Rib3hPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGVsZW1lbnQuIEZvciBleGFtcGxlIHVzZWQgYnkgdGhlIHNlcnZlciB0byBpZGVudGlmeSB0aGUgZmllbGRzIGluIGZvcm0gc3VibWl0cy5cbiAgICogSWYgdGhlIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBjb21wb25lbnQgd2lsbCByZW5kZXIgYSBoaWRkZW4gaW5wdXQgZWxlbWVudCB0aGF0IGNhbiBiZSBzdWJtaXR0ZWQgdG8gYSBzZXJ2ZXIuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgd2hlbiBmb2N1cyBsZWF2ZXMgdGhlIG1lbnUgYW5kIHRoZSBtZW51IHNob3VsZCBjbG9zZS5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIGxpc3Rib3hPcGVuKS5cbiAgICovXG4gIG9uTGlzdGJveE9wZW5DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGV4dCB0byBzaG93IHdoZW4gdGhlcmUgaXMgbm8gc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IGN1c3RvbWl6ZXMgdGhlIHJlbmRlcmluZyBvZiB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCcsICdsZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTGVhZGluZyBhZG9ybm1lbnQgZm9yIHRoZSBzZWxlY3QuXG4gICAqL1xuICBzdGFydERlY29yYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFNldCB0byBgbnVsbGAgdG8gZGVzZWxlY3QgYWxsIG9wdGlvbnMuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAncGxhaW4nLCAnc29mdCcsICdzb2xpZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUJ1dHRvbiBmcm9tICcuLi91c2VCdXR0b24nO1xuaW1wb3J0IHVzZUxpc3Rib3gsIHsgZGVmYXVsdExpc3Rib3hSZWR1Y2VyLCBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL3VzZUxpc3Rib3gnO1xuaW1wb3J0IGRlZmF1bHRPcHRpb25TdHJpbmdpZmllciBmcm9tICcuLi9TZWxlY3RVbnN0eWxlZC9kZWZhdWx0T3B0aW9uU3RyaW5naWZpZXInO1xuaW1wb3J0IHVzZVNlbGVjdENoYW5nZU5vdGlmaWVycyBmcm9tICcuL3VzZVNlbGVjdENoYW5nZU5vdGlmaWVycyc7XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1Vuc3R5bGVkIFNlbGVjdF0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvcmVhY3Qtc2VsZWN0LyNob29rKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VTZWxlY3QgQVBJXShodHRwczovL211aS5jb20vYmFzZS9hcGkvdXNlLXNlbGVjdC8pXG4gKi9cbmZ1bmN0aW9uIHVzZVNlbGVjdChwcm9wcykge1xuICBjb25zdCB7XG4gICAgYnV0dG9uUmVmOiBidXR0b25SZWZQcm9wLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlUHJvcCxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGxpc3Rib3hJZDogbGlzdGJveElkUHJvcCxcbiAgICBsaXN0Ym94UmVmOiBsaXN0Ym94UmVmUHJvcCxcbiAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uSGlnaGxpZ2h0Q2hhbmdlLFxuICAgIG9uT3BlbkNoYW5nZSxcbiAgICBvcGVuID0gZmFsc2UsXG4gICAgb3B0aW9ucyxcbiAgICBvcHRpb25TdHJpbmdpZmllciA9IGRlZmF1bHRPcHRpb25TdHJpbmdpZmllcixcbiAgICB2YWx1ZTogdmFsdWVQcm9wXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVCdXR0b25SZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZlByb3AsIGJ1dHRvblJlZik7XG4gIGNvbnN0IGxpc3Rib3hSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGxpc3Rib3hJZCA9IHVzZUlkKGxpc3Rib3hJZFByb3ApO1xuICBsZXQgZGVmYXVsdFZhbHVlO1xuICBpZiAodmFsdWVQcm9wID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFZhbHVlUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFZhbHVlID0gW107XG4gIH0gZWxzZSBpZiAoZGVmYXVsdFZhbHVlUHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVmYXVsdFZhbHVlID0gbXVsdGlwbGUgPyBkZWZhdWx0VmFsdWVQcm9wIDogW2RlZmF1bHRWYWx1ZVByb3BdO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHZhbHVlUHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGUgPyB2YWx1ZVByb3AgOiBbdmFsdWVQcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW3ZhbHVlUHJvcCwgbXVsdGlwbGVdKTtcbiAgY29uc3Qgb3B0aW9uc01hcCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBvcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgIG1hcC5zZXQob3B0aW9uLnZhbHVlLCBvcHRpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXA7XG4gIH0sIFtvcHRpb25zXSk7XG5cbiAgLy8gcHJldmVudHMgY2xvc2luZyB0aGUgbGlzdGJveCBvbiBrZXlVcCByaWdodCBhZnRlciBvcGVuaW5nIGl0XG4gIGNvbnN0IGlnbm9yZUVudGVyS2V5VXAgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIC8vIHByZXZlbnRzIHJlb3BlbmluZyB0aGUgbGlzdGJveCB3aGVuIGJ1dHRvbiBpcyBjbGlja2VkXG4gIC8vIChsaXN0Ym94IGNsb3NlcyBvbiBsb3N0IGZvY3VzLCB0aGVuIGltbWVkaWF0ZWx5IHJlb3BlbnMgb24gY2xpY2spXG4gIGNvbnN0IGlnbm9yZUNsaWNrID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAvLyBFbnN1cmUgdGhlIGxpc3Rib3ggaXMgZm9jdXNlZCBhZnRlciBvcGVuaW5nXG4gIGNvbnN0IFtsaXN0Ym94Rm9jdXNSZXF1ZXN0ZWQsIHJlcXVlc3RMaXN0Ym94Rm9jdXNdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBmb2N1c0xpc3Rib3hJZlJlcXVlc3RlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobGlzdGJveEZvY3VzUmVxdWVzdGVkICYmIGxpc3Rib3hSZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICBsaXN0Ym94UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIHJlcXVlc3RMaXN0Ym94Rm9jdXMoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2xpc3Rib3hGb2N1c1JlcXVlc3RlZF0pO1xuICBjb25zdCBoYW5kbGVMaXN0Ym94UmVmID0gdXNlRm9ya1JlZihsaXN0Ym94UmVmUHJvcCwgbGlzdGJveFJlZiwgZm9jdXNMaXN0Ym94SWZSZXF1ZXN0ZWQpO1xuICBjb25zdCB7XG4gICAgbm90aWZ5U2VsZWN0aW9uQ2hhbmdlZCxcbiAgICBub3RpZnlIaWdobGlnaHRDaGFuZ2VkLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXJcbiAgfSA9IHVzZVNlbGVjdENoYW5nZU5vdGlmaWVycygpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZvY3VzTGlzdGJveElmUmVxdWVzdGVkKCk7XG4gIH0sIFtmb2N1c0xpc3Rib3hJZlJlcXVlc3RlZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RMaXN0Ym94Rm9jdXMob3Blbik7XG4gIH0sIFtvcGVuXSk7XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZU1vdXNlRG93biA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbk1vdXM7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uTW91cyA9IG90aGVySGFuZGxlcnMub25Nb3VzZURvd24pID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbk1vdXMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIG9wZW4pIHtcbiAgICAgIGlnbm9yZUNsaWNrLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlQnV0dG9uQ2xpY2sgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25DbGljO1xuICAgIG90aGVySGFuZGxlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IChfb3RoZXJIYW5kbGVycyRvbkNsaWMgPSBvdGhlckhhbmRsZXJzLm9uQ2xpY2spID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkNsaWMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmICFpZ25vcmVDbGljay5jdXJyZW50KSB7XG4gICAgICBvbk9wZW5DaGFuZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IG9uT3BlbkNoYW5nZSghb3Blbik7XG4gICAgfVxuICAgIGlnbm9yZUNsaWNrLmN1cnJlbnQgPSBmYWxzZTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlQnV0dG9uS2V5RG93biA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbktleUQ7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uS2V5RCA9IG90aGVySGFuZGxlcnMub25LZXlEb3duKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25LZXlELmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgIGlnbm9yZUVudGVyS2V5VXAuY3VycmVudCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgb25PcGVuQ2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbk9wZW5DaGFuZ2UodHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVMaXN0Ym94S2V5VXAgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlVO1xuICAgIG90aGVySGFuZGxlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IChfb3RoZXJIYW5kbGVycyRvbktleVUgPSBvdGhlckhhbmRsZXJzLm9uS2V5VXApID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbktleVUuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2xvc2luZ0tleXMgPSBtdWx0aXBsZSA/IFsnRXNjYXBlJ10gOiBbJ0VzY2FwZScsICdFbnRlcicsICcgJ107XG4gICAgaWYgKG9wZW4gJiYgIWlnbm9yZUVudGVyS2V5VXAuY3VycmVudCAmJiBjbG9zaW5nS2V5cy5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICB2YXIgX2J1dHRvblJlZiRjdXJyZW50O1xuICAgICAgYnV0dG9uUmVmID09IG51bGwgPyB2b2lkIDAgOiAoX2J1dHRvblJlZiRjdXJyZW50ID0gYnV0dG9uUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYnV0dG9uUmVmJGN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgaWdub3JlRW50ZXJLZXlVcC5jdXJyZW50ID0gZmFsc2U7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUxpc3Rib3hJdGVtQ2xpY2sgPSBSZWFjdC51c2VDYWxsYmFjayhvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25DbGljMjtcbiAgICBvdGhlckhhbmRsZXJzID09IG51bGwgPyB2b2lkIDAgOiAoX290aGVySGFuZGxlcnMkb25DbGljMiA9IG90aGVySGFuZGxlcnMub25DbGljaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQ2xpYzIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFtdWx0aXBsZSkge1xuICAgICAgb25PcGVuQ2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbk9wZW5DaGFuZ2UoZmFsc2UpO1xuICAgIH1cbiAgfSwgW211bHRpcGxlLCBvbk9wZW5DaGFuZ2VdKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlTGlzdGJveEJsdXIgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25CbHVyO1xuICAgIG90aGVySGFuZGxlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IChfb3RoZXJIYW5kbGVycyRvbkJsdXIgPSBvdGhlckhhbmRsZXJzLm9uQmx1cikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQmx1ci5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIG9uT3BlbkNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25PcGVuQ2hhbmdlKGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGxpc3Rib3hSZWR1Y2VyID0gUmVhY3QudXNlQ2FsbGJhY2soKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGRlZmF1bHRMaXN0Ym94UmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlIEFjdGlvblR5cGVzLmtleURvd246XG4gICAgICAgIC8vIGNoYW5nZSBzZWxlY3Rpb24gd2hlbiBsaXN0Ym94IGlzIGNsb3NlZFxuICAgICAgICBpZiAoKGFjdGlvbi5ldmVudC5rZXkgPT09ICdBcnJvd1VwJyB8fCBhY3Rpb24uZXZlbnQua2V5ID09PSAnQXJyb3dEb3duJykgJiYgIW9wZW4gJiYgIW11bHRpcGxlKSB7XG4gICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXM6IG5ld1N0YXRlLmhpZ2hsaWdodGVkVmFsdWUgIT0gbnVsbCA/IFtuZXdTdGF0ZS5oaWdobGlnaHRlZFZhbHVlXSA6IFtdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFjdGlvblR5cGVzLmJsdXI6XG4gICAgICBjYXNlIEFjdGlvblR5cGVzLnNldFZhbHVlOlxuICAgICAgY2FzZSBBY3Rpb25UeXBlcy5vcHRpb25zQ2hhbmdlOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZTogbmV3U3RhdGUuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoID4gMCA/IG5ld1N0YXRlLnNlbGVjdGVkVmFsdWVzWzBdIDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9LCBbb3BlbiwgbXVsdGlwbGVdKTtcbiAgY29uc3Qge1xuICAgIGdldFJvb3RQcm9wczogZ2V0QnV0dG9uUm9vdFByb3BzLFxuICAgIGFjdGl2ZTogYnV0dG9uQWN0aXZlLFxuICAgIGZvY3VzVmlzaWJsZTogYnV0dG9uRm9jdXNWaXNpYmxlXG4gIH0gPSB1c2VCdXR0b24oe1xuICAgIGRpc2FibGVkLFxuICAgIHJlZjogaGFuZGxlQnV0dG9uUmVmXG4gIH0pO1xuICBjb25zdCBvcHRpb25WYWx1ZXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IG9wdGlvbnMubWFwKG8gPT4gby52YWx1ZSksIFtvcHRpb25zXSk7XG4gIGNvbnN0IGlzT3B0aW9uRGlzYWJsZWQgPSBSZWFjdC51c2VDYWxsYmFjayh2YWx1ZVRvQ2hlY2sgPT4ge1xuICAgIHZhciBfb3B0aW9uJGRpc2FibGVkO1xuICAgIGNvbnN0IG9wdGlvbiA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlVG9DaGVjayk7XG4gICAgcmV0dXJuIChfb3B0aW9uJGRpc2FibGVkID0gb3B0aW9uID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb24uZGlzYWJsZWQpICE9IG51bGwgPyBfb3B0aW9uJGRpc2FibGVkIDogZmFsc2U7XG4gIH0sIFtvcHRpb25zTWFwXSk7XG4gIGNvbnN0IHN0cmluZ2lmeU9wdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKHZhbHVlVG9DaGVjayA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uc01hcC5nZXQodmFsdWVUb0NoZWNrKTtcbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9uU3RyaW5naWZpZXIob3B0aW9uKTtcbiAgfSwgW29wdGlvbnNNYXAsIG9wdGlvblN0cmluZ2lmaWVyXSk7XG4gIGNvbnN0IHVzZUxpc3Rib3hQYXJhbWV0ZXJzID0ge1xuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBpZDogbGlzdGJveElkLFxuICAgIGlzT3B0aW9uRGlzYWJsZWQsXG4gICAgbGlzdGJveFJlZjogaGFuZGxlTGlzdGJveFJlZixcbiAgICBvbkNoYW5nZTogKGUsIG5ld1ZhbHVlcykgPT4ge1xuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIG9uQ2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbkNoYW5nZShlLCBuZXdWYWx1ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9uZXdWYWx1ZXMkO1xuICAgICAgICBvbkNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25DaGFuZ2UoZSwgKF9uZXdWYWx1ZXMkID0gbmV3VmFsdWVzWzBdKSAhPSBudWxsID8gX25ld1ZhbHVlcyQgOiBudWxsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uSGlnaGxpZ2h0Q2hhbmdlOiAoZSwgbmV3VmFsdWUpID0+IHtcbiAgICAgIG9uSGlnaGxpZ2h0Q2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbkhpZ2hsaWdodENoYW5nZShlLCBuZXdWYWx1ZSAhPSBudWxsID8gbmV3VmFsdWUgOiBudWxsKTtcbiAgICB9LFxuICAgIG9wdGlvbnM6IG9wdGlvblZhbHVlcyxcbiAgICBvcHRpb25TdHJpbmdpZmllcjogc3RyaW5naWZ5T3B0aW9uLFxuICAgIHNlbGVjdGlvbkxpbWl0OiBtdWx0aXBsZSA/IG51bGwgOiAxLFxuICAgIHN0YXRlUmVkdWNlcjogbGlzdGJveFJlZHVjZXIsXG4gICAgdmFsdWVcbiAgfTtcbiAgY29uc3Qge1xuICAgIGdldFJvb3RQcm9wczogZ2V0TGlzdGJveFJvb3RQcm9wcyxcbiAgICBnZXRPcHRpb25Qcm9wczogZ2V0TGlzdGJveE9wdGlvblByb3BzLFxuICAgIGdldE9wdGlvblN0YXRlLFxuICAgIGhpZ2hsaWdodGVkT3B0aW9uLFxuICAgIHNlbGVjdGVkT3B0aW9uXG4gIH0gPSB1c2VMaXN0Ym94KHVzZUxpc3Rib3hQYXJhbWV0ZXJzKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBub3RpZnlTZWxlY3Rpb25DaGFuZ2VkKHNlbGVjdGVkT3B0aW9uKTtcbiAgfSwgW3NlbGVjdGVkT3B0aW9uLCBub3RpZnlTZWxlY3Rpb25DaGFuZ2VkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZChoaWdobGlnaHRlZE9wdGlvbik7XG4gIH0sIFtoaWdobGlnaHRlZE9wdGlvbiwgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZF0pO1xuICBjb25zdCBnZXRCdXR0b25Qcm9wcyA9IChvdGhlckhhbmRsZXJzID0ge30pID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGdldEJ1dHRvblJvb3RQcm9wcyhfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywge1xuICAgICAgb25DbGljazogY3JlYXRlSGFuZGxlQnV0dG9uQ2xpY2sob3RoZXJIYW5kbGVycyksXG4gICAgICBvbk1vdXNlRG93bjogY3JlYXRlSGFuZGxlTW91c2VEb3duKG90aGVySGFuZGxlcnMpLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVCdXR0b25LZXlEb3duKG90aGVySGFuZGxlcnMpXG4gICAgfSkpLCB7XG4gICAgICByb2xlOiAnY29tYm9ib3gnLFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBvcGVuLFxuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiAnbGlzdGJveCcsXG4gICAgICAnYXJpYS1jb250cm9scyc6IGxpc3Rib3hJZFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRMaXN0Ym94UHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiBnZXRMaXN0Ym94Um9vdFByb3BzKF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCB7XG4gICAgb25CbHVyOiBjcmVhdGVIYW5kbGVMaXN0Ym94Qmx1cihvdGhlckhhbmRsZXJzKSxcbiAgICBvbktleVVwOiBjcmVhdGVIYW5kbGVMaXN0Ym94S2V5VXAob3RoZXJIYW5kbGVycylcbiAgfSkpO1xuICBjb25zdCBnZXRPcHRpb25Qcm9wcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChvcHRpb25WYWx1ZSwgb3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGdldExpc3Rib3hPcHRpb25Qcm9wcyhvcHRpb25WYWx1ZSwgX2V4dGVuZHMoe30sIG90aGVySGFuZGxlcnMsIHtcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZUxpc3Rib3hJdGVtQ2xpY2sob3RoZXJIYW5kbGVycylcbiAgICB9KSk7XG4gIH0sIFtnZXRMaXN0Ym94T3B0aW9uUHJvcHMsIGNyZWF0ZUhhbmRsZUxpc3Rib3hJdGVtQ2xpY2tdKTtcbiAgUmVhY3QudXNlRGVidWdWYWx1ZSh7XG4gICAgc2VsZWN0ZWRPcHRpb24sXG4gICAgaGlnaGxpZ2h0ZWRPcHRpb24sXG4gICAgb3BlblxuICB9KTtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGxpc3Rib3hSZWYsXG4gICAgZ2V0T3B0aW9uUHJvcHMsXG4gICAgZ2V0T3B0aW9uU3RhdGUsXG4gICAgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyLFxuICAgIHJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlclxuICB9KSwgW2dldE9wdGlvblByb3BzLCBnZXRPcHRpb25TdGF0ZSwgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyLCByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXJdKTtcbiAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1dHRvbkFjdGl2ZSxcbiAgICAgIGJ1dHRvbkZvY3VzVmlzaWJsZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZ2V0QnV0dG9uUHJvcHMsXG4gICAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgICBjb250ZXh0VmFsdWUsXG4gICAgICBvcGVuLFxuICAgICAgdmFsdWU6IHNlbGVjdGVkT3B0aW9uLFxuICAgICAgaGlnaGxpZ2h0ZWRPcHRpb25cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgYnV0dG9uQWN0aXZlLFxuICAgIGJ1dHRvbkZvY3VzVmlzaWJsZSxcbiAgICBkaXNhYmxlZCxcbiAgICBnZXRCdXR0b25Qcm9wcyxcbiAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIG9wZW4sXG4gICAgdmFsdWU6IHNlbGVjdGVkT3B0aW9uLmxlbmd0aCA+IDAgPyBzZWxlY3RlZE9wdGlvblswXSA6IG51bGwsXG4gICAgaGlnaGxpZ2h0ZWRPcHRpb25cbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVNlbGVjdDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4uL2NsYXNzTmFtZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2hlZXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNoZWV0Jywgc2xvdCk7XG59XG5jb25zdCBzaGVldENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTaGVldCcsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0JywgJ3ZhcmlhbnRTb2xpZCddKTtcbmV4cG9ydCBkZWZhdWx0IHNoZWV0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJ2YXJpYW50XCIsIFwiaW52ZXJ0ZWRDb2xvcnNcIl07XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyB1c2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyByZXNvbHZlU3hWYWx1ZSB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZVV0aWxzJztcbmltcG9ydCB7IGdldFNoZWV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zaGVldENsYXNzZXMnO1xuaW1wb3J0IHsgQ29sb3JJbnZlcnNpb25Qcm92aWRlciwgdXNlQ29sb3JJbnZlcnNpb24gfSBmcm9tICcuLi9zdHlsZXMvQ29sb3JJbnZlcnNpb24nO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50ICYmIGB2YXJpYW50JHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTaGVldFV0aWxpdHlDbGFzcywge30pO1xufTtcbmV4cG9ydCBjb25zdCBTaGVldFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ0pveVNoZWV0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcmlhbnRzLCBfdGhlbWUkY29sb3JJbnZlcnNpb247XG4gIGNvbnN0IHZhcmlhbnRTdHlsZSA9IChfdGhlbWUkdmFyaWFudHMgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzW293bmVyU3RhdGUuY29sb3JdO1xuICBjb25zdCBjaGlsZFJhZGl1cyA9IHJlc29sdmVTeFZhbHVlKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0sICdib3JkZXJSYWRpdXMnKTtcbiAgY29uc3QgYmdjb2xvciA9IHJlc29sdmVTeFZhbHVlKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0sICdiZ2NvbG9yJyk7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHJlc29sdmVTeFZhbHVlKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0sICdiYWNrZ3JvdW5kQ29sb3InKTtcbiAgY29uc3QgYmFja2dyb3VuZCA9IHJlc29sdmVTeFZhbHVlKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0sICdiYWNrZ3JvdW5kJyk7XG4gIGNvbnN0IHJlc29sdmVkQmcgPSBnZXRQYXRoKHRoZW1lLCBgcGFsZXR0ZS4ke2JnY29sb3J9YCkgfHwgYmdjb2xvciB8fCBnZXRQYXRoKHRoZW1lLCBgcGFsZXR0ZS4ke2JhY2tncm91bmRDb2xvcn1gKSB8fCBiYWNrZ3JvdW5kQ29sb3IgfHwgYmFja2dyb3VuZCB8fCAodmFyaWFudFN0eWxlID09IG51bGwgPyB2b2lkIDAgOiB2YXJpYW50U3R5bGUuYmFja2dyb3VuZENvbG9yKSB8fCAodmFyaWFudFN0eWxlID09IG51bGwgPyB2b2lkIDAgOiB2YXJpYW50U3R5bGUuYmFja2dyb3VuZCkgfHwgdGhlbWUudmFycy5wYWxldHRlLmJhY2tncm91bmQuc3VyZmFjZTtcbiAgcmV0dXJuIFtfZXh0ZW5kcyh7XG4gICAgJy0tTGlzdEl0ZW0tc3RpY2t5QmFja2dyb3VuZCc6IHJlc29sdmVkQmcsXG4gICAgLy8gZm9yIHN0aWNreSBMaXN0XG4gICAgJy0tU2hlZXQtYmFja2dyb3VuZCc6IHJlc29sdmVkQmdcbiAgfSwgY2hpbGRSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiB7XG4gICAgJy0tTGlzdC1yYWRpdXMnOiBgY2FsYygke2NoaWxkUmFkaXVzfSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpYCxcbiAgICAnLS11bnN0YWJsZV9hY3Rpb25SYWRpdXMnOiBgY2FsYygke2NoaWxkUmFkaXVzfSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpYFxuICB9LCB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0pLCB2YXJpYW50U3R5bGUsIG93bmVyU3RhdGUuY29sb3IgIT09ICdjb250ZXh0JyAmJiBvd25lclN0YXRlLmludmVydGVkQ29sb3JzICYmICgoX3RoZW1lJGNvbG9ySW52ZXJzaW9uID0gdGhlbWUuY29sb3JJbnZlcnNpb25bb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb2xvckludmVyc2lvbltvd25lclN0YXRlLmNvbG9yXSldO1xufSk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtTaGVldF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1zaGVldC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1NoZWV0IEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvc2hlZXQvKVxuICovXG5jb25zdCBTaGVldCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNoZWV0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdKb3lTaGVldCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yOiBjb2xvclByb3AgPSAnbmV1dHJhbCcsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIHZhcmlhbnQgPSAncGxhaW4nLFxuICAgICAgaW52ZXJ0ZWRDb2xvcnMgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgaW52ZXJ0ZWRDb2xvcnMsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByZXN1bHQgPSAvKiNfX1BVUkVfXyovX2pzeChTaGVldFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xuICBpZiAoaW52ZXJ0ZWRDb2xvcnMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ29sb3JJbnZlcnNpb25Qcm92aWRlciwge1xuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIGNoaWxkcmVuOiByZXN1bHRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTaGVldC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdpbmZvJywgJ25ldXRyYWwnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd2l0aCBhbiBpbXBsaWNpdCBjb2xvciBwcm9wIGludmVydCB0aGVpciBjb2xvcnMgdG8gbWF0Y2ggdGhlIGNvbXBvbmVudCdzIHZhcmlhbnQgYW5kIGNvbG9yLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52ZXJ0ZWRDb2xvcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIFtnbG9iYWwgdmFyaWFudF0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9tYWluLWZlYXR1cmVzL2dsb2JhbC12YXJpYW50cy8pIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3BsYWluJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTaGVldDsiLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4vY3JlYXRlU3R5bGVkJztcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCgpO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRcIiwgXCJkaXJlY3Rpb25cIiwgXCJzcGFjaW5nXCIsIFwiZGl2aWRlclwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwidXNlRmxleEdhcFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGRlZXBtZXJnZSwgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMsIHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgc3lzdGVtU3R5bGVkIGZyb20gJy4uL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wc1N5c3RlbSBmcm9tICcuLi91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyLCByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZywgZ2V0VmFsdWUgfSBmcm9tICcuLi9zcGFjaW5nJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuLy8gd2lkZW5pbmcgVGhlbWUgdG8gYW55IHNvIHRoYXQgdGhlIGNvbnN1bWVyIGNhbiBvd24gdGhlIHRoZW1lIHN0cnVjdHVyZS5cbmNvbnN0IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQgPSBzeXN0ZW1TdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVN0YWNrJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KTtcbmZ1bmN0aW9uIHVzZVRoZW1lUHJvcHNEZWZhdWx0KHByb3BzKSB7XG4gIHJldHVybiB1c2VUaGVtZVByb3BzU3lzdGVtKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RhY2snLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgd2l0aCB0aGUgc2VwYXJhdG9yIFJlYWN0IGVsZW1lbnQgaW50ZXJzcGVyc2VkIGJldHdlZW5cbiAqIGVhY2ggUmVhY3Qgbm9kZSBvZiB0aGUgaW5wdXQgY2hpbGRyZW4uXG4gKlxuICogPiBqb2luQ2hpbGRyZW4oWzEsMiwzXSwgMClcbiAqIFsxLDAsMiwwLDNdXG4gKi9cbmZ1bmN0aW9uIGpvaW5DaGlsZHJlbihjaGlsZHJlbiwgc2VwYXJhdG9yKSB7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoQm9vbGVhbik7XG4gIHJldHVybiBjaGlsZHJlbkFycmF5LnJlZHVjZSgob3V0cHV0LCBjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBvdXRwdXQucHVzaChjaGlsZCk7XG4gICAgaWYgKGluZGV4IDwgY2hpbGRyZW5BcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBvdXRwdXQucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChzZXBhcmF0b3IsIHtcbiAgICAgICAga2V5OiBgc2VwYXJhdG9yLSR7aW5kZXh9YFxuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LCBbXSk7XG59XG5jb25zdCBnZXRTaWRlRnJvbURpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PiB7XG4gIHJldHVybiB7XG4gICAgcm93OiAnTGVmdCcsXG4gICAgJ3Jvdy1yZXZlcnNlJzogJ1JpZ2h0JyxcbiAgICBjb2x1bW46ICdUb3AnLFxuICAgICdjb2x1bW4tcmV2ZXJzZSc6ICdCb3R0b20nXG4gIH1bZGlyZWN0aW9uXTtcbn07XG5leHBvcnQgY29uc3Qgc3R5bGUgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4ge1xuICBsZXQgc3R5bGVzID0gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICB9LCBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgdGhlbWVcbiAgfSwgcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1xuICB9KSwgcHJvcFZhbHVlID0+ICh7XG4gICAgZmxleERpcmVjdGlvbjogcHJvcFZhbHVlXG4gIH0pKSk7XG4gIGlmIChvd25lclN0YXRlLnNwYWNpbmcpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gICAgY29uc3QgYmFzZSA9IE9iamVjdC5rZXlzKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcykucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3duZXJTdGF0ZS5zcGFjaW5nID09PSAnb2JqZWN0JyAmJiBvd25lclN0YXRlLnNwYWNpbmdbYnJlYWtwb2ludF0gIT0gbnVsbCB8fCB0eXBlb2Ygb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdvYmplY3QnICYmIG93bmVyU3RhdGUuZGlyZWN0aW9uW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYWNjW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IGRpcmVjdGlvblZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgY29uc3Qgc3BhY2luZ1ZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5zcGFjaW5nLFxuICAgICAgYmFzZVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZGlyZWN0aW9uVmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoZGlyZWN0aW9uVmFsdWVzKS5mb3JFYWNoKChicmVha3BvaW50LCBpbmRleCwgYnJlYWtwb2ludHMpID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uVmFsdWUgPSBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF07XG4gICAgICAgIGlmICghZGlyZWN0aW9uVmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBwcmV2aW91c0RpcmVjdGlvblZhbHVlID0gaW5kZXggPiAwID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRzW2luZGV4IC0gMV1dIDogJ2NvbHVtbic7XG4gICAgICAgICAgZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdID0gcHJldmlvdXNEaXJlY3Rpb25WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IChwcm9wVmFsdWUsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmIChvd25lclN0YXRlLnVzZUZsZXhHYXApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnJiA+IDpub3Qoc3R5bGUpICsgOm5vdChzdHlsZSknOiB7XG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgIFtgbWFyZ2luJHtnZXRTaWRlRnJvbURpcmVjdGlvbihicmVha3BvaW50ID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdIDogb3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgc3R5bGVzID0gZGVlcG1lcmdlKHN0eWxlcywgaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBzcGFjaW5nVmFsdWVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpKTtcbiAgfVxuICBzdHlsZXMgPSBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcih0aGVtZS5icmVha3BvaW50cywgc3R5bGVzKTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFjayhvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aVN0YWNrJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSB7XG4gICAgICByb290OiBbJ3Jvb3QnXVxuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBzbG90ID0+IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpLCB7fSk7XG4gIH07XG4gIGNvbnN0IFN0YWNrUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudChzdHlsZSk7XG4gIGNvbnN0IFN0YWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuICAgIGNvbnN0IHtcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICAgIGRpcmVjdGlvbiA9ICdjb2x1bW4nLFxuICAgICAgICBzcGFjaW5nID0gMCxcbiAgICAgICAgZGl2aWRlcixcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgdXNlRmxleEdhcCA9IGZhbHNlXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgdXNlRmxleEdhcFxuICAgIH07XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0YWNrUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRpdmlkZXIgPyBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIGRpdmlkZXIpIDogY2hpbGRyZW5cbiAgICB9KSk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBTdGFjaztcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdGFjayB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtTdGFja10oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9yZWFjdC1zdGFjay8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1N0YWNrIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvc3RhY2svKVxuICovXG5jb25zdCBTdGFjayA9IGNyZWF0ZVN0YWNrKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiBzdHlsZWQoJ2RpdicsIHtcbiAgICBuYW1lOiAnSm95U3RhY2snLFxuICAgIHNsb3Q6ICdSb290JyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG4gIH0pLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdKb3lTdGFjaydcbiAgfSlcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3RhY2sucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ2NvbHVtbidcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSksIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEFkZCBhbiBlbGVtZW50IGJldHdlZW4gZWFjaCBjaGlsZC5cbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiBpbW1lZGlhdGUgY2hpbGRyZW4uXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCwgd2hpY2ggYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgQ1NTIGZsZXhib3ggYGdhcGAgaXMgdXNlZCBpbnN0ZWFkIG9mIGFwcGx5aW5nIGBtYXJnaW5gIHRvIGNoaWxkcmVuLlxuICAgKlxuICAgKiBXaGlsZSBDU1MgYGdhcGAgcmVtb3ZlcyB0aGUgW2tub3duIGxpbWl0YXRpb25zXShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LXN0YWNrI2xpbWl0YXRpb25zKSxcbiAgICogaXQgaXMgbm90IGZ1bGx5IHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzLiBXZSByZWNvbW1lbmQgY2hlY2tpbmcgaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWZsZXglMjBnYXAgYmVmb3JlIHVzaW5nIHRoaXMgZmxhZy5cbiAgICpcbiAgICogVG8gZW5hYmxlIHRoaXMgZmxhZyBnbG9iYWxseSwgZm9sbG93IHRoZSBbdGhlbWUncyBkZWZhdWx0IHByb3BzXShodHRwczovL211aS5jb20vam95LXVpL2N1c3RvbWl6YXRpb24vdGhlbWVkLWNvbXBvbmVudHMvI2RlZmF1bHQtcHJvcHMpIGNvbmZpZ3VyYXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB1c2VGbGV4R2FwOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN0YWNrOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFja1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3RhY2snLCBzbG90KTtcbn1cbmNvbnN0IHN0YWNrQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN0YWNrJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNoYW5nZVwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgdW5zdGFibGVfZGVib3VuY2UgYXMgZGVib3VuY2UsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKSB8fCAwO1xufVxuY29uc3Qgc3R5bGVzID0ge1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgfHwgb2JqLm91dGVySGVpZ2h0U3R5bGUgPT09IDAgJiYgIW9iai5vdmVyZmxvdztcbn1cblxuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbVGV4dGFyZWEgQXV0b3NpemVdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqIC0gW1RleHRhcmVhIEF1dG9zaXplXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtUZXh0YXJlYUF1dG9zaXplIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL3RleHRhcmVhLWF1dG9zaXplLylcbiAqL1xuY29uc3QgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzID0gMSxcbiAgICAgIHN0eWxlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmKTtcbiAgY29uc3Qgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBvdXRlckhlaWdodFN0eWxlOiAwXG4gIH0pO1xuICBjb25zdCBnZXRVcGRhdGVkU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuXG4gICAgLy8gSWYgaW5wdXQncyB3aWR0aCBpcyBzaHJ1bmsgYW5kIGl0J3Mgbm90IHZpc2libGUsIGRvbid0IHN5bmMgaGVpZ2h0LlxuICAgIGlmIChjb21wdXRlZFN0eWxlLndpZHRoID09PSAnMHB4Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7XG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuICAgIGNvbnN0IGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGUuYm94U2l6aW5nO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ0JvdHRvbSkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCk7XG4gICAgY29uc3QgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG5cbiAgICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG4gICAgY29uc3QgaW5uZXJIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gTWVhc3VyZSBoZWlnaHQgb2YgYSB0ZXh0YXJlYSB3aXRoIGEgc2luZ2xlIHJvd1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICBjb25zdCBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgb3V0ZXIgY29udGVudFxuICAgIGxldCBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuICAgIGlmIChtaW5Sb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihtaW5Sb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cbiAgICBpZiAobWF4Um93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIobWF4Um93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChvdXRlckhlaWdodCwgc2luZ2xlUm93SGVpZ2h0KTtcblxuICAgIC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG4gICAgY29uc3Qgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIGNvbnN0IG92ZXJmbG93ID0gTWF0aC5hYnMob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCkgPD0gMTtcbiAgICByZXR1cm4ge1xuICAgICAgb3V0ZXJIZWlnaHRTdHlsZSxcbiAgICAgIG92ZXJmbG93XG4gICAgfTtcbiAgfSwgW21heFJvd3MsIG1pblJvd3MsIHByb3BzLnBsYWNlaG9sZGVyXSk7XG4gIGNvbnN0IHVwZGF0ZVN0YXRlID0gKHByZXZTdGF0ZSwgbmV3U3RhdGUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvdXRlckhlaWdodFN0eWxlLFxuICAgICAgb3ZlcmZsb3dcbiAgICB9ID0gbmV3U3RhdGU7XG4gICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgIG91dGVySGVpZ2h0U3R5bGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfTtcbiAgY29uc3Qgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGdldFVwZGF0ZWRTdGF0ZSgpO1xuICAgIGlmIChpc0VtcHR5KG5ld1N0YXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHVwZGF0ZVN0YXRlKHByZXZTdGF0ZSwgbmV3U3RhdGUpO1xuICAgIH0pO1xuICB9LCBbZ2V0VXBkYXRlZFN0YXRlXSk7XG4gIGNvbnN0IHN5bmNIZWlnaHRXaXRoRmx1c2hTeWNuID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gZ2V0VXBkYXRlZFN0YXRlKCk7XG4gICAgaWYgKGlzRW1wdHkobmV3U3RhdGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW4gUmVhY3QgMTgsIHN0YXRlIHVwZGF0ZXMgaW4gYSBSZXNpemVPYnNlcnZlcidzIGNhbGxiYWNrIGFyZSBoYXBwZW5pbmcgYWZ0ZXIgdGhlIHBhaW50IHdoaWNoIGNhdXNlcyBmbGlja2VyaW5nXG4gICAgLy8gd2hlbiBkb2luZyBzb21lIHZpc3VhbCB1cGRhdGVzIGluIGl0LiBVc2luZyBmbHVzaFN5bmMgZW5zdXJlcyB0aGF0IHRoZSBkb20gd2lsbCBiZSBwYWludGVkIGFmdGVyIHRoZSBzdGF0ZXMgdXBkYXRlcyBoYXBwZW5cbiAgICAvLyBSZWxhdGVkIGlzc3VlIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yNDMzMVxuICAgIFJlYWN0RE9NLmZsdXNoU3luYygoKSA9PiB7XG4gICAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgICByZXR1cm4gdXBkYXRlU3RhdGUocHJldlN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuXG4gICAgICAvLyBJZiB0aGUgVGV4dGFyZWFBdXRvc2l6ZSBjb21wb25lbnQgaXMgcmVwbGFjZWQgYnkgU3VzcGVuc2Ugd2l0aCBhIGZhbGxiYWNrLCB0aGUgbGFzdFxuICAgICAgLy8gUmVzaXplT2JzZXJ2ZXIncyBoYW5kbGVyIHRoYXQgcnVucyBiZWNhdXNlIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIGxheW91dCBpcyB0cnlpbmcgdG9cbiAgICAgIC8vIGFjY2VzcyBhIGRvbSBub2RlIHRoYXQgaXMgbm8gbG9uZ2VyIHRoZXJlIChhcyB0aGUgZmFsbGJhY2sgY29tcG9uZW50IGlzIGJlaW5nIHNob3duIGluc3RlYWQpLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMyNjQwXG4gICAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgICBzeW5jSGVpZ2h0V2l0aEZsdXNoU3ljbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcbiAgICBjb25zdCBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coaW5wdXQpO1xuICAgIGNvbnRhaW5lcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihoYW5kbGVSZXNpemUpO1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgaWYgKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHN5bmNIZWlnaHQoKTtcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgfSwgW3ZhbHVlXSk7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIC8vIEFwcGx5IHRoZSByb3dzIHByb3AgdG8gZ2V0IGEgXCJjb3JyZWN0XCIgZmlyc3QgU1NSIHBhaW50XG4gICAgICAsXG4gICAgICByb3dzOiBtaW5Sb3dzLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gYWxsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGUpXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlLCB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWFBdXRvc2l6ZTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4uL2NsYXNzTmFtZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dGFyZWFVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRleHRhcmVhJywgc2xvdCk7XG59XG5jb25zdCB0ZXh0YXJlYUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUZXh0YXJlYScsIFsncm9vdCcsICd0ZXh0YXJlYScsICdzdGFydERlY29yYXRvcicsICdlbmREZWNvcmF0b3InLCAnZm9ybUNvbnRyb2wnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdjb2xvclByaW1hcnknLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yRGFuZ2VyJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2NvbG9yQ29udGV4dCcsICdzaXplU20nLCAnc2l6ZU1kJywgJ3NpemVMZycsICd2YXJpYW50UGxhaW4nLCAndmFyaWFudE91dGxpbmVkJywgJ3ZhcmlhbnRTb2Z0J10pO1xuZXhwb3J0IGRlZmF1bHQgdGV4dGFyZWFDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJwcm9wc1RvRm9yd2FyZFwiLCBcInJvb3RTdGF0ZUNsYXNzZXNcIiwgXCJpbnB1dFN0YXRlQ2xhc3Nlc1wiLCBcImdldFJvb3RQcm9wc1wiLCBcImdldElucHV0UHJvcHNcIiwgXCJmb3JtQ29udHJvbFwiLCBcImZvY3VzZWRcIiwgXCJlcnJvclwiLCBcImRpc2FibGVkXCIsIFwic2l6ZVwiLCBcImNvbG9yXCIsIFwidmFyaWFudFwiLCBcInN0YXJ0RGVjb3JhdG9yXCIsIFwiZW5kRGVjb3JhdG9yXCIsIFwibWluUm93c1wiLCBcIm1heFJvd3NcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBUZXh0YXJlYUF1dG9zaXplIGZyb20gJ0BtdWkvYmFzZS9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWVQcm9wcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDb2xvckludmVyc2lvbiB9IGZyb20gJy4uL3N0eWxlcy9Db2xvckludmVyc2lvbic7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCB0ZXh0YXJlYUNsYXNzZXMsIHsgZ2V0VGV4dGFyZWFVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RleHRhcmVhQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlRm9yd2FyZGVkSW5wdXQgZnJvbSAnLi4vSW5wdXQvdXNlRm9yd2FyZGVkSW5wdXQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIHZhcmlhbnQgJiYgYHZhcmlhbnQke2NhcGl0YWxpemUodmFyaWFudCl9YCwgY29sb3IgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIHRleHRhcmVhOiBbJ3RleHRhcmVhJ10sXG4gICAgc3RhcnREZWNvcmF0b3I6IFsnc3RhcnREZWNvcmF0b3InXSxcbiAgICBlbmREZWNvcmF0b3I6IFsnZW5kRGVjb3JhdG9yJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUZXh0YXJlYVV0aWxpdHlDbGFzcywge30pO1xufTtcbmNvbnN0IFRleHRhcmVhUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnSm95VGV4dGFyZWEnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHMsIF90aGVtZSR2YXJzJHBhbGV0dGUsIF92YXJpYW50U3R5bGUkYmFja2dybywgX3RoZW1lJHZhcmlhbnRzMiwgX3RoZW1lJHZhcmlhbnRzMztcbiAgY29uc3QgdmFyaWFudFN0eWxlID0gKF90aGVtZSR2YXJpYW50cyA9IHRoZW1lLnZhcmlhbnRzW2Ake293bmVyU3RhdGUudmFyaWFudH1gXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIFtfZXh0ZW5kcyh7XG4gICAgJy0tVGV4dGFyZWEtcmFkaXVzJzogdGhlbWUudmFycy5yYWRpdXMuc20sXG4gICAgJy0tVGV4dGFyZWEtZ2FwJzogJzAuNXJlbScsXG4gICAgJy0tVGV4dGFyZWEtcGxhY2Vob2xkZXJDb2xvcic6ICdpbmhlcml0JyxcbiAgICAnLS1UZXh0YXJlYS1wbGFjZWhvbGRlck9wYWNpdHknOiAwLjUsXG4gICAgJy0tVGV4dGFyZWEtZm9jdXNlZFRoaWNrbmVzcyc6IHRoZW1lLnZhcnMuZm9jdXMudGhpY2tuZXNzXG4gIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdjb250ZXh0JyA/IHtcbiAgICAnLS1UZXh0YXJlYS1mb2N1c2VkSGlnaGxpZ2h0JzogdGhlbWUudmFycy5wYWxldHRlLmZvY3VzVmlzaWJsZVxuICB9IDoge1xuICAgICctLVRleHRhcmVhLWZvY3VzZWRIaWdobGlnaHQnOiAoX3RoZW1lJHZhcnMkcGFsZXR0ZSA9IHRoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yID09PSAnbmV1dHJhbCcgPyAncHJpbWFyeScgOiBvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJzJHBhbGV0dGVbNTAwXVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgICctLVRleHRhcmVhLW1pbkhlaWdodCc6ICcycmVtJyxcbiAgICAnLS1UZXh0YXJlYS1wYWRkaW5nQmxvY2snOiAnY2FsYygwLjVyZW0gLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gICAgLy8gdG8gbWF0Y2ggSW5wdXQgYmVjYXVzZSA8dGV4dGFyZWE+IGRvZXMgbm90IGNlbnRlciB0aGUgdGV4dCBhdCB0aGUgbWlkZGxlIGxpa2UgPGlucHV0PlxuICAgICctLVRleHRhcmVhLXBhZGRpbmdJbmxpbmUnOiAnMC41cmVtJyxcbiAgICAnLS1UZXh0YXJlYS1kZWNvcmF0b3JDaGlsZEhlaWdodCc6ICdtaW4oMS41cmVtLCB2YXIoLS1UZXh0YXJlYS1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjI1cmVtJ1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdtZCcgJiYge1xuICAgICctLVRleHRhcmVhLW1pbkhlaWdodCc6ICcyLjVyZW0nLFxuICAgICctLVRleHRhcmVhLXBhZGRpbmdCbG9jayc6ICdjYWxjKDAuNXJlbSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpJyxcbiAgICAnLS1UZXh0YXJlYS1wYWRkaW5nSW5saW5lJzogJzAuNzVyZW0nLFxuICAgICctLVRleHRhcmVhLWRlY29yYXRvckNoaWxkSGVpZ2h0JzogJ21pbigycmVtLCB2YXIoLS1UZXh0YXJlYS1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjVyZW0nXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xnJyAmJiB7XG4gICAgJy0tVGV4dGFyZWEtbWluSGVpZ2h0JzogJzNyZW0nLFxuICAgICctLVRleHRhcmVhLXBhZGRpbmdCbG9jayc6ICdjYWxjKDAuNzVyZW0gLSB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gICAgJy0tVGV4dGFyZWEtcGFkZGluZ0lubGluZSc6ICcxcmVtJyxcbiAgICAnLS1UZXh0YXJlYS1nYXAnOiAnMC43NXJlbScsXG4gICAgJy0tVGV4dGFyZWEtZGVjb3JhdG9yQ2hpbGRIZWlnaHQnOiAnbWluKDIuMzc1cmVtLCB2YXIoLS1UZXh0YXJlYS1taW5IZWlnaHQpKScsXG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjc1cmVtJ1xuICB9LCB7XG4gICAgLy8gdmFyaWFibGVzIGZvciBjb250cm9sbGluZyBjaGlsZCBjb21wb25lbnRzXG4gICAgJy0tX1RleHRhcmVhLXBhZGRpbmdCbG9jayc6ICdtYXgoKHZhcigtLVRleHRhcmVhLW1pbkhlaWdodCkgLSAyICogdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSAtIHZhcigtLVRleHRhcmVhLWRlY29yYXRvckNoaWxkSGVpZ2h0KSkgLyAyLCAwcHgpJyxcbiAgICAnLS1UZXh0YXJlYS1kZWNvcmF0b3JDaGlsZFJhZGl1cyc6ICdtYXgodmFyKC0tVGV4dGFyZWEtcmFkaXVzKSAtIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkgLSB2YXIoLS1fVGV4dGFyZWEtcGFkZGluZ0Jsb2NrKSwgbWluKHZhcigtLV9UZXh0YXJlYS1wYWRkaW5nQmxvY2spICsgdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSwgdmFyKC0tVGV4dGFyZWEtcmFkaXVzKSAvIDIpKScsXG4gICAgJy0tQnV0dG9uLW1pbkhlaWdodCc6ICd2YXIoLS1UZXh0YXJlYS1kZWNvcmF0b3JDaGlsZEhlaWdodCknLFxuICAgICctLUljb25CdXR0b24tc2l6ZSc6ICd2YXIoLS1UZXh0YXJlYS1kZWNvcmF0b3JDaGlsZEhlaWdodCknLFxuICAgICctLUJ1dHRvbi1yYWRpdXMnOiAndmFyKC0tVGV4dGFyZWEtZGVjb3JhdG9yQ2hpbGRSYWRpdXMpJyxcbiAgICAnLS1JY29uQnV0dG9uLXJhZGl1cyc6ICd2YXIoLS1UZXh0YXJlYS1kZWNvcmF0b3JDaGlsZFJhZGl1cyknLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIG1pbldpZHRoOiAwLFxuICAgIG1pbkhlaWdodDogJ3ZhcigtLVRleHRhcmVhLW1pbkhlaWdodCknLFxuICAgIGN1cnNvcjogJ3RleHQnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBwYWRkaW5nSW5saW5lU3RhcnQ6IGB2YXIoLS1UZXh0YXJlYS1wYWRkaW5nSW5saW5lKWAsXG4gICAgLy8gdGhlIHBhZGRpbmdJbmxpbmVFbmQgaXMgYWRkZWQgdG8gdGhlIHRleHRhcmVhLiBJdCBsb29rcyBiZXR0ZXIgd2hlbiB0aGUgc2Nyb2xsYmFyIGFwcGVhcnMuXG4gICAgcGFkZGluZ0Jsb2NrOiAndmFyKC0tVGV4dGFyZWEtcGFkZGluZ0Jsb2NrKScsXG4gICAgYm9yZGVyUmFkaXVzOiAndmFyKC0tVGV4dGFyZWEtcmFkaXVzKScsXG4gICAgZm9udEZhbWlseTogdGhlbWUudmFycy5mb250RmFtaWx5LmJvZHksXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUubWQsXG4gICAgbGluZUhlaWdodDogdGhlbWUudmFycy5saW5lSGVpZ2h0Lm1kXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtJyAmJiB7XG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUuc20sXG4gICAgbGluZUhlaWdodDogdGhlbWUudmFycy5saW5lSGVpZ2h0LnNtXG4gIH0sIHtcbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgbWFyZ2luOiAnY2FsYyh2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpICogLTEpJyAvLyBmb3Igb3V0bGluZWQgdmFyaWFudFxuICAgIH1cbiAgfSksIF9leHRlbmRzKHt9LCB2YXJpYW50U3R5bGUsIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IChfdmFyaWFudFN0eWxlJGJhY2tncm8gPSB2YXJpYW50U3R5bGUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhcmlhbnRTdHlsZS5iYWNrZ3JvdW5kQ29sb3IpICE9IG51bGwgPyBfdmFyaWFudFN0eWxlJGJhY2tncm8gOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlLFxuICAgIFtgJjpob3Zlcjpub3QoLiR7dGV4dGFyZWFDbGFzc2VzLmZvY3VzZWR9KWBdOiBfZXh0ZW5kcyh7fSwgKF90aGVtZSR2YXJpYW50czIgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9SG92ZXJgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czJbb3duZXJTdGF0ZS5jb2xvcl0sIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbnVsbCxcbiAgICAgIC8vIGl0IGlzIG5vdCBjb21tb24gdG8gY2hhbmdlIGJhY2tncm91bmQgb24gaG92ZXIgZm9yIElucHV0XG4gICAgICBjdXJzb3I6ICd0ZXh0J1xuICAgIH0pLFxuICAgIFtgJi4ke3RleHRhcmVhQ2xhc3Nlcy5kaXNhYmxlZH1gXTogKF90aGVtZSR2YXJpYW50czMgPSB0aGVtZS52YXJpYW50c1tgJHtvd25lclN0YXRlLnZhcmlhbnR9RGlzYWJsZWRgXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czNbb3duZXJTdGF0ZS5jb2xvcl0sXG4gICAgW2AmLiR7dGV4dGFyZWFDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgdmFyKC0tVGV4dGFyZWEtZm9jdXNlZFRoaWNrbmVzcykgdmFyKC0tVGV4dGFyZWEtZm9jdXNlZEhpZ2hsaWdodClgXG4gICAgICB9XG4gICAgfVxuICB9KV07XG59KTtcbmNvbnN0IFRleHRhcmVhSW5wdXQgPSBzdHlsZWQoVGV4dGFyZWFBdXRvc2l6ZSwge1xuICBuYW1lOiAnSm95VGV4dGFyZWEnLFxuICBzbG90OiAnVGV4dGFyZWEnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy50ZXh0YXJlYVxufSkoe1xuICByZXNpemU6ICdub25lJyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIC8vIHJlbW92ZSB0aGUgbmF0aXZlIHRleHRhcmVhIHdpZHRoXG4gIG1pbldpZHRoOiAwLFxuICAvLyByZW1vdmUgdGhlIG5hdGl2ZSB0ZXh0YXJlYSB3aWR0aFxuICBvdXRsaW5lOiAwLFxuICAvLyByZW1vdmUgdGhlIG5hdGl2ZSB0ZXh0YXJlYSBvdXRsaW5lXG4gIHBhZGRpbmc6IDAsXG4gIC8vIHJlbW92ZSB0aGUgbmF0aXZlIHRleHRhcmVhIHBhZGRpbmdcbiAgcGFkZGluZ0lubGluZUVuZDogYHZhcigtLVRleHRhcmVhLXBhZGRpbmdJbmxpbmUpYCxcbiAgZmxleDogJ2F1dG8nLFxuICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gIGZvbnRTdHlsZTogJ2luaGVyaXQnLFxuICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gIGxpbmVIZWlnaHQ6ICdpbmhlcml0JyxcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCYWNrZ3JvdW5kQ2xpcDogJ3RleHQnLFxuICAgIC8vIHJlbW92ZSBhdXRvZmlsbCBiYWNrZ3JvdW5kXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgfSxcbiAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiB7XG4gICAgY29sb3I6ICd2YXIoLS1UZXh0YXJlYS1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLVRleHRhcmVhLXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOjotbW96LXBsYWNlaG9sZGVyJzoge1xuICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgY29sb3I6ICd2YXIoLS1UZXh0YXJlYS1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLVRleHRhcmVhLXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHtcbiAgICAvLyBJRTExXG4gICAgY29sb3I6ICd2YXIoLS1UZXh0YXJlYS1wbGFjZWhvbGRlckNvbG9yKScsXG4gICAgb3BhY2l0eTogJ3ZhcigtLVRleHRhcmVhLXBsYWNlaG9sZGVyT3BhY2l0eSknXG4gIH0sXG4gICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiB7XG4gICAgLy8gRWRnZVxuICAgIGNvbG9yOiAndmFyKC0tVGV4dGFyZWEtcGxhY2Vob2xkZXJDb2xvciknLFxuICAgIG9wYWNpdHk6ICd2YXIoLS1UZXh0YXJlYS1wbGFjZWhvbGRlck9wYWNpdHkpJ1xuICB9XG59KTtcbmNvbnN0IFRleHRhcmVhU3RhcnREZWNvcmF0b3IgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ0pveVRleHRhcmVhJyxcbiAgc2xvdDogJ1N0YXJ0RGVjb3JhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3RhcnREZWNvcmF0b3Jcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIG1hcmdpbklubGluZVN0YXJ0OiAnY2FsYyh2YXIoLS1UZXh0YXJlYS1wYWRkaW5nQmxvY2spIC0gdmFyKC0tVGV4dGFyZWEtcGFkZGluZ0lubGluZSkpJyxcbiAgbWFyZ2luSW5saW5lRW5kOiAndmFyKC0tVGV4dGFyZWEtcGFkZGluZ0Jsb2NrKScsXG4gIG1hcmdpbkJsb2NrRW5kOiAndmFyKC0tVGV4dGFyZWEtZ2FwKScsXG4gIGNvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC50ZXJ0aWFyeSxcbiAgY3Vyc29yOiAnaW5pdGlhbCdcbn0pKTtcbmNvbnN0IFRleHRhcmVhRW5kRGVjb3JhdG9yID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdKb3lUZXh0YXJlYScsXG4gIHNsb3Q6ICdFbmREZWNvcmF0b3InLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5lbmREZWNvcmF0b3Jcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIG1hcmdpbklubGluZVN0YXJ0OiAnY2FsYyh2YXIoLS1UZXh0YXJlYS1wYWRkaW5nQmxvY2spIC0gdmFyKC0tVGV4dGFyZWEtcGFkZGluZ0lubGluZSkpJyxcbiAgbWFyZ2luSW5saW5lRW5kOiAndmFyKC0tVGV4dGFyZWEtcGFkZGluZ0Jsb2NrKScsXG4gIG1hcmdpbkJsb2NrU3RhcnQ6ICd2YXIoLS1UZXh0YXJlYS1nYXApJyxcbiAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnRlcnRpYXJ5LFxuICBjdXJzb3I6ICdpbml0aWFsJ1xufSkpO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbVGV4dGFyZWFdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtdGV4dGFyZWEvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtUZXh0YXJlYSBBUEldKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvYXBpL3RleHRhcmVhLylcbiAqL1xuY29uc3QgVGV4dGFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYShpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9pblByb3BzJGRpc2FibGVkLCBfcmVmMiwgX2luUHJvcHMkZXJyb3IsIF9yZWYzLCBfaW5Qcm9wcyRzaXplLCBfZm9ybUNvbnRyb2wkY29sb3I7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveVRleHRhcmVhJ1xuICB9KTtcbiAgY29uc3QgX3VzZUZvcndhcmRlZElucHV0ID0gdXNlRm9yd2FyZGVkSW5wdXQocHJvcHMsIHRleHRhcmVhQ2xhc3NlcyksXG4gICAge1xuICAgICAgcHJvcHNUb0ZvcndhcmQsXG4gICAgICByb290U3RhdGVDbGFzc2VzLFxuICAgICAgaW5wdXRTdGF0ZUNsYXNzZXMsXG4gICAgICBnZXRSb290UHJvcHMsXG4gICAgICBnZXRJbnB1dFByb3BzLFxuICAgICAgZm9ybUNvbnRyb2wsXG4gICAgICBmb2N1c2VkLFxuICAgICAgZXJyb3I6IGVycm9yUHJvcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCA9IGZhbHNlLFxuICAgICAgc2l6ZTogc2l6ZVByb3AgPSAnbWQnLFxuICAgICAgY29sb3I6IGNvbG9yUHJvcCA9ICduZXV0cmFsJyxcbiAgICAgIHZhcmlhbnQgPSAnb3V0bGluZWQnLFxuICAgICAgc3RhcnREZWNvcmF0b3IsXG4gICAgICBlbmREZWNvcmF0b3IsXG4gICAgICBtaW5Sb3dzLFxuICAgICAgbWF4Um93c1xuICAgIH0gPSBfdXNlRm9yd2FyZGVkSW5wdXQsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdXNlRm9yd2FyZGVkSW5wdXQsIF9leGNsdWRlZCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3QgcmVnaXN0ZXJFZmZlY3QgPSBmb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogZm9ybUNvbnRyb2wucmVnaXN0ZXJFZmZlY3Q7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChyZWdpc3RlckVmZmVjdCkge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJFZmZlY3QoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW3JlZ2lzdGVyRWZmZWN0XSk7XG4gIH1cbiAgY29uc3QgZGlzYWJsZWQgPSAoX3JlZiA9IChfaW5Qcm9wcyRkaXNhYmxlZCA9IGluUHJvcHMuZGlzYWJsZWQpICE9IG51bGwgPyBfaW5Qcm9wcyRkaXNhYmxlZCA6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbC5kaXNhYmxlZCkgIT0gbnVsbCA/IF9yZWYgOiBkaXNhYmxlZFByb3A7XG4gIGNvbnN0IGVycm9yID0gKF9yZWYyID0gKF9pblByb3BzJGVycm9yID0gaW5Qcm9wcy5lcnJvcikgIT0gbnVsbCA/IF9pblByb3BzJGVycm9yIDogZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLmVycm9yKSAhPSBudWxsID8gX3JlZjIgOiBlcnJvclByb3A7XG4gIGNvbnN0IHNpemUgPSAoX3JlZjMgPSAoX2luUHJvcHMkc2l6ZSA9IGluUHJvcHMuc2l6ZSkgIT0gbnVsbCA/IF9pblByb3BzJHNpemUgOiBmb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogZm9ybUNvbnRyb2wuc2l6ZSkgIT0gbnVsbCA/IF9yZWYzIDogc2l6ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoaW5Qcm9wcy5jb2xvciwgZXJyb3IgPyAnZGFuZ2VyJyA6IChfZm9ybUNvbnRyb2wkY29sb3IgPSBmb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogZm9ybUNvbnRyb2wuY29sb3IpICE9IG51bGwgPyBfZm9ybUNvbnRyb2wkY29sb3IgOiBjb2xvclByb3ApO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZm9jdXNlZCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICByZWYsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCByb290U3RhdGVDbGFzc2VzXSxcbiAgICBlbGVtZW50VHlwZTogVGV4dGFyZWFSb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGNvbnN0IFtTbG90VGV4dGFyZWEsIHRleHRhcmVhUHJvcHNdID0gdXNlU2xvdCgndGV4dGFyZWEnLCB7XG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICBpZDogZm9ybUNvbnRyb2wgPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1Db250cm9sLmh0bWxGb3IsXG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBmb3JtQ29udHJvbFsnYXJpYS1kZXNjcmliZWRieSddXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLnRleHRhcmVhLCBpbnB1dFN0YXRlQ2xhc3Nlc10sXG4gICAgZWxlbWVudFR5cGU6IFRleHRhcmVhSW5wdXQsXG4gICAgaW50ZXJuYWxGb3J3YXJkZWRQcm9wczogX2V4dGVuZHMoe30sIHByb3BzVG9Gb3J3YXJkLCB7XG4gICAgICBtaW5Sb3dzLFxuICAgICAgbWF4Um93c1xuICAgIH0pLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGdldFNsb3RQcm9wczogZ2V0SW5wdXRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdFN0YXJ0RGVjb3JhdG9yLCBzdGFydERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ3N0YXJ0RGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGFydERlY29yYXRvcixcbiAgICBlbGVtZW50VHlwZTogVGV4dGFyZWFTdGFydERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEVuZERlY29yYXRvciwgZW5kRGVjb3JhdG9yUHJvcHNdID0gdXNlU2xvdCgnZW5kRGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmREZWNvcmF0b3IsXG4gICAgZWxlbWVudFR5cGU6IFRleHRhcmVhRW5kRGVjb3JhdG9yLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU2xvdFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW3N0YXJ0RGVjb3JhdG9yICYmIC8qI19fUFVSRV9fKi9fanN4KFNsb3RTdGFydERlY29yYXRvciwgX2V4dGVuZHMoe30sIHN0YXJ0RGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBzdGFydERlY29yYXRvclxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU2xvdFRleHRhcmVhLCBfZXh0ZW5kcyh7fSwgdGV4dGFyZWFQcm9wcykpLCBlbmREZWNvcmF0b3IgJiYgLyojX19QVVJFX18qL19qc3goU2xvdEVuZERlY29yYXRvciwgX2V4dGVuZHMoe30sIGVuZERlY29yYXRvclByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogZW5kRGVjb3JhdG9yXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ25ldXRyYWwnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkYW5nZXInLCAnaW5mbycsICduZXV0cmFsJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUcmFpbGluZyBhZG9ybm1lbnQgZm9yIHRoaXMgaW5wdXQuXG4gICAqL1xuICBlbmREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWQnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJywgJ2xnJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBMZWFkaW5nIGFkb3JubWVudCBmb3IgdGhpcyBpbnB1dC5cbiAgICovXG4gIHN0YXJ0RGVjb3JhdG9yOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAncGxhaW4nLCAnc29mdCcsICdzb2xpZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWE7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvb2x0aXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvb2x0aXAnLCBzbG90KTtcbn1cbmNvbnN0IHRvb2x0aXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVG9vbHRpcCcsIFsncm9vdCcsICd0b29sdGlwQXJyb3cnLCAnYXJyb3cnLCAndG91Y2gnLCAncGxhY2VtZW50TGVmdCcsICdwbGFjZW1lbnRSaWdodCcsICdwbGFjZW1lbnRUb3AnLCAncGxhY2VtZW50Qm90dG9tJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvckRhbmdlcicsICdjb2xvckluZm8nLCAnY29sb3JOZXV0cmFsJywgJ2NvbG9yU3VjY2VzcycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JDb250ZXh0JywgJ3NpemVTbScsICdzaXplTWQnLCAnc2l6ZUxnJywgJ3ZhcmlhbnRQbGFpbicsICd2YXJpYW50T3V0bGluZWQnLCAndmFyaWFudFNvZnQnLCAndmFyaWFudFNvbGlkJ10pO1xuZXhwb3J0IGRlZmF1bHQgdG9vbHRpcENsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJhcnJvd1wiLCBcImRlc2NyaWJlQ2hpbGRcIiwgXCJkaXNhYmxlRm9jdXNMaXN0ZW5lclwiLCBcImRpc2FibGVIb3Zlckxpc3RlbmVyXCIsIFwiZGlzYWJsZUludGVyYWN0aXZlXCIsIFwiZGlzYWJsZVRvdWNoTGlzdGVuZXJcIiwgXCJlbnRlckRlbGF5XCIsIFwiZW50ZXJOZXh0RGVsYXlcIiwgXCJlbnRlclRvdWNoRGVsYXlcIiwgXCJmb2xsb3dDdXJzb3JcIiwgXCJpZFwiLCBcImxlYXZlRGVsYXlcIiwgXCJsZWF2ZVRvdWNoRGVsYXlcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXJlY3Rpb25cIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1vZGlmaWVyc1wiLCBcInBsYWNlbWVudFwiLCBcInRpdGxlXCIsIFwiY29sb3JcIiwgXCJ2YXJpYW50XCIsIFwic2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSwgdW5zdGFibGVfdXNlQ29udHJvbGxlZCBhcyB1c2VDb250cm9sbGVkLCB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2ssIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUsIHVuc3RhYmxlX3VzZUlkIGFzIHVzZUlkIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBQb3BwZXJVbnN0eWxlZCwgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VTbG90IGZyb20gJy4uL3V0aWxzL3VzZVNsb3QnO1xuaW1wb3J0IENvbG9ySW52ZXJzaW9uLCB7IHVzZUNvbG9ySW52ZXJzaW9uIH0gZnJvbSAnLi4vc3R5bGVzL0NvbG9ySW52ZXJzaW9uJztcbmltcG9ydCB7IGdldFRvb2x0aXBVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3Rvb2x0aXBDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG4vLyBDcmVhdGUgYSBmdW5jdGlvbiB0byBwcmV2ZW50IHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzIGZyb20gZ2VuZXJhdGluZyBgc2xvdHNgIGFuZCBgc2xvdFByb3BzYCBwcm9wdHlwZXMuXG5jb25zdCBleGNsdWRlU2xvdHNBbmRTbG90UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgcmV0dXJuIG90aGVyUHJvcHM7XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGFycm93LFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3IsXG4gICAgc2l6ZSxcbiAgICBwbGFjZW1lbnQsXG4gICAgdG91Y2hcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGFycm93ICYmICd0b29sdGlwQXJyb3cnLCB0b3VjaCAmJiAndG91Y2gnLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudCAmJiBgdmFyaWFudCR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBgdG9vbHRpcFBsYWNlbWVudCR7Y2FwaXRhbGl6ZShwbGFjZW1lbnQuc3BsaXQoJy0nKVswXSl9YF0sXG4gICAgYXJyb3c6IFsnYXJyb3cnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRvb2x0aXBVdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5jb25zdCBUb29sdGlwUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnSm95VG9vbHRpcCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJpYW50cywgX293bmVyU3RhdGUkcGxhY2VtZW50LCBfb3duZXJTdGF0ZSRwbGFjZW1lbnQyO1xuICBjb25zdCB2YXJpYW50U3R5bGUgPSAoX3RoZW1lJHZhcmlhbnRzID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50c1tvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbScgJiYge1xuICAgICctLUljb24tZm9udFNpemUnOiAnMXJlbScsXG4gICAgJy0tVG9vbHRpcC1hcnJvd1NpemUnOiAnOHB4JyxcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAuNSwgMC42MjUpLFxuICAgIGZvbnRTaXplOiB0aGVtZS52YXJzLmZvbnRTaXplLnhzXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21kJyAmJiB7XG4gICAgJy0tSWNvbi1mb250U2l6ZSc6ICcxLjEyNXJlbScsXG4gICAgJy0tVG9vbHRpcC1hcnJvd1NpemUnOiAnMTBweCcsXG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygwLjYyNSwgMC43NSksXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUuc21cbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGcnICYmIHtcbiAgICAnLS1JY29uLWZvbnRTaXplJzogJzEuMjVyZW0nLFxuICAgICctLVRvb2x0aXAtYXJyb3dTaXplJzogJzEycHgnLFxuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC43NSwgMSksXG4gICAgZm9udFNpemU6IHRoZW1lLnZhcnMuZm9udFNpemUubWRcbiAgfSwge1xuICAgIHpJbmRleDogdGhlbWUudmFycy56SW5kZXgudG9vbHRpcCxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS52YXJzLnJhZGl1cy54cyxcbiAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvdy5zbSxcbiAgICBmb250RmFtaWx5OiB0aGVtZS52YXJzLmZvbnRGYW1pbHkuYm9keSxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS52YXJzLmZvbnRXZWlnaHQubWQsXG4gICAgbGluZUhlaWdodDogdGhlbWUudmFycy5saW5lSGVpZ2h0LnNtLFxuICAgIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZUludGVyYWN0aXZlICYmIHtcbiAgICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbiAgfSwgIW93bmVyU3RhdGUub3BlbiAmJiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH0sIHZhcmlhbnRTdHlsZSwgIXZhcmlhbnRTdHlsZS5iYWNrZ3JvdW5kQ29sb3IgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLmJhY2tncm91bmQuc3VyZmFjZVxuICB9LCB7XG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIC8vIGFjdHMgYXMgYSBpbnZpc2libGUgY29ubmVjdG9yIGJldHdlZW4gdGhlIGVsZW1lbnQgYW5kIHRoZSB0b29sdGlwXG4gICAgICAvLyBzbyB0aGF0IHRoZSBjdXJzb3IgY2FuIG1vdmUgdG8gdGhlIHRvb2x0aXAgd2l0aG91dCBsb3NpbmcgZm9jdXMuXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogKF9vd25lclN0YXRlJHBsYWNlbWVudCA9IG93bmVyU3RhdGUucGxhY2VtZW50KSAhPSBudWxsICYmIF9vd25lclN0YXRlJHBsYWNlbWVudC5tYXRjaCgvKHRvcHxib3R0b20pLykgPyAnMTAwJScgOlxuICAgICAgLy8gMTBweCBlcXVhbHMgdGhlIGRlZmF1bHQgb2Zmc2V0IHBvcHBlciBjb25maWdcbiAgICAgICdjYWxjKDEwcHggKyB2YXIoLS12YXJpYW50LWJvcmRlcldpZHRoLCAwcHgpKScsXG4gICAgICBoZWlnaHQ6IChfb3duZXJTdGF0ZSRwbGFjZW1lbnQyID0gb3duZXJTdGF0ZS5wbGFjZW1lbnQpICE9IG51bGwgJiYgX293bmVyU3RhdGUkcGxhY2VtZW50Mi5tYXRjaCgvKHRvcHxib3R0b20pLykgPyAnY2FsYygxMHB4ICsgdmFyKC0tdmFyaWFudC1ib3JkZXJXaWR0aCwgMHB4KSknIDogJzEwMCUnXG4gICAgfSxcbiAgICAnJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwiYm90dG9tXCJdOjpiZWZvcmUnOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMTAwJSknXG4gICAgfSxcbiAgICAnJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwibGVmdFwiXTo6YmVmb3JlJzoge1xuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDEwMCUpJ1xuICAgIH0sXG4gICAgJyZbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInJpZ2h0XCJdOjpiZWZvcmUnOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknXG4gICAgfSxcbiAgICAnJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwidG9wXCJdOjpiZWZvcmUnOiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgxMDAlKSdcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCBUb29sdGlwQXJyb3cgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdKb3lUb29sdGlwJyxcbiAgc2xvdDogJ0Fycm93JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXJyb3dcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkdmFyaWFudHMyLCBfdmFyaWFudFN0eWxlJGJhY2tncm8sIF92YXJpYW50U3R5bGUkYmFja2dybzI7XG4gIGNvbnN0IHZhcmlhbnRTdHlsZSA9IChfdGhlbWUkdmFyaWFudHMyID0gdGhlbWUudmFyaWFudHNbb3duZXJTdGF0ZS52YXJpYW50XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJpYW50czJbb3duZXJTdGF0ZS5jb2xvcl07XG4gIHJldHVybiB7XG4gICAgJy0tdW5zdGFibGVfVG9vbHRpcC1hcnJvd1JvdGF0aW9uJzogMCxcbiAgICB3aWR0aDogJ3ZhcigtLVRvb2x0aXAtYXJyb3dTaXplKScsXG4gICAgaGVpZ2h0OiAndmFyKC0tVG9vbHRpcC1hcnJvd1NpemUpJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAvLyB1c2UgcHN1ZWRvIGVsZW1lbnQgYmVjYXVzZSBQb3BwZXIgY29udHJvbHMgdGhlIGB0cmFuc2Zvcm1gIHByb3BlcnR5IG9mIHRoZSBhcnJvdy5cbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGJvcmRlcjogJ2NhbGModmFyKC0tVG9vbHRpcC1hcnJvd1NpemUpIC8gMikgc29saWQnLFxuICAgICAgYm9yZGVyTGVmdENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBib3JkZXJUb3BDb2xvcjogKF92YXJpYW50U3R5bGUkYmFja2dybyA9IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvcikgIT0gbnVsbCA/IF92YXJpYW50U3R5bGUkYmFja2dybyA6IHRoZW1lLnZhcnMucGFsZXR0ZS5iYWNrZ3JvdW5kLnN1cmZhY2UsXG4gICAgICBib3JkZXJSaWdodENvbG9yOiAoX3ZhcmlhbnRTdHlsZSRiYWNrZ3JvMiA9IHZhcmlhbnRTdHlsZSA9PSBudWxsID8gdm9pZCAwIDogdmFyaWFudFN0eWxlLmJhY2tncm91bmRDb2xvcikgIT0gbnVsbCA/IF92YXJpYW50U3R5bGUkYmFja2dybzIgOiB0aGVtZS52YXJzLnBhbGV0dGUuYmFja2dyb3VuZC5zdXJmYWNlLFxuICAgICAgYm9yZGVyUmFkaXVzOiBgMHB4IDJweCAwcHggMHB4YCxcbiAgICAgIGJveFNoYWRvdzogYHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkgY2FsYygtMSAqIHZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgsIDBweCkpIDBweCAwcHggJHt2YXJpYW50U3R5bGUuYm9yZGVyQ29sb3J9YCxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxuICAgICAgdHJhbnNmb3JtOiAncm90YXRlKGNhbGMoLTQ1ZGVnICsgOTBkZWcgKiB2YXIoLS11bnN0YWJsZV9Ub29sdGlwLWFycm93Um90YXRpb24pKSknXG4gICAgfSxcbiAgICAnW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJib3R0b21cIl0gJic6IHtcbiAgICAgIHRvcDogJ2NhbGMoMC41cHggKyB2YXIoLS1Ub29sdGlwLWFycm93U2l6ZSkgKiAtMSAvIDIpJyAvLyAwLjVweCBpcyBmb3IgcGVyZmVjdCBvdmVybGFwIHdpdGggdGhlIFRvb2x0aXBcbiAgICB9LFxuXG4gICAgJ1tkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwidG9wXCJdICYnOiB7XG4gICAgICAnLS11bnN0YWJsZV9Ub29sdGlwLWFycm93Um90YXRpb24nOiAyLFxuICAgICAgYm90dG9tOiAnY2FsYygwLjVweCArIHZhcigtLVRvb2x0aXAtYXJyb3dTaXplKSAqIC0xIC8gMiknXG4gICAgfSxcbiAgICAnW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJsZWZ0XCJdICYnOiB7XG4gICAgICAnLS11bnN0YWJsZV9Ub29sdGlwLWFycm93Um90YXRpb24nOiAxLFxuICAgICAgcmlnaHQ6ICdjYWxjKDAuNXB4ICsgdmFyKC0tVG9vbHRpcC1hcnJvd1NpemUpICogLTEgLyAyKSdcbiAgICB9LFxuICAgICdbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInJpZ2h0XCJdICYnOiB7XG4gICAgICAnLS11bnN0YWJsZV9Ub29sdGlwLWFycm93Um90YXRpb24nOiAzLFxuICAgICAgbGVmdDogJ2NhbGMoMC41cHggKyB2YXIoLS1Ub29sdGlwLWFycm93U2l6ZSkgKiAtMSAvIDIpJ1xuICAgIH1cbiAgfTtcbn0pO1xubGV0IGh5c3RlcnNpc09wZW4gPSBmYWxzZTtcbmxldCBoeXN0ZXJzaXNUaW1lciA9IG51bGw7XG5sZXQgY3Vyc29yUG9zaXRpb24gPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG5leHBvcnQgZnVuY3Rpb24gdGVzdFJlc2V0KCkge1xuICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gIGlmIChoeXN0ZXJzaXNUaW1lcikge1xuICAgIGNsZWFyVGltZW91dChoeXN0ZXJzaXNUaW1lcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbXBvc2VNb3VzZUV2ZW50SGFuZGxlcihoYW5kbGVyLCBldmVudEhhbmRsZXIpIHtcbiAgcmV0dXJuIGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICBldmVudEhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgICBoYW5kbGVyKGV2ZW50KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VGb2N1c0V2ZW50SGFuZGxlcihoYW5kbGVyLCBldmVudEhhbmRsZXIpIHtcbiAgcmV0dXJuIGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICBldmVudEhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgICBoYW5kbGVyKGV2ZW50KTtcbiAgfTtcbn1cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1Rvb2x0aXBdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3QtdG9vbHRpcC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1Rvb2x0aXAgQVBJXShodHRwczovL211aS5jb20vam95LXVpL2FwaS90b29sdGlwLylcbiAqL1xuY29uc3QgVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2x0aXAoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ0pveVRvb2x0aXAnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGFycm93ID0gZmFsc2UsXG4gICAgICBkZXNjcmliZUNoaWxkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUhvdmVyTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVJbnRlcmFjdGl2ZTogZGlzYWJsZUludGVyYWN0aXZlUHJvcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVRvdWNoTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGVudGVyRGVsYXkgPSAxMDAsXG4gICAgICBlbnRlck5leHREZWxheSA9IDAsXG4gICAgICBlbnRlclRvdWNoRGVsYXkgPSA3MDAsXG4gICAgICBmb2xsb3dDdXJzb3IgPSBmYWxzZSxcbiAgICAgIGlkOiBpZFByb3AsXG4gICAgICBsZWF2ZURlbGF5ID0gMCxcbiAgICAgIGxlYXZlVG91Y2hEZWxheSA9IDE1MDAsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3Blbjogb3BlblByb3AsXG4gICAgICBkaXNhYmxlUG9ydGFsLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAga2VlcE1vdW50ZWQsXG4gICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJyxcbiAgICAgIHRpdGxlLFxuICAgICAgY29sb3I6IGNvbG9yUHJvcCA9ICduZXV0cmFsJyxcbiAgICAgIHZhcmlhbnQgPSAnc29saWQnLFxuICAgICAgc2l6ZSA9ICdtZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IHtcbiAgICBnZXRDb2xvclxuICB9ID0gdXNlQ29sb3JJbnZlcnNpb24odmFyaWFudCk7XG4gIGNvbnN0IGNvbG9yID0gZGlzYWJsZVBvcnRhbCA/IGdldENvbG9yKGluUHJvcHMuY29sb3IsIGNvbG9yUHJvcCkgOiBjb2xvclByb3A7XG4gIGNvbnN0IFtjaGlsZE5vZGUsIHNldENoaWxkTm9kZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBbYXJyb3dSZWYsIHNldEFycm93UmVmXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBpZ25vcmVOb25Ub3VjaEV2ZW50cyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGRpc2FibGVJbnRlcmFjdGl2ZSA9IGRpc2FibGVJbnRlcmFjdGl2ZVByb3AgfHwgZm9sbG93Q3Vyc29yO1xuICBjb25zdCBjbG9zZVRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGVudGVyVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgbGVhdmVUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCB0b3VjaFRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBuYW1lOiAnVG9vbHRpcCcsXG4gICAgc3RhdGU6ICdvcGVuJ1xuICB9KTtcbiAgbGV0IG9wZW4gPSBvcGVuU3RhdGU7XG4gIGNvbnN0IGlkID0gdXNlSWQoaWRQcm9wKTtcbiAgY29uc3QgcHJldlVzZXJTZWxlY3QgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3Qgc3RvcFRvdWNoSW50ZXJhY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByZXZVc2VyU2VsZWN0LmN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gcHJldlVzZXJTZWxlY3QuY3VycmVudDtcbiAgICAgIHByZXZVc2VyU2VsZWN0LmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyLmN1cnJlbnQpO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICAgIHN0b3BUb3VjaEludGVyYWN0aW9uKCk7XG4gICAgfTtcbiAgfSwgW3N0b3BUb3VjaEludGVyYWN0aW9uXSk7XG4gIGNvbnN0IGhhbmRsZU9wZW4gPSBldmVudCA9PiB7XG4gICAgaWYgKGh5c3RlcnNpc1RpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaHlzdGVyc2lzVGltZXIpO1xuICAgIH1cbiAgICBoeXN0ZXJzaXNPcGVuID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBtb3VzZW92ZXIgZXZlbnQgd2lsbCB0cmlnZ2VyIGZvciBldmVyeSBuZXN0ZWQgZWxlbWVudCBpbiB0aGUgdG9vbHRpcC5cbiAgICAvLyBXZSBjYW4gc2tpcCByZXJlbmRlcmluZyB3aGVuIHRoZSB0b29sdGlwIGlzIGFscmVhZHkgb3Blbi5cbiAgICAvLyBXZSBhcmUgdXNpbmcgdGhlIG1vdXNlb3ZlciBldmVudCBpbnN0ZWFkIG9mIHRoZSBtb3VzZWVudGVyIGV2ZW50IHRvIGZpeCBhIGhpZGUvc2hvdyBpc3N1ZS5cbiAgICBzZXRPcGVuU3RhdGUodHJ1ZSk7XG4gICAgaWYgKG9uT3BlbiAmJiAhb3Blbikge1xuICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKGh5c3RlcnNpc1RpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoaHlzdGVyc2lzVGltZXIpO1xuICAgIH1cbiAgICBoeXN0ZXJzaXNUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaHlzdGVyc2lzT3BlbiA9IGZhbHNlO1xuICAgIH0sIDgwMCArIGxlYXZlRGVsYXkpO1xuICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgaWYgKG9uQ2xvc2UgJiYgb3Blbikge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsb3NlVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCA9IGZhbHNlO1xuICAgIH0sIDE1MCk7XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdGhlIHRpdGxlIGFoZWFkIG9mIHRpbWUuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byB3YWl0IGZvciB0aGUgbmV4dCByZW5kZXIgY29tbWl0LlxuICAgIC8vIFdlIHdvdWxkIHJpc2sgZGlzcGxheWluZyB0d28gdG9vbHRpcHMgYXQgdGhlIHNhbWUgdGltZSAobmF0aXZlICsgdGhpcyBvbmUpLlxuICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgIGNoaWxkTm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChlbnRlclRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGlmIChlbnRlckRlbGF5IHx8IGh5c3RlcnNpc09wZW4gJiYgZW50ZXJOZXh0RGVsYXkpIHtcbiAgICAgIGVudGVyVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICAgIH0sIGh5c3RlcnNpc09wZW4gPyBlbnRlck5leHREZWxheSA6IGVudGVyRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxlYXZlID0gZXZlbnQgPT4ge1xuICAgIGNsZWFyVGltZW91dChlbnRlclRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGxlYXZlVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaGFuZGxlQ2xvc2UoZXZlbnQpO1xuICAgIH0sIGxlYXZlRGVsYXkpO1xuICB9O1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIC8vIFdlIGRvbid0IG5lY2Vzc2FyaWx5IGNhcmUgYWJvdXQgdGhlIGZvY3VzVmlzaWJsZSBzdGF0ZSAod2hpY2ggaXMgc2FmZSB0byBhY2Nlc3MgdmlhIHJlZiBhbnl3YXkpLlxuICAvLyBXZSBqdXN0IG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBUb29sdGlwIGlmIHRoZSBmb2N1cy12aXNpYmxlIHN0YXRlIGNoYW5nZXMuXG4gIGNvbnN0IFssIHNldENoaWxkSXNGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgICAgaGFuZGxlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgLy8gVGhlIGF1dG9Gb2N1cyBvZiBSZWFjdCBtaWdodCB0cmlnZ2VyIHRoZSBldmVudCBiZWZvcmUgdGhlIGNvbXBvbmVudERpZE1vdW50LlxuICAgIC8vIFdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcyBldmVudHVhbGl0eS5cbiAgICBpZiAoIWNoaWxkTm9kZSkge1xuICAgICAgc2V0Q2hpbGROb2RlKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRDaGlsZElzRm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgaGFuZGxlRW50ZXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGV0ZWN0VG91Y2hTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0KSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydChldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZU92ZXIgPSBoYW5kbGVFbnRlcjtcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9IGhhbmRsZUxlYXZlO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gZXZlbnQgPT4ge1xuICAgIGRldGVjdFRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgIHN0b3BUb3VjaEludGVyYWN0aW9uKCk7XG4gICAgcHJldlVzZXJTZWxlY3QuY3VycmVudCA9IGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdDtcbiAgICAvLyBQcmV2ZW50IGlPUyB0ZXh0IHNlbGVjdGlvbiBvbiBsb25nLXRhcC5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgdG91Y2hUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBwcmV2VXNlclNlbGVjdC5jdXJyZW50O1xuICAgICAgaGFuZGxlRW50ZXIoZXZlbnQpO1xuICAgIH0sIGVudGVyVG91Y2hEZWxheSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gZXZlbnQgPT4ge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKSB7XG4gICAgICBjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICB9XG4gICAgc3RvcFRvdWNoSW50ZXJhY3Rpb24oKTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBsZWF2ZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9LCBsZWF2ZVRvdWNoRGVsYXkpO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihuYXRpdmVFdmVudCkge1xuICAgICAgLy8gSUUxMSwgRWRnZSAocHJpb3IgdG8gdXNpbmcgQmluaz8pIHVzZSAnRXNjJ1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSA9PT0gJ0VzY2FwZScgfHwgbmF0aXZlRXZlbnQua2V5ID09PSAnRXNjJykge1xuICAgICAgICBoYW5kbGVDbG9zZShuYXRpdmVFdmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZSwgb3Blbl0pO1xuICBjb25zdCBoYW5kbGVVc2VSZWYgPSB1c2VGb3JrUmVmKHNldENoaWxkTm9kZSwgcmVmKTtcbiAgY29uc3QgaGFuZGxlRm9jdXNSZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgaGFuZGxlVXNlUmVmKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGhhbmRsZUZvY3VzUmVmKTtcblxuICAvLyBUaGVyZSBpcyBubyBwb2ludCBpbiBkaXNwbGF5aW5nIGFuIGVtcHR5IHRvb2x0aXAuXG4gIGlmICh0eXBlb2YgdGl0bGUgIT09ICdudW1iZXInICYmICF0aXRsZSkge1xuICAgIG9wZW4gPSBmYWxzZTtcbiAgfVxuICBjb25zdCBwb3BwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTW92ZSA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgIH1cbiAgICBjdXJzb3JQb3NpdGlvbiA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbmFtZU9yRGVzY1Byb3BzID0ge307XG4gIGNvbnN0IHRpdGxlSXNTdHJpbmcgPSB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnO1xuICBpZiAoZGVzY3JpYmVDaGlsZCkge1xuICAgIG5hbWVPckRlc2NQcm9wcy50aXRsZSA9ICFvcGVuICYmIHRpdGxlSXNTdHJpbmcgJiYgIWRpc2FibGVIb3Zlckxpc3RlbmVyID8gdGl0bGUgOiBudWxsO1xuICAgIG5hbWVPckRlc2NQcm9wc1snYXJpYS1kZXNjcmliZWRieSddID0gb3BlbiA/IGlkIDogbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBuYW1lT3JEZXNjUHJvcHNbJ2FyaWEtbGFiZWwnXSA9IHRpdGxlSXNTdHJpbmcgPyB0aXRsZSA6IG51bGw7XG4gICAgbmFtZU9yRGVzY1Byb3BzWydhcmlhLWxhYmVsbGVkYnknXSA9IG9wZW4gJiYgIXRpdGxlSXNTdHJpbmcgPyBpZCA6IG51bGw7XG4gIH1cbiAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9IF9leHRlbmRzKHt9LCBuYW1lT3JEZXNjUHJvcHMsIGV4Y2x1ZGVTbG90c0FuZFNsb3RQcm9wcyhvdGhlciksIGNoaWxkcmVuLnByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lKSxcbiAgICBvblRvdWNoU3RhcnQ6IGRldGVjdFRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSwgZm9sbG93Q3Vyc29yID8ge1xuICAgIG9uTW91c2VNb3ZlOiBoYW5kbGVNb3VzZU1vdmVcbiAgfSA6IHt9KTtcbiAgY29uc3QgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzID0ge307XG4gIGlmICghZGlzYWJsZVRvdWNoTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCA9IGhhbmRsZVRvdWNoU3RhcnQ7XG4gICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kID0gaGFuZGxlVG91Y2hFbmQ7XG4gIH1cbiAgaWYgKCFkaXNhYmxlSG92ZXJMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU92ZXIgPSBjb21wb3NlTW91c2VFdmVudEhhbmRsZXIoaGFuZGxlTW91c2VPdmVyLCBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKTtcbiAgICBjaGlsZHJlblByb3BzLm9uTW91c2VMZWF2ZSA9IGNvbXBvc2VNb3VzZUV2ZW50SGFuZGxlcihoYW5kbGVNb3VzZUxlYXZlLCBjaGlsZHJlblByb3BzLm9uTW91c2VMZWF2ZSk7XG4gICAgaWYgKCFkaXNhYmxlSW50ZXJhY3RpdmUpIHtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbk1vdXNlT3ZlciA9IGhhbmRsZU1vdXNlT3ZlcjtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbk1vdXNlTGVhdmUgPSBoYW5kbGVNb3VzZUxlYXZlO1xuICAgIH1cbiAgfVxuICBpZiAoIWRpc2FibGVGb2N1c0xpc3RlbmVyKSB7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbkZvY3VzID0gY29tcG9zZUZvY3VzRXZlbnRIYW5kbGVyKGhhbmRsZUZvY3VzLCBjaGlsZHJlblByb3BzLm9uRm9jdXMpO1xuICAgIGNoaWxkcmVuUHJvcHMub25CbHVyID0gY29tcG9zZUZvY3VzRXZlbnRIYW5kbGVyKGhhbmRsZUJsdXIsIGNoaWxkcmVuUHJvcHMub25CbHVyKTtcbiAgICBpZiAoIWRpc2FibGVJbnRlcmFjdGl2ZSkge1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uRm9jdXMgPSBoYW5kbGVGb2N1cztcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbkJsdXIgPSBoYW5kbGVCbHVyO1xuICAgIH1cbiAgfVxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYXJyb3csXG4gICAgZGlzYWJsZUludGVyYWN0aXZlLFxuICAgIHBsYWNlbWVudCxcbiAgICB0b3VjaDogaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCxcbiAgICBjb2xvcixcbiAgICB2YXJpYW50LFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW1Nsb3RSb290LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICBhZGRpdGlvbmFsUHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGlkLFxuICAgICAgcG9wcGVyUmVmLFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgYW5jaG9yRWw6IGZvbGxvd0N1cnNvciA/IHtcbiAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiAoKSA9PiAoe1xuICAgICAgICAgIHRvcDogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICBsZWZ0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIHJpZ2h0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIGJvdHRvbTogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfSlcbiAgICAgIH0gOiBjaGlsZE5vZGUsXG4gICAgICBvcGVuOiBjaGlsZE5vZGUgPyBvcGVuIDogZmFsc2UsXG4gICAgICBkaXNhYmxlUG9ydGFsLFxuICAgICAga2VlcE1vdW50ZWQsXG4gICAgICBkaXJlY3Rpb25cbiAgICB9LCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMpLFxuICAgIHJlZjogbnVsbCxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBlbGVtZW50VHlwZTogUG9wcGVyVW5zdHlsZWQsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBpbnRlcm5hbEZvcndhcmRlZFByb3BzOiB7XG4gICAgICBjb21wb25lbnQ6IFRvb2x0aXBSb290XG4gICAgfVxuICB9KTtcbiAgY29uc3QgW1Nsb3RBcnJvdywgYXJyb3dQcm9wc10gPSB1c2VTbG90KCdhcnJvdycsIHtcbiAgICByZWY6IHNldEFycm93UmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hcnJvdyxcbiAgICBlbGVtZW50VHlwZTogVG9vbHRpcEFycm93LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGNvbnN0IG1vZGlmaWVycyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gW3tcbiAgICBuYW1lOiAnYXJyb3cnLFxuICAgIGVuYWJsZWQ6IEJvb2xlYW4oYXJyb3dSZWYpLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGVsZW1lbnQ6IGFycm93UmVmLFxuICAgICAgLy8gaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvbW9kaWZpZXJzL2Fycm93LyNwYWRkaW5nXG4gICAgICAvLyBtYWtlIHRoZSBhcnJvdyBsb29rcyBuaWNlIHdpdGggdGhlIFRvb2x0aXAncyBib3JkZXIgcmFkaXVzXG4gICAgICBwYWRkaW5nOiA2XG4gICAgfVxuICB9LCB7XG4gICAgbmFtZTogJ29mZnNldCcsXG4gICAgb3B0aW9uczoge1xuICAgICAgb2Zmc2V0OiBbMCwgMTBdXG4gICAgfVxuICB9LCAuLi4ocm9vdFByb3BzLm1vZGlmaWVycyB8fCBbXSldLCBbYXJyb3dSZWYsIHJvb3RQcm9wcy5tb2RpZmllcnNdKTtcbiAgY29uc3QgcmVzdWx0ID0gLyojX19QVVJFX18qL19qc3hzKFNsb3RSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXG4gICAgY2hpbGRyZW46IFt0aXRsZSwgYXJyb3cgPyAvKiNfX1BVUkVfXyovX2pzeChTbG90QXJyb3csIF9leHRlbmRzKHt9LCBhcnJvd1Byb3BzKSkgOiBudWxsXVxuICB9KSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgJiYgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRyZW5Qcm9wcyksIGRpc2FibGVQb3J0YWwgPyByZXN1bHQgOlxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBGb3IgcG9ydGFsIHBvcHVwLCB0aGUgY2hpbGRyZW4gc2hvdWxkIG5vdCBpbmhlcml0IGNvbG9yIGludmVyc2lvbiBmcm9tIHRoZSB1cHBlciBwYXJlbnQuXG4gICAgX2pzeChDb2xvckludmVyc2lvbi5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGNoaWxkcmVuOiByZXN1bHRcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvb2x0aXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogSWYgYHRydWVgLCBhZGRzIGFuIGFycm93IHRvIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXJyb3c6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVG9vbHRpcCByZWZlcmVuY2UgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbmV1dHJhbCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkYW5nZXInLCAnaW5mbycsICduZXV0cmFsJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLFxuICAvKipcbiAgICogU2V0IHRvIGB0cnVlYCBpZiB0aGUgYHRpdGxlYCBhY3RzIGFzIGFuIGFjY2Vzc2libGUgZGVzY3JpcHRpb24uXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGB0aXRsZWAgYWN0cyBhcyBhbiBhY2Nlc3NpYmxlIGxhYmVsIGZvciB0aGUgY2hpbGQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZXNjcmliZUNoaWxkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERpcmVjdGlvbiBvZiB0aGUgdGV4dC5cbiAgICogQGRlZmF1bHQgJ2x0cidcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbHRyJywgJ3J0bCddKSxcbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGZvY3VzLXZpc2libGUgZXZlbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUZvY3VzTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gaG92ZXIgZXZlbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWFrZXMgYSB0b29sdGlwIG5vdCBpbnRlcmFjdGl2ZSwgaS5lLiBpdCB3aWxsIGNsb3NlIHdoZW4gdGhlIHVzZXJcbiAgICogaG92ZXJzIG92ZXIgdGhlIHRvb2x0aXAgYmVmb3JlIHRoZSBgbGVhdmVEZWxheWAgaXMgZXhwaXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVJbnRlcmFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBsb25nIHByZXNzIHRvdWNoIGV2ZW50cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaExpc3RlbmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGVudGVyIHRvdWNoIGRlbGF5IChgZW50ZXJUb3VjaERlbGF5YCkuXG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgZW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAgd2hlbiBvbmUgd2FzIGFscmVhZHkgcmVjZW50bHkgb3BlbmVkLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBlbnRlck5leHREZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGEgdXNlciBtdXN0IHRvdWNoIHRoZSBlbGVtZW50IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCA3MDBcbiAgICovXG4gIGVudGVyVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvb2x0aXAgZm9sbG93IHRoZSBjdXJzb3Igb3ZlciB0aGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9sbG93Q3Vyc29yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBpcyB1c2VkIHRvIGhlbHAgaW1wbGVtZW50IHRoZSBhY2Nlc3NpYmlsaXR5IGxvZ2ljLlxuICAgKiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGlzIHByb3AuIEl0IGZhbGxzIGJhY2sgdG8gYSByYW5kb21seSBnZW5lcmF0ZWQgaWQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBQb3BwZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBrZWVwTW91bnRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGxlYXZlIHRvdWNoIGRlbGF5IChgbGVhdmVUb3VjaERlbGF5YCkuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhZnRlciB0aGUgdXNlciBzdG9wcyB0b3VjaGluZyBhbiBlbGVtZW50IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIEBkZWZhdWx0IDE1MDBcbiAgICovXG4gIGxlYXZlVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFBvcHBlci5qcyBpcyBiYXNlZCBvbiBhIFwicGx1Z2luLWxpa2VcIiBhcmNoaXRlY3R1cmUsXG4gICAqIG1vc3Qgb2YgaXRzIGZlYXR1cmVzIGFyZSBmdWxseSBlbmNhcHN1bGF0ZWQgXCJtb2RpZmllcnNcIi5cbiAgICpcbiAgICogQSBtb2RpZmllciBpcyBhIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGVhY2ggdGltZSBQb3BwZXIuanMgbmVlZHMgdG9cbiAgICogY29tcHV0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlci5cbiAgICogRm9yIHRoaXMgcmVhc29uLCBtb2RpZmllcnMgc2hvdWxkIGJlIHZlcnkgcGVyZm9ybWFudCB0byBhdm9pZCBib3R0bGVuZWNrcy5cbiAgICogVG8gbGVhcm4gaG93IHRvIGNyZWF0ZSBhIG1vZGlmaWVyLCBbcmVhZCB0aGUgbW9kaWZpZXJzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyL21vZGlmaWVycy8pLlxuICAgKi9cbiAgbW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGRhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZWZmZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBlbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbmFtZTogUHJvcFR5cGVzLmFueSxcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBoYXNlOiBQcm9wVHlwZXMub25lT2YoWydhZnRlck1haW4nLCAnYWZ0ZXJSZWFkJywgJ2FmdGVyV3JpdGUnLCAnYmVmb3JlTWFpbicsICdiZWZvcmVSZWFkJywgJ2JlZm9yZVdyaXRlJywgJ21haW4nLCAncmVhZCcsICd3cml0ZSddKSxcbiAgICByZXF1aXJlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgcmVxdWlyZXNJZkV4aXN0czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbiAgfSkpLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRvb2x0aXAgcGxhY2VtZW50LlxuICAgKiBAZGVmYXVsdCAnYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWQnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCcsICdsZyddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRvb2x0aXAgdGl0bGUuIFplcm8tbGVuZ3RoIHRpdGxlcyBzdHJpbmcsIHVuZGVmaW5lZCwgbnVsbCBhbmQgZmFsc2UgYXJlIG5ldmVyIGRpc3BsYXllZC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBbZ2xvYmFsIHZhcmlhbnRdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvbWFpbi1mZWF0dXJlcy9nbG9iYWwtdmFyaWFudHMvKSB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdzb2xpZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ291dGxpbmVkJywgJ3BsYWluJywgJ3NvZnQnLCAnc29saWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUb29sdGlwOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUeXBvZ3JhcGh5Jywgc2xvdCk7XG59XG5jb25zdCB0eXBvZ3JhcGh5Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVR5cG9ncmFwaHknLCBbJ3Jvb3QnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnYm9keTEnLCAnYm9keTInLCAnYm9keTMnLCAnbm9XcmFwJywgJ2d1dHRlckJvdHRvbScsICdzdGFydERlY29yYXRvcicsICdlbmREZWNvcmF0b3InLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yTmV1dHJhbCcsICdjb2xvckRhbmdlcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdjb2xvckNvbnRleHQnLCAndmFyaWFudFBsYWluJywgJ3ZhcmlhbnRPdXRsaW5lZCcsICd2YXJpYW50U29mdCcsICd2YXJpYW50U29saWQnXSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29sb3JcIiwgXCJ0ZXh0Q29sb3JcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJjb21wb25lbnRcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJsZXZlbFwiLCBcImxldmVsTWFwcGluZ1wiLCBcImNoaWxkcmVuXCIsIFwiZW5kRGVjb3JhdG9yXCIsIFwic3RhcnREZWNvcmF0b3JcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfZXh0ZW5kU3hQcm9wIGFzIGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IHVzZUNvbG9ySW52ZXJzaW9uIH0gZnJvbSAnLi4vc3R5bGVzL0NvbG9ySW52ZXJzaW9uJztcbmltcG9ydCB1c2VTbG90IGZyb20gJy4uL3V0aWxzL3VzZVNsb3QnO1xuaW1wb3J0IHsgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdHlwb2dyYXBoeUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbi8qKlxuICogQGludGVybmFsXG4gKiBGb3IgY3JlYXRpbmcgbmVzdGVkIFR5cG9ncmFwaHkgdG8gaGF2ZSBpbmhlcml0IGxldmVsICh1bmxlc3MgYW4gZXhwbGljaXQgYGxldmVsYCBwcm9wIGlzIHByb3ZpZGVkKVxuICogYW5kIGNoYW5nZSB0aGUgSFRNTCB0YWcgdG8gYHNwYW5gICh1bmxlc3MgYW4gZXhwbGljaXQgYGNvbXBvbmVudGAgcHJvcCBpcyBwcm92aWRlZCkuXG4gKi9cbmV4cG9ydCBjb25zdCBUeXBvZ3JhcGh5TmVzdGVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFR5cG9ncmFwaHkncyBsZXZlbCB3aWxsIGJlIGluaGVyaXQgd2l0aGluIHRoaXMgY29udGV4dCB1bmxlc3MgYW4gZXhwbGljaXQgYGxldmVsYCBwcm9wIGlzIHByb3ZpZGVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiBjb21wb25lbnRzLCBlLmcuIFRhYmxlLCB0byBpbmhlcml0IHRoZSBwYXJlbnQncyBzaXplIGJ5IGRlZmF1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBUeXBvZ3JhcGh5SW5oZXJpdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZ3V0dGVyQm90dG9tLFxuICAgIG5vV3JhcCxcbiAgICBsZXZlbCxcbiAgICBjb2xvcixcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBsZXZlbCwgZ3V0dGVyQm90dG9tICYmICdndXR0ZXJCb3R0b20nLCBub1dyYXAgJiYgJ25vV3JhcCcsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudCAmJiBgdmFyaWFudCR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gXSxcbiAgICBzdGFydERlY29yYXRvcjogWydzdGFydERlY29yYXRvciddLFxuICAgIGVuZERlY29yYXRvcjogWydlbmREZWNvcmF0b3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MsIHt9KTtcbn07XG5jb25zdCBTdGFydERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveVR5cG9ncmFwaHknLFxuICBzbG90OiAnU3RhcnREZWNvcmF0b3InLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zdGFydERlY29yYXRvclxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX293bmVyU3RhdGUkc3g7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBtYXJnaW5JbmxpbmVFbmQ6ICdjbGFtcCg0cHgsIHZhcigtLVR5cG9ncmFwaHktZ2FwLCAwLjM3NWVtKSwgMC43NXJlbSknXG4gIH0sIHR5cGVvZiBvd25lclN0YXRlLnN0YXJ0RGVjb3JhdG9yICE9PSAnc3RyaW5nJyAmJiAob3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgfHwgKChfb3duZXJTdGF0ZSRzeCA9IG93bmVyU3RhdGUuc3gpID09IG51bGwgPyB2b2lkIDAgOiBfb3duZXJTdGF0ZSRzeC5hbGlnbkl0ZW1zKSA9PT0gJ2ZsZXgtc3RhcnQnKSAmJiB7XG4gICAgbWFyZ2luVG9wOiAnMnB4JyAvLyB0aGlzIG1ha2VzIHRoZSBhbGlnbm1lbnQgcGVyZmVjdCBpbiBtb3N0IGNhc2VzXG4gIH0pO1xufSk7XG5cbmNvbnN0IEVuZERlY29yYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ0pveVR5cG9ncmFwaHknLFxuICBzbG90OiAnZW5kRGVjb3JhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZW5kRGVjb3JhdG9yXG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfb3duZXJTdGF0ZSRzeDI7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBtYXJnaW5JbmxpbmVTdGFydDogJ2NsYW1wKDRweCwgdmFyKC0tVHlwb2dyYXBoeS1nYXAsIDAuMzc1ZW0pLCAwLjc1cmVtKSdcbiAgfSwgdHlwZW9mIG93bmVyU3RhdGUuZW5kRGVjb3JhdG9yICE9PSAnc3RyaW5nJyAmJiAob3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgfHwgKChfb3duZXJTdGF0ZSRzeDIgPSBvd25lclN0YXRlLnN4KSA9PSBudWxsID8gdm9pZCAwIDogX293bmVyU3RhdGUkc3gyLmFsaWduSXRlbXMpID09PSAnZmxleC1zdGFydCcpICYmIHtcbiAgICBtYXJnaW5Ub3A6ICcycHgnIC8vIHRoaXMgbWFrZXMgdGhlIGFsaWdubWVudCBwZXJmZWN0IGluIG1vc3QgY2FzZXNcbiAgfSk7XG59KTtcblxuY29uc3QgVHlwb2dyYXBoeVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdKb3lUeXBvZ3JhcGh5JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHR5cG9ncmFwaHkkb3duLCBfdGhlbWUkdHlwb2dyYXBoeSRvd24yLCBfdGhlbWUkdmFycyRwYWxldHRlJG8sIF90aGVtZSR2YXJpYW50cyRvd25lcjtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAnLS1JY29uLWZvbnRTaXplJzogJzEuMjVlbScsXG4gICAgbWFyZ2luOiAndmFyKC0tVHlwb2dyYXBoeS1tYXJnaW4sIDBweCknXG4gIH0sIG93bmVyU3RhdGUubmVzdGluZyA/IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lJyAvLyBsb29rcyBiZXR0ZXIgdGhhbiBgaW5saW5lLWJsb2NrYCB3aGVuIHVzaW5nIHdpdGggYHZhcmlhbnRgIHByb3AuXG4gIH0gOiB7XG4gICAgZm9udEZhbWlseTogdGhlbWUudmFycy5mb250RmFtaWx5LmJvZHksXG4gICAgLy8gZm9yIG5lc3RlZCB0eXBvZ3JhcGh5LCB0aGUgZm9udCBmYW1pbHkgd2lsbCBiZSBpbmhlcml0aW5nLlxuICAgIGRpc3BsYXk6ICdibG9jaycgLy8gZG9uJ3QgcmVseSBvbiB1c2VyIGFnZW50LCBhbHdheXMgYGJsb2NrYC5cbiAgfSwgKG93bmVyU3RhdGUuc3RhcnREZWNvcmF0b3IgfHwgb3duZXJTdGF0ZS5lbmREZWNvcmF0b3IpICYmIF9leHRlbmRzKHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgLy8gc2hvdWxkIG5vdCBiZSB1c2VkIGFzIGEgZGVmYXVsdCBiZWNhdXNlIGl0IGRvZXMgbm90IHdvcmsgd2VsbCB3aXRoIGBub1dyYXBgLlxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gIH0sIG93bmVyU3RhdGUubmVzdGluZyAmJiBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4J1xuICB9LCBvd25lclN0YXRlLnN0YXJ0RGVjb3JhdG9yICYmIHtcbiAgICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJyAvLyB0byBtYWtlIHRoZSB0ZXh0IGFsaWduIHdpdGggdGhlIHBhcmVudCdzIGNvbnRlbnRcbiAgfSkpLCBvd25lclN0YXRlLmxldmVsICYmIG93bmVyU3RhdGUubGV2ZWwgIT09ICdpbmhlcml0JyAmJiB0aGVtZS50eXBvZ3JhcGh5W293bmVyU3RhdGUubGV2ZWxdLCB7XG4gICAgZm9udFNpemU6IGB2YXIoLS1UeXBvZ3JhcGh5LWZvbnRTaXplLCAke293bmVyU3RhdGUubGV2ZWwgJiYgb3duZXJTdGF0ZS5sZXZlbCAhPT0gJ2luaGVyaXQnID8gKF90aGVtZSR0eXBvZ3JhcGh5JG93biA9IChfdGhlbWUkdHlwb2dyYXBoeSRvd24yID0gdGhlbWUudHlwb2dyYXBoeVtvd25lclN0YXRlLmxldmVsXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5JG93bjIuZm9udFNpemUpICE9IG51bGwgPyBfdGhlbWUkdHlwb2dyYXBoeSRvd24gOiAnaW5oZXJpdCcgOiAnaW5oZXJpdCd9KWBcbiAgfSwgb3duZXJTdGF0ZS5ub1dyYXAgJiYge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgfSwgb3duZXJTdGF0ZS5ndXR0ZXJCb3R0b20gJiYge1xuICAgIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnY29udGV4dCcgJiYge1xuICAgIGNvbG9yOiBgcmdiYSgkeyhfdGhlbWUkdmFycyRwYWxldHRlJG8gPSB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRwYWxldHRlJG8ubWFpbkNoYW5uZWx9IC8gMSlgXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCAmJiBfZXh0ZW5kcyh7XG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS52YXJzLnJhZGl1cy54cyxcbiAgICBwYWRkaW5nQmxvY2s6ICdtaW4oMC4xNWVtLCA0cHgpJyxcbiAgICBwYWRkaW5nSW5saW5lOiAnMC4zNzVlbSdcbiAgfSwgIW93bmVyU3RhdGUubmVzdGluZyAmJiB7XG4gICAgbWFyZ2luSW5saW5lOiAnLTAuMzc1ZW0nXG4gIH0sIChfdGhlbWUkdmFyaWFudHMkb3duZXIgPSB0aGVtZS52YXJpYW50c1tvd25lclN0YXRlLnZhcmlhbnRdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcmlhbnRzJG93bmVyW293bmVyU3RhdGUuY29sb3JdKSk7XG59KTtcbmNvbnN0IGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgZGlzcGxheTE6ICdoMScsXG4gIGRpc3BsYXkyOiAnaDInLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnLFxuICBib2R5MzogJ3NwYW4nLFxuICBib2R5NDogJ3NwYW4nLFxuICBib2R5NTogJ3NwYW4nLFxuICBpbmhlcml0OiAncCdcbn07XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtUeXBvZ3JhcGh5XShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LXR5cG9ncmFwaHkvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtUeXBvZ3JhcGh5IEFQSV0oaHR0cHM6Ly9tdWkuY29tL2pveS11aS9hcGkvdHlwb2dyYXBoeS8pXG4gKi9cbmNvbnN0IFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBfdXNlVGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgICAgcHJvcHM6IGluUHJvcHMsXG4gICAgICBuYW1lOiAnSm95VHlwb2dyYXBoeSdcbiAgICB9KSxcbiAgICB7XG4gICAgICBjb2xvcjogY29sb3JQcm9wLFxuICAgICAgdGV4dENvbG9yXG4gICAgfSA9IF91c2VUaGVtZVByb3BzLFxuICAgIHRoZW1lUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdXNlVGhlbWVQcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbmVzdGluZyA9IFJlYWN0LnVzZUNvbnRleHQoVHlwb2dyYXBoeU5lc3RlZENvbnRleHQpO1xuICBjb25zdCBpbmhlcml0aW5nID0gUmVhY3QudXNlQ29udGV4dChUeXBvZ3JhcGh5SW5oZXJpdENvbnRleHQpO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcChfZXh0ZW5kcyh7fSwgdGhlbWVQcm9wcywge1xuICAgIGNvbG9yOiB0ZXh0Q29sb3JcbiAgfSkpO1xuICBjb25zdCB7XG4gICAgICBjb21wb25lbnQ6IGNvbXBvbmVudFByb3AsXG4gICAgICBndXR0ZXJCb3R0b20gPSBmYWxzZSxcbiAgICAgIG5vV3JhcCA9IGZhbHNlLFxuICAgICAgbGV2ZWw6IGxldmVsUHJvcCA9ICdib2R5MScsXG4gICAgICBsZXZlbE1hcHBpbmcgPSB7XG4gICAgICAgIGgxOiAnaDEnLFxuICAgICAgICBoMjogJ2gyJyxcbiAgICAgICAgaDM6ICdoMycsXG4gICAgICAgIGg0OiAnaDQnLFxuICAgICAgICBoNTogJ2g1JyxcbiAgICAgICAgaDY6ICdoNicsXG4gICAgICAgIGJvZHkxOiAncCcsXG4gICAgICAgIGJvZHkyOiAncCcsXG4gICAgICAgIGJvZHkzOiAncCcsXG4gICAgICAgIGluaGVyaXQ6ICdwJ1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZW5kRGVjb3JhdG9yLFxuICAgICAgc3RhcnREZWNvcmF0b3IsXG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZDIpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKHZhcmlhbnQpO1xuICBjb25zdCBjb2xvciA9IGdldENvbG9yKGluUHJvcHMuY29sb3IsIHZhcmlhbnQgPyBjb2xvclByb3AgIT0gbnVsbCA/IGNvbG9yUHJvcCA6ICduZXV0cmFsJyA6IGNvbG9yUHJvcCk7XG4gIGNvbnN0IGxldmVsID0gbmVzdGluZyB8fCBpbmhlcml0aW5nID8gaW5Qcm9wcy5sZXZlbCB8fCAnaW5oZXJpdCcgOiBsZXZlbFByb3A7XG4gIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBvbmVudFByb3AgfHwgKG5lc3RpbmcgPyAnc3BhbicgOiBsZXZlbE1hcHBpbmdbbGV2ZWxdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1tsZXZlbF0gfHwgJ3NwYW4nKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGxldmVsLFxuICAgIGNvbXBvbmVudCxcbiAgICBjb2xvcixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIG5lc3RpbmcsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBleHRlcm5hbEZvcndhcmRlZFByb3BzID0gX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgY29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBbU2xvdFJvb3QsIHJvb3RQcm9wc10gPSB1c2VTbG90KCdyb290Jywge1xuICAgIHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBlbGVtZW50VHlwZTogVHlwb2dyYXBoeVJvb3QsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdFN0YXJ0RGVjb3JhdG9yLCBzdGFydERlY29yYXRvclByb3BzXSA9IHVzZVNsb3QoJ3N0YXJ0RGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGFydERlY29yYXRvcixcbiAgICBlbGVtZW50VHlwZTogU3RhcnREZWNvcmF0b3IsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbU2xvdEVuZERlY29yYXRvciwgZW5kRGVjb3JhdG9yUHJvcHNdID0gdXNlU2xvdCgnZW5kRGVjb3JhdG9yJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmREZWNvcmF0b3IsXG4gICAgZWxlbWVudFR5cGU6IEVuZERlY29yYXRvcixcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5TmVzdGVkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0cnVlLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoU2xvdFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnREZWNvcmF0b3IgJiYgLyojX19QVVJFX18qL19qc3goU2xvdFN0YXJ0RGVjb3JhdG9yLCBfZXh0ZW5kcyh7fSwgc3RhcnREZWNvcmF0b3JQcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogc3RhcnREZWNvcmF0b3JcbiAgICAgIH0pKSwgY2hpbGRyZW4sIGVuZERlY29yYXRvciAmJiAvKiNfX1BVUkVfXyovX2pzeChTbG90RW5kRGVjb3JhdG9yLCBfZXh0ZW5kcyh7fSwgZW5kRGVjb3JhdG9yUHJvcHMsIHtcbiAgICAgICAgY2hpbGRyZW46IGVuZERlY29yYXRvclxuICAgICAgfSkpXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ2luZm8nLCAnbmV1dHJhbCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmREZWNvcmF0b3I6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKiBAZGVmYXVsdCAnYm9keTEnXG4gICAqL1xuICBsZXZlbDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5MScsICdib2R5MicsICdib2R5MycsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdpbmhlcml0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIHZhcmlhbnQgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBIVE1MIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgYm9keTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgaDE6ICdoMScsXG4gICAqICAgaDI6ICdoMicsXG4gICAqICAgaDM6ICdoMycsXG4gICAqICAgaDQ6ICdoNCcsXG4gICAqICAgaDU6ICdoNScsXG4gICAqICAgaDY6ICdoNicsXG4gICAqICAgYm9keTE6ICdwJyxcbiAgICogICBib2R5MjogJ3AnLFxuICAgKiAgIGJvZHkzOiAncCcsXG4gICAqICAgaW5oZXJpdDogJ3AnLFxuICAgKiB9XG4gICAqL1xuICBsZXZlbE1hcHBpbmc6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBzdGFydERlY29yYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIGNvbG9yLlxuICAgKi9cbiAgdGV4dENvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5hbnksXG4gIC8qKlxuICAgKiBUaGUgW2dsb2JhbCB2YXJpYW50XShodHRwczovL211aS5jb20vam95LXVpL21haW4tZmVhdHVyZXMvZ2xvYmFsLXZhcmlhbnRzLykgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICdwbGFpbicsICdzb2Z0JywgJ3NvbGlkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUeXBvZ3JhcGh5OyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzLCB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyA9IChjb21wb25lbnROYW1lLCBzbG90KSA9PiB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCAnSm95Jyk7XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyA9IChjb21wb25lbnROYW1lLCBzbG90cykgPT4gdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cywgJ0pveScpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVN5c3RlbVRoZW1lIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgQ29sb3JJbnZlcnNpb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0IGNvbnN0IHVzZUNvbG9ySW52ZXJzaW9uID0gY2hpbGRWYXJpYW50ID0+IHtcbiAgY29uc3Qgb3ZlcnJpYWJsZVZhcmlhbnRzID0gUmVhY3QudXNlQ29udGV4dChDb2xvckludmVyc2lvbik7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSB0aGUgYGNvbG9yYCB2YWx1ZSBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAcGFyYW0ge0NvbG9yUGFsZXR0ZVByb3AgfCAnaW5oZXJpdCcgfCB1bmRlZmluZWR9IGluc3RhbmNlQ29sb3JQcm9wIFRoZSBjb2xvciBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge0NvbG9yUGFsZXR0ZVByb3AgfCAnaW5oZXJpdCcgfCB1bmRlZmluZWR9IGRlZmF1bHRDb2xvclByb3AgVGhlIGRlZmF1bHQgY29sb3IgdG8gdXNlIHdoZW4gdmFyaWFudCBpbnZlcnNpb24gaXMgbm90IGVuYWJsZWQuXG4gICAgICovXG4gICAgZ2V0Q29sb3I6IChpbnN0YW5jZUNvbG9yUHJvcCwgZGVmYXVsdENvbG9yUHJvcCkgPT4ge1xuICAgICAgaWYgKG92ZXJyaWFibGVWYXJpYW50cyAmJiBjaGlsZFZhcmlhbnQpIHtcbiAgICAgICAgaWYgKG92ZXJyaWFibGVWYXJpYW50cy5pbmNsdWRlcyhjaGlsZFZhcmlhbnQpKSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpY1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZUNvbG9yUHJvcCB8fCAnY29udGV4dCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgbG9naWNcbiAgICAgIHJldHVybiBpbnN0YW5jZUNvbG9yUHJvcCB8fCBkZWZhdWx0Q29sb3JQcm9wO1xuICAgIH1cbiAgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gQ29sb3JJbnZlcnNpb25Qcm92aWRlcih7XG4gIGNoaWxkcmVuLFxuICB2YXJpYW50XG59KSB7XG4gIHZhciBfdGhlbWUkY29sb3JJbnZlcnNpb247XG4gIGNvbnN0IHRoZW1lID0gdXNlU3lzdGVtVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbG9ySW52ZXJzaW9uLlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZhcmlhbnQgP1xuICAgIC8vIGB0aGVtZWAgY291bGQgY29tZSBmcm9tIG90aGVyIGVtb3Rpb24vc3R5bGVkLWNvbXBvbmVudHMgY29udGV4dC5cbiAgICAoKF90aGVtZSRjb2xvckludmVyc2lvbiA9IHRoZW1lLmNvbG9ySW52ZXJzaW9uQ29uZmlnKSAhPSBudWxsID8gX3RoZW1lJGNvbG9ySW52ZXJzaW9uIDogZGVmYXVsdFRoZW1lLmNvbG9ySW52ZXJzaW9uQ29uZmlnKVt2YXJpYW50XSA6IHVuZGVmaW5lZCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBDb2xvckludmVyc2lvbjsiLCJpbXBvcnQgZXh0ZW5kVGhlbWUgZnJvbSAnLi9leHRlbmRUaGVtZSc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBleHRlbmRUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGUgYW4gb2JqZWN0IGZyb20ga2V5cywgdmFsdWUgYW5kIHRoZW4gYXNzaWduIHRvIHRhcmdldFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiB0aGUgdGFyZ2V0IG9iamVjdCB0byBiZSBhc3NpZ25lZFxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNvdXJjZSA9IHt9XG4gKiBhc3NpZ25OZXN0ZWRLZXlzKHNvdXJjZSwgWydwYWxldHRlJywgJ3ByaW1hcnknXSwgJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknKVxuICogY29uc29sZS5sb2coc291cmNlKSAvLyB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzb3VyY2UgPSB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICogYXNzaWduTmVzdGVkS2V5cyhzb3VyY2UsIFsncGFsZXR0ZScsICdzZWNvbmRhcnknXSwgJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScpXG4gKiBjb25zb2xlLmxvZyhzb3VyY2UpIC8vIHsgcGFsZXR0ZTogeyBwcmltYXJ5OiAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScsIHNlY29uZGFyeTogJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScgfSB9XG4gKi9cbmV4cG9ydCBjb25zdCBhc3NpZ25OZXN0ZWRLZXlzID0gKG9iaiwga2V5cywgdmFsdWUsIGFycmF5S2V5cyA9IFtdKSA9PiB7XG4gIGxldCB0ZW1wID0gb2JqO1xuICBrZXlzLmZvckVhY2goKGssIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRlbXApKSB7XG4gICAgICAgIHRlbXBbTnVtYmVyKGspXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0ZW1wW2tdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCF0ZW1wW2tdKSB7XG4gICAgICAgIHRlbXBba10gPSBhcnJheUtleXMuaW5jbHVkZXMoaykgPyBbXSA6IHt9O1xuICAgICAgfVxuICAgICAgdGVtcCA9IHRlbXBba107XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayA6IGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gKiAgICAgICAgICAgICAgICAgICAtIHRoZSBkZWVwZXN0IGtleSBpbiBzb3VyY2Ugb2JqZWN0IGlzIHJlYWNoZWRcbiAqICAgICAgICAgICAgICAgICAgIC0gdGhlIHZhbHVlIG9mIHRoZSBkZWVwZXN0IGtleSBpcyBOT1QgYHVuZGVmaW5lZGAgfCBgbnVsbGBcbiAqXG4gKiBAZXhhbXBsZVxuICogd2Fsa09iamVjdERlZXAoeyBwYWxldHRlOiB7IHByaW1hcnk6IHsgbWFpbjogJyMwMDAwMDAnIH0gfSB9LCBjb25zb2xlLmxvZylcbiAqIC8vIFsncGFsZXR0ZScsICdwcmltYXJ5JywgJ21haW4nXSAnIzAwMDAwMCdcbiAqL1xuZXhwb3J0IGNvbnN0IHdhbGtPYmplY3REZWVwID0gKG9iaiwgY2FsbGJhY2ssIHNob3VsZFNraXBQYXRocykgPT4ge1xuICBmdW5jdGlvbiByZWN1cnNlKG9iamVjdCwgcGFyZW50S2V5cyA9IFtdLCBhcnJheUtleXMgPSBbXSkge1xuICAgIE9iamVjdC5lbnRyaWVzKG9iamVjdCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAoIXNob3VsZFNraXBQYXRocyB8fCBzaG91bGRTa2lwUGF0aHMgJiYgIXNob3VsZFNraXBQYXRocyhbLi4ucGFyZW50S2V5cywga2V5XSkpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVjdXJzZSh2YWx1ZSwgWy4uLnBhcmVudEtleXMsIGtleV0sIEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLmFycmF5S2V5cywga2V5XSA6IGFycmF5S2V5cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKFsuLi5wYXJlbnRLZXlzLCBrZXldLCB2YWx1ZSwgYXJyYXlLZXlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZWN1cnNlKG9iaik7XG59O1xuY29uc3QgZ2V0Q3NzVmFsdWUgPSAoa2V5cywgdmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoWydsaW5lSGVpZ2h0JywgJ2ZvbnRXZWlnaHQnLCAnb3BhY2l0eScsICd6SW5kZXgnXS5zb21lKHByb3AgPT4ga2V5cy5pbmNsdWRlcyhwcm9wKSkpIHtcbiAgICAgIC8vIENTUyBwcm9wZXJ0eSB0aGF0IGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBsYXN0S2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0S2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb3BhY2l0eScpID49IDApIHtcbiAgICAgIC8vIG9wYWNpdHkgdmFsdWVzIGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dmFsdWV9cHhgO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogYSBmdW5jdGlvbiB0aGF0IHBhcnNlIHRoZW1lIGFuZCByZXR1cm4geyBjc3MsIHZhcnMgfVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGVtZVxuICogQHBhcmFtIHt7XG4gKiAgcHJlZml4Pzogc3RyaW5nLFxuICogIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyPzogKG9iamVjdFBhdGhLZXlzOiBBcnJheTxzdHJpbmc+LCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiBib29sZWFuXG4gKiB9fSBvcHRpb25zLlxuICogIGBwcmVmaXhgOiBUaGUgcHJlZml4IG9mIHRoZSBnZW5lcmF0ZWQgQ1NTIHZhcmlhYmxlcy4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlLlxuICpcbiAqIEByZXR1cm5zIHt7IGNzczogT2JqZWN0LCB2YXJzOiBPYmplY3QgfX0gYGNzc2AgaXMgdGhlIHN0eWxlc2hlZXQsIGB2YXJzYCBpcyBhbiBvYmplY3QgdG8gZ2V0IGNzcyB2YXJpYWJsZSAoc2FtZSBzdHJ1Y3R1cmUgYXMgdGhlbWUpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IGNzcywgdmFycyB9ID0gcGFyc2VyKHtcbiAqICAgZm9udFNpemU6IDEyLFxuICogICBsaW5lSGVpZ2h0OiAxLjIsXG4gKiAgIHBhbGV0dGU6IHsgcHJpbWFyeTogeyA1MDA6ICd2YXIoLS1jb2xvciknIH0gfVxuICogfSwgeyBwcmVmaXg6ICdmb28nIH0pXG4gKlxuICogY29uc29sZS5sb2coY3NzKSAvLyB7ICctLWZvby1mb250U2l6ZSc6ICcxMnB4JywgJy0tZm9vLWxpbmVIZWlnaHQnOiAxLjIsICctLWZvby1wYWxldHRlLXByaW1hcnktNTAwJzogJ3ZhcigtLWNvbG9yKScgfVxuICogY29uc29sZS5sb2codmFycykgLy8geyBmb250U2l6ZTogJ3ZhcigtLWZvby1mb250U2l6ZSknLCBsaW5lSGVpZ2h0OiAndmFyKC0tZm9vLWxpbmVIZWlnaHQpJywgcGFsZXR0ZTogeyBwcmltYXJ5OiB7IDUwMDogJ3ZhcigtLWZvby1wYWxldHRlLXByaW1hcnktNTAwKScgfSB9IH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzVmFyc1BhcnNlcih0aGVtZSwgb3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJlZml4LFxuICAgIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjc3MgPSB7fTtcbiAgY29uc3QgdmFycyA9IHt9O1xuICBjb25zdCB2YXJzV2l0aERlZmF1bHRzID0ge307XG4gIHdhbGtPYmplY3REZWVwKHRoZW1lLCAoa2V5cywgdmFsdWUsIGFycmF5S2V5cykgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmICghc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgfHwgIXNob3VsZFNraXBHZW5lcmF0aW5nVmFyKGtleXMsIHZhbHVlKSkge1xuICAgICAgICAvLyBvbmx5IGNyZWF0ZSBjc3MgJiB2YXIgaWYgYHNob3VsZFNraXBHZW5lcmF0aW5nVmFyYCByZXR1cm4gZmFsc2VcbiAgICAgICAgY29uc3QgY3NzVmFyID0gYC0tJHtwcmVmaXggPyBgJHtwcmVmaXh9LWAgOiAnJ30ke2tleXMuam9pbignLScpfWA7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY3NzLCB7XG4gICAgICAgICAgW2Nzc1Zhcl06IGdldENzc1ZhbHVlKGtleXMsIHZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgICAgYXNzaWduTmVzdGVkS2V5cyh2YXJzLCBrZXlzLCBgdmFyKCR7Y3NzVmFyfSlgLCBhcnJheUtleXMpO1xuICAgICAgICBhc3NpZ25OZXN0ZWRLZXlzKHZhcnNXaXRoRGVmYXVsdHMsIGtleXMsIGB2YXIoJHtjc3NWYXJ9LCAke3ZhbHVlfSlgLCBhcnJheUtleXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwga2V5cyA9PiBrZXlzWzBdID09PSAndmFycycgLy8gc2tpcCAndmFycy8qJyBwYXRoc1xuICApO1xuXG4gIHJldHVybiB7XG4gICAgY3NzLFxuICAgIHZhcnMsXG4gICAgdmFyc1dpdGhEZWZhdWx0c1xuICB9O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29sb3JTY2hlbWVzXCIsIFwiY29tcG9uZW50c1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImxpZ2h0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3NzVmFyc1BhcnNlciBmcm9tICcuL2Nzc1ZhcnNQYXJzZXInO1xuZnVuY3Rpb24gcHJlcGFyZUNzc1ZhcnModGhlbWUsIHBhcnNlckNvbmZpZykge1xuICAvLyBAdHMtaWdub3JlIC0gaWdub3JlIGNvbXBvbmVudHMgZG8gbm90IGV4aXN0XG4gIGNvbnN0IHtcbiAgICAgIGNvbG9yU2NoZW1lcyA9IHt9XG4gICAgfSA9IHRoZW1lLFxuICAgIG90aGVyVGhlbWUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSh0aGVtZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIHZhcnM6IHJvb3RWYXJzLFxuICAgIGNzczogcm9vdENzcyxcbiAgICB2YXJzV2l0aERlZmF1bHRzOiByb290VmFyc1dpdGhEZWZhdWx0c1xuICB9ID0gY3NzVmFyc1BhcnNlcihvdGhlclRoZW1lLCBwYXJzZXJDb25maWcpO1xuICBsZXQgdGhlbWVWYXJzID0gcm9vdFZhcnNXaXRoRGVmYXVsdHM7XG4gIGNvbnN0IGNvbG9yU2NoZW1lc01hcCA9IHt9O1xuICBjb25zdCB7XG4gICAgICBsaWdodFxuICAgIH0gPSBjb2xvclNjaGVtZXMsXG4gICAgb3RoZXJDb2xvclNjaGVtZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShjb2xvclNjaGVtZXMsIF9leGNsdWRlZDIpO1xuICBPYmplY3QuZW50cmllcyhvdGhlckNvbG9yU2NoZW1lcyB8fCB7fSkuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhcnMsXG4gICAgICBjc3MsXG4gICAgICB2YXJzV2l0aERlZmF1bHRzXG4gICAgfSA9IGNzc1ZhcnNQYXJzZXIoc2NoZW1lLCBwYXJzZXJDb25maWcpO1xuICAgIHRoZW1lVmFycyA9IGRlZXBtZXJnZSh0aGVtZVZhcnMsIHZhcnNXaXRoRGVmYXVsdHMpO1xuICAgIGNvbG9yU2NoZW1lc01hcFtrZXldID0ge1xuICAgICAgY3NzLFxuICAgICAgdmFyc1xuICAgIH07XG4gIH0pO1xuICBpZiAobGlnaHQpIHtcbiAgICAvLyBsaWdodCBjb2xvciBzY2hlbWUgdmFycyBzaG91bGQgYmUgbWVyZ2VkIGxhc3QgdG8gc2V0IGFzIGRlZmF1bHRcbiAgICBjb25zdCB7XG4gICAgICBjc3MsXG4gICAgICB2YXJzLFxuICAgICAgdmFyc1dpdGhEZWZhdWx0c1xuICAgIH0gPSBjc3NWYXJzUGFyc2VyKGxpZ2h0LCBwYXJzZXJDb25maWcpO1xuICAgIHRoZW1lVmFycyA9IGRlZXBtZXJnZSh0aGVtZVZhcnMsIHZhcnNXaXRoRGVmYXVsdHMpO1xuICAgIGNvbG9yU2NoZW1lc01hcC5saWdodCA9IHtcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNcbiAgICB9O1xuICB9XG4gIGNvbnN0IGdlbmVyYXRlQ3NzVmFycyA9IGNvbG9yU2NoZW1lID0+IHtcbiAgICBpZiAoIWNvbG9yU2NoZW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjc3M6IHJvb3RDc3MsXG4gICAgICAgIHZhcnM6IHJvb3RWYXJzXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gY29sb3JTY2hlbWVzTWFwW2NvbG9yU2NoZW1lXTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB2YXJzOiB0aGVtZVZhcnMsXG4gICAgZ2VuZXJhdGVDc3NWYXJzXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBwcmVwYXJlQ3NzVmFyczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHVuc3RhYmxlX2RlZmF1bHRTeENvbmZpZyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmNvbnN0IHN4Q29uZmlnID0gX2V4dGVuZHMoe30sIHVuc3RhYmxlX2RlZmF1bHRTeENvbmZpZywge1xuICAvLyBUaGUgZGVmYXVsdCBzeXN0ZW0gdGhlbWVLZXkgaXMgc2hhcGVcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdyYWRpdXMnXG4gIH0sXG4gIC8vIFRoZSBkZWZhdWx0IHN5c3RlbSB0aGVtZUtleSBpcyBzaGFkb3dzXG4gIGJveFNoYWRvdzoge1xuICAgIHRoZW1lS2V5OiAnc2hhZG93J1xuICB9LFxuICAvLyBUaGUgZGVmYXVsdCBzeXN0ZW0gdGhlbWVLZXkgaXMgdHlwb2dyYXBoeVxuICBmb250RmFtaWx5OiB7XG4gICAgdGhlbWVLZXk6ICdmb250RmFtaWx5J1xuICB9LFxuICAvLyBUaGUgZGVmYXVsdCBzeXN0ZW0gdGhlbWVLZXkgaXMgdHlwb2dyYXBoeVxuICBmb250U2l6ZToge1xuICAgIHRoZW1lS2V5OiAnZm9udFNpemUnXG4gIH0sXG4gIC8vIFRoZSBkZWZhdWx0IHN5c3RlbSB0aGVtZUtleSBpcyB0eXBvZ3JhcGh5XG4gIGZvbnRXZWlnaHQ6IHtcbiAgICB0aGVtZUtleTogJ2ZvbnRXZWlnaHQnXG4gIH0sXG4gIC8vIFRoZSBkZWZhdWx0IHN5c3RlbSB0aGVtZUtleSBpcyB0eXBvZ3JhcGh5XG4gIGxldHRlclNwYWNpbmc6IHtcbiAgICB0aGVtZUtleTogJ2xldHRlclNwYWNpbmcnXG4gIH0sXG4gIC8vIFRoZSBkZWZhdWx0IHN5c3RlbSB0aGVtZUtleSBpcyB0eXBvZ3JhcGh5XG4gIGxpbmVIZWlnaHQ6IHtcbiAgICB0aGVtZUtleTogJ2xpbmVIZWlnaHQnXG4gIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgc3hDb25maWc7IiwiY29uc3QgY29sb3JzID0ge1xuICBncmV5OiB7XG4gICAgNTA6ICcjRjdGN0Y4JyxcbiAgICAxMDA6ICcjRUJFQkVGJyxcbiAgICAyMDA6ICcjRDhEOERGJyxcbiAgICAzMDA6ICcjQjlCOUM2JyxcbiAgICA0MDA6ICcjOEY4RkEzJyxcbiAgICA1MDA6ICcjNzM3MzhDJyxcbiAgICA2MDA6ICcjNUE1QTcyJyxcbiAgICA3MDA6ICcjNDM0MzU2JyxcbiAgICA4MDA6ICcjMjUyNTJEJyxcbiAgICA5MDA6ICcjMTMxMzE4J1xuICB9LFxuICBibHVlOiB7XG4gICAgNTA6ICcjRjRGQUZGJyxcbiAgICAxMDA6ICcjRERGMUZGJyxcbiAgICAyMDA6ICcjQUREQkZGJyxcbiAgICAzMDA6ICcjNkZCNkZGJyxcbiAgICA0MDA6ICcjMzk5MEZGJyxcbiAgICA1MDA6ICcjMDk2QkRFJyxcbiAgICA2MDA6ICcjMDU0REE3JyxcbiAgICA3MDA6ICcjMDIzNjdEJyxcbiAgICA4MDA6ICcjMDcyODU5JyxcbiAgICA5MDA6ICcjMDAxNTNDJ1xuICB9LFxuICB5ZWxsb3c6IHtcbiAgICA1MDogJyNGRkY4QzUnLFxuICAgIDEwMDogJyNGQUUxN0QnLFxuICAgIDIwMDogJyNFQUM1NEYnLFxuICAgIDMwMDogJyNENEE3MkMnLFxuICAgIDQwMDogJyNCRjg3MDAnLFxuICAgIDUwMDogJyM5QTY3MDAnLFxuICAgIDYwMDogJyM3RDRFMDAnLFxuICAgIDcwMDogJyM2MzNDMDEnLFxuICAgIDgwMDogJyM0RDJEMDAnLFxuICAgIDkwMDogJyMzQjIzMDAnXG4gIH0sXG4gIHJlZDoge1xuICAgIDUwOiAnI0ZGRjhGNicsXG4gICAgMTAwOiAnI0ZGRTlFOCcsXG4gICAgMjAwOiAnI0ZGQzdDNScsXG4gICAgMzAwOiAnI0ZGOTE5MicsXG4gICAgNDAwOiAnI0ZBNTI1NScsXG4gICAgNTAwOiAnI0QzMjMyRicsXG4gICAgNjAwOiAnI0ExMEUyNScsXG4gICAgNzAwOiAnIzc3MDYxQicsXG4gICAgODAwOiAnIzU4MDAxMycsXG4gICAgOTAwOiAnIzM5MDAwRCdcbiAgfSxcbiAgZ3JlZW46IHtcbiAgICA1MDogJyNGM0ZFRjUnLFxuICAgIDEwMDogJyNEN0Y1REQnLFxuICAgIDIwMDogJyM3N0VDOTUnLFxuICAgIDMwMDogJyM0Q0M3NkUnLFxuICAgIDQwMDogJyMyQ0EyNEQnLFxuICAgIDUwMDogJyMxQTdEMzYnLFxuICAgIDYwMDogJyMwRjVEMjYnLFxuICAgIDcwMDogJyMwMzQzMTgnLFxuICAgIDgwMDogJyMwMDJGMEYnLFxuICAgIDkwMDogJyMwMDFEMDknXG4gIH0sXG4gIHB1cnBsZToge1xuICAgIDUwOiAnI0ZERjdGRicsXG4gICAgMTAwOiAnI0Y0RUFGRicsXG4gICAgMjAwOiAnI0UxQ0JGRicsXG4gICAgMzAwOiAnI0M2OUVGRicsXG4gICAgNDAwOiAnI0EzNzRGOScsXG4gICAgNTAwOiAnIzgxNERERScsXG4gICAgNjAwOiAnIzVGMzVBRScsXG4gICAgNzAwOiAnIzQ1MjM4MicsXG4gICAgODAwOiAnIzMwMTc2MScsXG4gICAgOTAwOiAnIzFEMEE0MidcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGNvbG9yczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY3NzVmFyUHJlZml4XCIsIFwiYnJlYWtwb2ludHNcIiwgXCJzcGFjaW5nXCIsIFwiY29tcG9uZW50c1wiLCBcInZhcmlhbnRzXCIsIFwiY29sb3JJbnZlcnNpb25cIiwgXCJzaG91bGRTa2lwR2VuZXJhdGluZ1ZhclwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImNvbG9yU2NoZW1lc1wiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlQnJlYWtwb2ludHMsIGNyZWF0ZVNwYWNpbmcsIGNvbG9yQ2hhbm5lbCwgdW5zdGFibGVfcHJlcGFyZUNzc1ZhcnMgYXMgcHJlcGFyZUNzc1ZhcnMsIHVuc3RhYmxlX2NyZWF0ZUdldENzc1ZhciBhcyBzeXN0ZW1DcmVhdGVHZXRDc3NWYXIsIHVuc3RhYmxlX3N0eWxlRnVuY3Rpb25TeCBhcyBzdHlsZUZ1bmN0aW9uU3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vc3hDb25maWcnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuLi9jb2xvcnMnO1xuaW1wb3J0IGRlZmF1bHRTaG91bGRTa2lwR2VuZXJhdGluZ1ZhciBmcm9tICcuL3Nob3VsZFNraXBHZW5lcmF0aW5nVmFyJztcbmltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZVNvZnRJbnZlcnNpb24sIGNyZWF0ZVNvbGlkSW52ZXJzaW9uLCBjcmVhdGVWYXJpYW50IH0gZnJvbSAnLi92YXJpYW50VXRpbHMnO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdldENzc1ZhciA9IChjc3NWYXJQcmVmaXggPSAnam95JykgPT4gc3lzdGVtQ3JlYXRlR2V0Q3NzVmFyKGNzc1ZhclByZWZpeCk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRUaGVtZSh0aGVtZU9wdGlvbnMpIHtcbiAgdmFyIF9zY2FsZXNJbnB1dCRmb2N1cyR0aCwgX3NjYWxlc0lucHV0JGZvY3VzLCBfc2NhbGVzSW5wdXQkZm9jdXMkdGgyLCBfc2NhbGVzSW5wdXQkZm9jdXMyLCBfc2NhbGVzSW5wdXQkY29sb3JTY2gsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDIsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDMsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDQsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDUsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDYsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDcsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDgsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDksIF9zY2FsZXNJbnB1dCRjb2xvclNjaDEwLCBfc2NhbGVzSW5wdXQkY29sb3JTY2gxMSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMTIsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDEzLCBfc2NhbGVzSW5wdXQkY29sb3JTY2gxNCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMTUsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDE2LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gxNywgX3NjYWxlc0lucHV0JGNvbG9yU2NoMTgsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDE5LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gyMCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMjEsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDIyLCBfc2NhbGVzSW5wdXQkY29sb3JTY2gyMywgX3NjYWxlc0lucHV0JGNvbG9yU2NoMjQsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDI1LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gyNiwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMjcsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDI4LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gyOSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMzAsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDMxLCBfc2NhbGVzSW5wdXQkY29sb3JTY2gzMiwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMzMsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDM0LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gzNSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMzYsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDM3LCBfc2NhbGVzSW5wdXQkY29sb3JTY2gzOCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoMzksIF9zY2FsZXNJbnB1dCRjb2xvclNjaDQwLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g0MSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNDIsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDQzLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g0NCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNDUsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ2LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g0NywgX3NjYWxlc0lucHV0JGNvbG9yU2NoNDgsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ5LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g1MCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNTEsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDUyLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g1MywgX3NjYWxlc0lucHV0JGNvbG9yU2NoNTQsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDU1LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g1NiwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNTcsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDU4LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g1OSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNjAsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDYxLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g2MiwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNjMsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDY0LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g2NSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNjYsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDY3LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g2OCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNjksIF9zY2FsZXNJbnB1dCRjb2xvclNjaDcwLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g3MSwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNzIsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDczLCBfc2NhbGVzSW5wdXQkY29sb3JTY2g3NCwgX3NjYWxlc0lucHV0JGNvbG9yU2NoNzUsIF9zY2FsZXNJbnB1dCRjb2xvclNjaDc2LCBfc2NhbGVzSW5wdXQkY29sb3JTY2g3NywgX3NjYWxlc0lucHV0JGNvbG9yU2NoNzg7XG4gIGNvbnN0IF9yZWYgPSB0aGVtZU9wdGlvbnMgfHwge30sXG4gICAge1xuICAgICAgY3NzVmFyUHJlZml4ID0gJ2pveScsXG4gICAgICBicmVha3BvaW50cyxcbiAgICAgIHNwYWNpbmcsXG4gICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzSW5wdXQsXG4gICAgICB2YXJpYW50czogdmFyaWFudHNJbnB1dCxcbiAgICAgIGNvbG9ySW52ZXJzaW9uOiBjb2xvckludmVyc2lvbklucHV0LFxuICAgICAgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgPSBkZWZhdWx0U2hvdWxkU2tpcEdlbmVyYXRpbmdWYXJcbiAgICB9ID0gX3JlZixcbiAgICBzY2FsZXNJbnB1dCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGdldENzc1ZhciA9IGNyZWF0ZUdldENzc1Zhcihjc3NWYXJQcmVmaXgpO1xuICBjb25zdCBkZWZhdWx0Q29sb3JzID0ge1xuICAgIHByaW1hcnk6IGNvbG9ycy5ibHVlLFxuICAgIG5ldXRyYWw6IGNvbG9ycy5ncmV5LFxuICAgIGRhbmdlcjogY29sb3JzLnJlZCxcbiAgICBpbmZvOiBjb2xvcnMucHVycGxlLFxuICAgIHN1Y2Nlc3M6IGNvbG9ycy5ncmVlbixcbiAgICB3YXJuaW5nOiBjb2xvcnMueWVsbG93LFxuICAgIGNvbW1vbjoge1xuICAgICAgd2hpdGU6ICcjRkZGJyxcbiAgICAgIGJsYWNrOiAnIzA5MDkwRCdcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldENzc1ZhckNvbG9yID0gY3NzVmFyID0+IHtcbiAgICB2YXIgX2RlZmF1bHRDb2xvcnMkY29sb3I7XG4gICAgY29uc3QgdG9rZW5zID0gY3NzVmFyLnNwbGl0KCctJyk7XG4gICAgY29uc3QgY29sb3IgPSB0b2tlbnNbMV07XG4gICAgY29uc3QgaW5kZXggPSB0b2tlbnNbMl07XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGdldENzc1Zhcihjc3NWYXIsIChfZGVmYXVsdENvbG9ycyRjb2xvciA9IGRlZmF1bHRDb2xvcnNbY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX2RlZmF1bHRDb2xvcnMkY29sb3JbaW5kZXhdKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlTGlnaHRNb2RlVmFyaWFudFZhcmlhYmxlcyA9IGNvbG9yID0+ICh7XG4gICAgcGxhaW5Db2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNjAwYCksXG4gICAgcGxhaW5Ib3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0xMDBgKSxcbiAgICBwbGFpbkFjdGl2ZUJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0yMDBgKSxcbiAgICBwbGFpbkRpc2FibGVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTIwMGApLFxuICAgIG91dGxpbmVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTUwMGApLFxuICAgIG91dGxpbmVkQm9yZGVyOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0yMDBgKSxcbiAgICBvdXRsaW5lZEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTEwMGApLFxuICAgIG91dGxpbmVkSG92ZXJCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTMwMGApLFxuICAgIG91dGxpbmVkQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTIwMGApLFxuICAgIG91dGxpbmVkRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tMTAwYCksXG4gICAgb3V0bGluZWREaXNhYmxlZEJvcmRlcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tMTAwYCksXG4gICAgc29mdENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICBzb2Z0Qmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTEwMGApLFxuICAgIHNvZnRIb3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0yMDBgKSxcbiAgICBzb2Z0QWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTMwMGApLFxuICAgIHNvZnREaXNhYmxlZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0zMDBgKSxcbiAgICBzb2Z0RGlzYWJsZWRCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNTBgKSxcbiAgICBzb2xpZENvbG9yOiAnI2ZmZicsXG4gICAgc29saWRCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNTAwYCksXG4gICAgc29saWRIb3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICBzb2xpZEFjdGl2ZUJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS03MDBgKSxcbiAgICBzb2xpZERpc2FibGVkQ29sb3I6IGAjZmZmYCxcbiAgICBzb2xpZERpc2FibGVkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTIwMGApXG4gIH0pO1xuICBjb25zdCBjcmVhdGVEYXJrTW9kZVZhcmlhbnRWYXJpYWJsZXMgPSBjb2xvciA9PiAoe1xuICAgIHBsYWluQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTMwMGApLFxuICAgIHBsYWluSG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tODAwYCksXG4gICAgcGxhaW5BY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgcGxhaW5EaXNhYmxlZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS04MDBgKSxcbiAgICBvdXRsaW5lZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS0yMDBgKSxcbiAgICBvdXRsaW5lZEJvcmRlcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgb3V0bGluZWRIb3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS04MDBgKSxcbiAgICBvdXRsaW5lZEhvdmVyQm9yZGVyOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICBvdXRsaW5lZEFjdGl2ZUJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS05MDBgKSxcbiAgICBvdXRsaW5lZERpc2FibGVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTgwMGApLFxuICAgIG91dGxpbmVkRGlzYWJsZWRCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTgwMGApLFxuICAgIHNvZnRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tMjAwYCksXG4gICAgc29mdEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS05MDBgKSxcbiAgICBzb2Z0SG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tODAwYCksXG4gICAgc29mdEFjdGl2ZUJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS03MDBgKSxcbiAgICBzb2Z0RGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tODAwYCksXG4gICAgc29mdERpc2FibGVkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTkwMGApLFxuICAgIHNvbGlkQ29sb3I6IGAjZmZmYCxcbiAgICBzb2xpZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICBzb2xpZEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTcwMGApLFxuICAgIHNvbGlkQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLSR7Y29sb3J9LTgwMGApLFxuICAgIHNvbGlkRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgc29saWREaXNhYmxlZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS0ke2NvbG9yfS05MDBgKVxuICB9KTtcbiAgY29uc3QgbGlnaHRDb2xvclN5c3RlbSA9IHtcbiAgICBwYWxldHRlOiB7XG4gICAgICBtb2RlOiAnbGlnaHQnLFxuICAgICAgcHJpbWFyeTogX2V4dGVuZHMoe30sIGRlZmF1bHRDb2xvcnMucHJpbWFyeSwgY3JlYXRlTGlnaHRNb2RlVmFyaWFudFZhcmlhYmxlcygncHJpbWFyeScpKSxcbiAgICAgIG5ldXRyYWw6IF9leHRlbmRzKHt9LCBkZWZhdWx0Q29sb3JzLm5ldXRyYWwsIHtcbiAgICAgICAgcGxhaW5Db2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgcGxhaW5Ib3ZlckNvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTkwMGApLFxuICAgICAgICBwbGFpbkhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMTAwYCksXG4gICAgICAgIHBsYWluQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMjAwYCksXG4gICAgICAgIHBsYWluRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC0zMDBgKSxcbiAgICAgICAgb3V0bGluZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgb3V0bGluZWRCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMjAwYCksXG4gICAgICAgIG91dGxpbmVkSG92ZXJDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC05MDBgKSxcbiAgICAgICAgb3V0bGluZWRIb3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTEwMGApLFxuICAgICAgICBvdXRsaW5lZEhvdmVyQm9yZGVyOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTMwMGApLFxuICAgICAgICBvdXRsaW5lZEFjdGl2ZUJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTIwMGApLFxuICAgICAgICBvdXRsaW5lZERpc2FibGVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMzAwYCksXG4gICAgICAgIG91dGxpbmVkRGlzYWJsZWRCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMTAwYCksXG4gICAgICAgIHNvZnRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgc29mdEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTEwMGApLFxuICAgICAgICBzb2Z0SG92ZXJDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC05MDBgKSxcbiAgICAgICAgc29mdEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMjAwYCksXG4gICAgICAgIHNvZnRBY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC0zMDBgKSxcbiAgICAgICAgc29mdERpc2FibGVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMzAwYCksXG4gICAgICAgIHNvZnREaXNhYmxlZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTUwYCksXG4gICAgICAgIHNvbGlkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLWNvbW1vbi13aGl0ZWApLFxuICAgICAgICBzb2xpZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTYwMGApLFxuICAgICAgICBzb2xpZEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtNzAwYCksXG4gICAgICAgIHNvbGlkQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIHNvbGlkRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC0zMDBgKSxcbiAgICAgICAgc29saWREaXNhYmxlZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTUwYClcbiAgICAgIH0pLFxuICAgICAgZGFuZ2VyOiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbG9ycy5kYW5nZXIsIGNyZWF0ZUxpZ2h0TW9kZVZhcmlhbnRWYXJpYWJsZXMoJ2RhbmdlcicpKSxcbiAgICAgIGluZm86IF9leHRlbmRzKHt9LCBkZWZhdWx0Q29sb3JzLmluZm8sIGNyZWF0ZUxpZ2h0TW9kZVZhcmlhbnRWYXJpYWJsZXMoJ2luZm8nKSksXG4gICAgICBzdWNjZXNzOiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbG9ycy5zdWNjZXNzLCBjcmVhdGVMaWdodE1vZGVWYXJpYW50VmFyaWFibGVzKCdzdWNjZXNzJykpLFxuICAgICAgd2FybmluZzogX2V4dGVuZHMoe30sIGRlZmF1bHRDb2xvcnMud2FybmluZywgY3JlYXRlTGlnaHRNb2RlVmFyaWFudFZhcmlhYmxlcygnd2FybmluZycpLCB7XG4gICAgICAgIHNvbGlkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctODAwYCksXG4gICAgICAgIHNvbGlkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctMjAwYCksXG4gICAgICAgIHNvbGlkSG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy0zMDBgKSxcbiAgICAgICAgc29saWRBY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy00MDBgKSxcbiAgICAgICAgc29saWREaXNhYmxlZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS13YXJuaW5nLTIwMGApLFxuICAgICAgICBzb2xpZERpc2FibGVkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctNTBgKSxcbiAgICAgICAgc29mdENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS13YXJuaW5nLTgwMGApLFxuICAgICAgICBzb2Z0Qmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctNTBgKSxcbiAgICAgICAgc29mdEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctMTAwYCksXG4gICAgICAgIHNvZnRBY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy0yMDBgKSxcbiAgICAgICAgc29mdERpc2FibGVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctMjAwYCksXG4gICAgICAgIHNvZnREaXNhYmxlZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS13YXJuaW5nLTUwYCksXG4gICAgICAgIG91dGxpbmVkQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctODAwYCksXG4gICAgICAgIG91dGxpbmVkSG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy01MGApLFxuICAgICAgICBwbGFpbkNvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS13YXJuaW5nLTgwMGApLFxuICAgICAgICBwbGFpbkhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctNTBgKVxuICAgICAgfSksXG4gICAgICBjb21tb246IHtcbiAgICAgICAgd2hpdGU6ICcjRkZGJyxcbiAgICAgICAgYmxhY2s6ICcjMDkwOTBEJ1xuICAgICAgfSxcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgcHJpbWFyeTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC04MDAnKSxcbiAgICAgICAgc2Vjb25kYXJ5OiBnZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1uZXV0cmFsLTYwMCcpLFxuICAgICAgICB0ZXJ0aWFyeTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC01MDAnKVxuICAgICAgfSxcbiAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgYm9keTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtY29tbW9uLXdoaXRlJyksXG4gICAgICAgIHN1cmZhY2U6IGdldENzc1ZhckNvbG9yKCdwYWxldHRlLWNvbW1vbi13aGl0ZScpLFxuICAgICAgICBwb3B1cDogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtY29tbW9uLXdoaXRlJyksXG4gICAgICAgIGxldmVsMTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC01MCcpLFxuICAgICAgICBsZXZlbDI6IGdldENzc1ZhckNvbG9yKCdwYWxldHRlLW5ldXRyYWwtMTAwJyksXG4gICAgICAgIGxldmVsMzogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC0yMDAnKSxcbiAgICAgICAgdG9vbHRpcDogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC04MDAnKSxcbiAgICAgICAgYmFja2Ryb3A6ICdyZ2JhKDI1NSAyNTUgMjU1IC8gMC41KSdcbiAgICAgIH0sXG4gICAgICBkaXZpZGVyOiBgcmdiYSgke2dldENzc1ZhcigncGFsZXR0ZS1uZXV0cmFsLW1haW5DaGFubmVsJywgY29sb3JDaGFubmVsKGRlZmF1bHRDb2xvcnMubmV1dHJhbFs1MDBdKSAvLyBzaG91bGQgYmUgdGhlIHNhbWUgaW5kZXggYXMgaW4gYGF0dGFjaENvbG9yQ2hhbm5lbHNgXG4gICAgICApfSAvIDAuMjgpYCxcbiAgICAgIGZvY3VzVmlzaWJsZTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtcHJpbWFyeS01MDAnKVxuICAgIH0sXG4gICAgc2hhZG93UmluZzogJzAgMCAjMDAwJyxcbiAgICBzaGFkb3dDaGFubmVsOiAnMTg3IDE4NyAxODcnXG4gIH07XG4gIGNvbnN0IGRhcmtDb2xvclN5c3RlbSA9IHtcbiAgICBwYWxldHRlOiB7XG4gICAgICBtb2RlOiAnZGFyaycsXG4gICAgICBwcmltYXJ5OiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbG9ycy5wcmltYXJ5LCBjcmVhdGVEYXJrTW9kZVZhcmlhbnRWYXJpYWJsZXMoJ3ByaW1hcnknKSksXG4gICAgICBuZXV0cmFsOiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbG9ycy5uZXV0cmFsLCB7XG4gICAgICAgIHBsYWluQ29sb3I6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtMjAwYCksXG4gICAgICAgIHBsYWluSG92ZXJDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC01MGApLFxuICAgICAgICBwbGFpbkhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIHBsYWluQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtNzAwYCksXG4gICAgICAgIHBsYWluRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC03MDBgKSxcbiAgICAgICAgb3V0bGluZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC0yMDBgKSxcbiAgICAgICAgb3V0bGluZWRCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIG91dGxpbmVkSG92ZXJDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC01MGApLFxuICAgICAgICBvdXRsaW5lZEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIG91dGxpbmVkSG92ZXJCb3JkZXI6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtNzAwYCksXG4gICAgICAgIG91dGxpbmVkQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIG91dGxpbmVkRGlzYWJsZWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgb3V0bGluZWREaXNhYmxlZEJvcmRlcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgc29mdENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTIwMGApLFxuICAgICAgICBzb2Z0Qmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtODAwYCksXG4gICAgICAgIHNvZnRIb3ZlckNvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTUwYCksXG4gICAgICAgIHNvZnRIb3ZlckJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTcwMGApLFxuICAgICAgICBzb2Z0QWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtNjAwYCksXG4gICAgICAgIHNvZnREaXNhYmxlZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTcwMGApLFxuICAgICAgICBzb2Z0RGlzYWJsZWRCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC05MDBgKSxcbiAgICAgICAgc29saWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtY29tbW9uLXdoaXRlYCksXG4gICAgICAgIHNvbGlkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtNjAwYCksXG4gICAgICAgIHNvbGlkSG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC03MDBgKSxcbiAgICAgICAgc29saWRBY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtbmV1dHJhbC04MDBgKSxcbiAgICAgICAgc29saWREaXNhYmxlZENvbG9yOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1uZXV0cmFsLTcwMGApLFxuICAgICAgICBzb2xpZERpc2FibGVkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLW5ldXRyYWwtOTAwYClcbiAgICAgIH0pLFxuICAgICAgZGFuZ2VyOiBfZXh0ZW5kcyh7fSwgZGVmYXVsdENvbG9ycy5kYW5nZXIsIGNyZWF0ZURhcmtNb2RlVmFyaWFudFZhcmlhYmxlcygnZGFuZ2VyJykpLFxuICAgICAgaW5mbzogX2V4dGVuZHMoe30sIGRlZmF1bHRDb2xvcnMuaW5mbywgY3JlYXRlRGFya01vZGVWYXJpYW50VmFyaWFibGVzKCdpbmZvJykpLFxuICAgICAgc3VjY2VzczogX2V4dGVuZHMoe30sIGRlZmF1bHRDb2xvcnMuc3VjY2VzcywgY3JlYXRlRGFya01vZGVWYXJpYW50VmFyaWFibGVzKCdzdWNjZXNzJyksIHtcbiAgICAgICAgc29saWRDb2xvcjogJyNmZmYnLFxuICAgICAgICBzb2xpZEJnOiBnZXRDc3NWYXJDb2xvcihgcGFsZXR0ZS1zdWNjZXNzLTYwMGApLFxuICAgICAgICBzb2xpZEhvdmVyQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXN1Y2Nlc3MtNzAwYCksXG4gICAgICAgIHNvbGlkQWN0aXZlQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXN1Y2Nlc3MtODAwYClcbiAgICAgIH0pLFxuICAgICAgd2FybmluZzogX2V4dGVuZHMoe30sIGRlZmF1bHRDb2xvcnMud2FybmluZywgY3JlYXRlRGFya01vZGVWYXJpYW50VmFyaWFibGVzKCd3YXJuaW5nJyksIHtcbiAgICAgICAgc29saWRDb2xvcjogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtY29tbW9uLWJsYWNrYCksXG4gICAgICAgIHNvbGlkQmc6IGdldENzc1ZhckNvbG9yKGBwYWxldHRlLXdhcm5pbmctMzAwYCksXG4gICAgICAgIHNvbGlkSG92ZXJCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy00MDBgKSxcbiAgICAgICAgc29saWRBY3RpdmVCZzogZ2V0Q3NzVmFyQ29sb3IoYHBhbGV0dGUtd2FybmluZy01MDBgKVxuICAgICAgfSksXG4gICAgICBjb21tb246IHtcbiAgICAgICAgd2hpdGU6ICcjRkZGJyxcbiAgICAgICAgYmxhY2s6ICcjMDkwOTBEJ1xuICAgICAgfSxcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgcHJpbWFyeTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC0xMDAnKSxcbiAgICAgICAgc2Vjb25kYXJ5OiBnZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1uZXV0cmFsLTMwMCcpLFxuICAgICAgICB0ZXJ0aWFyeTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC00MDAnKVxuICAgICAgfSxcbiAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgYm9keTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC05MDAnKSxcbiAgICAgICAgc3VyZmFjZTogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtY29tbW9uLWJsYWNrJyksXG4gICAgICAgIHBvcHVwOiBnZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1uZXV0cmFsLTgwMCcpLFxuICAgICAgICBsZXZlbDE6IGdldENzc1ZhckNvbG9yKCdwYWxldHRlLW5ldXRyYWwtODAwJyksXG4gICAgICAgIGxldmVsMjogZ2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtbmV1dHJhbC03MDAnKSxcbiAgICAgICAgbGV2ZWwzOiBnZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1uZXV0cmFsLTYwMCcpLFxuICAgICAgICB0b29sdGlwOiBnZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1uZXV0cmFsLTYwMCcpLFxuICAgICAgICBiYWNrZHJvcDogYHJnYmEoJHtnZXRDc3NWYXIoJ3BhbGV0dGUtbmV1dHJhbC1kYXJrQ2hhbm5lbCcsIGNvbG9yQ2hhbm5lbChkZWZhdWx0Q29sb3JzLm5ldXRyYWxbODAwXSkgLy8gc2hvdWxkIGJlIHRoZSBzYW1lIGluZGV4IGFzIGluIGBhdHRhY2hDb2xvckNoYW5uZWxzYFxuICAgICAgICApfSAvIDAuNSlgXG4gICAgICB9LFxuICAgICAgZGl2aWRlcjogYHJnYmEoJHtnZXRDc3NWYXIoJ3BhbGV0dGUtbmV1dHJhbC1tYWluQ2hhbm5lbCcsIGNvbG9yQ2hhbm5lbChkZWZhdWx0Q29sb3JzLm5ldXRyYWxbNTAwXSkgLy8gc2hvdWxkIGJlIHRoZSBzYW1lIGluZGV4IGFzIGluIGBhdHRhY2hDb2xvckNoYW5uZWxzYFxuICAgICAgKX0gLyAwLjI0KWAsXG4gICAgICBmb2N1c1Zpc2libGU6IGdldENzc1ZhckNvbG9yKCdwYWxldHRlLXByaW1hcnktNTAwJylcbiAgICB9LFxuICAgIHNoYWRvd1Jpbmc6ICcwIDAgIzAwMCcsXG4gICAgc2hhZG93Q2hhbm5lbDogJzAgMCAwJ1xuICB9O1xuICBjb25zdCBmb250RmFtaWx5RmFsbGJhY2sgPSAnLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCInO1xuICBjb25zdCBmb250RmFtaWx5ID0gX2V4dGVuZHMoe1xuICAgIGJvZHk6IGBcIlB1YmxpYyBTYW5zXCIsICR7Z2V0Q3NzVmFyKCdmb250RmFtaWx5LWZhbGxiYWNrJywgZm9udEZhbWlseUZhbGxiYWNrKX1gLFxuICAgIGRpc3BsYXk6IGBcIlB1YmxpYyBTYW5zXCIsICR7Z2V0Q3NzVmFyKCdmb250RmFtaWx5LWZhbGxiYWNrJywgZm9udEZhbWlseUZhbGxiYWNrKX1gLFxuICAgIGNvZGU6ICdTb3VyY2UgQ29kZSBQcm8sdWktbW9ub3NwYWNlLFNGTW9uby1SZWd1bGFyLE1lbmxvLE1vbmFjbyxDb25zb2xhcyxMaWJlcmF0aW9uIE1vbm8sQ291cmllciBOZXcsbW9ub3NwYWNlJyxcbiAgICBmYWxsYmFjazogZm9udEZhbWlseUZhbGxiYWNrXG4gIH0sIHNjYWxlc0lucHV0LmZvbnRGYW1pbHkpO1xuICBjb25zdCBmb250V2VpZ2h0ID0gX2V4dGVuZHMoe1xuICAgIHhzOiAyMDAsXG4gICAgc206IDMwMCxcbiAgICBtZDogNTAwLFxuICAgIGxnOiA2MDAsXG4gICAgeGw6IDcwMCxcbiAgICB4bDI6IDgwMCxcbiAgICB4bDM6IDkwMFxuICB9LCBzY2FsZXNJbnB1dC5mb250V2VpZ2h0KTtcbiAgY29uc3QgZm9udFNpemUgPSBfZXh0ZW5kcyh7XG4gICAgeHMzOiAnMC41cmVtJyxcbiAgICB4czI6ICcwLjYyNXJlbScsXG4gICAgeHM6ICcwLjc1cmVtJyxcbiAgICBzbTogJzAuODc1cmVtJyxcbiAgICBtZDogJzFyZW0nLFxuICAgIGxnOiAnMS4xMjVyZW0nLFxuICAgIHhsOiAnMS4yNXJlbScsXG4gICAgeGwyOiAnMS41cmVtJyxcbiAgICB4bDM6ICcxLjg3NXJlbScsXG4gICAgeGw0OiAnMi4yNXJlbScsXG4gICAgeGw1OiAnM3JlbScsXG4gICAgeGw2OiAnMy43NXJlbScsXG4gICAgeGw3OiAnNC41cmVtJ1xuICB9LCBzY2FsZXNJbnB1dC5mb250U2l6ZSk7XG4gIGNvbnN0IGxpbmVIZWlnaHQgPSBfZXh0ZW5kcyh7XG4gICAgc206IDEuMjUsXG4gICAgbWQ6IDEuNSxcbiAgICBsZzogMS43XG4gIH0sIHNjYWxlc0lucHV0LmxpbmVIZWlnaHQpO1xuICBjb25zdCBsZXR0ZXJTcGFjaW5nID0gX2V4dGVuZHMoe1xuICAgIHNtOiAnLTAuMDFlbScsXG4gICAgbWQ6ICcwLjA4M2VtJyxcbiAgICBsZzogJzAuMTI1ZW0nXG4gIH0sIHNjYWxlc0lucHV0LmxldHRlclNwYWNpbmcpO1xuICBjb25zdCBkZWZhdWx0U2NhbGVzID0ge1xuICAgIGNvbG9yU2NoZW1lczoge1xuICAgICAgbGlnaHQ6IGxpZ2h0Q29sb3JTeXN0ZW0sXG4gICAgICBkYXJrOiBkYXJrQ29sb3JTeXN0ZW1cbiAgICB9LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb2N1czoge1xuICAgICAgdGhpY2tuZXNzOiAnMnB4JyxcbiAgICAgIHNlbGVjdG9yOiBgJi4ke2dlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCAnZm9jdXNWaXNpYmxlJyl9LCAmOmZvY3VzLXZpc2libGVgLFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvdXRsaW5lT2Zmc2V0OiBgdmFyKC0tZm9jdXMtb3V0bGluZS1vZmZzZXQsICR7Z2V0Q3NzVmFyKCdmb2N1cy10aGlja25lc3MnLCAoX3NjYWxlc0lucHV0JGZvY3VzJHRoID0gKF9zY2FsZXNJbnB1dCRmb2N1cyA9IHNjYWxlc0lucHV0LmZvY3VzKSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGZvY3VzLnRoaWNrbmVzcykgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRmb2N1cyR0aCA6ICcycHgnKX0pYCxcbiAgICAgICAgb3V0bGluZTogYCR7Z2V0Q3NzVmFyKCdmb2N1cy10aGlja25lc3MnLCAoX3NjYWxlc0lucHV0JGZvY3VzJHRoMiA9IChfc2NhbGVzSW5wdXQkZm9jdXMyID0gc2NhbGVzSW5wdXQuZm9jdXMpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkZm9jdXMyLnRoaWNrbmVzcykgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRmb2N1cyR0aDIgOiAnMnB4Jyl9IHNvbGlkICR7Z2V0Q3NzVmFyKCdwYWxldHRlLWZvY3VzVmlzaWJsZScsIGRlZmF1bHRDb2xvcnMucHJpbWFyeVs1MDBdKX1gXG4gICAgICB9XG4gICAgfSxcbiAgICBsaW5lSGVpZ2h0LFxuICAgIGxldHRlclNwYWNpbmcsXG4gICAgcmFkaXVzOiB7XG4gICAgICB4czogJzRweCcsXG4gICAgICBzbTogJzhweCcsXG4gICAgICBtZDogJzEycHgnLFxuICAgICAgbGc6ICcxNnB4JyxcbiAgICAgIHhsOiAnMjBweCdcbiAgICB9LFxuICAgIHNoYWRvdzoge1xuICAgICAgeHM6IGAke2dldENzc1Zhcignc2hhZG93UmluZycsIChfc2NhbGVzSW5wdXQkY29sb3JTY2ggPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMiA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoMi5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDMuc2hhZG93UmluZykgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaCA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93UmluZyl9LCAwIDFweCAycHggMCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDQgPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNSA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g2ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoNS5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDYuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDQgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMTIpYCxcbiAgICAgIHNtOiBgJHtnZXRDc3NWYXIoJ3NoYWRvd1JpbmcnLCAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g4ID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDkgPSBfc2NhbGVzSW5wdXQkY29sb3JTY2g4LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoOS5zaGFkb3dSaW5nKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoNyA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93UmluZyl9LCAwLjNweCAwLjhweCAxLjFweCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDEwID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDExID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDEyID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoMTEubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2gxMi5zaGFkb3dDaGFubmVsKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoMTAgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMTEpLCAwLjVweCAxLjNweCAxLjhweCAtMC42cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2gxMyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2gxNCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gxNSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDE0LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoMTUuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDEzIDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjE4KSwgMS4xcHggMi43cHggMy44cHggLTEuMnB4IHJnYmEoJHtnZXRDc3NWYXIoJ3NoYWRvd0NoYW5uZWwnLCAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMTYgPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMTcgPSBzY2FsZXNJbnB1dC5jb2xvclNjaGVtZXMpID09IG51bGwgPyB2b2lkIDAgOiAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMTggPSBfc2NhbGVzSW5wdXQkY29sb3JTY2gxNy5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDE4LnNoYWRvd0NoYW5uZWwpICE9IG51bGwgPyBfc2NhbGVzSW5wdXQkY29sb3JTY2gxNiA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93Q2hhbm5lbCl9IC8gMC4yNilgLFxuICAgICAgbWQ6IGAke2dldENzc1Zhcignc2hhZG93UmluZycsIChfc2NhbGVzSW5wdXQkY29sb3JTY2gxOSA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2gyMCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gyMSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDIwLmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoMjEuc2hhZG93UmluZykgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDE5IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dSaW5nKX0sIDAuM3B4IDAuOHB4IDEuMXB4IHJnYmEoJHtnZXRDc3NWYXIoJ3NoYWRvd0NoYW5uZWwnLCAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMjIgPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMjMgPSBzY2FsZXNJbnB1dC5jb2xvclNjaGVtZXMpID09IG51bGwgPyB2b2lkIDAgOiAoX3NjYWxlc0lucHV0JGNvbG9yU2NoMjQgPSBfc2NhbGVzSW5wdXQkY29sb3JTY2gyMy5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDI0LnNoYWRvd0NoYW5uZWwpICE9IG51bGwgPyBfc2NhbGVzSW5wdXQkY29sb3JTY2gyMiA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93Q2hhbm5lbCl9IC8gMC4xMiksIDEuMXB4IDIuOHB4IDMuOXB4IC0wLjRweCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDI1ID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDI2ID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDI3ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoMjYubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2gyNy5zaGFkb3dDaGFubmVsKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoMjUgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMTcpLCAyLjRweCA2LjFweCA4LjZweCAtMC44cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2gyOCA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2gyOSA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzMCA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDI5LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoMzAuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDI4IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjIzKSwgNS4zcHggMTMuM3B4IDE4LjhweCAtMS4ycHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2gzMSA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzMiA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzMyA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDMyLmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoMzMuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDMxIDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjI5KWAsXG4gICAgICBsZzogYCR7Z2V0Q3NzVmFyKCdzaGFkb3dSaW5nJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDM0ID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDM1ID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDM2ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoMzUubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2gzNi5zaGFkb3dSaW5nKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoMzQgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd1JpbmcpfSwgMC4zcHggMC44cHggMS4xcHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2gzNyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzOCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2gzOSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDM4LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoMzkuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDM3IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjExKSwgMS44cHggNC41cHggNi40cHggLTAuMnB4IHJnYmEoJHtnZXRDc3NWYXIoJ3NoYWRvd0NoYW5uZWwnLCAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNDAgPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNDEgPSBzY2FsZXNJbnB1dC5jb2xvclNjaGVtZXMpID09IG51bGwgPyB2b2lkIDAgOiAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNDIgPSBfc2NhbGVzSW5wdXQkY29sb3JTY2g0MS5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDQyLnNoYWRvd0NoYW5uZWwpICE9IG51bGwgPyBfc2NhbGVzSW5wdXQkY29sb3JTY2g0MCA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93Q2hhbm5lbCl9IC8gMC4xMyksIDMuMnB4IDcuOXB4IDExLjJweCAtMC40cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g0MyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g0NCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g0NSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ0LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNDUuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDQzIDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjE2KSwgNC44cHggMTJweCAxN3B4IC0wLjVweCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ2ID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ3ID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ4ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoNDcubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2g0OC5zaGFkb3dDaGFubmVsKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoNDYgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMTkpLCA3cHggMTcuNXB4IDI0LjdweCAtMC43cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g0OSA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g1MCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g1MSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDUwLmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNTEuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDQ5IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjIxKWAsXG4gICAgICB4bDogYCR7Z2V0Q3NzVmFyKCdzaGFkb3dSaW5nJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDUyID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDUzID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDU0ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoNTMubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2g1NC5zaGFkb3dSaW5nKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoNTIgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd1JpbmcpfSwgMC4zcHggMC44cHggMS4xcHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g1NSA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g1NiA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g1NyA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDU2LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNTcuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDU1IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjExKSwgMS44cHggNC41cHggNi40cHggLTAuMnB4IHJnYmEoJHtnZXRDc3NWYXIoJ3NoYWRvd0NoYW5uZWwnLCAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNTggPSAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNTkgPSBzY2FsZXNJbnB1dC5jb2xvclNjaGVtZXMpID09IG51bGwgPyB2b2lkIDAgOiAoX3NjYWxlc0lucHV0JGNvbG9yU2NoNjAgPSBfc2NhbGVzSW5wdXQkY29sb3JTY2g1OS5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2FsZXNJbnB1dCRjb2xvclNjaDYwLnNoYWRvd0NoYW5uZWwpICE9IG51bGwgPyBfc2NhbGVzSW5wdXQkY29sb3JTY2g1OCA6IGxpZ2h0Q29sb3JTeXN0ZW0uc2hhZG93Q2hhbm5lbCl9IC8gMC4xMyksIDMuMnB4IDcuOXB4IDExLjJweCAtMC40cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g2MSA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g2MiA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g2MyA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDYyLmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNjMuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDYxIDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjE2KSwgNC44cHggMTJweCAxN3B4IC0wLjVweCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDY0ID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDY1ID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDY2ID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoNjUubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2g2Ni5zaGFkb3dDaGFubmVsKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoNjQgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMTkpLCA3cHggMTcuNXB4IDI0LjdweCAtMC43cHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g2NyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g2OCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g2OSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDY4LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNjkuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDY3IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjIxKSwgMTAuMnB4IDI1LjVweCAzNnB4IC0wLjlweCByZ2JhKCR7Z2V0Q3NzVmFyKCdzaGFkb3dDaGFubmVsJywgKF9zY2FsZXNJbnB1dCRjb2xvclNjaDcwID0gKF9zY2FsZXNJbnB1dCRjb2xvclNjaDcxID0gc2NhbGVzSW5wdXQuY29sb3JTY2hlbWVzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zY2FsZXNJbnB1dCRjb2xvclNjaDcyID0gX3NjYWxlc0lucHV0JGNvbG9yU2NoNzEubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfc2NhbGVzSW5wdXQkY29sb3JTY2g3Mi5zaGFkb3dDaGFubmVsKSAhPSBudWxsID8gX3NjYWxlc0lucHV0JGNvbG9yU2NoNzAgOiBsaWdodENvbG9yU3lzdGVtLnNoYWRvd0NoYW5uZWwpfSAvIDAuMjQpLCAxNC44cHggMzYuOHB4IDUyLjFweCAtMS4xcHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g3MyA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g3NCA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g3NSA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDc0LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNzUuc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDczIDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjI3KSwgMjFweCA1Mi4zcHggNzRweCAtMS4ycHggcmdiYSgke2dldENzc1Zhcignc2hhZG93Q2hhbm5lbCcsIChfc2NhbGVzSW5wdXQkY29sb3JTY2g3NiA9IChfc2NhbGVzSW5wdXQkY29sb3JTY2g3NyA9IHNjYWxlc0lucHV0LmNvbG9yU2NoZW1lcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2NhbGVzSW5wdXQkY29sb3JTY2g3OCA9IF9zY2FsZXNJbnB1dCRjb2xvclNjaDc3LmxpZ2h0KSA9PSBudWxsID8gdm9pZCAwIDogX3NjYWxlc0lucHV0JGNvbG9yU2NoNzguc2hhZG93Q2hhbm5lbCkgIT0gbnVsbCA/IF9zY2FsZXNJbnB1dCRjb2xvclNjaDc2IDogbGlnaHRDb2xvclN5c3RlbS5zaGFkb3dDaGFubmVsKX0gLyAwLjI5KWBcbiAgICB9LFxuICAgIHpJbmRleDoge1xuICAgICAgYmFkZ2U6IDEsXG4gICAgICB0YWJsZTogMTAsXG4gICAgICBwb3B1cDogMTAwMCxcbiAgICAgIG1vZGFsOiAxMzAwLFxuICAgICAgdG9vbHRpcDogMTUwMFxuICAgIH0sXG4gICAgdHlwb2dyYXBoeToge1xuICAgICAgZGlzcGxheTE6IHtcbiAgICAgICAgZm9udEZhbWlseTogZ2V0Q3NzVmFyKCdmb250RmFtaWx5LWRpc3BsYXknLCBmb250RmFtaWx5LmRpc3BsYXkpLFxuICAgICAgICBmb250V2VpZ2h0OiBnZXRDc3NWYXIoJ2ZvbnRXZWlnaHQteGwnLCBmb250V2VpZ2h0LnhsLnRvU3RyaW5nKCkpLFxuICAgICAgICBmb250U2l6ZTogZ2V0Q3NzVmFyKCdmb250U2l6ZS14bDcnLCBmb250U2l6ZS54bDcpLFxuICAgICAgICBsaW5lSGVpZ2h0OiBnZXRDc3NWYXIoJ2xpbmVIZWlnaHQtc20nLCBsaW5lSGVpZ2h0LnNtLnRvU3RyaW5nKCkpLFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiBnZXRDc3NWYXIoJ2xldHRlclNwYWNpbmctc20nLCBsZXR0ZXJTcGFjaW5nLnNtKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXByaW1hcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXkyOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGdldENzc1ZhcignZm9udEZhbWlseS1kaXNwbGF5JywgZm9udEZhbWlseS5kaXNwbGF5KSxcbiAgICAgICAgZm9udFdlaWdodDogZ2V0Q3NzVmFyKCdmb250V2VpZ2h0LXhsJywgZm9udFdlaWdodC54bC50b1N0cmluZygpKSxcbiAgICAgICAgZm9udFNpemU6IGdldENzc1ZhcignZm9udFNpemUteGw2JywgZm9udFNpemUueGw2KSxcbiAgICAgICAgbGluZUhlaWdodDogZ2V0Q3NzVmFyKCdsaW5lSGVpZ2h0LXNtJywgbGluZUhlaWdodC5zbS50b1N0cmluZygpKSxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogZ2V0Q3NzVmFyKCdsZXR0ZXJTcGFjaW5nLXNtJywgbGV0dGVyU3BhY2luZy5zbSksXG4gICAgICAgIGNvbG9yOiBnZXRDc3NWYXIoJ3BhbGV0dGUtdGV4dC1wcmltYXJ5JywgbGlnaHRDb2xvclN5c3RlbS5wYWxldHRlLnRleHQucHJpbWFyeSlcbiAgICAgIH0sXG4gICAgICBoMToge1xuICAgICAgICBmb250RmFtaWx5OiBnZXRDc3NWYXIoJ2ZvbnRGYW1pbHktZGlzcGxheScsIGZvbnRGYW1pbHkuZGlzcGxheSksXG4gICAgICAgIGZvbnRXZWlnaHQ6IGdldENzc1ZhcignZm9udFdlaWdodC1sZycsIGZvbnRXZWlnaHQubGcudG9TdHJpbmcoKSksXG4gICAgICAgIGZvbnRTaXplOiBnZXRDc3NWYXIoJ2ZvbnRTaXplLXhsNScsIGZvbnRTaXplLnhsNSksXG4gICAgICAgIGxpbmVIZWlnaHQ6IGdldENzc1ZhcignbGluZUhlaWdodC1zbScsIGxpbmVIZWlnaHQuc20udG9TdHJpbmcoKSksXG4gICAgICAgIGxldHRlclNwYWNpbmc6IGdldENzc1ZhcignbGV0dGVyU3BhY2luZy1zbScsIGxldHRlclNwYWNpbmcuc20pLFxuICAgICAgICBjb2xvcjogZ2V0Q3NzVmFyKCdwYWxldHRlLXRleHQtcHJpbWFyeScsIGxpZ2h0Q29sb3JTeXN0ZW0ucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgaDI6IHtcbiAgICAgICAgZm9udEZhbWlseTogZ2V0Q3NzVmFyKCdmb250RmFtaWx5LWRpc3BsYXknLCBmb250RmFtaWx5LmRpc3BsYXkpLFxuICAgICAgICBmb250V2VpZ2h0OiBnZXRDc3NWYXIoJ2ZvbnRXZWlnaHQtbGcnLCBmb250V2VpZ2h0LmxnLnRvU3RyaW5nKCkpLFxuICAgICAgICBmb250U2l6ZTogZ2V0Q3NzVmFyKCdmb250U2l6ZS14bDQnLCBmb250U2l6ZS54bDQpLFxuICAgICAgICBsaW5lSGVpZ2h0OiBnZXRDc3NWYXIoJ2xpbmVIZWlnaHQtc20nLCBsaW5lSGVpZ2h0LnNtLnRvU3RyaW5nKCkpLFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiBnZXRDc3NWYXIoJ2xldHRlclNwYWNpbmctc20nLCBsZXR0ZXJTcGFjaW5nLnNtKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXByaW1hcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgIGgzOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGdldENzc1ZhcignZm9udEZhbWlseS1ib2R5JywgZm9udEZhbWlseS5ib2R5KSxcbiAgICAgICAgZm9udFdlaWdodDogZ2V0Q3NzVmFyKCdmb250V2VpZ2h0LW1kJywgZm9udFdlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgZm9udFNpemU6IGdldENzc1ZhcignZm9udFNpemUteGwzJywgZm9udFNpemUueGwzKSxcbiAgICAgICAgbGluZUhlaWdodDogZ2V0Q3NzVmFyKCdsaW5lSGVpZ2h0LXNtJywgbGluZUhlaWdodC5zbS50b1N0cmluZygpKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXByaW1hcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgIGg0OiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGdldENzc1ZhcignZm9udEZhbWlseS1ib2R5JywgZm9udEZhbWlseS5ib2R5KSxcbiAgICAgICAgZm9udFdlaWdodDogZ2V0Q3NzVmFyKCdmb250V2VpZ2h0LW1kJywgZm9udFdlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgZm9udFNpemU6IGdldENzc1ZhcignZm9udFNpemUteGwyJywgZm9udFNpemUueGwyKSxcbiAgICAgICAgbGluZUhlaWdodDogZ2V0Q3NzVmFyKCdsaW5lSGVpZ2h0LW1kJywgbGluZUhlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXByaW1hcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgIGg1OiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGdldENzc1ZhcignZm9udEZhbWlseS1ib2R5JywgZm9udEZhbWlseS5ib2R5KSxcbiAgICAgICAgZm9udFdlaWdodDogZ2V0Q3NzVmFyKCdmb250V2VpZ2h0LW1kJywgZm9udFdlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgZm9udFNpemU6IGdldENzc1ZhcignZm9udFNpemUteGwnLCBmb250U2l6ZS54bCksXG4gICAgICAgIGxpbmVIZWlnaHQ6IGdldENzc1ZhcignbGluZUhlaWdodC1tZCcsIGxpbmVIZWlnaHQubWQudG9TdHJpbmcoKSksXG4gICAgICAgIGNvbG9yOiBnZXRDc3NWYXIoJ3BhbGV0dGUtdGV4dC1wcmltYXJ5JywgbGlnaHRDb2xvclN5c3RlbS5wYWxldHRlLnRleHQucHJpbWFyeSlcbiAgICAgIH0sXG4gICAgICBoNjoge1xuICAgICAgICBmb250RmFtaWx5OiBnZXRDc3NWYXIoJ2ZvbnRGYW1pbHktYm9keScsIGZvbnRGYW1pbHkuYm9keSksXG4gICAgICAgIGZvbnRXZWlnaHQ6IGdldENzc1ZhcignZm9udFdlaWdodC1tZCcsIGZvbnRXZWlnaHQubWQudG9TdHJpbmcoKSksXG4gICAgICAgIGZvbnRTaXplOiBnZXRDc3NWYXIoJ2ZvbnRTaXplLWxnJywgZm9udFNpemUubGcpLFxuICAgICAgICBsaW5lSGVpZ2h0OiBnZXRDc3NWYXIoJ2xpbmVIZWlnaHQtbWQnLCBsaW5lSGVpZ2h0Lm1kLnRvU3RyaW5nKCkpLFxuICAgICAgICBjb2xvcjogZ2V0Q3NzVmFyKCdwYWxldHRlLXRleHQtcHJpbWFyeScsIGxpZ2h0Q29sb3JTeXN0ZW0ucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgYm9keTE6IHtcbiAgICAgICAgZm9udEZhbWlseTogZ2V0Q3NzVmFyKCdmb250RmFtaWx5LWJvZHknLCBmb250RmFtaWx5LmJvZHkpLFxuICAgICAgICBmb250U2l6ZTogZ2V0Q3NzVmFyKCdmb250U2l6ZS1tZCcsIGZvbnRTaXplLm1kKSxcbiAgICAgICAgbGluZUhlaWdodDogZ2V0Q3NzVmFyKCdsaW5lSGVpZ2h0LW1kJywgbGluZUhlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXByaW1hcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgIGJvZHkyOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGdldENzc1ZhcignZm9udEZhbWlseS1ib2R5JywgZm9udEZhbWlseS5ib2R5KSxcbiAgICAgICAgZm9udFNpemU6IGdldENzc1ZhcignZm9udFNpemUtc20nLCBmb250U2l6ZS5zbSksXG4gICAgICAgIGxpbmVIZWlnaHQ6IGdldENzc1ZhcignbGluZUhlaWdodC1tZCcsIGxpbmVIZWlnaHQubWQudG9TdHJpbmcoKSksXG4gICAgICAgIGNvbG9yOiBnZXRDc3NWYXIoJ3BhbGV0dGUtdGV4dC1zZWNvbmRhcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC5zZWNvbmRhcnkpXG4gICAgICB9LFxuICAgICAgYm9keTM6IHtcbiAgICAgICAgZm9udEZhbWlseTogZ2V0Q3NzVmFyKCdmb250RmFtaWx5LWJvZHknLCBmb250RmFtaWx5LmJvZHkpLFxuICAgICAgICBmb250U2l6ZTogZ2V0Q3NzVmFyKCdmb250U2l6ZS14cycsIGZvbnRTaXplLnhzKSxcbiAgICAgICAgbGluZUhlaWdodDogZ2V0Q3NzVmFyKCdsaW5lSGVpZ2h0LW1kJywgbGluZUhlaWdodC5tZC50b1N0cmluZygpKSxcbiAgICAgICAgY29sb3I6IGdldENzc1ZhcigncGFsZXR0ZS10ZXh0LXRlcnRpYXJ5JywgbGlnaHRDb2xvclN5c3RlbS5wYWxldHRlLnRleHQudGVydGlhcnkpXG4gICAgICB9LFxuICAgICAgYm9keTQ6IHtcbiAgICAgICAgZm9udEZhbWlseTogZ2V0Q3NzVmFyKCdmb250RmFtaWx5LWJvZHknLCBmb250RmFtaWx5LmJvZHkpLFxuICAgICAgICBmb250U2l6ZTogZ2V0Q3NzVmFyKCdmb250U2l6ZS14czInLCBmb250U2l6ZS54czIpLFxuICAgICAgICBsaW5lSGVpZ2h0OiBnZXRDc3NWYXIoJ2xpbmVIZWlnaHQtbWQnLCBsaW5lSGVpZ2h0Lm1kLnRvU3RyaW5nKCkpLFxuICAgICAgICBjb2xvcjogZ2V0Q3NzVmFyKCdwYWxldHRlLXRleHQtdGVydGlhcnknLCBsaWdodENvbG9yU3lzdGVtLnBhbGV0dGUudGV4dC50ZXJ0aWFyeSlcbiAgICAgIH0sXG4gICAgICBib2R5NToge1xuICAgICAgICBmb250RmFtaWx5OiBnZXRDc3NWYXIoJ2ZvbnRGYW1pbHktYm9keScsIGZvbnRGYW1pbHkuYm9keSksXG4gICAgICAgIGZvbnRTaXplOiBnZXRDc3NWYXIoJ2ZvbnRTaXplLXhzMycsIGZvbnRTaXplLnhzMyksXG4gICAgICAgIGxpbmVIZWlnaHQ6IGdldENzc1ZhcignbGluZUhlaWdodC1tZCcsIGxpbmVIZWlnaHQubWQudG9TdHJpbmcoKSksXG4gICAgICAgIGNvbG9yOiBnZXRDc3NWYXIoJ3BhbGV0dGUtdGV4dC10ZXJ0aWFyeScsIGxpZ2h0Q29sb3JTeXN0ZW0ucGFsZXR0ZS50ZXh0LnRlcnRpYXJ5KVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgX3JlZjIgPSBzY2FsZXNJbnB1dCA/IGRlZXBtZXJnZShkZWZhdWx0U2NhbGVzLCBzY2FsZXNJbnB1dCkgOiBkZWZhdWx0U2NhbGVzLFxuICAgIHtcbiAgICAgIGNvbG9yU2NoZW1lc1xuICAgIH0gPSBfcmVmMixcbiAgICBtZXJnZWRTY2FsZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IHRoZW1lID0gX2V4dGVuZHMoe1xuICAgIGNvbG9yU2NoZW1lc1xuICB9LCBtZXJnZWRTY2FsZXMsIHtcbiAgICBicmVha3BvaW50czogY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMgIT0gbnVsbCA/IGJyZWFrcG9pbnRzIDoge30pLFxuICAgIGNvbXBvbmVudHM6IGRlZXBtZXJnZSh7XG4gICAgICAvLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGFic3RyYWN0IFN2Z0ljb24gb3V0IG9mIEBtdWkvbWF0ZXJpYWxcbiAgICAgIE11aVN2Z0ljb246IHtcbiAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgZm9udFNpemU6ICd4bCdcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVPdmVycmlkZXM6IHtcbiAgICAgICAgICByb290OiAoe1xuICAgICAgICAgICAgb3duZXJTdGF0ZSxcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZVByb3BcbiAgICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICB2YXIgX3RoZW1lUHJvcCR2YXJzJHBhbGV0O1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VGb250U2l6ZSA9IG93bmVyU3RhdGUuaW5zdGFuY2VGb250U2l6ZTtcbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgIGNvbG9yOiAndmFyKC0tSWNvbi1jb2xvciknLFxuICAgICAgICAgICAgICBtYXJnaW46ICd2YXIoLS1JY29uLW1hcmdpbiknXG4gICAgICAgICAgICB9LCBvd25lclN0YXRlLmZvbnRTaXplICYmIG93bmVyU3RhdGUuZm9udFNpemUgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICAgICAgICAgIGZvbnRTaXplOiBgdmFyKC0tSWNvbi1mb250U2l6ZSwgJHt0aGVtZVByb3AudmFycy5mb250U2l6ZVtvd25lclN0YXRlLmZvbnRTaXplXX0pYFxuICAgICAgICAgICAgfSwgb3duZXJTdGF0ZS5jb2xvciAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2NvbnRleHQnICYmIHRoZW1lUHJvcC52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0gJiYge1xuICAgICAgICAgICAgICBjb2xvcjogYHJnYmEoJHsoX3RoZW1lUHJvcCR2YXJzJHBhbGV0ID0gdGhlbWVQcm9wLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZVByb3AkdmFycyRwYWxldC5tYWluQ2hhbm5lbH0gLyAxKWBcbiAgICAgICAgICAgIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdjb250ZXh0JyAmJiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGVtZVByb3AudmFycy5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgICAgICAgICB9LCBpbnN0YW5jZUZvbnRTaXplICYmIGluc3RhbmNlRm9udFNpemUgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICAgICAgICAgICctLUljb24tZm9udFNpemUnOiB0aGVtZVByb3AudmFycy5mb250U2l6ZVtpbnN0YW5jZUZvbnRTaXplXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgY29tcG9uZW50c0lucHV0KSxcbiAgICBjc3NWYXJQcmVmaXgsXG4gICAgZ2V0Q3NzVmFyLFxuICAgIHNwYWNpbmc6IGNyZWF0ZVNwYWNpbmcoc3BhY2luZyksXG4gICAgY29sb3JJbnZlcnNpb25Db25maWc6IHtcbiAgICAgIHNvZnQ6IFsncGxhaW4nLCAnb3V0bGluZWQnLCAnc29mdCcsICdzb2xpZCddLFxuICAgICAgc29saWQ6IFsncGxhaW4nLCAnb3V0bGluZWQnLCAnc29mdCcsICdzb2xpZCddXG4gICAgfVxuICB9KTsgLy8gTmVlZCB0eXBlIGNhc3RpbmcgZHVlIHRvIG1vZHVsZSBhdWdtZW50YXRpb24gaW5zaWRlIHRoZSByZXBvXG5cbiAgLyoqXG4gICBDb2xvciBjaGFubmVscyBnZW5lcmF0aW9uXG4gICovXG4gIGZ1bmN0aW9uIGF0dGFjaENvbG9yQ2hhbm5lbHMoc3VwcG9ydGVkQ29sb3JTY2hlbWUsIHBhbGV0dGUpIHtcbiAgICBPYmplY3Qua2V5cyhwYWxldHRlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBjaGFubmVsTWFwcGluZyA9IHtcbiAgICAgICAgbWFpbjogJzUwMCcsXG4gICAgICAgIGxpZ2h0OiAnMjAwJyxcbiAgICAgICAgZGFyazogJzgwMCdcbiAgICAgIH07XG4gICAgICBpZiAoc3VwcG9ydGVkQ29sb3JTY2hlbWUgPT09ICdkYXJrJykge1xuICAgICAgICAvLyBAdHMtaWdub3JlIGludGVybmFsXG4gICAgICAgIGNoYW5uZWxNYXBwaW5nLm1haW4gPSA0MDA7XG4gICAgICB9XG4gICAgICBpZiAoIXBhbGV0dGVba2V5XS5tYWluQ2hhbm5lbCAmJiBwYWxldHRlW2tleV1bY2hhbm5lbE1hcHBpbmcubWFpbl0pIHtcbiAgICAgICAgcGFsZXR0ZVtrZXldLm1haW5DaGFubmVsID0gY29sb3JDaGFubmVsKHBhbGV0dGVba2V5XVtjaGFubmVsTWFwcGluZy5tYWluXSk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhbGV0dGVba2V5XS5saWdodENoYW5uZWwgJiYgcGFsZXR0ZVtrZXldW2NoYW5uZWxNYXBwaW5nLmxpZ2h0XSkge1xuICAgICAgICBwYWxldHRlW2tleV0ubGlnaHRDaGFubmVsID0gY29sb3JDaGFubmVsKHBhbGV0dGVba2V5XVtjaGFubmVsTWFwcGluZy5saWdodF0pO1xuICAgICAgfVxuICAgICAgaWYgKCFwYWxldHRlW2tleV0uZGFya0NoYW5uZWwgJiYgcGFsZXR0ZVtrZXldW2NoYW5uZWxNYXBwaW5nLmRhcmtdKSB7XG4gICAgICAgIHBhbGV0dGVba2V5XS5kYXJrQ2hhbm5lbCA9IGNvbG9yQ2hhbm5lbChwYWxldHRlW2tleV1bY2hhbm5lbE1hcHBpbmcuZGFya10pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8vIFNldCB0aGUgY2hhbm5lbHNcbiAgT2JqZWN0LmVudHJpZXModGhlbWUuY29sb3JTY2hlbWVzKS5mb3JFYWNoKChbc3VwcG9ydGVkQ29sb3JTY2hlbWUsIGNvbG9yU3lzdGVtXSkgPT4ge1xuICAgIGF0dGFjaENvbG9yQ2hhbm5lbHMoc3VwcG9ydGVkQ29sb3JTY2hlbWUsIGNvbG9yU3lzdGVtLnBhbGV0dGUpO1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gQ3JlYXRlIGB0aGVtZS52YXJzYCB0aGF0IGNvbnRhaW4gYHZhcigtLSopYCBhcyB2YWx1ZXNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGNvbnN0IHBhcnNlckNvbmZpZyA9IHtcbiAgICBwcmVmaXg6IGNzc1ZhclByZWZpeCxcbiAgICBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhclxuICB9O1xuICBjb25zdCB7XG4gICAgdmFyczogdGhlbWVWYXJzLFxuICAgIGdlbmVyYXRlQ3NzVmFyc1xuICB9ID0gcHJlcGFyZUNzc1ZhcnMoIC8vIEB0cy1pZ25vcmUgcHJvcGVydHkgdHJ1RGFyayBpcyBtaXNzaW5nIGZyb20gY29sb3JTY2hlbWVzXG4gIF9leHRlbmRzKHtcbiAgICBjb2xvclNjaGVtZXNcbiAgfSwgbWVyZ2VkU2NhbGVzKSwgcGFyc2VyQ29uZmlnKTtcbiAgdGhlbWUudmFycyA9IHRoZW1lVmFycztcbiAgdGhlbWUuZ2VuZXJhdGVDc3NWYXJzID0gZ2VuZXJhdGVDc3NWYXJzO1xuICB0aGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIHRoZW1lT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogdGhlbWVPcHRpb25zLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgdGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciA9IGNvbG9yU2NoZW1lID0+IGNvbG9yU2NoZW1lID09PSAnbGlnaHQnID8gJyYnIDogYCZbZGF0YS1qb3ktY29sb3Itc2NoZW1lPVwiJHtjb2xvclNjaGVtZX1cIl0sIFtkYXRhLWpveS1jb2xvci1zY2hlbWU9XCIke2NvbG9yU2NoZW1lfVwiXSAmYDtcbiAgY29uc3QgY3JlYXRlVmFyaWFudElucHV0ID0ge1xuICAgIGdldENzc1ZhcixcbiAgICBwYWxldHRlOiB0aGVtZS5jb2xvclNjaGVtZXMubGlnaHQucGFsZXR0ZVxuICB9O1xuICB0aGVtZS52YXJpYW50cyA9IGRlZXBtZXJnZSh7XG4gICAgcGxhaW46IGNyZWF0ZVZhcmlhbnQoJ3BsYWluJywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBwbGFpbkhvdmVyOiBjcmVhdGVWYXJpYW50KCdwbGFpbkhvdmVyJywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBwbGFpbkFjdGl2ZTogY3JlYXRlVmFyaWFudCgncGxhaW5BY3RpdmUnLCBjcmVhdGVWYXJpYW50SW5wdXQpLFxuICAgIHBsYWluRGlzYWJsZWQ6IGNyZWF0ZVZhcmlhbnQoJ3BsYWluRGlzYWJsZWQnLCBjcmVhdGVWYXJpYW50SW5wdXQpLFxuICAgIG91dGxpbmVkOiBjcmVhdGVWYXJpYW50KCdvdXRsaW5lZCcsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgb3V0bGluZWRIb3ZlcjogY3JlYXRlVmFyaWFudCgnb3V0bGluZWRIb3ZlcicsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgb3V0bGluZWRBY3RpdmU6IGNyZWF0ZVZhcmlhbnQoJ291dGxpbmVkQWN0aXZlJywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBvdXRsaW5lZERpc2FibGVkOiBjcmVhdGVWYXJpYW50KCdvdXRsaW5lZERpc2FibGVkJywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBzb2Z0OiBjcmVhdGVWYXJpYW50KCdzb2Z0JywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBzb2Z0SG92ZXI6IGNyZWF0ZVZhcmlhbnQoJ3NvZnRIb3ZlcicsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgc29mdEFjdGl2ZTogY3JlYXRlVmFyaWFudCgnc29mdEFjdGl2ZScsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgc29mdERpc2FibGVkOiBjcmVhdGVWYXJpYW50KCdzb2Z0RGlzYWJsZWQnLCBjcmVhdGVWYXJpYW50SW5wdXQpLFxuICAgIHNvbGlkOiBjcmVhdGVWYXJpYW50KCdzb2xpZCcsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgc29saWRIb3ZlcjogY3JlYXRlVmFyaWFudCgnc29saWRIb3ZlcicsIGNyZWF0ZVZhcmlhbnRJbnB1dCksXG4gICAgc29saWRBY3RpdmU6IGNyZWF0ZVZhcmlhbnQoJ3NvbGlkQWN0aXZlJywgY3JlYXRlVmFyaWFudElucHV0KSxcbiAgICBzb2xpZERpc2FibGVkOiBjcmVhdGVWYXJpYW50KCdzb2xpZERpc2FibGVkJywgY3JlYXRlVmFyaWFudElucHV0KVxuICB9LCB2YXJpYW50c0lucHV0KTtcbiAgdGhlbWUucGFsZXR0ZSA9IF9leHRlbmRzKHt9LCB0aGVtZS5jb2xvclNjaGVtZXMubGlnaHQucGFsZXR0ZSwge1xuICAgIGNvbG9yU2NoZW1lOiAnbGlnaHQnXG4gIH0pO1xuICB0aGVtZS5zaG91bGRTa2lwR2VuZXJhdGluZ1ZhciA9IHNob3VsZFNraXBHZW5lcmF0aW5nVmFyO1xuXG4gIC8vIEB0cy1pZ25vcmUgaWYgdGhlIGNvbG9ySW52ZXJzaW9uIGlzIHByb3ZpZGVkIGFzIGNhbGxiYWNrcywgaXQgbmVlZHMgdG8gYmUgcmVzb2x2ZWQgaW4gdGhlIENzc1ZhcnNQcm92aWRlclxuICB0aGVtZS5jb2xvckludmVyc2lvbiA9IHR5cGVvZiBjb2xvckludmVyc2lvbklucHV0ID09PSAnZnVuY3Rpb24nID8gY29sb3JJbnZlcnNpb25JbnB1dCA6IGRlZXBtZXJnZSh7XG4gICAgc29mdDogY3JlYXRlU29mdEludmVyc2lvbih0aGVtZSwgdHJ1ZSksXG4gICAgc29saWQ6IGNyZWF0ZVNvbGlkSW52ZXJzaW9uKHRoZW1lLCB0cnVlKVxuICB9LCBjb2xvckludmVyc2lvbklucHV0IHx8IHt9LCB7XG4gICAgY2xvbmU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gdGhlbWU7XG59IiwiY29uc3QgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuLi91c2VUaGVtZS9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnLi9uZXN0ZWQnO1xuXG4vLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbWVyZ2VkVGhlbWUgPSBsb2NhbFRoZW1lKG91dGVyVGhlbWUpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4nLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9eygpID0+ICh7fSl9IC8+J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB0YWtlcyBhIGB0aGVtZWAgcHJvcC5cbiAqIEl0IG1ha2VzIHRoZSBgdGhlbWVgIGF2YWlsYWJsZSBkb3duIHRoZSBSZWFjdCB0cmVlIHRoYW5rcyB0byBSZWFjdCBjb250ZXh0LlxuICogVGhpcyBjb21wb25lbnQgc2hvdWxkIHByZWZlcmFibHkgYmUgdXNlZCBhdCAqKnRoZSByb290IG9mIHlvdXIgY29tcG9uZW50IHRyZWUqKi5cbiAqL1xuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBvdXRlclRoZW1lID0gdXNlVGhlbWUoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wIHRvIHRoZSBUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnJywgJ0hvd2V2ZXIsIG5vIG91dGVyIHRoZW1lIGlzIHByZXNlbnQuJywgJ01ha2Ugc3VyZSBhIHRoZW1lIGlzIGFscmVhZHkgaW5qZWN0ZWQgaGlnaGVyIGluIHRoZSBSZWFjdCB0cmVlICcgKyAnb3IgcHJvdmlkZSBhIHRoZW1lIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgICBpZiAob3V0cHV0ICE9IG51bGwpIHtcbiAgICAgIG91dHB1dFtuZXN0ZWRdID0gb3V0ZXJUaGVtZSAhPT0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSwgW2xvY2FsVGhlbWUsIG91dGVyVGhlbWVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBIHRoZW1lIG9iamVjdC4gWW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gdG8gZXh0ZW5kIHRoZSBvdXRlciB0aGVtZS5cbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIGFzIE11aVRoZW1lUHJvdmlkZXIgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCBhcyBTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBFTVBUWV9USEVNRSA9IHt9O1xuZnVuY3Rpb24gSW5uZXJUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZEVuZ2luZVRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0eXBlb2YgdGhlbWUgPT09ICdvYmplY3QnID8gdGhlbWUgOiBFTVBUWV9USEVNRSxcbiAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbm5lclRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZS5cbiAqIEl0IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiBsb2NhbFRoZW1lXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aVRoZW1lUHJvdmlkZXIsIHtcbiAgICB0aGVtZTogbG9jYWxUaGVtZSxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5uZXJUaGVtZVByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LiBZb3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBleHRlbmQgdGhlIG91dGVyIHRoZW1lLlxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01PREVfU1RPUkFHRV9LRVkgPSAnbW9kZSc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVkgPSAnY29sb3Itc2NoZW1lJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FUVFJJQlVURSA9ICdkYXRhLWNvbG9yLXNjaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdE1vZGUgPSAnbGlnaHQnLFxuICAgIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lID0gJ2xpZ2h0JyxcbiAgICBkZWZhdWx0RGFya0NvbG9yU2NoZW1lID0gJ2RhcmsnLFxuICAgIG1vZGVTdG9yYWdlS2V5ID0gREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLFxuICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleSA9IERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLFxuICAgIGF0dHJpYnV0ZSA9IERFRkFVTFRfQVRUUklCVVRFLFxuICAgIGNvbG9yU2NoZW1lTm9kZSA9ICdkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQnXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJzY3JpcHRcIiwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiBgKGZ1bmN0aW9uKCkgeyB0cnkge1xuICAgICAgICB2YXIgbW9kZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCcke21vZGVTdG9yYWdlS2V5fScpIHx8ICcke2RlZmF1bHRNb2RlfSc7XG4gICAgICAgIHZhciBjc3NDb2xvclNjaGVtZSA9IG1vZGU7XG4gICAgICAgIHZhciBjb2xvclNjaGVtZSA9ICcnO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgICAgICAvLyBoYW5kbGUgc3lzdGVtIG1vZGVcbiAgICAgICAgICB2YXIgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICAgICAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIGNzc0NvbG9yU2NoZW1lID0gJ2RhcmsnO1xuICAgICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmsnKSB8fCAnJHtkZWZhdWx0RGFya0NvbG9yU2NoZW1lfSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzc0NvbG9yU2NoZW1lID0gJ2xpZ2h0JztcbiAgICAgICAgICAgIGNvbG9yU2NoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJyR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodCcpIHx8ICcke2RlZmF1bHRMaWdodENvbG9yU2NoZW1lfSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlID09PSAnbGlnaHQnKSB7XG4gICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWxpZ2h0JykgfHwgJyR7ZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWV9JztcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmsnKSB8fCAnJHtkZWZhdWx0RGFya0NvbG9yU2NoZW1lfSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9yU2NoZW1lKSB7XG4gICAgICAgICAgJHtjb2xvclNjaGVtZU5vZGV9LnNldEF0dHJpYnV0ZSgnJHthdHRyaWJ1dGV9JywgY29sb3JTY2hlbWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fSB9KSgpO2BcbiAgICB9XG4gIH0sIFwibXVpLWNvbG9yLXNjaGVtZS1pbml0XCIpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLCBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSB9IGZyb20gJy4vZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0JztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeXN0ZW1Nb2RlKG1vZGUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIG1vZGUgPT09ICdzeXN0ZW0nKSB7XG4gICAgY29uc3QgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIHJldHVybiAnZGFyayc7XG4gICAgfVxuICAgIHJldHVybiAnbGlnaHQnO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBwcm9jZXNzU3RhdGUoc3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmIChzdGF0ZS5tb2RlID09PSAnbGlnaHQnIHx8IHN0YXRlLm1vZGUgPT09ICdzeXN0ZW0nICYmIHN0YXRlLnN5c3RlbU1vZGUgPT09ICdsaWdodCcpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJ2xpZ2h0Jyk7XG4gIH1cbiAgaWYgKHN0YXRlLm1vZGUgPT09ICdkYXJrJyB8fCBzdGF0ZS5tb2RlID09PSAnc3lzdGVtJyAmJiBzdGF0ZS5zeXN0ZW1Nb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJ2RhcmsnKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yU2NoZW1lKHN0YXRlKSB7XG4gIHJldHVybiBwcm9jZXNzU3RhdGUoc3RhdGUsIG1vZGUgPT4ge1xuICAgIGlmIChtb2RlID09PSAnbGlnaHQnKSB7XG4gICAgICByZXR1cm4gc3RhdGUubGlnaHRDb2xvclNjaGVtZTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgICAgcmV0dXJuIHN0YXRlLmRhcmtDb2xvclNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplVmFsdWUoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBsZXQgdmFsdWU7XG4gIHRyeSB7XG4gICAgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8IHVuZGVmaW5lZDtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAvLyB0aGUgZmlyc3QgdGltZSB0aGF0IHVzZXIgZW50ZXJzIHRoZSBzaXRlLlxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBkZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFVuc3VwcG9ydGVkXG4gIH1cbiAgcmV0dXJuIHZhbHVlIHx8IGRlZmF1bHRWYWx1ZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUN1cnJlbnRDb2xvclNjaGVtZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0TW9kZSA9ICdsaWdodCcsXG4gICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsXG4gICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICBzdXBwb3J0ZWRDb2xvclNjaGVtZXMgPSBbXSxcbiAgICBtb2RlU3RvcmFnZUtleSA9IERFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSxcbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXkgPSBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSxcbiAgICBzdG9yYWdlV2luZG93ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiB3aW5kb3dcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGpvaW5lZENvbG9yU2NoZW1lcyA9IHN1cHBvcnRlZENvbG9yU2NoZW1lcy5qb2luKCcsJyk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxNb2RlID0gaW5pdGlhbGl6ZVZhbHVlKG1vZGVTdG9yYWdlS2V5LCBkZWZhdWx0TW9kZSk7XG4gICAgY29uc3QgbGlnaHRDb2xvclNjaGVtZSA9IGluaXRpYWxpemVWYWx1ZShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWxpZ2h0YCwgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUpO1xuICAgIGNvbnN0IGRhcmtDb2xvclNjaGVtZSA9IGluaXRpYWxpemVWYWx1ZShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmtgLCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogaW5pdGlhbE1vZGUsXG4gICAgICBzeXN0ZW1Nb2RlOiBnZXRTeXN0ZW1Nb2RlKGluaXRpYWxNb2RlKSxcbiAgICAgIGxpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBkYXJrQ29sb3JTY2hlbWVcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgY29sb3JTY2hlbWUgPSBnZXRDb2xvclNjaGVtZShzdGF0ZSk7XG4gIGNvbnN0IHNldE1vZGUgPSBSZWFjdC51c2VDYWxsYmFjayhtb2RlID0+IHtcbiAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgaWYgKG1vZGUgPT09IGN1cnJlbnRTdGF0ZS5tb2RlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgbW9kZSBkb2VzIG5vdCBjaGFuZ2VcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld01vZGUgPSAhbW9kZSA/IGRlZmF1bHRNb2RlIDogbW9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG1vZGVTdG9yYWdlS2V5LCBuZXdNb2RlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY3VycmVudFN0YXRlLCB7XG4gICAgICAgIG1vZGU6IG5ld01vZGUsXG4gICAgICAgIHN5c3RlbU1vZGU6IGdldFN5c3RlbU1vZGUobmV3TW9kZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbbW9kZVN0b3JhZ2VLZXksIGRlZmF1bHRNb2RlXSk7XG4gIGNvbnN0IHNldENvbG9yU2NoZW1lID0gUmVhY3QudXNlQ2FsbGJhY2sodmFsdWUgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmtgLCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjdXJyZW50U3RhdGUsIHtcbiAgICAgICAgICBsaWdodENvbG9yU2NoZW1lOiBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSxcbiAgICAgICAgICBkYXJrQ29sb3JTY2hlbWU6IGRlZmF1bHREYXJrQ29sb3JTY2hlbWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiAham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBcXGAke3ZhbHVlfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgICAgcHJvY2Vzc1N0YXRlKGN1cnJlbnRTdGF0ZSwgbW9kZSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LSR7bW9kZX1gLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgICAgICAgICBuZXdTdGF0ZS5saWdodENvbG9yU2NoZW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgIGNvbnN0IG5ld0xpZ2h0Q29sb3JTY2hlbWUgPSB2YWx1ZS5saWdodCA9PT0gbnVsbCA/IGRlZmF1bHRMaWdodENvbG9yU2NoZW1lIDogdmFsdWUubGlnaHQ7XG4gICAgICAgIGNvbnN0IG5ld0RhcmtDb2xvclNjaGVtZSA9IHZhbHVlLmRhcmsgPT09IG51bGwgPyBkZWZhdWx0RGFya0NvbG9yU2NoZW1lIDogdmFsdWUuZGFyaztcbiAgICAgICAgaWYgKG5ld0xpZ2h0Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgICBpZiAoIWpvaW5lZENvbG9yU2NoZW1lcy5pbmNsdWRlcyhuZXdMaWdodENvbG9yU2NoZW1lKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgXFxgJHtuZXdMaWdodENvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmxpZ2h0Q29sb3JTY2hlbWUgPSBuZXdMaWdodENvbG9yU2NoZW1lO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIG5ld0xpZ2h0Q29sb3JTY2hlbWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0RhcmtDb2xvclNjaGVtZSkge1xuICAgICAgICAgIGlmICgham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKG5ld0RhcmtDb2xvclNjaGVtZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcYCR7bmV3RGFya0NvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IG5ld0RhcmtDb2xvclNjaGVtZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tZGFya2AsIG5ld0RhcmtDb2xvclNjaGVtZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyBVbnN1cHBvcnRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtqb2luZWRDb2xvclNjaGVtZXMsIGNvbG9yU2NoZW1lU3RvcmFnZUtleSwgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsIGRlZmF1bHREYXJrQ29sb3JTY2hlbWVdKTtcbiAgY29uc3QgaGFuZGxlTWVkaWFRdWVyeSA9IFJlYWN0LnVzZUNhbGxiYWNrKGUgPT4ge1xuICAgIGlmIChzdGF0ZS5tb2RlID09PSAnc3lzdGVtJykge1xuICAgICAgc2V0U3RhdGUoY3VycmVudFN0YXRlID0+IF9leHRlbmRzKHt9LCBjdXJyZW50U3RhdGUsIHtcbiAgICAgICAgc3lzdGVtTW9kZTogZSAhPSBudWxsICYmIGUubWF0Y2hlcyA/ICdkYXJrJyA6ICdsaWdodCdcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIFtzdGF0ZS5tb2RlXSk7XG5cbiAgLy8gUmVmIGhhY2sgdG8gYXZvaWQgYWRkaW5nIGhhbmRsZU1lZGlhUXVlcnkgYXMgYSBkZXBcbiAgY29uc3QgbWVkaWFMaXN0ZW5lciA9IFJlYWN0LnVzZVJlZihoYW5kbGVNZWRpYVF1ZXJ5KTtcbiAgbWVkaWFMaXN0ZW5lci5jdXJyZW50ID0gaGFuZGxlTWVkaWFRdWVyeTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKC4uLmFyZ3MpID0+IG1lZGlhTGlzdGVuZXIuY3VycmVudCguLi5hcmdzKTtcblxuICAgIC8vIEFsd2F5cyBsaXN0ZW4gdG8gU3lzdGVtIHByZWZlcmVuY2VcbiAgICBjb25zdCBtZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG5cbiAgICAvLyBJbnRlbnRpb25hbGx5IHVzZSBkZXByZWNhdGVkIGxpc3RlbmVyIG1ldGhvZHMgdG8gc3VwcG9ydCBpT1MgJiBvbGQgYnJvd3NlcnNcbiAgICBtZWRpYS5hZGRMaXN0ZW5lcihoYW5kbGVyKTtcbiAgICBoYW5kbGVyKG1lZGlhKTtcbiAgICByZXR1cm4gKCkgPT4gbWVkaWEucmVtb3ZlTGlzdGVuZXIoaGFuZGxlcik7XG4gIH0sIFtdKTtcblxuICAvLyBIYW5kbGUgd2hlbiBsb2NhbFN0b3JhZ2UgaGFzIGNoYW5nZWRcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBldmVudC5uZXdWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgZXZlbnQua2V5ID09PSAnc3RyaW5nJyAmJiBldmVudC5rZXkuc3RhcnRzV2l0aChjb2xvclNjaGVtZVN0b3JhZ2VLZXkpICYmICghdmFsdWUgfHwgam9pbmVkQ29sb3JTY2hlbWVzLm1hdGNoKHZhbHVlKSkpIHtcbiAgICAgICAgLy8gSWYgdGhlIGtleSBpcyBkZWxldGVkLCB2YWx1ZSB3aWxsIGJlIG51bGwgdGhlbiByZXNldCBjb2xvciBzY2hlbWUgdG8gdGhlIGRlZmF1bHQgb25lLlxuICAgICAgICBpZiAoZXZlbnQua2V5LmVuZHNXaXRoKCdsaWdodCcpKSB7XG4gICAgICAgICAgc2V0Q29sb3JTY2hlbWUoe1xuICAgICAgICAgICAgbGlnaHQ6IHZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmtleS5lbmRzV2l0aCgnZGFyaycpKSB7XG4gICAgICAgICAgc2V0Q29sb3JTY2hlbWUoe1xuICAgICAgICAgICAgZGFyazogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gbW9kZVN0b3JhZ2VLZXkgJiYgKCF2YWx1ZSB8fCBbJ2xpZ2h0JywgJ2RhcmsnLCAnc3lzdGVtJ10uaW5jbHVkZXModmFsdWUpKSkge1xuICAgICAgICBzZXRNb2RlKHZhbHVlIHx8IGRlZmF1bHRNb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzdG9yYWdlV2luZG93KSB7XG4gICAgICAvLyBGb3Igc3luY2luZyBjb2xvci1zY2hlbWUgY2hhbmdlcyBiZXR3ZWVuIGlmcmFtZXNcbiAgICAgIHN0b3JhZ2VXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2UpO1xuICAgICAgcmV0dXJuICgpID0+IHN0b3JhZ2VXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbc2V0Q29sb3JTY2hlbWUsIHNldE1vZGUsIG1vZGVTdG9yYWdlS2V5LCBjb2xvclNjaGVtZVN0b3JhZ2VLZXksIGpvaW5lZENvbG9yU2NoZW1lcywgZGVmYXVsdE1vZGUsIHN0b3JhZ2VXaW5kb3ddKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgIGNvbG9yU2NoZW1lLFxuICAgIHNldE1vZGUsXG4gICAgc2V0Q29sb3JTY2hlbWVcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbG9yU2NoZW1lc1wiLCBcImNvbXBvbmVudHNcIiwgXCJnZW5lcmF0ZUNzc1ZhcnNcIiwgXCJjc3NWYXJQcmVmaXhcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgVGhlbWVQcm92aWRlciBmcm9tICcuLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBzeXN0ZW1HZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQsIHsgREVGQVVMVF9BVFRSSUJVVEUsIERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLCBERUZBVUxUX01PREVfU1RPUkFHRV9LRVkgfSBmcm9tICcuL2dldEluaXRDb2xvclNjaGVtZVNjcmlwdCc7XG5pbXBvcnQgdXNlQ3VycmVudENvbG9yU2NoZW1lIGZyb20gJy4vdXNlQ3VycmVudENvbG9yU2NoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3QgRElTQUJMRV9DU1NfVFJBTlNJVElPTiA9ICcqey13ZWJraXQtdHJhbnNpdGlvbjpub25lIWltcG9ydGFudDstbW96LXRyYW5zaXRpb246bm9uZSFpbXBvcnRhbnQ7LW8tdHJhbnNpdGlvbjpub25lIWltcG9ydGFudDstbXMtdHJhbnNpdGlvbjpub25lIWltcG9ydGFudDt0cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50fSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDc3NWYXJzUHJvdmlkZXIob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgdGhlbWU6IGRlZmF1bHRUaGVtZSA9IHt9LFxuICAgIGF0dHJpYnV0ZTogZGVmYXVsdEF0dHJpYnV0ZSA9IERFRkFVTFRfQVRUUklCVVRFLFxuICAgIG1vZGVTdG9yYWdlS2V5OiBkZWZhdWx0TW9kZVN0b3JhZ2VLZXkgPSBERUZBVUxUX01PREVfU1RPUkFHRV9LRVksXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5OiBkZWZhdWx0Q29sb3JTY2hlbWVTdG9yYWdlS2V5ID0gREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVksXG4gICAgZGVmYXVsdE1vZGU6IGRlc2lnblN5c3RlbU1vZGUgPSAnbGlnaHQnLFxuICAgIGRlZmF1bHRDb2xvclNjaGVtZTogZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUsXG4gICAgZGlzYWJsZVRyYW5zaXRpb25PbkNoYW5nZTogZGVzaWduU3lzdGVtVHJhbnNpdGlvbk9uQ2hhbmdlID0gZmFsc2UsXG4gICAgcmVzb2x2ZVRoZW1lLFxuICAgIGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdFxuICB9ID0gb3B0aW9ucztcbiAgaWYgKCFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzIHx8IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ3N0cmluZycgJiYgIWRlZmF1bHRUaGVtZS5jb2xvclNjaGVtZXNbZGVzaWduU3lzdGVtQ29sb3JTY2hlbWVdIHx8IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ29iamVjdCcgJiYgIWRlZmF1bHRUaGVtZS5jb2xvclNjaGVtZXNbZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lLmxpZ2h0XSB8fCB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdvYmplY3QnICYmICFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzW2Rlc2lnblN5c3RlbUNvbG9yU2NoZW1lID09IG51bGwgPyB2b2lkIDAgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5kYXJrXSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogXFxgJHtkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZX1cXGAgZG9lcyBub3QgZXhpc3QgaW4gXFxgdGhlbWUuY29sb3JTY2hlbWVzXFxgLmApO1xuICB9XG4gIGNvbnN0IENvbG9yU2NoZW1lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG4gIGNvbnN0IHVzZUNvbG9yU2NoZW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChDb2xvclNjaGVtZUNvbnRleHQpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB1c2VDb2xvclNjaGVtZVxcYCBtdXN0IGJlIGNhbGxlZCB1bmRlciA8Q3NzVmFyc1Byb3ZpZGVyIC8+YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBmdW5jdGlvbiBDc3NWYXJzUHJvdmlkZXIoe1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiB0aGVtZVByb3AgPSBkZWZhdWx0VGhlbWUsXG4gICAgbW9kZVN0b3JhZ2VLZXkgPSBkZWZhdWx0TW9kZVN0b3JhZ2VLZXksXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5ID0gZGVmYXVsdENvbG9yU2NoZW1lU3RvcmFnZUtleSxcbiAgICBhdHRyaWJ1dGUgPSBkZWZhdWx0QXR0cmlidXRlLFxuICAgIGRlZmF1bHRNb2RlID0gZGVzaWduU3lzdGVtTW9kZSxcbiAgICBkZWZhdWx0Q29sb3JTY2hlbWUgPSBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSxcbiAgICBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlID0gZGVzaWduU3lzdGVtVHJhbnNpdGlvbk9uQ2hhbmdlLFxuICAgIHN0b3JhZ2VXaW5kb3cgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IHdpbmRvdyxcbiAgICBkb2N1bWVudE5vZGUgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQsXG4gICAgY29sb3JTY2hlbWVOb2RlID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBjb2xvclNjaGVtZVNlbGVjdG9yID0gJzpyb290JyxcbiAgICBkaXNhYmxlTmVzdGVkQ29udGV4dCA9IGZhbHNlLFxuICAgIGRpc2FibGVTdHlsZVNoZWV0R2VuZXJhdGlvbiA9IGZhbHNlXG4gIH0pIHtcbiAgICBjb25zdCBoYXNNb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCB1cHBlclRoZW1lID0gbXVpVXNlVGhlbWUoKTtcbiAgICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KENvbG9yU2NoZW1lQ29udGV4dCk7XG4gICAgY29uc3QgbmVzdGVkID0gISFjdHggJiYgIWRpc2FibGVOZXN0ZWRDb250ZXh0O1xuICAgIGNvbnN0IHtcbiAgICAgICAgY29sb3JTY2hlbWVzID0ge30sXG4gICAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgICAgZ2VuZXJhdGVDc3NWYXJzID0gKCkgPT4gKHtcbiAgICAgICAgICB2YXJzOiB7fSxcbiAgICAgICAgICBjc3M6IHt9XG4gICAgICAgIH0pLFxuICAgICAgICBjc3NWYXJQcmVmaXhcbiAgICAgIH0gPSB0aGVtZVByb3AsXG4gICAgICByZXN0VGhlbWVQcm9wID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UodGhlbWVQcm9wLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IGFsbENvbG9yU2NoZW1lcyA9IE9iamVjdC5rZXlzKGNvbG9yU2NoZW1lcyk7XG4gICAgY29uc3QgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUgPSB0eXBlb2YgZGVmYXVsdENvbG9yU2NoZW1lID09PSAnc3RyaW5nJyA/IGRlZmF1bHRDb2xvclNjaGVtZSA6IGRlZmF1bHRDb2xvclNjaGVtZS5saWdodDtcbiAgICBjb25zdCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lID0gdHlwZW9mIGRlZmF1bHRDb2xvclNjaGVtZSA9PT0gJ3N0cmluZycgPyBkZWZhdWx0Q29sb3JTY2hlbWUgOiBkZWZhdWx0Q29sb3JTY2hlbWUuZGFyaztcblxuICAgIC8vIDEuIEdldCB0aGUgZGF0YSBhYm91dCB0aGUgYG1vZGVgLCBgY29sb3JTY2hlbWVgLCBhbmQgc2V0dGVyIGZ1bmN0aW9ucy5cbiAgICBjb25zdCB7XG4gICAgICBtb2RlOiBzdGF0ZU1vZGUsXG4gICAgICBzZXRNb2RlLFxuICAgICAgc3lzdGVtTW9kZSxcbiAgICAgIGxpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBkYXJrQ29sb3JTY2hlbWUsXG4gICAgICBjb2xvclNjaGVtZTogc3RhdGVDb2xvclNjaGVtZSxcbiAgICAgIHNldENvbG9yU2NoZW1lXG4gICAgfSA9IHVzZUN1cnJlbnRDb2xvclNjaGVtZSh7XG4gICAgICBzdXBwb3J0ZWRDb2xvclNjaGVtZXM6IGFsbENvbG9yU2NoZW1lcyxcbiAgICAgIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lLFxuICAgICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICAgIG1vZGVTdG9yYWdlS2V5LFxuICAgICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5LFxuICAgICAgZGVmYXVsdE1vZGUsXG4gICAgICBzdG9yYWdlV2luZG93XG4gICAgfSk7XG4gICAgbGV0IG1vZGUgPSBzdGF0ZU1vZGU7XG4gICAgbGV0IGNvbG9yU2NoZW1lID0gc3RhdGVDb2xvclNjaGVtZTtcbiAgICBpZiAobmVzdGVkKSB7XG4gICAgICBtb2RlID0gY3R4Lm1vZGU7XG4gICAgICBjb2xvclNjaGVtZSA9IGN0eC5jb2xvclNjaGVtZTtcbiAgICB9XG4gICAgY29uc3QgY2FsY3VsYXRlZE1vZGUgPSAoKCkgPT4ge1xuICAgICAgaWYgKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIHNjb3BlIG9jY3VycyBvbiB0aGUgc2VydmVyXG4gICAgICBpZiAoZGVmYXVsdE1vZGUgPT09ICdzeXN0ZW0nKSB7XG4gICAgICAgIHJldHVybiBkZXNpZ25TeXN0ZW1Nb2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmF1bHRNb2RlO1xuICAgIH0pKCk7XG4gICAgY29uc3QgY2FsY3VsYXRlZENvbG9yU2NoZW1lID0gKCgpID0+IHtcbiAgICAgIGlmICghY29sb3JTY2hlbWUpIHtcbiAgICAgICAgLy8gVGhpcyBzY29wZSBvY2N1cnMgb24gdGhlIHNlcnZlclxuICAgICAgICBpZiAoY2FsY3VsYXRlZE1vZGUgPT09ICdkYXJrJykge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0RGFya0NvbG9yU2NoZW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVzZSBsaWdodCBjb2xvciBzY2hlbWUsIGlmIGRlZmF1bHQgbW9kZSBpcyAnbGlnaHQnIHwgJ3N5c3RlbSdcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbG9yU2NoZW1lO1xuICAgIH0pKCk7XG5cbiAgICAvLyAyLiBDcmVhdGUgQ1NTIHZhcmlhYmxlcyBhbmQgc3RvcmUgdGhlbSBpbiBvYmplY3RzICh0byBiZSBnZW5lcmF0ZWQgaW4gc3R5bGVzaGVldHMgaW4gdGhlIGZpbmFsIHN0ZXApXG4gICAgY29uc3Qge1xuICAgICAgY3NzOiByb290Q3NzLFxuICAgICAgdmFyczogcm9vdFZhcnNcbiAgICB9ID0gZ2VuZXJhdGVDc3NWYXJzKCk7XG5cbiAgICAvLyAzLiBTdGFydCBjb21wb3NpbmcgdGhlIHRoZW1lIG9iamVjdFxuICAgIGNvbnN0IHRoZW1lID0gX2V4dGVuZHMoe30sIHJlc3RUaGVtZVByb3AsIHtcbiAgICAgIGNvbXBvbmVudHMsXG4gICAgICBjb2xvclNjaGVtZXMsXG4gICAgICBjc3NWYXJQcmVmaXgsXG4gICAgICB2YXJzOiByb290VmFycyxcbiAgICAgIGdldENvbG9yU2NoZW1lU2VsZWN0b3I6IHRhcmdldENvbG9yU2NoZW1lID0+IGBbJHthdHRyaWJ1dGV9PVwiJHt0YXJnZXRDb2xvclNjaGVtZX1cIl0gJmBcbiAgICB9KTtcblxuICAgIC8vIDQuIENyZWF0ZSBjb2xvciBDU1MgdmFyaWFibGVzIGFuZCBzdG9yZSB0aGVtIGluIG9iamVjdHMgKHRvIGJlIGdlbmVyYXRlZCBpbiBzdHlsZXNoZWV0cyBpbiB0aGUgZmluYWwgc3RlcClcbiAgICAvLyAgICBUaGUgZGVmYXVsdCBjb2xvciBzY2hlbWUgc3R5bGVzaGVldCBpcyBjb25zdHJ1Y3RlZCB0byBoYXZlIHRoZSBsZWFzdCBDU1Mgc3BlY2lmaWNpdHkuXG4gICAgLy8gICAgVGhlIG90aGVyIGNvbG9yIHNjaGVtZXMgdXNlcyBzZWxlY3RvciwgZGVmYXVsdCBhcyBkYXRhIGF0dHJpYnV0ZSwgdG8gaW5jcmVhc2UgdGhlIENTUyBzcGVjaWZpY2l0eSBzbyB0aGF0IHRoZXkgY2FuIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGNvbG9yIHNjaGVtZSBzdHlsZXNoZWV0LlxuICAgIGNvbnN0IGRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXQgPSB7fTtcbiAgICBjb25zdCBvdGhlckNvbG9yU2NoZW1lc1N0eWxlU2hlZXQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhjb2xvclNjaGVtZXMpLmZvckVhY2goKFtrZXksIHNjaGVtZV0pID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3NzLFxuICAgICAgICB2YXJzXG4gICAgICB9ID0gZ2VuZXJhdGVDc3NWYXJzKGtleSk7XG4gICAgICB0aGVtZS52YXJzID0gZGVlcG1lcmdlKHRoZW1lLnZhcnMsIHZhcnMpO1xuICAgICAgaWYgKGtleSA9PT0gY2FsY3VsYXRlZENvbG9yU2NoZW1lKSB7XG4gICAgICAgIC8vIDQuMSBNZXJnZSB0aGUgc2VsZWN0ZWQgY29sb3Igc2NoZW1lIHRvIHRoZSB0aGVtZVxuICAgICAgICBPYmplY3Qua2V5cyhzY2hlbWUpLmZvckVhY2goc2NoZW1lS2V5ID0+IHtcbiAgICAgICAgICBpZiAoc2NoZW1lW3NjaGVtZUtleV0gJiYgdHlwZW9mIHNjaGVtZVtzY2hlbWVLZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gc2hhbGxvdyBtZXJnZSB0aGUgMXN0IGxldmVsIHN0cnVjdHVyZSBvZiB0aGUgdGhlbWUuXG4gICAgICAgICAgICB0aGVtZVtzY2hlbWVLZXldID0gX2V4dGVuZHMoe30sIHRoZW1lW3NjaGVtZUtleV0sIHNjaGVtZVtzY2hlbWVLZXldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhlbWVbc2NoZW1lS2V5XSA9IHNjaGVtZVtzY2hlbWVLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGVtZS5wYWxldHRlKSB7XG4gICAgICAgICAgdGhlbWUucGFsZXR0ZS5jb2xvclNjaGVtZSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcmVzb2x2ZWREZWZhdWx0Q29sb3JTY2hlbWUgPSAoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGRlZmF1bHRDb2xvclNjaGVtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbG9yU2NoZW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0TW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvclNjaGVtZS5kYXJrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29sb3JTY2hlbWUubGlnaHQ7XG4gICAgICB9KSgpO1xuICAgICAgaWYgKGtleSA9PT0gcmVzb2x2ZWREZWZhdWx0Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgaWYgKGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdCkge1xuICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkVmFyaWFibGVzID0ge307XG4gICAgICAgICAgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290KGNzc1ZhclByZWZpeCkuZm9yRWFjaChjc3NWYXIgPT4ge1xuICAgICAgICAgICAgZXhjbHVkZWRWYXJpYWJsZXNbY3NzVmFyXSA9IGNzc1tjc3NWYXJdO1xuICAgICAgICAgICAgZGVsZXRlIGNzc1tjc3NWYXJdO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXRbYFske2F0dHJpYnV0ZX09XCIke2tleX1cIl1gXSA9IGV4Y2x1ZGVkVmFyaWFibGVzO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXRbYCR7Y29sb3JTY2hlbWVTZWxlY3Rvcn0sIFske2F0dHJpYnV0ZX09XCIke2tleX1cIl1gXSA9IGNzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG90aGVyQ29sb3JTY2hlbWVzU3R5bGVTaGVldFtgJHtjb2xvclNjaGVtZVNlbGVjdG9yID09PSAnOnJvb3QnID8gJycgOiBjb2xvclNjaGVtZVNlbGVjdG9yfVske2F0dHJpYnV0ZX09XCIke2tleX1cIl1gXSA9IGNzcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGVtZS52YXJzID0gZGVlcG1lcmdlKHRoZW1lLnZhcnMsIHJvb3RWYXJzKTtcblxuICAgIC8vIDUuIERlY2xhcmluZyBlZmZlY3RzXG4gICAgLy8gNS4xIFVwZGF0ZXMgdGhlIHNlbGVjdG9yIHZhbHVlIHRvIHVzZSB0aGUgY3VycmVudCBjb2xvciBzY2hlbWUgd2hpY2ggdGVsbHMgQ1NTIHRvIHVzZSB0aGUgcHJvcGVyIHN0eWxlc2hlZXQuXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChjb2xvclNjaGVtZSAmJiBjb2xvclNjaGVtZU5vZGUpIHtcbiAgICAgICAgLy8gYXR0YWNoZXMgYXR0cmlidXRlIHRvIDxodG1sPiBiZWNhdXNlIHRoZSBjc3MgdmFyaWFibGVzIGFyZSBhdHRhY2hlZCB0byA6cm9vdCAoaHRtbClcbiAgICAgICAgY29sb3JTY2hlbWVOb2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGNvbG9yU2NoZW1lKTtcbiAgICAgIH1cbiAgICB9LCBbY29sb3JTY2hlbWUsIGF0dHJpYnV0ZSwgY29sb3JTY2hlbWVOb2RlXSk7XG5cbiAgICAvLyA1LjIgUmVtb3ZlIHRoZSBDU1MgdHJhbnNpdGlvbiB3aGVuIGNvbG9yIHNjaGVtZSBjaGFuZ2VzIHRvIGNyZWF0ZSBpbnN0YW50IGV4cGVyaWVuY2UuXG4gICAgLy8gY3JlZGl0OiBodHRwczovL2dpdGh1Yi5jb20vcGFjb2NvdXJzZXkvbmV4dC10aGVtZXMvYmxvYi9iNWMyYmFkNTBkZTJkNjFhZDdiNTJhOWM1Y2RjODAxYTc4NTA3ZDdhL2luZGV4LnRzeCNMMzEzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCB0aW1lcjtcbiAgICAgIGlmIChkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlICYmIGhhc01vdW50ZWQuY3VycmVudCAmJiBkb2N1bWVudE5vZGUpIHtcbiAgICAgICAgY29uc3QgY3NzID0gZG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGNzcy5hcHBlbmRDaGlsZChkb2N1bWVudE5vZGUuY3JlYXRlVGV4dE5vZGUoRElTQUJMRV9DU1NfVFJBTlNJVElPTikpO1xuICAgICAgICBkb2N1bWVudE5vZGUuaGVhZC5hcHBlbmRDaGlsZChjc3MpO1xuXG4gICAgICAgIC8vIEZvcmNlIGJyb3dzZXIgcmVwYWludFxuICAgICAgICAoKCkgPT4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnROb2RlLmJvZHkpKSgpO1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGRvY3VtZW50Tm9kZS5oZWFkLnJlbW92ZUNoaWxkKGNzcyk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH07XG4gICAgfSwgW2NvbG9yU2NoZW1lLCBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlLCBkb2N1bWVudE5vZGVdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaGFzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGhhc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgICAgbW9kZSxcbiAgICAgIHN5c3RlbU1vZGUsXG4gICAgICBzZXRNb2RlLFxuICAgICAgbGlnaHRDb2xvclNjaGVtZSxcbiAgICAgIGRhcmtDb2xvclNjaGVtZSxcbiAgICAgIGNvbG9yU2NoZW1lLFxuICAgICAgc2V0Q29sb3JTY2hlbWUsXG4gICAgICBhbGxDb2xvclNjaGVtZXNcbiAgICB9KSwgW2FsbENvbG9yU2NoZW1lcywgY29sb3JTY2hlbWUsIGRhcmtDb2xvclNjaGVtZSwgbGlnaHRDb2xvclNjaGVtZSwgbW9kZSwgc2V0Q29sb3JTY2hlbWUsIHNldE1vZGUsIHN5c3RlbU1vZGVdKTtcbiAgICBsZXQgc2hvdWxkR2VuZXJhdGVTdHlsZVNoZWV0ID0gdHJ1ZTtcbiAgICBpZiAoZGlzYWJsZVN0eWxlU2hlZXRHZW5lcmF0aW9uIHx8IG5lc3RlZCAmJiAodXBwZXJUaGVtZSA9PSBudWxsID8gdm9pZCAwIDogdXBwZXJUaGVtZS5jc3NWYXJQcmVmaXgpID09PSBjc3NWYXJQcmVmaXgpIHtcbiAgICAgIHNob3VsZEdlbmVyYXRlU3R5bGVTaGVldCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICBjaGlsZHJlbjogW3Nob3VsZEdlbmVyYXRlU3R5bGVTaGVldCAmJiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgIFtjb2xvclNjaGVtZVNlbGVjdG9yXTogcm9vdENzc1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICAgICAgICAgIHN0eWxlczogZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldFxuICAgICAgICB9KSwgLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gICAgICAgICAgc3R5bGVzOiBvdGhlckNvbG9yU2NoZW1lc1N0eWxlU2hlZXRcbiAgICAgICAgfSldXG4gICAgICB9KSwgLyojX19QVVJFX18qL19qc3goVGhlbWVQcm92aWRlciwge1xuICAgICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lID8gcmVzb2x2ZVRoZW1lKHRoZW1lKSA6IHRoZW1lLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pXVxuICAgIH0pO1xuICAgIGlmIChuZXN0ZWQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ29sb3JTY2hlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgICAgY2hpbGRyZW46IGVsZW1lbnRcbiAgICB9KTtcbiAgfVxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NWYXJzUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBib2R5IGF0dHJpYnV0ZSBuYW1lIHRvIGF0dGFjaCBjb2xvclNjaGVtZS5cbiAgICAgKi9cbiAgICBhdHRyaWJ1dGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBvbmVudCB0cmVlLlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICAvKipcbiAgICAgKiBUaGUgbm9kZSB1c2VkIHRvIGF0dGFjaCB0aGUgY29sb3Itc2NoZW1lIGF0dHJpYnV0ZVxuICAgICAqL1xuICAgIGNvbG9yU2NoZW1lTm9kZTogUHJvcFR5cGVzLmFueSxcbiAgICAvKipcbiAgICAgKiBUaGUgQ1NTIHNlbGVjdG9yIGZvciBhdHRhY2hpbmcgdGhlIGdlbmVyYXRlZCBjdXN0b20gcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbG9yU2NoZW1lU2VsZWN0b3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLyoqXG4gICAgICogbG9jYWxTdG9yYWdlIGtleSB1c2VkIHRvIHN0b3JlIGBjb2xvclNjaGVtZWBcbiAgICAgKi9cbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgY29sb3Igc2NoZW1lIHVzZWQuXG4gICAgICovXG4gICAgZGVmYXVsdENvbG9yU2NoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgbW9kZSB1c2VkLlxuICAgICAqL1xuICAgIGRlZmF1bHRNb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHByb3ZpZGVyIGNyZWF0ZXMgaXRzIG93biBjb250ZXh0IGFuZCBnZW5lcmF0ZSBzdHlsZXNoZWV0IGFzIGlmIGl0IGlzIGEgcm9vdCBgQ3NzVmFyc1Byb3ZpZGVyYC5cbiAgICAgKi9cbiAgICBkaXNhYmxlTmVzdGVkQ29udGV4dDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgc3R5bGUgc2hlZXQgd29uJ3QgYmUgZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbnRyb2xsaW5nIG5lc3RlZCBDc3NWYXJzUHJvdmlkZXIgYmVoYXZpb3IuXG4gICAgICovXG4gICAgZGlzYWJsZVN0eWxlU2hlZXRHZW5lcmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIENTUyB0cmFuc2l0aW9ucyB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIG1vZGVzIG9yIGNvbG9yIHNjaGVtZXNcbiAgICAgKi9cbiAgICBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiBUaGUgZG9jdW1lbnQgdG8gYXR0YWNoIHRoZSBhdHRyaWJ1dGUgdG9cbiAgICAgKi9cbiAgICBkb2N1bWVudE5vZGU6IFByb3BUeXBlcy5hbnksXG4gICAgLyoqXG4gICAgICogVGhlIGtleSBpbiB0aGUgbG9jYWwgc3RvcmFnZSB1c2VkIHRvIHN0b3JlIGN1cnJlbnQgY29sb3Igc2NoZW1lLlxuICAgICAqL1xuICAgIG1vZGVTdG9yYWdlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSB3aW5kb3cgdGhhdCBhdHRhY2hlcyB0aGUgJ3N0b3JhZ2UnIGV2ZW50IGxpc3RlbmVyXG4gICAgICogQGRlZmF1bHQgd2luZG93XG4gICAgICovXG4gICAgc3RvcmFnZVdpbmRvdzogUHJvcFR5cGVzLmFueSxcbiAgICAvKipcbiAgICAgKiBUaGUgY2FsY3VsYXRlZCB0aGVtZSBvYmplY3QgdGhhdCB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIGNvbnRleHQuXG4gICAgICovXG4gICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSA6IHZvaWQgMDtcbiAgY29uc3QgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUgPSB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdzdHJpbmcnID8gZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5saWdodDtcbiAgY29uc3QgZGVmYXVsdERhcmtDb2xvclNjaGVtZSA9IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ3N0cmluZycgPyBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA6IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lLmRhcms7XG4gIGNvbnN0IGdldEluaXRDb2xvclNjaGVtZVNjcmlwdCA9IHBhcmFtcyA9PiBzeXN0ZW1HZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQoX2V4dGVuZHMoe1xuICAgIGF0dHJpYnV0ZTogZGVmYXVsdEF0dHJpYnV0ZSxcbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXk6IGRlZmF1bHRDb2xvclNjaGVtZVN0b3JhZ2VLZXksXG4gICAgZGVmYXVsdE1vZGU6IGRlc2lnblN5c3RlbU1vZGUsXG4gICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsXG4gICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICBtb2RlU3RvcmFnZUtleTogZGVmYXVsdE1vZGVTdG9yYWdlS2V5XG4gIH0sIHBhcmFtcykpO1xuICByZXR1cm4ge1xuICAgIENzc1ZhcnNQcm92aWRlcixcbiAgICB1c2VDb2xvclNjaGVtZSxcbiAgICBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHRcbiAgfTtcbn0iLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNzc1ZhcnNQcm92aWRlciBhcyBjcmVhdGVDc3NWYXJzUHJvdmlkZXIgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCB7IGNyZWF0ZVNvZnRJbnZlcnNpb24sIGNyZWF0ZVNvbGlkSW52ZXJzaW9uIH0gZnJvbSAnLi92YXJpYW50VXRpbHMnO1xuY29uc3Qge1xuICBDc3NWYXJzUHJvdmlkZXIsXG4gIHVzZUNvbG9yU2NoZW1lLFxuICBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHRcbn0gPSBjcmVhdGVDc3NWYXJzUHJvdmlkZXIoe1xuICB0aGVtZTogZGVmYXVsdFRoZW1lLFxuICBhdHRyaWJ1dGU6ICdkYXRhLWpveS1jb2xvci1zY2hlbWUnLFxuICBtb2RlU3RvcmFnZUtleTogJ2pveS1tb2RlJyxcbiAgY29sb3JTY2hlbWVTdG9yYWdlS2V5OiAnam95LWNvbG9yLXNjaGVtZScsXG4gIGRlZmF1bHRDb2xvclNjaGVtZToge1xuICAgIGxpZ2h0OiAnbGlnaHQnLFxuICAgIGRhcms6ICdkYXJrJ1xuICB9LFxuICByZXNvbHZlVGhlbWU6IG1lcmdlZFRoZW1lID0+IHtcbiAgICBjb25zdCBjb2xvckludmVyc2lvbklucHV0ID0gbWVyZ2VkVGhlbWUuY29sb3JJbnZlcnNpb247XG4gICAgbWVyZ2VkVGhlbWUuY29sb3JJbnZlcnNpb24gPSBkZWVwbWVyZ2Uoe1xuICAgICAgc29mdDogY3JlYXRlU29mdEludmVyc2lvbihtZXJnZWRUaGVtZSksXG4gICAgICBzb2xpZDogY3JlYXRlU29saWRJbnZlcnNpb24obWVyZ2VkVGhlbWUpXG4gICAgfSwgdHlwZW9mIGNvbG9ySW52ZXJzaW9uSW5wdXQgPT09ICdmdW5jdGlvbicgPyBjb2xvckludmVyc2lvbklucHV0KG1lcmdlZFRoZW1lKSA6IGNvbG9ySW52ZXJzaW9uSW5wdXQsIHtcbiAgICAgIGNsb25lOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxufSk7XG5leHBvcnQgeyBDc3NWYXJzUHJvdmlkZXIsIHVzZUNvbG9yU2NoZW1lLCBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQgfTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIGFzIFN5c3RlbVRoZW1lUHJvdmlkZXIsIHVzZVRoZW1lIGFzIHVzZVN5c3RlbVRoZW1lIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgZXh0ZW5kVGhlbWUgZnJvbSAnLi9leHRlbmRUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHVzZVRoZW1lID0gKCkgPT4ge1xuICByZXR1cm4gdXNlU3lzdGVtVGhlbWUoZGVmYXVsdFRoZW1lKTtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIHRoZW1lOiB0aGVtZUlucHV0XG59KSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1UaGVtZVByb3ZpZGVyLCB7XG4gICAgdGhlbWU6IHRoZW1lSW5wdXQgPyBleHRlbmRUaGVtZSh0aGVtZUlucHV0KSA6IGRlZmF1bHRUaGVtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IENhY2hlUHJvdmlkZXIgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuXG4vLyBwcmVwZW5kOiB0cnVlIG1vdmVzIE1VSSBzdHlsZXMgdG8gdGhlIHRvcCBvZiB0aGUgPGhlYWQ+IHNvIHRoZXkncmUgbG9hZGVkIGZpcnN0LlxuLy8gSXQgYWxsb3dzIGRldmVsb3BlcnMgdG8gZWFzaWx5IG92ZXJyaWRlIE1VSSBzdHlsZXMgd2l0aCBvdGhlciBzdHlsaW5nIHNvbHV0aW9ucywgbGlrZSBDU1MgbW9kdWxlcy5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5sZXQgY2FjaGU7XG5pZiAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0Jykge1xuICBjYWNoZSA9IGNyZWF0ZUNhY2hlKHtcbiAgICBrZXk6ICdjc3MnLFxuICAgIHByZXBlbmQ6IHRydWVcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRFbmdpbmVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgaW5qZWN0Rmlyc3QsXG4gICAgY2hpbGRyZW5cbiAgfSA9IHByb3BzO1xuICByZXR1cm4gaW5qZWN0Rmlyc3QgJiYgY2FjaGUgPyAvKiNfX1BVUkVfXyovX2pzeChDYWNoZVByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNhY2hlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSA6IGNoaWxkcmVuO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVkRW5naW5lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGxhc3QgaW4gdGhlIDxoZWFkPiBlbGVtZW50IG9mIHRoZSBwYWdlLlxuICAgKiBBcyBhIHJlc3VsdCwgdGhleSBnYWluIG1vcmUgc3BlY2lmaWNpdHkgdGhhbiBhbnkgb3RoZXIgc3R5bGUgc2hlZXQuXG4gICAqIElmIHlvdSB3YW50IHRvIG92ZXJyaWRlIE1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcihrZXlzKSB7XG4gIHZhciBfa2V5cyQ7XG4gIHJldHVybiAhIWtleXNbMF0ubWF0Y2goL14odHlwb2dyYXBoeXx2YXJpYW50c3xicmVha3BvaW50c3xjb2xvckludmVyc2lvbnxjb2xvckludmVyc2lvbkNvbmZpZykkLykgfHwgISFrZXlzWzBdLm1hdGNoKC9zeENvbmZpZyQvKSB8fFxuICAvLyBlbmRzIHdpdGggc3hDb25maWdcbiAga2V5c1swXSA9PT0gJ3BhbGV0dGUnICYmICEhKChfa2V5cyQgPSBrZXlzWzFdKSAhPSBudWxsICYmIF9rZXlzJC5tYXRjaCgvXihtb2RlKSQvKSkgfHwga2V5c1swXSA9PT0gJ2ZvY3VzJyAmJiBrZXlzWzFdICE9PSAndGhpY2tuZXNzJztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8qKlxuICogaW50ZXJuYWwgdXRpbGl0eVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGNvbnN0IHJlc29sdmVTeFZhbHVlID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0sIGtleSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIGxldCBwYXJzZWRWYWx1ZTtcbiAgbGV0IHN4T2JqZWN0ID0ge307XG4gIGZ1bmN0aW9uIHJlc29sdmVTeChzeFByb3ApIHtcbiAgICBpZiAodHlwZW9mIHN4UHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gc3hQcm9wKHRoZW1lKTtcbiAgICAgIHJlc29sdmVTeChyZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzeFByb3ApKSB7XG4gICAgICBzeFByb3AuZm9yRWFjaChzeEl0ZW0gPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHN4SXRlbSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgcmVzb2x2ZVN4KHN4SXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4UHJvcCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHN4T2JqZWN0ID0gX2V4dGVuZHMoe30sIHN4T2JqZWN0LCBzeFByb3ApO1xuICAgIH1cbiAgfVxuICBpZiAob3duZXJTdGF0ZS5zeCkge1xuICAgIHJlc29sdmVTeChvd25lclN0YXRlLnN4KTtcbiAgICBjb25zdCB2YWx1ZSA9IHN4T2JqZWN0W2tleV07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGtleSA9PT0gJ2JvcmRlclJhZGl1cycpIHtcbiAgICAgICAgdmFyIF90aGVtZSR2YXJzO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBgJHt2YWx1ZX1weGA7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkVmFsdWUgPSAoKF90aGVtZSR2YXJzID0gdGhlbWUudmFycykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR2YXJzLnJhZGl1c1t2YWx1ZV0pIHx8IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGFyc2VkVmFsdWUgPSB2YWx1ZSh0aGVtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWRWYWx1ZSB8fCBkZWZhdWx0VmFsdWU7XG59OyIsImltcG9ydCB7IGNyZWF0ZVN0eWxlZCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgZGVmYXVsdFRoZW1lXG59KTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHVzZVRoZW1lUHJvcHMgYXMgc3lzdGVtVXNlVGhlbWVQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZTogX2V4dGVuZHMoe30sIGRlZmF1bHRUaGVtZSwge1xuICAgICAgY29tcG9uZW50czoge31cbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUdldENzc1ZhciBhcyBjcmVhdGVHZXRDc3NWYXIgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5leHBvcnQgY29uc3QgaXNWYXJpYW50UGFsZXR0ZSA9IGNvbG9yUGFsZXR0ZSA9PiBjb2xvclBhbGV0dGUgJiYgdHlwZW9mIGNvbG9yUGFsZXR0ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoY29sb3JQYWxldHRlKS5zb21lKHZhbHVlID0+IHtcbiAgdmFyIF92YWx1ZSRtYXRjaDtcbiAgcmV0dXJuIChfdmFsdWUkbWF0Y2ggPSB2YWx1ZS5tYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF92YWx1ZSRtYXRjaC5jYWxsKHZhbHVlLCAvXihwbGFpbihIb3ZlcnxBY3RpdmV8RGlzYWJsZWQpPyhDb2xvcnxCZyl8b3V0bGluZWQoSG92ZXJ8QWN0aXZlfERpc2FibGVkKT8oQ29sb3J8Qm9yZGVyfEJnKXxzb2Z0KEhvdmVyfEFjdGl2ZXxEaXNhYmxlZCk/KENvbG9yfEJnKXxzb2xpZChIb3ZlcnxBY3RpdmV8RGlzYWJsZWQpPyhDb2xvcnxCZykpJC8pO1xufSk7XG5jb25zdCBhc3NpZ25Dc3MgPSAodGFyZ2V0LCB2YXJpYW50VmFyLCB2YWx1ZSkgPT4ge1xuICBpZiAodmFyaWFudFZhci5pbmNsdWRlcygnQ29sb3InKSkge1xuICAgIHRhcmdldC5jb2xvciA9IHZhbHVlO1xuICB9XG4gIGlmICh2YXJpYW50VmFyLmluY2x1ZGVzKCdCZycpKSB7XG4gICAgdGFyZ2V0LmJhY2tncm91bmRDb2xvciA9IHZhbHVlO1xuICB9XG4gIGlmICh2YXJpYW50VmFyLmluY2x1ZGVzKCdCb3JkZXInKSkge1xuICAgIHRhcmdldC5ib3JkZXJDb2xvciA9IHZhbHVlO1xuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbmFtZSB2YXJpYW50IG5hbWVcbiAqIEBleGFtcGxlICdwbGFpbidcbiAqXG4gKiBAcGFyYW0gcGFsZXR0ZSBvYmplY3QgdGhhdCBjb250YWlucyBwYWxldHRlIHRva2Vuc1xuICogQGV4YW1wbGUgeyBwcmltYXJ5OiB7IHBsYWluQ29sb3I6ICcnLCBwbGFpbkhvdmVyQ29sb3I6ICcnLCAuLi50b2tlbnMgfSwgLi4ub3RoZXIgcGFsZXRlIH1cbiAqXG4gKiBAcGFyYW0gZ2V0Q3NzVmFyIGEgZnVuY3Rpb24gdGhhdCByZWNlaXZlIHZhcmlhbnQgdG9rZW4gYW5kIHJldHVybiBhIENTUyB2YXJpYWJsZVxuICpcbiAqIHJlc3VsdCB3aWxsIGJlIHRoZSBzdHlsZXNoZWV0IGJhc2VkIG9uIHRoZSBwYWxldHRlIHRva2Vuc1xuICogQGV4YW1wbGUge1xuICogICBjb2xvcjogJy0tdG9rZW4nLFxuICogICBiYWNrZ3JvdW5kQ29sb3I6ICctLXRva2VuJyxcbiAqICAgJy0tdmFyaWFudC1ib3JkZXJXaWR0aCc6ICcwcHgnLFxuICogfVxuICogQGV4YW1wbGUge1xuICogICBjdXJzb3I6ICdwb2ludGVyJyxcbiAqICAgY29sb3I6ICctLXRva2VuJyxcbiAqICAgYmFja2dyb3VuZENvbG9yOiAnLS10b2tlbicsXG4gKiAgICctLXZhcmlhbnQtYm9yZGVyV2lkdGgnOiAnMXB4JyxcbiAqIH1cbiAqIEBleGFtcGxlIHtcbiAqICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICogICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAqICAgY29sb3I6ICctLXRva2VuJyxcbiAqICAgYmFja2dyb3VuZENvbG9yOiAnLS10b2tlbicsXG4gKiAgICctLXZhcmlhbnQtYm9yZGVyV2lkdGgnOiAnMHB4JyxcbiAqIH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVZhcmlhbnRTdHlsZSA9IChuYW1lLCBwYWxldHRlLCBnZXRDc3NWYXIpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIE9iamVjdC5lbnRyaWVzKHBhbGV0dGUgfHwge30pLmZvckVhY2goKFt2YXJpYW50VmFyLCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFyaWFudFZhci5tYXRjaChuZXcgUmVnRXhwKGAke25hbWV9KGNvbG9yfGJnfGJvcmRlcilgLCAnaScpKSAmJiAhIXZhbHVlKSB7XG4gICAgICBjb25zdCBjc3NWYXIgPSBnZXRDc3NWYXIgPyBnZXRDc3NWYXIodmFyaWFudFZhcikgOiB2YWx1ZTtcbiAgICAgIGlmICh2YXJpYW50VmFyLmluY2x1ZGVzKCdEaXNhYmxlZCcpKSB7XG4gICAgICAgIHJlc3VsdC5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgICAgICByZXN1bHQuY3Vyc29yID0gJ2RlZmF1bHQnO1xuICAgICAgfVxuICAgICAgaWYgKHZhcmlhbnRWYXIubWF0Y2goLyhIb3ZlcnxBY3RpdmV8RGlzYWJsZWQpLykpIHtcbiAgICAgICAgYXNzaWduQ3NzKHJlc3VsdCwgdmFyaWFudFZhciwgY3NzVmFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaXRpYWwgc3RhdGVcbiAgICAgICAgaWYgKCFyZXN1bHRbJy0tdmFyaWFudC1ib3JkZXJXaWR0aCddKSB7XG4gICAgICAgICAgLy8gaW1wb3J0YW50IHRvIHByZXZlbnQgaW5oZXJpdGFuY2UsIG90aGVyd2lzZSB0aGUgY2hpbGRyZW4gd2lsbCBoYXZlIHRoZSB3cm9uZyBzdHlsZXMgZS5nLlxuICAgICAgICAgIC8vICAgPENhcmQgdmFyaWFudD1cIm91dGxpbmVkXCI+XG4gICAgICAgICAgLy8gICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzb2Z0XCI+XG4gICAgICAgICAgcmVzdWx0WyctLXZhcmlhbnQtYm9yZGVyV2lkdGgnXSA9ICcwcHgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YXJpYW50VmFyLmluY2x1ZGVzKCdCb3JkZXInKSkge1xuICAgICAgICAgIHJlc3VsdFsnLS12YXJpYW50LWJvcmRlcldpZHRoJ10gPSAnMXB4JztcbiAgICAgICAgICByZXN1bHQuYm9yZGVyID0gJ3ZhcigtLXZhcmlhbnQtYm9yZGVyV2lkdGgpIHNvbGlkJztcbiAgICAgICAgfVxuICAgICAgICAvLyBib3JkZXIgY29sb3Igc2hvdWxkIGNvbWUgbGF0ZXJcbiAgICAgICAgYXNzaWduQ3NzKHJlc3VsdCwgdmFyaWFudFZhciwgY3NzVmFyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmNvbnN0IGNyZWF0ZVByZWZpeFZhciA9IGNzc1ZhclByZWZpeCA9PiB7XG4gIHJldHVybiBjc3NWYXIgPT4gYC0tJHtjc3NWYXJQcmVmaXggPyBgJHtjc3NWYXJQcmVmaXh9LWAgOiAnJ30ke2Nzc1Zhci5yZXBsYWNlKC9eLS0vLCAnJyl9YDtcbn07XG5cbi8vIEl0J3MgdXNlZCBvbmx5IGluIGV4dGVuZFRoZW1lLCBzbyBpdCdzIHNhZmUgdG8gYWx3YXlzIGluY2x1ZGUgZGVmYXVsdCB2YWx1ZXNcbmV4cG9ydCBjb25zdCBjcmVhdGVWYXJpYW50ID0gKHZhcmlhbnQsIHRoZW1lKSA9PiB7XG4gIGxldCByZXN1bHQgPSB7fTtcbiAgaWYgKHRoZW1lKSB7XG4gICAgY29uc3Qge1xuICAgICAgZ2V0Q3NzVmFyLFxuICAgICAgcGFsZXR0ZVxuICAgIH0gPSB0aGVtZTtcbiAgICBPYmplY3QuZW50cmllcyhwYWxldHRlKS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgIGNvbnN0IFtjb2xvciwgY29sb3JQYWxldHRlXSA9IGVudHJ5O1xuICAgICAgaWYgKGlzVmFyaWFudFBhbGV0dGUoY29sb3JQYWxldHRlKSAmJiB0eXBlb2YgY29sb3JQYWxldHRlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgICAgW2NvbG9yXTogY3JlYXRlVmFyaWFudFN0eWxlKHZhcmlhbnQsIGNvbG9yUGFsZXR0ZSwgdmFyaWFudFZhciA9PiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tJHt2YXJpYW50VmFyfWAsIHBhbGV0dGVbY29sb3JdW3ZhcmlhbnRWYXJdKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmVzdWx0LmNvbnRleHQgPSBjcmVhdGVWYXJpYW50U3R5bGUodmFyaWFudCwge1xuICAgIHBsYWluQ29sb3I6ICd2YXIoLS12YXJpYW50LXBsYWluQ29sb3IpJyxcbiAgICBwbGFpbkhvdmVyQ29sb3I6IGB2YXIoLS12YXJpYW50LXBsYWluSG92ZXJDb2xvcilgLFxuICAgIHBsYWluSG92ZXJCZzogJ3ZhcigtLXZhcmlhbnQtcGxhaW5Ib3ZlckJnKScsXG4gICAgcGxhaW5BY3RpdmVCZzogJ3ZhcigtLXZhcmlhbnQtcGxhaW5BY3RpdmVCZyknLFxuICAgIHBsYWluRGlzYWJsZWRDb2xvcjogJ3ZhcigtLXZhcmlhbnQtcGxhaW5EaXNhYmxlZENvbG9yKScsXG4gICAgb3V0bGluZWRDb2xvcjogJ3ZhcigtLXZhcmlhbnQtb3V0bGluZWRDb2xvciknLFxuICAgIG91dGxpbmVkQm9yZGVyOiAndmFyKC0tdmFyaWFudC1vdXRsaW5lZEJvcmRlciknLFxuICAgIG91dGxpbmVkSG92ZXJDb2xvcjogYHZhcigtLXZhcmlhbnQtb3V0bGluZWRIb3ZlckNvbG9yKWAsXG4gICAgb3V0bGluZWRIb3ZlckJvcmRlcjogYHZhcigtLXZhcmlhbnQtb3V0bGluZWRIb3ZlckJvcmRlcilgLFxuICAgIG91dGxpbmVkSG92ZXJCZzogYHZhcigtLXZhcmlhbnQtb3V0bGluZWRIb3ZlckJnKWAsXG4gICAgb3V0bGluZWRBY3RpdmVCZzogYHZhcigtLXZhcmlhbnQtb3V0bGluZWRBY3RpdmVCZylgLFxuICAgIG91dGxpbmVkRGlzYWJsZWRDb2xvcjogYHZhcigtLXZhcmlhbnQtb3V0bGluZWREaXNhYmxlZENvbG9yKWAsXG4gICAgb3V0bGluZWREaXNhYmxlZEJvcmRlcjogYHZhcigtLXZhcmlhbnQtb3V0bGluZWREaXNhYmxlZEJvcmRlcilgLFxuICAgIHNvZnRDb2xvcjogJ3ZhcigtLXZhcmlhbnQtc29mdENvbG9yKScsXG4gICAgc29mdEJnOiAndmFyKC0tdmFyaWFudC1zb2Z0QmcpJyxcbiAgICBzb2Z0SG92ZXJDb2xvcjogJ3ZhcigtLXZhcmlhbnQtc29mdEhvdmVyQ29sb3IpJyxcbiAgICBzb2Z0SG92ZXJCZzogJ3ZhcigtLXZhcmlhbnQtc29mdEhvdmVyQmcpJyxcbiAgICBzb2Z0QWN0aXZlQmc6ICd2YXIoLS12YXJpYW50LXNvZnRBY3RpdmVCZyknLFxuICAgIHNvZnREaXNhYmxlZENvbG9yOiAndmFyKC0tdmFyaWFudC1zb2Z0RGlzYWJsZWRDb2xvciknLFxuICAgIHNvZnREaXNhYmxlZEJnOiAndmFyKC0tdmFyaWFudC1zb2Z0RGlzYWJsZWRCZyknLFxuICAgIHNvbGlkQ29sb3I6ICd2YXIoLS12YXJpYW50LXNvbGlkQ29sb3IpJyxcbiAgICBzb2xpZEJnOiAndmFyKC0tdmFyaWFudC1zb2xpZEJnKScsXG4gICAgc29saWRIb3ZlckNvbG9yOiAndmFyKC0tdmFyaWFudC1zb2xpZEhvdmVyQ29sb3IpJyxcbiAgICBzb2xpZEhvdmVyQmc6ICd2YXIoLS12YXJpYW50LXNvbGlkSG92ZXJCZyknLFxuICAgIHNvbGlkQWN0aXZlQmc6ICd2YXIoLS12YXJpYW50LXNvbGlkQWN0aXZlQmcpJyxcbiAgICBzb2xpZERpc2FibGVkQ29sb3I6ICd2YXIoLS12YXJpYW50LXNvbGlkRGlzYWJsZWRDb2xvciknLFxuICAgIHNvbGlkRGlzYWJsZWRCZzogJ3ZhcigtLXZhcmlhbnQtc29saWREaXNhYmxlZEJnKSdcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNvZnRJbnZlcnNpb24gPSAodGhlbWUsIGFkZERlZmF1bHRWYWx1ZXMpID0+IHtcbiAgY29uc3QgZ2V0Q3NzVmFyRGVmYXVsdCA9IGNyZWF0ZUdldENzc1Zhcih0aGVtZS5jc3NWYXJQcmVmaXgpO1xuICBjb25zdCBwcmVmaXhWYXIgPSBjcmVhdGVQcmVmaXhWYXIodGhlbWUuY3NzVmFyUHJlZml4KTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGdldENzc1ZhciA9IGFkZERlZmF1bHRWYWx1ZXMgPyBjc3NWYXIgPT4ge1xuICAgIHZhciBfdGhlbWUkcGFsZXR0ZSwgX3RoZW1lJHBhbGV0dGUkY29sb3I7XG4gICAgY29uc3QgdG9rZW5zID0gY3NzVmFyLnNwbGl0KCctJyk7XG4gICAgY29uc3QgY29sb3IgPSB0b2tlbnNbMV07XG4gICAgY29uc3QgdmFsdWUgPSB0b2tlbnNbMl07XG4gICAgcmV0dXJuIGdldENzc1ZhckRlZmF1bHQoY3NzVmFyLCAoX3RoZW1lJHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlJGNvbG9yID0gX3RoZW1lJHBhbGV0dGVbY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHBhbGV0dGUkY29sb3JbdmFsdWVdKTtcbiAgfSA6IGdldENzc1ZhckRlZmF1bHQ7XG4gIE9iamVjdC5lbnRyaWVzKHRoZW1lLnBhbGV0dGUpLmZvckVhY2goZW50cnkgPT4ge1xuICAgIGNvbnN0IFtjb2xvciwgY29sb3JQYWxldHRlXSA9IGVudHJ5O1xuICAgIGlmIChpc1ZhcmlhbnRQYWxldHRlKGNvbG9yUGFsZXR0ZSkpIHtcbiAgICAgIHJlc3VsdFtjb2xvcl0gPSB7XG4gICAgICAgICctLUJhZGdlLXJpbmdDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1zb2Z0QmdgKSxcbiAgICAgICAgW3ByZWZpeFZhcignLS1zaGFkb3dDaGFubmVsJyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tZGFya0NoYW5uZWxgKSxcbiAgICAgICAgW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKV06IHtcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtZm9jdXNWaXNpYmxlJyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tMzAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtYm9keScpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjEpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1zdXJmYWNlJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMDgpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDEnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4yKWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtbGV2ZWwyJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuNClgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1iYWNrZ3JvdW5kLWxldmVsMycpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjYpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtdGV4dC1wcmltYXJ5JyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tMTAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtc2Vjb25kYXJ5JyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtdGVydGlhcnknKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuNilgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1kaXZpZGVyJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAwLjIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluQ29sb3InOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAxKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1wbGFpbkhvdmVyQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNTBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluSG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4xNilgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5BY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4zMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5EaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMSlgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRIb3ZlckNvbG9yJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTUwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEJnJzogJ2luaXRpYWwnLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRCb3JkZXInOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuNClgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRIb3ZlckJvcmRlcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkSG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4xNilgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRBY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4zMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZERpc2FibGVkQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS0xMDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4yNClgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdEhvdmVyQ29sb3InOiAnI2ZmZicsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0SG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4zMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdEFjdGl2ZUJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjQ4KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0RGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC43MilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdERpc2FibGVkQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMTIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkQ29sb3InOiAnI2ZmZicsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTUwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRIb3ZlckNvbG9yJzogJyNmZmYnLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRIb3ZlckJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTQwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRBY3RpdmVCZyc6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS00MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkRGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC43MilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWREaXNhYmxlZEJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjEyKWBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYGxpZ2h0YCAoZGVmYXVsdCBjb2xvciBzY2hlbWUpIHNob3VsZCBjb21lIGxhc3QgaW4gY2FzZSB0aGF0IGB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKClgIHJldHVybiB0aGUgc2FtZSB2YWx1ZVxuICAgICAgICBbdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvcignbGlnaHQnKV06IHtcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtZm9jdXNWaXNpYmxlJyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNTAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtYm9keScpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjEpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1zdXJmYWNlJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMDgpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDEnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4yKWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtbGV2ZWwyJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMzIpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDMnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC40OClgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS10ZXh0LXByaW1hcnknKV06IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS03MDBgKSxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtdGV4dC1zZWNvbmRhcnknKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC44KWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtdGVydGlhcnknKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC42OClgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1kaXZpZGVyJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluQ29sb3InOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDEpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluSG92ZXJDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluSG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4xMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5BY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4yNClgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5EaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjYpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQ29sb3InOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDEpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjQpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkSG92ZXJDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS02MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkSG92ZXJCb3JkZXInOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tMzAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEhvdmVyQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMTIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQWN0aXZlQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMjQpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkRGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC42KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZERpc2FibGVkQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjEyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0Q29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNjAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0QmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0SG92ZXJDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS03MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRIb3ZlckJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTIwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdEFjdGl2ZUJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTMwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdERpc2FibGVkQ29sb3InOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuNilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdERpc2FibGVkQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMDgpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkQ29sb3InOiBnZXRDc3NWYXIoJ3BhbGV0dGUtY29tbW9uLXdoaXRlJyksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTYwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRIb3ZlckNvbG9yJzogZ2V0Q3NzVmFyKCdwYWxldHRlLWNvbW1vbi13aGl0ZScpLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRIb3ZlckJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTUwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRBY3RpdmVCZyc6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS01MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkRGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC42KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZERpc2FibGVkQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMDgpYFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNvbGlkSW52ZXJzaW9uID0gKHRoZW1lLCBhZGREZWZhdWx0VmFsdWVzKSA9PiB7XG4gIGNvbnN0IGdldENzc1ZhckRlZmF1bHQgPSBjcmVhdGVHZXRDc3NWYXIodGhlbWUuY3NzVmFyUHJlZml4KTtcbiAgY29uc3QgcHJlZml4VmFyID0gY3JlYXRlUHJlZml4VmFyKHRoZW1lLmNzc1ZhclByZWZpeCk7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBnZXRDc3NWYXIgPSBhZGREZWZhdWx0VmFsdWVzID8gY3NzVmFyID0+IHtcbiAgICBjb25zdCB0b2tlbnMgPSBjc3NWYXIuc3BsaXQoJy0nKTtcbiAgICBjb25zdCBjb2xvciA9IHRva2Vuc1sxXTtcbiAgICBjb25zdCB2YWx1ZSA9IHRva2Vuc1syXTtcbiAgICByZXR1cm4gZ2V0Q3NzVmFyRGVmYXVsdChjc3NWYXIsIHRoZW1lLnBhbGV0dGVbY29sb3JdW3ZhbHVlXSk7XG4gIH0gOiBnZXRDc3NWYXJEZWZhdWx0O1xuICBPYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBjb25zdCBbY29sb3IsIGNvbG9yUGFsZXR0ZV0gPSBlbnRyeTtcbiAgICBpZiAoaXNWYXJpYW50UGFsZXR0ZShjb2xvclBhbGV0dGUpKSB7XG4gICAgICBpZiAoY29sb3IgPT09ICd3YXJuaW5nJykge1xuICAgICAgICByZXN1bHQud2FybmluZyA9IHtcbiAgICAgICAgICAnLS1CYWRnZS1yaW5nQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tc29saWRCZ2ApLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tc2hhZG93Q2hhbm5lbCcpXTogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWZvY3VzVmlzaWJsZScpXTogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTcwMGApLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1iYWNrZ3JvdW5kLWJvZHknKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC4xNilgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1iYWNrZ3JvdW5kLXN1cmZhY2UnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC4xKWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtcG9wdXAnKV06IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS0xMDBgKSxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDEnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC4yKWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtbGV2ZWwyJyldOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1kYXJrQ2hhbm5lbGApfSAvIDAuMzYpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDMnKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC42KWAsXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtcHJpbWFyeScpXTogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTkwMGApLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS10ZXh0LXNlY29uZGFyeScpXTogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTcwMGApLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS10ZXh0LXRlcnRpYXJ5JyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNTAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWRpdmlkZXInKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC4yKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1wbGFpbkNvbG9yJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTcwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5Ib3ZlckNvbG9yJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTgwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5Ib3ZlckJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjEyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1wbGFpbkFjdGl2ZUJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjMyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1wbGFpbkRpc2FibGVkQ29sb3InOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuNzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEJvcmRlcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC41KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEhvdmVyQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tODAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEhvdmVyQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjYpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkSG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4xMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRBY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4zMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZERpc2FibGVkQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS04MDBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRIb3ZlckNvbG9yJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTkwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdEJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRIb3ZlckJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjI4KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0QWN0aXZlQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMTIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0RGlzYWJsZWRCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LW1haW5DaGFubmVsYCl9IC8gMC4wOClgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWRDb2xvcic6ICcjZmZmJyxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkQmcnOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNjAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEhvdmVyQ29sb3InOiAnI2ZmZicsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEhvdmVyQmcnOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEFjdGl2ZUJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTgwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbWFpbkNoYW5uZWxgKX0gLyAwLjcyKWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZERpc2FibGVkQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1tYWluQ2hhbm5lbGApfSAvIDAuMDgpYFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2NvbG9yXSA9IHtcbiAgICAgICAgICBjb2xvclNjaGVtZTogJ2RhcmsnLFxuICAgICAgICAgICctLUJhZGdlLXJpbmdDb2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1zb2xpZEJnYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1zaGFkb3dDaGFubmVsJyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tZGFya0NoYW5uZWxgKSxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtZm9jdXNWaXNpYmxlJyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tMjAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLWJhY2tncm91bmQtYm9keScpXTogJ3JnYmEoMCAwIDAgLyAwLjEpJyxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1zdXJmYWNlJyldOiAncmdiYSgwIDAgMCAvIDAuMDYpJyxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1wb3B1cCcpXTogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTcwMGApLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1iYWNrZ3JvdW5kLWxldmVsMScpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tZGFya0NoYW5uZWxgKX0gLyAwLjIpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtYmFja2dyb3VuZC1sZXZlbDInKV06IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWRhcmtDaGFubmVsYCl9IC8gMC4zNilgLFxuICAgICAgICAgIFtwcmVmaXhWYXIoJy0tcGFsZXR0ZS1iYWNrZ3JvdW5kLWxldmVsMycpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tZGFya0NoYW5uZWxgKX0gLyAwLjYpYCxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtdGV4dC1wcmltYXJ5JyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtY29tbW9uLXdoaXRlYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtc2Vjb25kYXJ5JyldOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tMTAwYCksXG4gICAgICAgICAgW3ByZWZpeFZhcignLS1wYWxldHRlLXRleHQtdGVydGlhcnknKV06IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS0yMDBgKSxcbiAgICAgICAgICBbcHJlZml4VmFyKCctLXBhbGV0dGUtZGl2aWRlcicpXTogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC4zMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5Db2xvcic6IGdldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS01MGApLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5Ib3ZlckNvbG9yJzogYCNmZmZgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5Ib3ZlckJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC4xMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtcGxhaW5BY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuMzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXBsYWluRGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuNzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNTBgKSxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQm9yZGVyJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC41KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEhvdmVyQ29sb3InOiBgI2ZmZmAsXG4gICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEhvdmVyQm9yZGVyJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTMwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRIb3ZlckJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC4xMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRBY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuMzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkRGlzYWJsZWRDb2xvcic6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuNzIpYCxcbiAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkRGlzYWJsZWRCb3JkZXInOiBgcmdiYSgyNTUgMjU1IDI1NSAvIDAuMilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdENvbG9yJzogZ2V0Q3NzVmFyKGBwYWxldHRlLWNvbW1vbi13aGl0ZWApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdEhvdmVyQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtY29tbW9uLXdoaXRlYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0QmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAwLjI0KWAsXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2Z0SG92ZXJCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuMzYpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnRBY3RpdmVCZyc6IGByZ2JhKCR7Z2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LWxpZ2h0Q2hhbm5lbGApfSAvIDAuMTYpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvZnREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC43MilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29mdERpc2FibGVkQmcnOiBgcmdiYSgke2dldENzc1ZhcihgcGFsZXR0ZS0ke2NvbG9yfS1saWdodENoYW5uZWxgKX0gLyAwLjEpYCxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tJHtjb2xvciA9PT0gJ25ldXRyYWwnID8gJzYwMCcgOiAnNTAwJ31gKSxcbiAgICAgICAgICAnLS12YXJpYW50LXNvbGlkQmcnOiBnZXRDc3NWYXIoYHBhbGV0dGUtY29tbW9uLXdoaXRlYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEhvdmVyQ29sb3InOiBnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tNzAwYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEhvdmVyQmcnOiBnZXRDc3NWYXIoYHBhbGV0dGUtY29tbW9uLXdoaXRlYCksXG4gICAgICAgICAgJy0tdmFyaWFudC1zb2xpZEFjdGl2ZUJnJzogZ2V0Q3NzVmFyKGBwYWxldHRlLSR7Y29sb3J9LTIwMGApLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWREaXNhYmxlZENvbG9yJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC43MilgLFxuICAgICAgICAgICctLXZhcmlhbnQtc29saWREaXNhYmxlZEJnJzogYHJnYmEoJHtnZXRDc3NWYXIoYHBhbGV0dGUtJHtjb2xvcn0tbGlnaHRDaGFubmVsYCl9IC8gMC4xKWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZWxlbWVudFR5cGVcIiwgXCJvd25lclN0YXRlXCIsIFwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wc1wiLCBcImdldFNsb3RPd25lclN0YXRlXCIsIFwiaW50ZXJuYWxGb3J3YXJkZWRQcm9wc1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImNvbXBvbmVudFwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiY29tcG9uZW50XCJdLFxuICBfZXhjbHVkZWQ0ID0gW1wiZGlzYWJsZUNvbG9ySW52ZXJzaW9uXCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBhcHBlbmRPd25lclN0YXRlLCByZXNvbHZlQ29tcG9uZW50UHJvcHMsIG1lcmdlU2xvdFByb3BzIH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCB7IHVzZUNvbG9ySW52ZXJzaW9uIH0gZnJvbSAnLi4vc3R5bGVzL0NvbG9ySW52ZXJzaW9uJztcbi8qKlxuICogQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgSm95IFVJIHNsb3QuXG4gKlxuICogVGhpcyBpcyBhbiBhZHZhbmNlZCB2ZXJzaW9uIG9mIE1VSSBCYXNlIGB1c2VTbG90UHJvcHNgIGJlY2F1c2UgSm95IFVJIGFsbG93cyBsZWFmIGNvbXBvbmVudCB0byBiZSBjdXN0b21pemVkIHZpYSBgY29tcG9uZW50YCBwcm9wXG4gKiB3aGlsZSBNVUkgQmFzZSBkb2VzIG5vdCBuZWVkIHRvIHN1cHBvcnQgbGVhZiBjb21wb25lbnQgY3VzdG9taXphdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZTogbmFtZSBvZiB0aGUgc2xvdFxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zIHtbU2xvdCwgc2xvdFByb3BzXX0gVGhlIHNsb3QncyBSZWFjdCBjb21wb25lbnQgYW5kIHRoZSBzbG90J3MgcHJvcHNcbiAqXG4gKiBOb3RlOiB0aGUgcmV0dXJuZWQgc2xvdCdzIHByb3BzXG4gKiAtIHdpbGwgbmV2ZXIgY29udGFpbiBgY29tcG9uZW50YCBwcm9wLlxuICogLSBtaWdodCBjb250YWluIGBhc2AgcHJvcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU2xvdChcbi8qKlxuICogVGhlIHNsb3QncyBuYW1lLiBBbGwgSm95IFVJIGNvbXBvbmVudHMgc2hvdWxkIGhhdmUgYHJvb3RgIHNsb3QuXG4gKlxuICogSWYgdGhlIG5hbWUgaXMgYHJvb3RgLCB0aGUgbG9naWMgYmVoYXZlcyBkaWZmZXJlbnRseSBmcm9tIG90aGVyIHNsb3RzLFxuICogZS5nLiB0aGUgYGV4dGVybmFsRm9yd2FyZGVkUHJvcHNgIGFyZSBzcHJlYWQgdG8gYHJvb3RgIHNsb3QgYnV0IG5vdCBvdGhlciBzbG90cy5cbiAqL1xubmFtZSwgcGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBlbGVtZW50VHlwZTogaW5pdGlhbEVsZW1lbnRUeXBlLFxuICAgICAgb3duZXJTdGF0ZSxcbiAgICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgICBnZXRTbG90T3duZXJTdGF0ZSxcbiAgICAgIGludGVybmFsRm9yd2FyZGVkUHJvcHNcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICB1c2VTbG90UHJvcHNQYXJhbXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYXJhbWV0ZXJzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgICBjb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXG4gICAgICBzbG90cyA9IHtcbiAgICAgICAgW25hbWVdOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHMgPSB7XG4gICAgICAgIFtuYW1lXTogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSA9IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShleHRlcm5hbEZvcndhcmRlZFByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgZWxlbWVudFR5cGUgPSBzbG90c1tuYW1lXSB8fCBpbml0aWFsRWxlbWVudFR5cGU7XG5cbiAgLy8gYHNsb3RQcm9wc1tuYW1lXWAgY2FuIGJlIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB0aGUgY29tcG9uZW50J3Mgb3duZXJTdGF0ZS5cbiAgLy8gYHJlc29sdmVkQ29tcG9uZW50c1Byb3BzYCBpcyBhbHdheXMgYSBwbGFpbiBvYmplY3QuXG4gIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID0gcmVzb2x2ZUNvbXBvbmVudFByb3BzKHNsb3RQcm9wc1tuYW1lXSwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IF9tZXJnZVNsb3RQcm9wcyA9IG1lcmdlU2xvdFByb3BzKF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0sIHVzZVNsb3RQcm9wc1BhcmFtcywge1xuICAgICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogbmFtZSA9PT0gJ3Jvb3QnID8gb3RoZXIgOiB1bmRlZmluZWQsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wczogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHNcbiAgICB9KSksXG4gICAge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgY29tcG9uZW50OiBzbG90Q29tcG9uZW50XG4gICAgICB9LFxuICAgICAgaW50ZXJuYWxSZWZcbiAgICB9ID0gX21lcmdlU2xvdFByb3BzLFxuICAgIG1lcmdlZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX21lcmdlU2xvdFByb3BzLnByb3BzLCBfZXhjbHVkZWQzKTtcbiAgY29uc3QgcmVmID0gdXNlRm9ya1JlZihpbnRlcm5hbFJlZiwgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzLnJlZiwgcGFyYW1ldGVycy5yZWYpO1xuXG4gIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgbG9naWNcbiAgY29uc3QgX3JlZiA9IGdldFNsb3RPd25lclN0YXRlID8gZ2V0U2xvdE93bmVyU3RhdGUobWVyZ2VkUHJvcHMpIDoge30sXG4gICAge1xuICAgICAgZGlzYWJsZUNvbG9ySW52ZXJzaW9uID0gZmFsc2VcbiAgICB9ID0gX3JlZixcbiAgICBzbG90T3duZXJTdGF0ZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZDQpO1xuICBjb25zdCBmaW5hbE93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgc2xvdE93bmVyU3RhdGUpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29sb3JcbiAgfSA9IHVzZUNvbG9ySW52ZXJzaW9uKGZpbmFsT3duZXJTdGF0ZS52YXJpYW50KTtcbiAgaWYgKG5hbWUgPT09ICdyb290Jykge1xuICAgIHZhciBfY29sb3I7XG4gICAgLy8gZm9yIHRoZSByb290IHNsb3QsIGNvbG9yIGludmVyc2lvbiBpcyBjYWxjdWxhdGVkIGJlZm9yZSB0aGUgYHVzZVNsb3RgIGFuZCBwYXNzIHRocm91Z2ggYG93bmVyU3RhdGVgLlxuICAgIGZpbmFsT3duZXJTdGF0ZS5jb2xvciA9IChfY29sb3IgPSBtZXJnZWRQcm9wcy5jb2xvcikgIT0gbnVsbCA/IF9jb2xvciA6IG93bmVyU3RhdGUuY29sb3I7XG4gIH0gZWxzZSBpZiAoIWRpc2FibGVDb2xvckludmVyc2lvbikge1xuICAgIGZpbmFsT3duZXJTdGF0ZS5jb2xvciA9IGdldENvbG9yKG1lcmdlZFByb3BzLmNvbG9yLCBmaW5hbE93bmVyU3RhdGUuY29sb3IpO1xuICB9XG4gIGNvbnN0IExlYWZDb21wb25lbnQgPSBuYW1lID09PSAncm9vdCcgPyBzbG90Q29tcG9uZW50IHx8IHJvb3RDb21wb25lbnQgOiBzbG90Q29tcG9uZW50O1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBuYW1lID09PSAncm9vdCcgJiYgIXJvb3RDb21wb25lbnQgJiYgIXNsb3RzW25hbWVdICYmIGludGVybmFsRm9yd2FyZGVkUHJvcHMsIG5hbWUgIT09ICdyb290JyAmJiAhc2xvdHNbbmFtZV0gJiYgaW50ZXJuYWxGb3J3YXJkZWRQcm9wcywgbWVyZ2VkUHJvcHMsIExlYWZDb21wb25lbnQgJiYge1xuICAgIGFzOiBMZWFmQ29tcG9uZW50XG4gIH0sIHtcbiAgICByZWZcbiAgfSksIGZpbmFsT3duZXJTdGF0ZSk7XG4gIE9iamVjdC5rZXlzKHNsb3RPd25lclN0YXRlKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBkZWxldGUgcHJvcHNbcHJvcE5hbWVdO1xuICB9KTtcbiAgcmV0dXJuIFtlbGVtZW50VHlwZSwgcHJvcHNdO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jcmVhdGVDaGFpbmVkRnVuY3Rpb24gYXMgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFpbmVkRnVuY3Rpb247IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb24uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiguLi5mdW5jcykge1xuICByZXR1cm4gZnVuY3MucmVkdWNlKChhY2MsIGZ1bmMpID0+IHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgKCkgPT4ge30pO1xufSIsImNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJjb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJtb2RlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBwdXJwbGUgZnJvbSAnLi4vY29sb3JzL3B1cnBsZSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBsaWdodEJsdWUgZnJvbSAnLi4vY29sb3JzL2xpZ2h0Qmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmV4cG9ydCBjb25zdCBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBjb21tb24ud2hpdGVcbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBibHVlWzIwMF0sXG4gICAgICBsaWdodDogYmx1ZVs1MF0sXG4gICAgICBkYXJrOiBibHVlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHB1cnBsZVs1MDBdLFxuICAgIGxpZ2h0OiBwdXJwbGVbMzAwXSxcbiAgICBkYXJrOiBwdXJwbGVbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogbGlnaHRCbHVlWzQwMF0sXG4gICAgICBsaWdodDogbGlnaHRCbHVlWzMwMF0sXG4gICAgICBkYXJrOiBsaWdodEJsdWVbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBncmVlbls4MDBdLFxuICAgIGxpZ2h0OiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7XG5cbiAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuICBjb25zdCBhdWdtZW50Q29sb3IgPSAoe1xuICAgIGNvbG9yLFxuICAgIG5hbWUsXG4gICAgbWFpblNoYWRlID0gNTAwLFxuICAgIGxpZ2h0U2hhZGUgPSAzMDAsXG4gICAgZGFya1NoYWRlID0gNzAwXG4gIH0pID0+IHtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5cXGBjb2xvci5tYWluXFxgIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IFxcYCR7SlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbil9XFxgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxuXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cblxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tIFwiQG11aS9tYXRlcmlhbC9jb2xvcnNcIjtcblxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IGdyZWVuLFxufSB9KTtcblxuY29uc3QgdGhlbWUyID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxufSB9KTtgIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMiwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2V4dGVuZHMoe30sIGNvbW1vbiksXG4gICAgLy8gcHJldmVudCBtdXRhYmxlIG9iamVjdC5cbiAgICAvLyBUaGUgcGFsZXR0ZSBtb2RlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICBtb2RlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHByaW1hcnksXG4gICAgICBuYW1lOiAncHJpbWFyeSdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc2Vjb25kYXJ5LFxuICAgICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgICBtYWluU2hhZGU6ICdBNDAwJyxcbiAgICAgIGxpZ2h0U2hhZGU6ICdBMjAwJyxcbiAgICAgIGRhcmtTaGFkZTogJ0E3MDAnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBlcnJvcixcbiAgICAgIG5hbWU6ICdlcnJvcidcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHdhcm5pbmcsXG4gICAgICBuYW1lOiAnd2FybmluZydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBpbmZvLFxuICAgICAgbmFtZTogJ2luZm8nXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzdWNjZXNzLFxuICAgICAgbmFtZTogJ3N1Y2Nlc3MnXG4gICAgfSksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldFxuICB9LCBtb2Rlc1ttb2RlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgIHtcbiAgICAgIGZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICAgIGZvbnRTaXplID0gMTQsXG4gICAgICAvLyBweFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gNTAwLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgICAgLy8gMTZweCBpcyB0aGUgZGVmYXVsdCBmb250LXNpemUgdXNlZCBieSBicm93c2Vycy5cbiAgICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgICBhbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gICAgfSA9IF9yZWYsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKSxcbiAgICBpbmhlcml0OiB7XG4gICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgWyR7T2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKX1dLmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBmYWI6IDEwNTAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSwgdW5zdGFibGVfZGVmYXVsdFN4Q29uZmlnIGFzIGRlZmF1bHRTeENvbmZpZywgdW5zdGFibGVfc3R5bGVGdW5jdGlvblN4IGFzIHN0eWxlRnVuY3Rpb25TeCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zSW5wdXQgPSB7fSxcbiAgICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBpZiAob3B0aW9ucy52YXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYHZhcnNcXGAgaXMgYSBwcml2YXRlIGZpZWxkIHVzZWQgZm9yIENTUyB2YXJpYWJsZXMgc3VwcG9ydC5cblBsZWFzZSB1c2UgYW5vdGhlciBuYW1lLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE4KSk7XG4gIH1cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUT0RPIHY2OiBSZWZhY3RvciB0byB1c2UgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyBmcm9tIEBtdWkvdXRpbHMgb25jZSBgcmVhZE9ubHlgIHN0YXRlIGNsYXNzIGlzIHVzZWQgaW4gUmF0aW5nIGNvbXBvbmVudC5cbiAgICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBbJ2FjdGl2ZScsICdjaGVja2VkJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdleHBhbmRlZCcsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdzZWxlY3RlZCddO1xuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5pbmRleE9mKCdNdWknKSA9PT0gMCkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIG1peGlucykge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIG1pbkhlaWdodDogNTYsXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3hzJyldOiB7XG4gICAgICAgICdAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJzoge1xuICAgICAgICAgIG1pbkhlaWdodDogNDhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN2Z0ljb24nLCBzbG90KTtcbn1cbmNvbnN0IHN2Z0ljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3ZnSWNvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JBY3Rpb24nLCAnY29sb3JFcnJvcicsICdjb2xvckRpc2FibGVkJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVNtYWxsJywgJ2ZvbnRTaXplTWVkaXVtJywgJ2ZvbnRTaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBzdmdJY29uQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGZvbnRTaXplLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgZm9udFNpemUke2NhcGl0YWxpemUoZm9udFNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHRyYW5zaXRpb25zLCBfdGhlbWUkdHJhbnNpdGlvbnMkY3IsIF90aGVtZSR0cmFuc2l0aW9uczIsIF90aGVtZSR0cmFuc2l0aW9uczIkZCwgX3RoZW1lJHR5cG9ncmFwaHksIF90aGVtZSR0eXBvZ3JhcGh5JHB4VCwgX3RoZW1lJHR5cG9ncmFwaHkyLCBfdGhlbWUkdHlwb2dyYXBoeTIkcHgsIF90aGVtZSR0eXBvZ3JhcGh5MywgX3RoZW1lJHR5cG9ncmFwaHkzJHB4LCBfcGFsZXR0ZSRvd25lclN0YXRlJGMsIF9wYWxldHRlLCBfcGFsZXR0ZSRvd25lclN0YXRlJGMyLCBfcGFsZXR0ZTIsIF9wYWxldHRlMiRhY3Rpb24sIF9wYWxldHRlMywgX3BhbGV0dGUzJGFjdGlvbjtcbiAgcmV0dXJuIHtcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgd2lkdGg6ICcxZW0nLFxuICAgIGhlaWdodDogJzFlbScsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgZmxleFNocmluazogMCxcbiAgICB0cmFuc2l0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zID0gdGhlbWUudHJhbnNpdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHRyYW5zaXRpb25zJGNyID0gX3RoZW1lJHRyYW5zaXRpb25zLmNyZWF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9ucyRjci5jYWxsKF90aGVtZSR0cmFuc2l0aW9ucywgJ2ZpbGwnLCB7XG4gICAgICBkdXJhdGlvbjogKF90aGVtZSR0cmFuc2l0aW9uczIgPSB0aGVtZS50cmFuc2l0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHJhbnNpdGlvbnMyJGQgPSBfdGhlbWUkdHJhbnNpdGlvbnMyLmR1cmF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zMiRkLnNob3J0ZXJcbiAgICB9KSxcbiAgICBmb250U2l6ZToge1xuICAgICAgaW5oZXJpdDogJ2luaGVyaXQnLFxuICAgICAgc21hbGw6ICgoX3RoZW1lJHR5cG9ncmFwaHkgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0eXBvZ3JhcGh5JHB4VCA9IF90aGVtZSR0eXBvZ3JhcGh5LnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeSRweFQuY2FsbChfdGhlbWUkdHlwb2dyYXBoeSwgMjApKSB8fCAnMS4yNXJlbScsXG4gICAgICBtZWRpdW06ICgoX3RoZW1lJHR5cG9ncmFwaHkyID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHlwb2dyYXBoeTIkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTIucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MiRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MiwgMjQpKSB8fCAnMS41cmVtJyxcbiAgICAgIGxhcmdlOiAoKF90aGVtZSR0eXBvZ3JhcGh5MyA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHR5cG9ncmFwaHkzJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkzLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTMkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTMsIDM1KSkgfHwgJzIuMTg3NXJlbSdcbiAgICB9W293bmVyU3RhdGUuZm9udFNpemVdLFxuICAgIC8vIFRPRE8gdjUgZGVwcmVjYXRlLCB2NiByZW1vdmUgZm9yIHN4XG4gICAgY29sb3I6IChfcGFsZXR0ZSRvd25lclN0YXRlJGMgPSAoX3BhbGV0dGUgPSAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfcGFsZXR0ZSRvd25lclN0YXRlJGMyID0gX3BhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZSRvd25lclN0YXRlJGMyLm1haW4pICE9IG51bGwgPyBfcGFsZXR0ZSRvd25lclN0YXRlJGMgOiB7XG4gICAgICBhY3Rpb246IChfcGFsZXR0ZTIgPSAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfcGFsZXR0ZTIkYWN0aW9uID0gX3BhbGV0dGUyLmFjdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYWxldHRlMiRhY3Rpb24uYWN0aXZlLFxuICAgICAgZGlzYWJsZWQ6IChfcGFsZXR0ZTMgPSAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfcGFsZXR0ZTMkYWN0aW9uID0gX3BhbGV0dGUzLmFjdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYWxldHRlMyRhY3Rpb24uZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICAgIGh0bWxDb2xvcixcbiAgICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgICB0aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSAnMCAwIDI0IDI0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvbnRTaXplLFxuICAgIGluc3RhbmNlRm9udFNpemU6IGluUHJvcHMuZm9udFNpemUsXG4gICAgaW5oZXJpdFZpZXdCb3gsXG4gICAgdmlld0JveFxuICB9KTtcbiAgY29uc3QgbW9yZSA9IHt9O1xuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCB7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2FjdGlvbicsICdkaXNhYmxlZCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByb290IG5vZGUgd2lsbCBpbmhlcml0IHRoZSBjdXN0b20gYGNvbXBvbmVudGAncyB2aWV3Qm94IGFuZCB0aGUgYHZpZXdCb3hgXG4gICAqIHByb3Agd2lsbCBiZSBpZ25vcmVkLlxuICAgKiBVc2VmdWwgd2hlbiB5b3Ugd2FudCB0byByZWZlcmVuY2UgYSBjdXN0b20gYGNvbXBvbmVudGAgYW5kIGhhdmUgYFN2Z0ljb25gIHBhc3MgdGhhdFxuICAgKiBgY29tcG9uZW50YCdzIHZpZXdCb3ggdG8gdGhlIHJvb3Qgbm9kZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGluaGVyaXRWaWV3Qm94OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3AuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqIEBkZWZhdWx0ICcwIDAgMjQgMjQnXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgU3ZnSWNvbjsiLCJpbXBvcnQgeyB1c2VUaGVtZVByb3BzIGFzIHN5c3RlbVVzZVRoZW1lUHJvcHMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWVcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcblxuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwYXRoXG4gICAgfSkpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgJHtkaXNwbGF5TmFtZX1JY29uYDtcbiAgfVxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVib3VuY2U7IiwiaW1wb3J0IHsgdW5zdGFibGVfZGVwcmVjYXRlZFByb3BUeXBlIGFzIGRlcHJlY2F0ZWRQcm9wVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVwcmVjYXRlZFByb3BUeXBlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlcHJlY2F0ZWRQcm9wVHlwZSh2YWxpZGF0b3IsIHJlYXNvbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoKSA9PiBudWxsO1xuICB9XG4gIHJldHVybiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICBjb25zdCBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlICR7bG9jYXRpb259IFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVTYWZlfVxcYCBpcyBkZXByZWNhdGVkLiAke3JlYXNvbn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJXaW5kb3c7IiwiaW1wb3J0IHsgdW5zdGFibGVfcmVxdWlyZVByb3BGYWN0b3J5IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgcmVxdWlyZVByb3BGYWN0b3J5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHNldFJlZjsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlSWQgYXMgdXNlSWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlkOyIsImltcG9ydCB7IHVuc3RhYmxlX3Vuc3VwcG9ydGVkUHJvcCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVuc3VwcG9ydGVkUHJvcDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN1cHBvcnRlZFByb3AocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIHByb3AgXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIGl0LmApO1xuICB9XG4gIHJldHVybiBudWxsO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUNvbnRyb2xsZWQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlQ29udHJvbGxlZDsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VGb3JrUmVmOyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUlzRm9jdXNWaXNpYmxlIGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VJc0ZvY3VzVmlzaWJsZTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9iYXNlL2NsYXNzTmFtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhcGl0YWxpemUgfSBmcm9tICcuL2NhcGl0YWxpemUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICcuL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVN2Z0ljb24gfSBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZGVib3VuY2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZXByZWNhdGVkUHJvcFR5cGUgfSBmcm9tICcuL2RlcHJlY2F0ZWRQcm9wVHlwZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJy4vaXNNdWlFbGVtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG93bmVyV2luZG93IH0gZnJvbSAnLi9vd25lcldpbmRvdyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJy4vcmVxdWlyZVByb3BGYWN0b3J5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2V0UmVmIH0gZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VJZCB9IGZyb20gJy4vdXNlSWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICcuL3Vuc3VwcG9ydGVkUHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICcuL3VzZUNvbnRyb2xsZWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnLi91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRm9ya1JlZiB9IGZyb20gJy4vdXNlRm9ya1JlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi91c2VJc0ZvY3VzVmlzaWJsZSc7XG4vLyBUT0RPOiByZW1vdmUgdGhpcyBleHBvcnQgb25jZSBDbGFzc05hbWVHZW5lcmF0b3IgaXMgc3RhYmxlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yID0ge1xuICBjb25maWd1cmU6IGdlbmVyYXRvciA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ01VSTogYENsYXNzTmFtZUdlbmVyYXRvcmAgaW1wb3J0IGZyb20gYEBtdWkvbWF0ZXJpYWwvdXRpbHNgIGlzIG91dGRhdGVkIGFuZCBtaWdodCBjYXVzZSB1bmV4cGVjdGVkIGlzc3Vlcy4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9jbGFzc05hbWUnYCBpbnN0ZWFkXCIsICcnLCAnVGhlIGRldGFpbCBvZiB0aGUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMwMDExI2lzc3VlY29tbWVudC0xMDI0OTkzNDAxJywgJycsICdUaGUgdXBkYXRlZCBkb2N1bWVudGF0aW9uOiBodHRwczovL211aS5jb20vZ3VpZGVzL2NsYXNzbmFtZS1nZW5lcmF0b3IvJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICBDbGFzc05hbWVHZW5lcmF0b3IuY29uZmlndXJlKGdlbmVyYXRvcik7XG4gIH1cbn07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGhlbWVDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4vVGhlbWVDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBzdHlsZXMsXG4gICAgZGVmYXVsdFRoZW1lID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCBnbG9iYWxTdHlsZXMgPSB0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gdGhlbWVJbnB1dCA9PiBzdHlsZXMoaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXQpIDogc3R5bGVzO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goR2xvYmFsLCB7XG4gICAgc3R5bGVzOiBnbG9iYWxTdHlsZXNcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzID0ge1xuICBkZWZhdWx0VGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKVxufSA6IHZvaWQgMDsiLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1Byb3BWYWxpZCBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCB7IHdpdGhFbW90aW9uQ2FjaGUsIFRoZW1lQ29udGV4dCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IGlzUHJvcFZhbGlkO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnO1xufTtcblxudmFyIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IGZ1bmN0aW9uIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTYgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG59O1xudmFyIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMgPSBmdW5jdGlvbiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKSB7XG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcDtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPyBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wKHByb3BOYW1lKSAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3A7XG4gIH1cblxuICBpZiAodHlwZW9mIHNob3VsZEZvcndhcmRQcm9wICE9PSAnZnVuY3Rpb24nICYmIGlzUmVhbCkge1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcDtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRGb3J3YXJkUHJvcDtcbn07XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIHJ1bGVzID0gdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZWQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBhIHN0eWxlZCBlbGVtZW50IHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC5cXG5Zb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNSZWFsID0gdGFnLl9fZW1vdGlvbl9yZWFsID09PSB0YWc7XG4gIHZhciBiYXNlVGFnID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWc7XG4gIHZhciBpZGVudGlmaWVyTmFtZTtcbiAgdmFyIHRhcmdldENsYXNzTmFtZTtcblxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWRlbnRpZmllck5hbWUgPSBvcHRpb25zLmxhYmVsO1xuICAgIHRhcmdldENsYXNzTmFtZSA9IG9wdGlvbnMudGFyZ2V0O1xuICB9XG5cbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wID0gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCk7XG4gIHZhciBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCB8fCBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoYmFzZVRhZyk7XG4gIHZhciBzaG91bGRVc2VBcyA9ICFkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoJ2FzJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0eWxlcyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkID8gdGFnLl9fZW1vdGlvbl9zdHlsZXMuc2xpY2UoMCkgOiBbXTtcblxuICAgIGlmIChpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaChcImxhYmVsOlwiICsgaWRlbnRpZmllck5hbWUgKyBcIjtcIik7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NbMF0gPT0gbnVsbCB8fCBhcmdzWzBdLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaC5hcHBseShzdHlsZXMsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbMF1bMF0pO1xuICAgICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1baV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzLnB1c2goYXJnc1tpXSwgYXJnc1swXVtpXSk7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lOiB3ZSBuZWVkIHRvIGNhc3QgU3RhdGVsZXNzRnVuY3Rpb25hbENvbXBvbmVudCB0byBvdXIgUHJpdmF0ZVN0eWxlZENvbXBvbmVudCBjbGFzc1xuXG5cbiAgICB2YXIgU3R5bGVkID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgICAgIHZhciBGaW5hbFRhZyA9IHNob3VsZFVzZUFzICYmIHByb3BzLmFzIHx8IGJhc2VUYWc7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuICAgICAgdmFyIG1lcmdlZFByb3BzID0gcHJvcHM7XG5cbiAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgIG1lcmdlZFByb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRQcm9wcy50aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgY2xhc3NJbnRlcnBvbGF0aW9ucywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucyksIGNhY2hlLnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKEZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoIC8vICRGbG93Rml4TWVcbiAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBpc1N0cmluZ1RhZzogdHlwZW9mIEZpbmFsVGFnID09PSAnc3RyaW5nJ1xuICAgICAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZpbmFsVGFnLCBuZXdQcm9wcykpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0ICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbnZhciBuZXdTdHlsZWQgPSBjcmVhdGVTdHlsZWQuYmluZCgpO1xudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gIC8vICRGbG93Rml4TWU6IHdlIGNhbiBpZ25vcmUgdGhpcyBiZWNhdXNlIGl0cyBleHBvc2VkIHR5cGUgaXMgZGVmaW5lZCBieSB0aGUgQ3JlYXRlU3R5bGVkIHR5cGVcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5ld1N0eWxlZDtcbiIsIi8qKlxuICogQG11aS9zdHlsZWQtZW5naW5lIHY1LjExLjExXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBlbVN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gZW1TdHlsZWQodGFnLCBvcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFNlZW1zIGxpa2UgeW91IGNhbGxlZCBcXGBzdHlsZWQoJHtjb21wb25lbnR9KSgpXFxgIHdpdGhvdXQgYSBcXGBzdHlsZVxcYCBhcmd1bWVudC5gLCAnWW91IG11c3QgcHJvdmlkZSBhIGBzdHlsZXNgIGFyZ3VtZW50OiBgc3R5bGVkKFwiZGl2XCIpKHN0eWxlWW91Rm9yZ290VG9QYXNzKWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMuc29tZShzdHlsZSA9PiBzdHlsZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IHRoZSBzdHlsZWQoJHtjb21wb25lbnR9KSguLi5hcmdzKSBBUEkgcmVxdWlyZXMgYWxsIGl0cyBhcmdzIHRvIGJlIGRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzRmFjdG9yeSguLi5zdHlsZXMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzID0gKHRhZywgcHJvY2Vzc29yKSA9PiB7XG4gIC8vIEVtb3Rpb24gYXR0YWNoZXMgYWxsIHRoZSBzdHlsZXMgYXMgYF9fZW1vdGlvbl9zdHlsZXNgLlxuICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8xNmQ5NzFkMGRhMjI5NTk2ZDZiY2MzOWQyODJiYTk3NTNjOWVlN2NmL3BhY2thZ2VzL3N0eWxlZC9zcmMvYmFzZS5qcyNMMTg2XG4gIGlmIChBcnJheS5pc0FycmF5KHRhZy5fX2Vtb3Rpb25fc3R5bGVzKSkge1xuICAgIHRhZy5fX2Vtb3Rpb25fc3R5bGVzID0gcHJvY2Vzc29yKHRhZy5fX2Vtb3Rpb25fc3R5bGVzKTtcbiAgfVxufTtcbmV4cG9ydCB7IFRoZW1lQ29udGV4dCwga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0eWxlZEVuZ2luZVByb3ZpZGVyIH0gZnJvbSAnLi9TdHlsZWRFbmdpbmVQcm92aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdsb2JhbFN0eWxlcyB9IGZyb20gJy4vR2xvYmFsU3R5bGVzJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcblxuLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbn07XG5cbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZSgoYWNjLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgLy8ga2V5IGlzIGJyZWFrcG9pbnRcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzLnZhbHVlcyB8fCB2YWx1ZXMpLmluZGV4T2YoYnJlYWtwb2ludCkgIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IG1lZGlhS2V5ID0gdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KTtcbiAgICAgICAgYWNjW21lZGlhS2V5XSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0sIGJyZWFrcG9pbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzS2V5ID0gYnJlYWtwb2ludDtcbiAgICAgICAgYWNjW2Nzc0tleV0gPSBwcm9wVmFsdWVbY3NzS2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgLi4uc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc107XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcbiAgY29uc3QgYnJlYWtwb2ludHNJbk9yZGVyID0gKF9icmVha3BvaW50c0lucHV0JGtleSA9IGJyZWFrcG9pbnRzSW5wdXQua2V5cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9icmVha3BvaW50c0lucHV0JGtleS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludFN0eWxlS2V5ID0gYnJlYWtwb2ludHNJbnB1dC51cChrZXkpO1xuICAgIGFjY1ticmVha3BvaW50U3R5bGVLZXldID0ge307XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gYnJlYWtwb2ludHNJbk9yZGVyIHx8IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRLZXlzLCBzdHlsZSkge1xuICByZXR1cm4gYnJlYWtwb2ludEtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPdXRwdXQgPSBhY2Nba2V5XTtcbiAgICBjb25zdCBpc0JyZWFrcG9pbnRVbnVzZWQgPSAhYnJlYWtwb2ludE91dHB1dCB8fCBPYmplY3Qua2V5cyhicmVha3BvaW50T3V0cHV0KS5sZW5ndGggPT09IDA7XG4gICAgaWYgKGlzQnJlYWtwb2ludFVudXNlZCkge1xuICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn1cblxuLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKSB7XG4gIC8vIGZpeGVkIHZhbHVlXG4gIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYmFzZSA9IHt9O1xuICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICB2YWx1ZXM6IGJyZWFrcG9pbnRWYWx1ZXMsXG4gIGJyZWFrcG9pbnRzOiB0aGVtZUJyZWFrcG9pbnRzLFxuICBiYXNlOiBjdXN0b21CYXNlXG59KSB7XG4gIGNvbnN0IGJhc2UgPSBjdXN0b21CYXNlIHx8IGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhiYXNlKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjaGFubmVsIGNyZWF0ZWQgZnJvbSB0aGUgaW5wdXQgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY2hhbm5lbCBmb3IgdGhlIGNvbG9yLCB0aGF0IGNhbiBiZSB1c2VkIGluIHJnYmEgb3IgaHNsYSBjb2xvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuZXhwb3J0IGNvbnN0IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCA9IChjb2xvciwgd2FybmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBjb2xvckNoYW5uZWwoY29sb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvcidcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKChuLCBpKSA9PiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG4pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gYCR7dmFsdWVzWzFdfSVgO1xuICAgIHZhbHVlc1syXSA9IGAke3ZhbHVlc1syXX0lYDtcbiAgfVxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHt2YWx1ZXMubWFwKChuLCBpKSA9PiBpbnRUb0hleChpID09PSAzID8gTWF0aC5yb3VuZCgyNTUgKiBuKSA6IG4pKS5qb2luKCcnKX1gO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGNvbnN0IGggPSB2YWx1ZXNbMF07XG4gIGNvbnN0IHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIGNvbnN0IGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnIHx8IGNvbG9yLnR5cGUgPT09ICdoc2xhJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKHZhbCA9PiB7XG4gICAgaWYgKGNvbG9yLnR5cGUgIT09ICdjb2xvcicpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7XG5cbiAgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgY29uc3QgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgY29uc3QgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVEYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlTGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFyaWFudFwiXTtcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gaXNFbXB0eShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT09IDA7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIHN0cmluZyBjbGFzc0tleSBiYXNlZCBvbiB0aGUgcHJvcGVydGllcyBwcm92aWRlZC4gSXQgc3RhcnRzIHdpdGggdGhlXG4gKiB2YXJpYW50IGlmIGRlZmluZWQsIGFuZCB0aGVuIGl0IGFwcGVuZHMgYWxsIG90aGVyIHByb3BlcnRpZXMgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gdGhlIHByb3BlcnRpZXMgZm9yIHdoaWNoIHRoZSBjbGFzc0tleSBzaG91bGQgYmUgY3JlYXRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IGNsYXNzS2V5ID0gdmFyaWFudCB8fCAnJztcbiAgT2JqZWN0LmtleXMob3RoZXIpLnNvcnQoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbG9yJykge1xuICAgICAgY2xhc3NLZXkgKz0gaXNFbXB0eShjbGFzc0tleSkgPyBwcm9wc1trZXldIDogY2FwaXRhbGl6ZShwcm9wc1trZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NLZXkgKz0gYCR7aXNFbXB0eShjbGFzc0tleSkgPyBrZXkgOiBjYXBpdGFsaXplKGtleSl9JHtjYXBpdGFsaXplKHByb3BzW2tleV0udG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NLZXk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICBfZXhjbHVkZWQzID0gW1widGhlbWVcIl07XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCwgeyBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIGFzIHByb2Nlc3NTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBwcm9wc1RvQ2xhc3NLZXkgZnJvbSAnLi9wcm9wc1RvQ2xhc3NLZXknO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8yNmRlZDYxMDlmY2Q4Y2E5ODc1Y2MyY2U0NTY0ZmVlNjc4YTNmM2M1L3BhY2thZ2VzL3N0eWxlZC9zcmMvdXRpbHMuanMjTDQwXG5mdW5jdGlvbiBpc1N0cmluZ1RhZyh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmXG4gIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTY7XG59XG5jb25zdCBnZXRTdHlsZU92ZXJyaWRlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBpZiAodGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICBjb25zdCBrZXkgPSBwcm9wc1RvQ2xhc3NLZXkoZGVmaW5pdGlvbi5wcm9wcyk7XG4gICAgdmFyaWFudHNTdHlsZXNba2V5XSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH0pO1xuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuY29uc3QgdmFyaWFudHNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzLCB0aGVtZSwgbmFtZSkgPT4ge1xuICB2YXIgX3RoZW1lJGNvbXBvbmVudHMsIF90aGVtZSRjb21wb25lbnRzJG5hbTtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHZhcmlhbnRzU3R5bGVzID0gW107XG4gIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyRuYW0gPSBfdGhlbWUkY29tcG9uZW50c1tuYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzJG5hbS52YXJpYW50cztcbiAgaWYgKHRoZW1lVmFyaWFudHMpIHtcbiAgICB0aGVtZVZhcmlhbnRzLmZvckVhY2godGhlbWVWYXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoZW1lVmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1twcm9wc1RvQ2xhc3NLZXkodGhlbWVWYXJpYW50LnByb3BzKV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5cbi8vIFVwZGF0ZSAvc3lzdGVtL3N0eWxlZC8jYXBpIGluIGNhc2UgaWYgdGhpcyBjaGFuZ2VzXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBsb3dlcmNhc2VGaXJzdExldHRlciA9IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVkKGlucHV0ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSxcbiAgICByb290U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCxcbiAgICBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcFxuICB9ID0gaW5wdXQ7XG4gIGNvbnN0IHN5c3RlbVN4ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGhlbWVcbiAgICB9KSk7XG4gIH07XG4gIHN5c3RlbVN4Ll9fbXVpX3N5c3RlbVN4ID0gdHJ1ZTtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgYHN4YCBzdHlsZSBmdW5jdGlvbiBmcm9tIHRoZSBwcmV2aW91cyBzdHlsZWQgY29tcG9uZW50IHRvIHByZXZlbnQgdW5uZWNlc3Nhcnkgc3R5bGVzIGdlbmVyYXRlZCBieSB0aGUgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gICAgcHJvY2Vzc1N0eWxlcyh0YWcsIHN0eWxlcyA9PiBzdHlsZXMuZmlsdGVyKHN0eWxlID0+ICEoc3R5bGUgIT0gbnVsbCAmJiBzdHlsZS5fX211aV9zeXN0ZW1TeCkpKTtcbiAgICBjb25zdCB7XG4gICAgICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgICBza2lwU3g6IGlucHV0U2tpcFN4LFxuICAgICAgICBvdmVycmlkZXNSZXNvbHZlclxuICAgICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShpbnB1dE9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgICAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuICAgIGNvbnN0IHNraXBWYXJpYW50c1Jlc29sdmVyID0gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciAhPT0gdW5kZWZpbmVkID8gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciA6IGNvbXBvbmVudFNsb3QgJiYgY29tcG9uZW50U2xvdCAhPT0gJ1Jvb3QnIHx8IGZhbHNlO1xuICAgIGNvbnN0IHNraXBTeCA9IGlucHV0U2tpcFN4IHx8IGZhbHNlO1xuICAgIGxldCBsYWJlbDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnKSB7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHJvb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFNsb3QpIHtcbiAgICAgIC8vIGFueSBvdGhlciBzbG90IHNwZWNpZmllZFxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzbG90U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZ1RhZyh0YWcpKSB7XG4gICAgICAvLyBmb3Igc3RyaW5nIChodG1sKSB0YWcsIHByZXNlcnZlIHRoZSBiZWhhdmlvciBpbiBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMuXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZGVmYXVsdFN0eWxlZFJlc29sdmVyID0gc3R5bGVkRW5naW5lU3R5bGVkKHRhZywgX2V4dGVuZHMoe1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uLFxuICAgICAgbGFiZWxcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgICByZXR1cm4gdHlwZW9mIHN0eWxlc0FyZyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHlsZXNBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlc0FyZyA/IF9yZWYgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgICB9ID0gX3JlZixcbiAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkMik7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0FyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9IDogc3R5bGVzQXJnO1xuICAgICAgfSkgOiBbXTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gc3R5bGVBcmc7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gZ2V0U3R5bGVPdmVycmlkZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpO1xuICAgICAgICAgIGlmIChzdHlsZU92ZXJyaWRlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSB0eXBlb2Ygc2xvdFN0eWxlID09PSAnZnVuY3Rpb24nID8gc2xvdFN0eWxlKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgIH0pKSA6IHNsb3RTdHlsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIGdldFZhcmlhbnRTdHlsZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpLCB0aGVtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2goc3lzdGVtU3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID0gZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLmxlbmd0aCAtIGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpO1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IFsuLi5zdHlsZUFyZywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZy5yYXcgPSBbLi4uc3R5bGVBcmcucmF3LCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3R5bGVBcmcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgIHN0eWxlQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZUFyZykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICAgICAgICAgIH0gPSBfcmVmMixcbiAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIF9leGNsdWRlZDMpO1xuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKHRyYW5zZm9ybWVkU3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBsZXQgZGlzcGxheU5hbWU7XG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgU3R5bGVkKCR7Z2V0RGlzcGxheU5hbWUodGFnKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTtcbmNvbnN0IHNvcnRCcmVha3BvaW50c1ZhbHVlcyA9IHZhbHVlcyA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnRzQXNBcnJheSA9IE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiAoe1xuICAgIGtleSxcbiAgICB2YWw6IHZhbHVlc1trZXldXG4gIH0pKSB8fCBbXTtcbiAgLy8gU29ydCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgYnJlYWtwb2ludHNBc0FycmF5LnNvcnQoKGJyZWFrcG9pbnQxLCBicmVha3BvaW50MikgPT4gYnJlYWtwb2ludDEudmFsIC0gYnJlYWtwb2ludDIudmFsKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzQXNBcnJheS5yZWR1Y2UoKGFjYywgb2JqKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhY2MsIHtcbiAgICAgIFtvYmoua2V5XTogb2JqLnZhbFxuICAgIH0pO1xuICB9LCB7fSk7XG59O1xuXG4vLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgICAgLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc20pLlxuICAgICAgdmFsdWVzID0ge1xuICAgICAgICB4czogMCxcbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgc206IDYwMCxcbiAgICAgICAgLy8gdGFibGV0XG4gICAgICAgIG1kOiA5MDAsXG4gICAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgICBsZzogMTIwMCxcbiAgICAgICAgLy8gZGVza3RvcFxuICAgICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbiAgICAgIH0sXG5cbiAgICAgIHVuaXQgPSAncHgnLFxuICAgICAgc3RlcCA9IDVcbiAgICB9ID0gYnJlYWtwb2ludHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShicmVha3BvaW50cywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc29ydGVkVmFsdWVzID0gc29ydEJyZWFrcG9pbnRzVmFsdWVzKHZhbHVlcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3J0ZWRWYWx1ZXMpO1xuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICcuLi9zcGFjaW5nJztcbi8qIHRzbGludDplbmFibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0ID0gOCkge1xuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH1cblxuICAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucywgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiY29uc3Qgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeC9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnJztcbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgICBicmVha3BvaW50czogYnJlYWtwb2ludHNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXQsXG4gICAgICBzaGFwZTogc2hhcGVJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgb3RoZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG90aGVyLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiLyoqXG4gKiBUaGUgYmVuZWZpdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRvIGhlbHAgZGV2ZWxvcGVycyBnZXQgQ1NTIHZhciBmcm9tIHRoZW1lIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgd2hvbGUgdmFyaWFibGVcbiAqIGFuZCB0aGV5IGRvZXMgbm90IG5lZWQgdG8gcmVtZW1iZXIgdGhlIHByZWZpeCAoZGVmaW5lZCBvbmNlKS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2V0Q3NzVmFyKHByZWZpeCA9ICcnKSB7XG4gIGZ1bmN0aW9uIGFwcGVuZFZhciguLi52YXJzKSB7XG4gICAgaWYgKCF2YXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHZhcnNbMF07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXZhbHVlLm1hdGNoKC8oI3xcXCh8XFwpfCgtPyhcXGQqXFwuKT9cXGQrKShweHxlbXwlfGV4fGNofHJlbXx2d3x2aHx2bWlufHZtYXh8Y218bW18aW58cHR8cGMpKXxeKC0/KFxcZCpcXC4pP1xcZCspJHwoXFxkKyBcXGQrIFxcZCspLykpIHtcbiAgICAgIHJldHVybiBgLCB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7dmFsdWV9JHthcHBlbmRWYXIoLi4udmFycy5zbGljZSgxKSl9KWA7XG4gICAgfVxuICAgIHJldHVybiBgLCAke3ZhbHVlfWA7XG4gIH1cblxuICAvLyBBZGRpdGlvbmFsVmFycyBtYWtlcyBgZ2V0Q3NzVmFyYCBsZXNzIHN0cmljdCwgc28gaXQgY2FuIGJlIHVzZSBsaWtlIHRoaXMgYGdldENzc1Zhcignbm9uLW11aS12YXJpYWJsZScpYCB3aXRob3V0IHR5cGUgZXJyb3IuXG4gIGNvbnN0IGdldENzc1ZhciA9IChmaWVsZCwgLi4uZmFsbGJhY2tzKSA9PiB7XG4gICAgcmV0dXJuIGB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7ZmllbGR9JHthcHBlbmRWYXIoLi4uZmFsbGJhY2tzKX0pYDtcbiAgfTtcbiAgcmV0dXJuIGdldENzc1Zhcjtcbn0iLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59O1xuXG4vLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuICBjb25zdCBbYSwgYl0gPSBwcm9wLnNwbGl0KCcnKTtcbiAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChkaXIgPT4gcHJvcGVydHkgKyBkaXIpIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xuZXhwb3J0IGNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5leHBvcnQgY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgdmFyIF9nZXRQYXRoO1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSAoX2dldFBhdGggPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSwgZmFsc2UpKSAhPSBudWxsID8gX2dldFBhdGggOiBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG4gIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHJldHVybiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsICdzcGFjaW5nJywgOCwgJ3NwYWNpbmcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyB8fCBwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHNwYWNpbmdLZXlzKTtcbn1cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgsIGNoZWNrVmFycyA9IHRydWUpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuICBpZiAob2JqICYmIG9iai52YXJzICYmIGNoZWNrVmFycykge1xuICAgIGNvbnN0IHZhbCA9IGB2YXJzLiR7cGF0aH1gLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGlmIChhY2MgJiYgYWNjW2l0ZW1dICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2NbaXRlbV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSwgdGhlbWVNYXBwaW5nKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuZnVuY3Rpb24gY29tcG9zZSguLi5zdHlsZXMpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IE9iamVjdC5hc3NpZ24oYWNjLCBzdHlsZS5wcm9wVHlwZXMpLCB7fSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKSwgW10pO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBib3JkZXJUcmFuc2Zvcm0odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGAke3ZhbHVlfXB4IHNvbGlkYDtcbn1cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXInLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3BDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b21Db2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbUNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBnYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5nYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5nYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnZ2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5nYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuZ2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5nYXAuZmlsdGVyUHJvcHMgPSBbJ2dhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgY29sdW1uR2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IHJvd0dhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLnJvd0dhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLnJvd0dhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdyb3dHYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIHJvd0dhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLnJvd0dhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5yb3dHYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgcm93R2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbnJvd0dhcC5maWx0ZXJQcm9wcyA9IFsncm93R2FwJ107XG5leHBvcnQgY29uc3QgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCBjb25zdCBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xuY29uc3QgZ3JpZCA9IGNvbXBvc2UoZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBmdW5jdGlvbiBwYWxldHRlVHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUpIHtcbiAgaWYgKHVzZXJWYWx1ZSA9PT0gJ2dyZXknKSB7XG4gICAgcmV0dXJuIHVzZXJWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgY29uc3QgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmdjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JnY29sb3InLFxuICBjc3NQcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmNvbnN0IHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIHZhbHVlcyBhcyBicmVha3BvaW50c1ZhbHVlcyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNpemluZ1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSAmJiB2YWx1ZSAhPT0gMCA/IGAke3ZhbHVlICogMTAwfSVgIDogdmFsdWU7XG59XG5leHBvcnQgY29uc3Qgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhXaWR0aCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLm1heFdpZHRoICE9PSB1bmRlZmluZWQgJiYgcHJvcHMubWF4V2lkdGggIT09IG51bGwpIHtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4ge1xuICAgICAgdmFyIF9wcm9wcyR0aGVtZSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaTIgPSBfcHJvcHMkdGhlbWUkYnJlYWtwb2kudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lJGJyZWFrcG9pMltwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF4V2lkdGg6IGJyZWFrcG9pbnQgfHwgc2l6aW5nVHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbm1heFdpZHRoLmZpbHRlclByb3BzID0gWydtYXhXaWR0aCddO1xuZXhwb3J0IGNvbnN0IG1pbldpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWluV2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heEhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtaW5IZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3hTaXppbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaXppbmcnXG59KTtcbmNvbnN0IHNpemluZyA9IGNvbXBvc2Uod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgeyBwYWRkaW5nLCBtYXJnaW4gfSBmcm9tICcuLi9zcGFjaW5nJztcbmltcG9ydCB7IGJvcmRlclJhZGl1cywgYm9yZGVyVHJhbnNmb3JtIH0gZnJvbSAnLi4vYm9yZGVycyc7XG5pbXBvcnQgeyBnYXAsIHJvd0dhcCwgY29sdW1uR2FwIH0gZnJvbSAnLi4vY3NzR3JpZCc7XG5pbXBvcnQgeyBwYWxldHRlVHJhbnNmb3JtIH0gZnJvbSAnLi4vcGFsZXR0ZSc7XG5pbXBvcnQgeyBtYXhXaWR0aCwgc2l6aW5nVHJhbnNmb3JtIH0gZnJvbSAnLi4vc2l6aW5nJztcbmNvbnN0IGRlZmF1bHRTeENvbmZpZyA9IHtcbiAgLy8gYm9yZGVyc1xuICBib3JkZXI6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlclRvcDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckJvdHRvbToge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclRvcENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSaWdodENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJCb3R0b21Db2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyTGVmdENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSYWRpdXM6IHtcbiAgICB0aGVtZUtleTogJ3NoYXBlLmJvcmRlclJhZGl1cycsXG4gICAgc3R5bGU6IGJvcmRlclJhZGl1c1xuICB9LFxuICAvLyBwYWxldHRlXG4gIGNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmdjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICAvLyBzcGFjaW5nXG4gIHA6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHByOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGI6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwbDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB4OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHk6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1RvcDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdSaWdodDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCb3R0b206IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nTGVmdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdYOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1k6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZUVuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9jazoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrRW5kOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgbToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1yOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWw6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG14OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Ub3A6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblJpZ2h0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Cb3R0b206IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkxlZnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblg6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZUVuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2s6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrRW5kOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICAvLyBkaXNwbGF5XG4gIGRpc3BsYXlQcmludDoge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGRpc3BsYXk6IHt9LFxuICBvdmVyZmxvdzoge30sXG4gIHRleHRPdmVyZmxvdzoge30sXG4gIHZpc2liaWxpdHk6IHt9LFxuICB3aGl0ZVNwYWNlOiB7fSxcbiAgLy8gZmxleGJveFxuICBmbGV4QmFzaXM6IHt9LFxuICBmbGV4RGlyZWN0aW9uOiB7fSxcbiAgZmxleFdyYXA6IHt9LFxuICBqdXN0aWZ5Q29udGVudDoge30sXG4gIGFsaWduSXRlbXM6IHt9LFxuICBhbGlnbkNvbnRlbnQ6IHt9LFxuICBvcmRlcjoge30sXG4gIGZsZXg6IHt9LFxuICBmbGV4R3Jvdzoge30sXG4gIGZsZXhTaHJpbms6IHt9LFxuICBhbGlnblNlbGY6IHt9LFxuICBqdXN0aWZ5SXRlbXM6IHt9LFxuICBqdXN0aWZ5U2VsZjoge30sXG4gIC8vIGdyaWRcbiAgZ2FwOiB7XG4gICAgc3R5bGU6IGdhcFxuICB9LFxuICByb3dHYXA6IHtcbiAgICBzdHlsZTogcm93R2FwXG4gIH0sXG4gIGNvbHVtbkdhcDoge1xuICAgIHN0eWxlOiBjb2x1bW5HYXBcbiAgfSxcbiAgZ3JpZENvbHVtbjoge30sXG4gIGdyaWRSb3c6IHt9LFxuICBncmlkQXV0b0Zsb3c6IHt9LFxuICBncmlkQXV0b0NvbHVtbnM6IHt9LFxuICBncmlkQXV0b1Jvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiB7fSxcbiAgZ3JpZFRlbXBsYXRlUm93czoge30sXG4gIGdyaWRUZW1wbGF0ZUFyZWFzOiB7fSxcbiAgZ3JpZEFyZWE6IHt9LFxuICAvLyBwb3NpdGlvbnNcbiAgcG9zaXRpb246IHt9LFxuICB6SW5kZXg6IHtcbiAgICB0aGVtZUtleTogJ3pJbmRleCdcbiAgfSxcbiAgdG9wOiB7fSxcbiAgcmlnaHQ6IHt9LFxuICBib3R0b206IHt9LFxuICBsZWZ0OiB7fSxcbiAgLy8gc2hhZG93c1xuICBib3hTaGFkb3c6IHtcbiAgICB0aGVtZUtleTogJ3NoYWRvd3MnXG4gIH0sXG4gIC8vIHNpemluZ1xuICB3aWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heFdpZHRoOiB7XG4gICAgc3R5bGU6IG1heFdpZHRoXG4gIH0sXG4gIG1pbldpZHRoOiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWF4SGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWluSGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgYm94U2l6aW5nOiB7fSxcbiAgLy8gdHlwb2dyYXBoeVxuICBmb250RmFtaWx5OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250U2l6ZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFN0eWxlOiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250V2VpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBsZXR0ZXJTcGFjaW5nOiB7fSxcbiAgdGV4dFRyYW5zZm9ybToge30sXG4gIGxpbmVIZWlnaHQ6IHt9LFxuICB0ZXh0QWxpZ246IHt9LFxuICB0eXBvZ3JhcGh5OiB7XG4gICAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTeENvbmZpZzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vZGVmYXVsdFN4Q29uZmlnJztcbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIHZhciBfcHJvcHMkdGhlbWUkdW5zdGFibGUsIF9wcm9wcyR0aGVtZTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHN5c3RlbVByb3BzOiB7fSxcbiAgICBvdGhlclByb3BzOiB7fVxuICB9O1xuICBjb25zdCBjb25maWcgPSAoX3Byb3BzJHRoZW1lJHVuc3RhYmxlID0gcHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA6IGRlZmF1bHRTeENvbmZpZztcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKGNvbmZpZ1twcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc3g6IGluU3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIHN5c3RlbVByb3BzLFxuICAgIG90aGVyUHJvcHNcbiAgfSA9IHNwbGl0UHJvcHMob3RoZXIpO1xuICBsZXQgZmluYWxTeDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5TeCkpIHtcbiAgICBmaW5hbFN4ID0gW3N5c3RlbVByb3BzLCAuLi5pblN4XTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5TeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpbmFsU3ggPSAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5TeCguLi5hcmdzKTtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFN4ID0gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCBpblN4KTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBzeDogZmluYWxTeFxuICB9KTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi9tZXJnZSc7XG5pbXBvcnQgeyBnZXRQYXRoLCBnZXRTdHlsZVZhbHVlIGFzIGdldFZhbHVlIH0gZnJvbSAnLi4vc3R5bGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMgfSBmcm9tICcuLi9icmVha3BvaW50cyc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vZGVmYXVsdFN4Q29uZmlnJztcbmZ1bmN0aW9uIG9iamVjdHNIYXZlU2FtZUtleXMoLi4ub2JqZWN0cykge1xuICBjb25zdCBhbGxLZXlzID0gb2JqZWN0cy5yZWR1Y2UoKGtleXMsIG9iamVjdCkgPT4ga2V5cy5jb25jYXQoT2JqZWN0LmtleXMob2JqZWN0KSksIFtdKTtcbiAgY29uc3QgdW5pb24gPSBuZXcgU2V0KGFsbEtleXMpO1xuICByZXR1cm4gb2JqZWN0cy5ldmVyeShvYmplY3QgPT4gdW5pb24uc2l6ZSA9PT0gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGgpO1xufVxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKSB7XG4gIGZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsLCB0aGVtZSwgY29uZmlnKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBbcHJvcF06IHZhbCxcbiAgICAgIHRoZW1lXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnW3Byb3BdO1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Byb3BdOiB2YWxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGNzc1Byb3BlcnR5ID0gcHJvcCxcbiAgICAgIHRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgc3R5bGVcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodGhlbWVLZXkgPT09ICd0eXBvZ3JhcGh5JyAmJiB2YWwgPT09ICdpbmhlcml0Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Byb3BdOiB2YWxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIHJldHVybiBzdHlsZShwcm9wcyk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgdmFsLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICAgIHZhciBfdGhlbWUkdW5zdGFibGVfc3hDb247XG4gICAgY29uc3Qge1xuICAgICAgc3gsXG4gICAgICB0aGVtZSA9IHt9XG4gICAgfSA9IHByb3BzIHx8IHt9O1xuICAgIGlmICghc3gpIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBFbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSAoX3RoZW1lJHVuc3RhYmxlX3N4Q29uID0gdGhlbWUudW5zdGFibGVfc3hDb25maWcpICE9IG51bGwgPyBfdGhlbWUkdW5zdGFibGVfc3hDb24gOiBkZWZhdWx0U3hDb25maWc7XG5cbiAgICAvKlxuICAgICAqIFJlY2VpdmUgYHN4SW5wdXRgIGFzIG9iamVjdCBvciBjYWxsYmFja1xuICAgICAqIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNoZWNrIGtleXMgJiB2YWx1ZXMgdG8gY3JlYXRlIG1lZGlhIHF1ZXJ5IG9iamVjdCBzdHlsZXMuXG4gICAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICAgIGxldCBzeE9iamVjdCA9IHN4SW5wdXQ7XG4gICAgICBpZiAodHlwZW9mIHN4SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3hPYmplY3QgPSBzeElucHV0KHRoZW1lKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIHZhbHVlXG4gICAgICAgIHJldHVybiBzeElucHV0O1xuICAgICAgfVxuICAgICAgaWYgKCFzeE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QodGhlbWUuYnJlYWtwb2ludHMpO1xuICAgICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgICBsZXQgY3NzID0gZW1wdHlCcmVha3BvaW50cztcbiAgICAgIE9iamVjdC5rZXlzKHN4T2JqZWN0KS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1tzdHlsZUtleV0pIHtcbiAgICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgYnJlYWtwb2ludHNWYWx1ZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgICBbc3R5bGVLZXldOiB4XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgaWYgKG9iamVjdHNIYXZlU2FtZUtleXMoYnJlYWtwb2ludHNWYWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgICAgICAgc3g6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGJyZWFrcG9pbnRzVmFsdWVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHN4KSA/IHN4Lm1hcCh0cmF2ZXJzZSkgOiB0cmF2ZXJzZShzeCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeDtcbn1cbmNvbnN0IHN0eWxlRnVuY3Rpb25TeCA9IHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpO1xuc3R5bGVGdW5jdGlvblN4LmZpbHRlclByb3BzID0gWydzeCddO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVGdW5jdGlvblN4OyIsImltcG9ydCB7IHVzZVRoZW1lIGFzIG11aVVzZVRoZW1lIH0gZnJvbSAnQG11aS9wcml2YXRlLXRoZW1pbmcnO1xuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJpbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLyoqXG4gKiBBZGQga2V5cywgdmFsdWVzIG9mIGBkZWZhdWx0UHJvcHNgIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gYHByb3BzYFxuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRQcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXNvbHZlZCBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHN8c2xvdHMpJC8pKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gX2V4dGVuZHMoe30sIGRlZmF1bHRQcm9wc1twcm9wTmFtZV0sIG91dHB1dFtwcm9wTmFtZV0pO1xuICAgIH0gZWxzZSBpZiAocHJvcE5hbWUudG9TdHJpbmcoKS5tYXRjaCgvXihjb21wb25lbnRzUHJvcHN8c2xvdFByb3BzKSQvKSkge1xuICAgICAgY29uc3QgZGVmYXVsdFNsb3RQcm9wcyA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV0gfHwge307XG4gICAgICBjb25zdCBzbG90UHJvcHMgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0ge307XG4gICAgICBpZiAoIXNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoc2xvdFByb3BzKSkge1xuICAgICAgICAvLyBSZWR1Y2UgdGhlIGl0ZXJhdGlvbiBpZiB0aGUgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFNsb3RQcm9wcztcbiAgICAgIH0gZWxzZSBpZiAoIWRlZmF1bHRTbG90UHJvcHMgfHwgIU9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBkZWZhdWx0IHNsb3QgcHJvcHMgaXMgZW1wdHlcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IHNsb3RQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykuZm9yRWFjaChzbG90UHJvcE5hbWUgPT4ge1xuICAgICAgICAgIG91dHB1dFtwcm9wTmFtZV1bc2xvdFByb3BOYW1lXSA9IHJlc29sdmVQcm9wcyhkZWZhdWx0U2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0sIHNsb3RQcm9wc1tzbG90UHJvcE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvdXRwdXRbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVQcm9wcyh0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcywgcHJvcHMpO1xufSIsImltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWVcbn0pIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuY29uc3QgY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yID0gKCkgPT4ge1xuICBsZXQgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyZShnZW5lcmF0b3IpIHtcbiAgICAgIGdlbmVyYXRlID0gZ2VuZXJhdG9yO1xuICAgIH0sXG4gICAgZ2VuZXJhdGUoY29tcG9uZW50TmFtZSkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpO1xuICAgIH0sXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IENsYXNzTmFtZUdlbmVyYXRvciA9IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvcigpO1xuZXhwb3J0IGRlZmF1bHQgQ2xhc3NOYW1lR2VuZXJhdG9yOyIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCIuL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBpbiB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGBjYXBpdGFsaXplKHN0cmluZylcXGAgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzbG90cykuZm9yRWFjaChcbiAgLy8gYE9iamV0LmtleXMoc2xvdHMpYCBjYW4ndCBiZSB3aWRlciB0aGFuIGBUYCBiZWNhdXNlIHdlIGluZmVyIGBUYCBmcm9tIGBzbG90c2AuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTIyNTMjaXNzdWVjb21tZW50LTI2MzEzMjIwOFxuICBzbG90ID0+IHtcbiAgICBvdXRwdXRbc2xvdF0gPSBzbG90c1tzbG90XS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHV0aWxpdHlDbGFzcyA9IGdldFV0aWxpdHlDbGFzcyhrZXkpO1xuICAgICAgICBpZiAodXRpbGl0eUNsYXNzICE9PSAnJykge1xuICAgICAgICAgIGFjYy5wdXNoKHV0aWxpdHlDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgICAgYWNjLnB1c2goY2xhc3Nlc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSkuam9pbignICcpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0ID0gMTY2KSB7XG4gIGxldCB0aW1lb3V0O1xuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cbiAgZGVib3VuY2VkLmNsZWFyID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGRlZXBDbG9uZShzb3VyY2UpIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICBvdXRwdXRba2V5XSA9IGRlZXBDbG9uZShzb3VyY2Vba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jbG9uZSkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pID8gZGVlcENsb25lKHNvdXJjZVtrZXldKSA6IHNvdXJjZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbXVpL3V0aWxzL21hY3Jvcy9NdWlFcnJvci5tYWNyb2AgaW5zdGVhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE11aUVycm9yTWVzc2FnZShjb2RlKSB7XG4gIC8vIEFwcGx5IGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMgaW4gbG9vc2UgbW9kZVxuICAvLyBsb29zZSBtb2RlIGlzIHNhZmUgaWZmIHdlJ3JlIGNvbmNhdGVuYXRpbmcgcHJpbWl0aXZlc1xuICAvLyBzZWUgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyNsb29zZVxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuICdNaW5pZmllZCBNVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gJy4uL0NsYXNzTmFtZUdlbmVyYXRvcic7XG5jb25zdCBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nID0ge1xuICBhY3RpdmU6ICdhY3RpdmUnLFxuICBjaGVja2VkOiAnY2hlY2tlZCcsXG4gIGNvbXBsZXRlZDogJ2NvbXBsZXRlZCcsXG4gIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuICByZWFkT25seTogJ3JlYWRPbmx5JyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmdbc2xvdF07XG4gIHJldHVybiBnbG9iYWxTdGF0ZUNsYXNzID8gYCR7Z2xvYmFsU3RhdGVQcmVmaXh9LSR7Z2xvYmFsU3RhdGVDbGFzc31gIDogYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cywgZ2xvYmFsU3RhdGVQcmVmaXggPSAnTXVpJykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsIi8qKlxuICogVE9ETyB2NTogY29uc2lkZXIgbWFraW5nIGl0IHByaXZhdGVcbiAqXG4gKiBwYXNzZXMge3ZhbHVlfSB0byB7cmVmfVxuICpcbiAqIFdBUk5JTkc6IEJlIHN1cmUgdG8gb25seSBjYWxsIHRoaXMgaW5zaWRlIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYXMgYSByZWYuXG4gKiBPdGhlcndpc2UsIG1ha2Ugc3VyZSB0byBjbGVhbnVwIHRoZSBwcmV2aW91cyB7cmVmfSBpZiBpdCBjaGFuZ2VzLiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZCh7XG4gIGNvbnRyb2xsZWQsXG4gIGRlZmF1bHQ6IGRlZmF1bHRQcm9wLFxuICBuYW1lLFxuICBzdGF0ZSA9ICd2YWx1ZSdcbn0pIHtcbiAgLy8gaXNDb250cm9sbGVkIGlzIGlnbm9yZWQgaW4gdGhlIGhvb2sgZGVwZW5kZW5jeSBsaXN0cyBhcyBpdCBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgW3ZhbHVlU3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKTtcbiAgY29uc3QgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCAhPT0gKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlICR7aXNDb250cm9sbGVkID8gJycgOiAndW4nfWNvbnRyb2xsZWQgJHtzdGF0ZX0gc3RhdGUgb2YgJHtuYW1lfSB0byBiZSAke2lzQ29udHJvbGxlZCA/ICd1bicgOiAnJ31jb250cm9sbGVkLmAsICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBgRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAke25hbWV9IGAgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuJywgXCJUaGUgbmF0dXJlIG9mIHRoZSBzdGF0ZSBpcyBkZXRlcm1pbmVkIGR1cmluZyB0aGUgZmlyc3QgcmVuZGVyLiBJdCdzIGNvbnNpZGVyZWQgY29udHJvbGxlZCBpZiB0aGUgdmFsdWUgaXMgbm90IGB1bmRlZmluZWRgLlwiLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbc3RhdGUsIG5hbWUsIGNvbnRyb2xsZWRdKTtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgICB9ID0gUmVhY3QudXNlUmVmKGRlZmF1bHRQcm9wKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCAke3N0YXRlfSBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgJHtuYW1lfSBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gYCArIGBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgJHtuYW1lfS5gXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG4gIGNvbnN0IHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuL3VzZUVuaGFuY2VkRWZmZWN0JztcblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjaygoLi4uYXJncykgPT5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBoaWRlIGB0aGlzYFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLWNvbW1hLW9wZXJhdG9yXG4gICgwLCByZWYuY3VycmVudCkoLi4uYXJncyksIFtdKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYoLi4ucmVmcykge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmcyBwYXNzZWQgdG8gdGhpcyBob29rIGNoYW5nZSBhbmQgYXJlIGFsbCBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZzLmV2ZXJ5KHJlZiA9PiByZWYgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UgPT4ge1xuICAgICAgcmVmcy5mb3JFYWNoKHJlZiA9PiB7XG4gICAgICAgIHNldFJlZihyZWYsIGluc3RhbmNlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCByZWZzKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgZ2xvYmFsSWQgPSAwO1xuZnVuY3Rpb24gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSkge1xuICBjb25zdCBbZGVmYXVsdElkLCBzZXREZWZhdWx0SWRdID0gUmVhY3QudXNlU3RhdGUoaWRPdmVycmlkZSk7XG4gIGNvbnN0IGlkID0gaWRPdmVycmlkZSB8fCBkZWZhdWx0SWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRJZCA9PSBudWxsKSB7XG4gICAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAgIC8vIFVzZSB0aGUgaW5jcmVtZW50aW5nIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAgIC8vIFdlIGNhbid0IHVzZSBpdCBzZXJ2ZXItc2lkZS5cbiAgICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSByYW5kb20gdmFsdWVzIHBsZWFzZSBjb25zaWRlciB0aGUgQmlydGhkYXkgUHJvYmxlbTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlydGhkYXlfcHJvYmxlbVxuICAgICAgZ2xvYmFsSWQgKz0gMTtcbiAgICAgIHNldERlZmF1bHRJZChgbXVpLSR7Z2xvYmFsSWR9YCk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uY2F0IC0tIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2svaXNzdWVzLzE0ODE0XG5jb25zdCBtYXliZVJlYWN0VXNlSWQgPSBSZWFjdFsndXNlSWQnICsgJyddO1xuLyoqXG4gKlxuICogQGV4YW1wbGUgPGRpdiBpZD17dXNlSWQoKX0gLz5cbiAqIEBwYXJhbSBpZE92ZXJyaWRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIGlmIChtYXliZVJlYWN0VXNlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHJlYWN0SWQgPSBtYXliZVJlYWN0VXNlSWQoKTtcbiAgICByZXR1cm4gaWRPdmVycmlkZSAhPSBudWxsID8gaWRPdmVycmlkZSA6IHJlYWN0SWQ7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzIC0tIGBSZWFjdC51c2VJZGAgaXMgaW52YXJpYW50IGF0IHJ1bnRpbWUuXG4gIHJldHVybiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG5sZXQgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQ7XG5jb25zdCBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICB0YWdOYW1lXG4gIH0gPSBub2RlO1xuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuXG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICBjb25zdCB7XG4gICAgdGFyZ2V0XG4gIH0gPSBldmVudDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gQnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3IuXG4gICAgLy8gV2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vycy5cbiAgICAvLyBSZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAgIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICB9XG5cbiAgLy8gTm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gVGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHkuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpc0ZvY3VzVmlzaWJsZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgICAvLyBjaGVja2luZyBhZ2FpbnN0IHBvdGVudGlhbCBzdGF0ZSB2YXJpYWJsZSBkb2VzIG5vdCBzdWZmaWNlIGlmIHdlIGZvY3VzIGFuZCBibHVyIHN5bmNocm9ub3VzbHkuXG4gICAgLy8gUmVhY3Qgd291bGRuJ3QgaGF2ZSB0aW1lIHRvIHRyaWdnZXIgYSByZS1yZW5kZXIgc28gYGZvY3VzVmlzaWJsZWAgd291bGQgYmUgc3RhbGUuXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBhZGp1c3QgYGlzRm9jdXNWaXNpYmxlKGV2ZW50KWAgdG8gbG9vayBhdCBgcmVsYXRlZFRhcmdldGAgZm9yIGJsdXIgZXZlbnRzLlxuICAgIC8vIFRoaXMgZG9lc24ndCB3b3JrIGluIElFMTEgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzc1MVxuICAgIC8vIFRPRE86IGNoZWNrIGFnYWluIGlmIFJlYWN0IHJlbGVhc2VzIHRoZWlyIGludGVybmFsIGNoYW5nZXMgdG8gZm9jdXMgZXZlbnQgaGFuZGxpbmcgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2KS5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCkge1xuICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiI3Jvb3Qge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0NCwgMjQ0LCAyNDQpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usb0NBQW9DO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNyb290IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDQsIDI0NCwgMjQ0KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuNS4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuXG4oZnVuY3Rpb24gKEFjdGlvbikge1xuICAvKipcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxuICAgKiBhcyBhIGJhY2sgb3IgZm9yd2FyZCBuYXZpZ2F0aW9uLiBJdCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgZGlyZWN0aW9uIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uLCBvbmx5IHRoYXQgdGhlIGN1cnJlbnQgaW5kZXggY2hhbmdlZC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBpcyB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIG5ld2x5IGNyZWF0ZWQgaGlzdG9yeSBvYmplY3RzLlxuICAgKi9cbiAgQWN0aW9uW1wiUG9wXCJdID0gXCJQT1BcIjtcbiAgLyoqXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxuICAgKiBhIGxpbmsgaXMgY2xpY2tlZCBhbmQgYSBuZXcgcGFnZSBsb2Fkcy4gV2hlbiB0aGlzIGhhcHBlbnMsIGFsbCBzdWJzZXF1ZW50XG4gICAqIGVudHJpZXMgaW4gdGhlIHN0YWNrIGFyZSBsb3N0LlxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBiZWluZyByZXBsYWNlZCBieSBhIG5ldyBvbmUuXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vKipcbiAqIE1lbW9yeSBoaXN0b3J5IHN0b3JlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiBtZW1vcnkuIEl0IGlzIGRlc2lnbmVkIGZvciB1c2VcbiAqIGluIHN0YXRlZnVsIG5vbi1icm93c2VyIGVudmlyb25tZW50cyBsaWtlIHRlc3RzIGFuZCBSZWFjdCBOYXRpdmUuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG5cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PiBjcmVhdGVNZW1vcnlMb2NhdGlvbihlbnRyeSwgdHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiID8gbnVsbCA6IGVudHJ5LnN0YXRlLCBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkKSk7XG4gIGxldCBpbmRleCA9IGNsYW1wSW5kZXgoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgpO1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcblxuICBmdW5jdGlvbiBjbGFtcEluZGV4KG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlLCBrZXkpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLCB0bywgc3RhdGUsIGtleSk7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeTogXCIgKyBKU09OLnN0cmluZ2lmeSh0bykpO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBpbmRleCgpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZixcblxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgcHVzaCh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuXG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuXG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnbyhkZWx0YSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICAgIGxldCBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuXG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxuICogQnJvd3NlciBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzLiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3JcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckxvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LCAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckhyZWYod2luZG93LCB0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVCcm93c2VyTG9jYXRpb24sIGNyZWF0ZUJyb3dzZXJIcmVmLCBudWxsLCBvcHRpb25zKTtcbn1cbi8qKlxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcbiAqIGZvciBzaXR1YXRpb25zIHdoZXJlIHlvdSBkb24ndCB3YW50IHRvIHNlbmQgdGhlIGxvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIgZm9yXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIYXNoTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgICBzZWFyY2ggPSBcIlwiLFxuICAgICAgaGFzaCA9IFwiXCJcbiAgICB9ID0gcGFyc2VQYXRoKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG4gICAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBsZXQgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICAgICAgaHJlZiA9IGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXhcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihjdXJyZW50LCB0bywgc3RhdGUsIGtleSkge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gbnVsbDtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbiA9IF9leHRlbmRzKHtcbiAgICBwYXRobmFtZTogdHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIgPyBjdXJyZW50IDogY3VycmVudC5wYXRobmFtZSxcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgaGFzaDogXCJcIlxuICB9LCB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICBzdGF0ZSxcbiAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZVxuICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbFxuICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG9cbiAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlXG4gICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpXG4gIH0pO1xuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gX3JlZjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09IFwiP1wiKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIikgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG5cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuXG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgY3JlYXRlSHJlZiwgdmFsaWRhdGVMb2NhdGlvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgbGV0IHtcbiAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKTsgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuXG4gIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBnbG9iYWxIaXN0b3J5LnN0YXRlLCB7XG4gICAgICBpZHg6IGluZGV4XG4gICAgfSksIFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKSB7XG4gICAgbGV0IHN0YXRlID0gZ2xvYmFsSGlzdG9yeS5zdGF0ZSB8fCB7XG4gICAgICBpZHg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZS5pZHg7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBsZXQgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgZGVsdGEgPSBuZXh0SW5kZXggPT0gbnVsbCA/IG51bGwgOiBuZXh0SW5kZXggLSBpbmRleDtcbiAgICBpbmRleCA9IG5leHRJbmRleDtcblxuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpICsgMTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7IC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykge1xuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgXCJudWxsXCIgKHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSkgaW4gRmlyZWZveFxuICAgIC8vIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgbm90YWJseSB3aGVuIHNlcnZpbmcgZnJvbSBhIGxvY2FsIEhUTUwgZmlsZVxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBocmVmID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgICBpbnZhcmlhbnQoYmFzZSwgXCJObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogXCIgKyBocmVmKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcblxuICAgIGNyZWF0ZVVSTCxcblxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2hcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcblxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn0gLy8jZW5kcmVnaW9uXG5cbnZhciBSZXN1bHRUeXBlO1xuXG4oZnVuY3Rpb24gKFJlc3VsdFR5cGUpIHtcbiAgUmVzdWx0VHlwZVtcImRhdGFcIl0gPSBcImRhdGFcIjtcbiAgUmVzdWx0VHlwZVtcImRlZmVycmVkXCJdID0gXCJkZWZlcnJlZFwiO1xuICBSZXN1bHRUeXBlW1wicmVkaXJlY3RcIl0gPSBcInJlZGlyZWN0XCI7XG4gIFJlc3VsdFR5cGVbXCJlcnJvclwiXSA9IFwiZXJyb3JcIjtcbn0pKFJlc3VsdFR5cGUgfHwgKFJlc3VsdFR5cGUgPSB7fSkpO1xuXG5jb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0KFtcImxhenlcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwicGF0aFwiLCBcImlkXCIsIFwiaW5kZXhcIiwgXCJjaGlsZHJlblwiXSk7XG5cbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59IC8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuXG5cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBkZXRlY3RFcnJvckJvdW5kYXJ5LCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKG1hbmlmZXN0ID09PSB2b2lkIDApIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghbWFuaWZlc3RbaWRdLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcblxuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKSxcbiAgICAgICAgaWRcbiAgICAgIH0pO1xuXG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZCxcbiAgICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZGV0ZWN0RXJyb3JCb3VuZGFyeShyb3V0ZSksXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICBtYW5pZmVzdFtpZF0gPSBwYXRoT3JMYXlvdXRSb3V0ZTtcblxuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgZGV0ZWN0RXJyb3JCb3VuZGFyeSwgdHJlZVBhdGgsIG1hbmlmZXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG5cbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG5cbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb25cbiAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkXG4gICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzXG4gICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlXG4gICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICBzYWZlbHlEZWNvZGVVUkkocGF0aG5hbWUpKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50c01ldGEgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuXG4gIGxldCBmbGF0dGVuUm91dGUgPSAocm91dGUsIGluZGV4LCByZWxhdGl2ZVBhdGgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCFcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKTtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIHZhciBfcm91dGUkcGF0aDtcblxuICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zXG4gICAgaWYgKHJvdXRlLnBhdGggPT09IFwiXCIgfHwgISgoX3JvdXRlJHBhdGggPSByb3V0ZS5wYXRoKSAhPSBudWxsICYmIF9yb3V0ZSRwYXRoLmluY2x1ZGVzKFwiP1wiKSkpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuLyoqXG4gKiBDb21wdXRlcyBhbGwgY29tYmluYXRpb25zIG9mIG9wdGlvbmFsIHBhdGggc2VnbWVudHMgZm9yIGEgZ2l2ZW4gcGF0aCxcbiAqIGV4Y2x1ZGluZyBjb21iaW5hdGlvbnMgdGhhdCBhcmUgYW1iaWd1b3VzIGFuZCBvZiBsb3dlciBwcmlvcml0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYC9vbmUvOnR3bz8vdGhyZWUvOmZvdXI/LzpmaXZlP2AgZXhwbG9kZXMgdG86XG4gKiAtIGAvb25lL3RocmVlYFxuICogLSBgL29uZS86dHdvL3RocmVlYFxuICogLSBgL29uZS90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyLzpmaXZlYFxuICovXG5cblxuZnVuY3Rpb24gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocGF0aCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IHNlZ21lbnRzOyAvLyBPcHRpb25hbCBwYXRoIHNlZ21lbnRzIGFyZSBkZW5vdGVkIGJ5IGEgdHJhaWxpbmcgYD9gXG5cbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7IC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG5cbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuXG4gIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIEludGVwcmV0IGVtcHR5IHN0cmluZyBhcyBvbWl0dGluZyBhbiBvcHRpb25hbCBzZWdtZW50XG4gICAgLy8gYFtcIm9uZVwiLCBcIlwiLCBcInRocmVlXCJdYCBjb3JyZXNwb25kcyB0byBvbWl0dGluZyBgOnR3b2AgZnJvbSBgL29uZS86dHdvPy90aHJlZWAgLT4gYC9vbmUvdGhyZWVgXG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBbcmVxdWlyZWQsIFwiXCJdIDogW3JlcXVpcmVkXTtcbiAgfVxuXG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcbiAgbGV0IHJlc3VsdCA9IFtdOyAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlcyBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcblxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpOyAvLyBUaGVuIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dFxuXG4gIGlmIChpc09wdGlvbmFsKSB7XG4gICAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkKTtcbiAgfSAvLyBmb3IgYWJzb2x1dGUgcGF0aHMsIGVuc3VyZSBgL2AgaW5zdGVhZCBvZiBlbXB0eSBzZWdtZW50XG5cblxuICByZXR1cm4gcmVzdWx0Lm1hcChleHBsb2RlZCA9PiBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGV4cGxvZGVkID09PSBcIlwiID8gXCIvXCIgOiBleHBsb2RlZCk7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChvcmlnaW5hbFBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBwYXRoICE9PSBcIipcIiAmJiAhcGF0aC5lbmRzV2l0aChcIi8qXCIpKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpO1xuICB9IC8vIGVuc3VyZSBgL2AgaXMgYWRkZWQgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZVxuXG5cbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KC9cXC8rLykubWFwKChzZWdtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICBjb25zdCBpc0xhc3RTZWdtZW50ID0gaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDE7IC8vIG9ubHkgYXBwbHkgdGhlIHNwbGF0IGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudFxuXG4gICAgaWYgKGlzTGFzdFNlZ21lbnQgJiYgc2VnbWVudCA9PT0gXCIqXCIpIHtcbiAgICAgIGNvbnN0IHN0YXIgPSBcIipcIjtcbiAgICAgIGNvbnN0IHN0YXJQYXJhbSA9IHBhcmFtc1tzdGFyXTsgLy8gQXBwbHkgdGhlIHNwbGF0XG5cbiAgICAgIHJldHVybiBzdGFyUGFyYW07XG4gICAgfVxuXG4gICAgY29uc3Qga2V5TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihcXHcrKShcXD8/KSQvKTtcblxuICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgY29uc3QgWywga2V5LCBvcHRpb25hbF0gPSBrZXlNYXRjaDtcbiAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuXG4gICAgICBpZiAob3B0aW9uYWwgPT09IFwiP1wiKSB7XG4gICAgICAgIHJldHVybiBwYXJhbSA9PSBudWxsID8gXCJcIiA6IHBhcmFtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW0gPT0gbnVsbCkge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfSAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcblxuXG4gICAgcmV0dXJuIHNlZ21lbnQucmVwbGFjZSgvXFw/JC9nLCBcIlwiKTtcbiAgfSkgLy8gUmVtb3ZlIGVtcHR5IHNlZ21lbnRzXG4gIC5maWx0ZXIoc2VnbWVudCA9PiAhIXNlZ21lbnQpO1xuICByZXR1cm4gcHJlZml4ICsgc2VnbWVudHMuam9pbihcIi9cIik7XG59XG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuXG4gICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCIsIHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cblxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtTmFtZXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJD97fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC9cXC86KFxcdyspL2csIChfLCBwYXJhbU5hbWUpID0+IHtcbiAgICBwYXJhbU5hbWVzLnB1c2gocGFyYW1OYW1lKTtcbiAgICByZXR1cm4gXCIvKFteXFxcXC9dKylcIjtcbiAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2UgO1xuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSSh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUkkodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIFVSTCBwYXRoIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNvdWxkIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2UgaXQgaXMgaXMgYSBcIiArIFwibWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5IGR1ZSB0byBhIGJhZCBwZXJjZW50IFwiICsgKFwiZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLCBwYXJhbU5hbWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSB2YWx1ZSBmb3IgdGhlIFVSTCBwYXJhbSBcXFwiXCIgKyBwYXJhbU5hbWUgKyBcIlxcXCIgd2lsbCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlXCIgKyAoXCIgdGhlIHN0cmluZyBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseVwiKSArIChcIiBkdWUgdG8gYSBiYWQgcGVyY2VudCBlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcblxuXG4gIGxldCBzdGFydEluZGV4ID0gYmFzZW5hbWUuZW5kc1dpdGgoXCIvXCIpID8gYmFzZW5hbWUubGVuZ3RoIC0gMSA6IGJhc2VuYW1lLmxlbmd0aDtcbiAgbGV0IG5leHRDaGFyID0gcGF0aG5hbWUuY2hhckF0KHN0YXJ0SW5kZXgpO1xuXG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCB0bztcblxuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG5cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTsgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuXG4gIGlmIChpc1BhdGhSZWxhdGl2ZSB8fCB0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTsgLy8gRWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnMgXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lXG4gICAgICAvLyBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleSBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhXG4gICAgICAvLyBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGEgXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG5cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pOyAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpOyAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG5cbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cblxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcblxuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuXG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cblxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG5cbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjtcblxuY29uc3QgZGVmYXVsdERldGVjdEVycm9yQm91bmRhcnkgPSByb3V0ZSA9PiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpOyAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5IHx8IGRlZmF1bHREZXRlY3RFcnJvckJvdW5kYXJ5OyAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcblxuICBsZXQgbWFuaWZlc3QgPSB7fTsgLy8gUm91dGVzIGluIHRyZWUgZm9ybWF0IGZvciBtYXRjaGluZ1xuXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcywgZGV0ZWN0RXJyb3JCb3VuZGFyeSwgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIGxldCBpbkZsaWdodERhdGFSb3V0ZXM7IC8vIENvbmZpZyBkcml2ZW4gYmVoYXZpb3IgZmxhZ3NcblxuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTsgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuXG5cbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcblxuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuXG4gIGxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG5cbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsOyAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cblxuICBsZXQgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIGxldCBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGluaXQuaGlzdG9yeS5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzID0gbnVsbDtcblxuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuXG4gIGxldCBpbml0aWFsaXplZCA9IC8vIEFsbCBpbml0aWFsTWF0Y2hlcyBuZWVkIHRvIGJlIGxvYWRlZCBiZWZvcmUgd2UncmUgcmVhZHkuICBJZiB3ZSBoYXZlIGxhenlcbiAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICFpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sYXp5KSAmJiAoIC8vIEFuZCB3ZSBoYXZlIHRvIGVpdGhlciBoYXZlIG5vIGxvYWRlcnMgb3IgaGF2ZSBiZWVuIHByb3ZpZGVkIGh5ZHJhdGlvbkRhdGFcbiAgIWluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxvYWRlcikgfHwgaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwpO1xuICBsZXQgcm91dGVyO1xuICBsZXQgc3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAvLyBEb24ndCByZXN0b3JlIG9uIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBpZiB3ZSB3ZXJlIFNTUidkXG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCA/IGZhbHNlIDogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIHx8IHt9LFxuICAgIGFjdGlvbkRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSB8fCBudWxsLFxuICAgIGVycm9yczogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpLFxuICAgIGJsb2NrZXJzOiBuZXcgTWFwKClcbiAgfTsgLy8gLS0gU3RhdGVmdWwgaW50ZXJuYWwgdmFyaWFibGVzIHRvIG1hbmFnZSBuYXZpZ2F0aW9ucyAtLVxuICAvLyBDdXJyZW50IG5hdmlnYXRpb24gaW4gcHJvZ3Jlc3MgKHRvIGJlIGNvbW1pdHRlZCBpbiBjb21wbGV0ZU5hdmlnYXRpb24pXG5cbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wOyAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cblxuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlOyAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXI7IC8vIFdlIHVzZSB0aGlzIHRvIGF2b2lkIHRvdWNoaW5nIGhpc3RvcnkgaW4gY29tcGxldGVOYXZpZ2F0aW9uIGlmIGFcbiAgLy8gcmV2YWxpZGF0aW9uIGlzIGVudGlyZWx5IHVuaW50ZXJydXB0ZWRcblxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7IC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRlKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuXG4gIGxldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7IC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgcm91dGVzIHRoYXQgcmVxdWlyZSByZXZhbGlkYXRpb24gZHVlXG4gIC8vIHRvIGEgY2FuY2VsbGVkIGRlZmVycmVkIG9uIGFjdGlvbiBzdWJtaXNzaW9uXG5cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107IC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTsgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuXG4gIGxldCBmZXRjaENvbnRyb2xsZXJzID0gbmV3IE1hcCgpOyAvLyBUcmFjayBsb2FkcyBiYXNlZCBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBzdGFydGVkXG5cbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7IC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xOyAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuXG4gIGxldCBmZXRjaFJlbG9hZElkcyA9IG5ldyBNYXAoKTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgcmVkaXJlY3QgbmF2aWdhdGlvbnMgZnJvbSB0aGVpciBhY3Rpb25zXG5cbiAgbGV0IGZldGNoUmVkaXJlY3RJZHMgPSBuZXcgU2V0KCk7IC8vIE1vc3QgcmVjZW50IGhyZWYvbWF0Y2ggZm9yIGZldGNoZXIubG9hZCBjYWxscyBmb3IgZmV0Y2hlcnNcblxuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTsgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cblxuICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpOyAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZVxuICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZVxuXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcCgpOyAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcblxuICBsZXQgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTsgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSA9IF9yZWY7XG5cbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7XG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd2FybmluZyhibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7IC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcblxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTsgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG5cbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgZGVsZXRlQmxvY2tlcihibG9ja2VyS2V5KTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAocm91dGVyLnN0YXRlLmJsb2NrZXJzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pOyAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG4gICAgLy8gTm90ZSB3ZSBkb24ndCBkbyBhbnkgaGFuZGxpbmcgb2YgbGF6eSBoZXJlLiAgRm9yIFNQQSdzIGl0J2xsIGdldCBoYW5kbGVkXG4gICAgLy8gaW4gdGhlIG5vcm1hbCBuYXZpZ2F0aW9uIGZsb3cuICBGb3IgU1NSIGl0J3MgZXhwZWN0ZWQgdGhhdCBsYXp5IG1vZHVsZXMgYXJlXG4gICAgLy8gcmVzb2x2ZWQgcHJpb3IgdG8gcm91dGVyIGNyZWF0aW9uIHNpbmNlIHdlIGNhbid0IGdvIGludG8gYSBmYWxsYmFja0VsZW1lbnRcbiAgICAvLyBVSSBmb3IgU1NSJ2QgYXBwc1xuXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9IC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuXG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9IC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9IC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcblxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihzdGF0ZSkpO1xuICB9IC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuXG5cbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG5cbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG5cbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH0gLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcblxuXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhOyAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuXG4gICAgZm9yIChsZXQgW2tleV0gb2YgYmxvY2tlckZ1bmN0aW9ucykge1xuICAgICAgZGVsZXRlQmxvY2tlcihrZXkpO1xuICAgIH0gLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcblxuXG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG5cbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycylcbiAgICB9KSk7XG5cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuXG5cbiAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH0gLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyh0bywgZnV0dXJlLCBvcHRzKTtcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247XG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpOyAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcblxuICAgIG5leHRMb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihuZXh0TG9jYXRpb24pKTtcbiAgICBsZXQgdXNlclJlcGxhY2UgPSBvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsID8gb3B0cy5yZXBsYWNlIDogdW5kZWZpbmVkO1xuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlB1c2g7XG5cbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cblxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmIFwicHJldmVudFNjcm9sbFJlc2V0XCIgaW4gb3B0cyA/IG9wdHMucHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIDogdW5kZWZpbmVkO1xuICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcblxuICAgIGlmIChibG9ja2VyS2V5KSB7XG4gICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG5cbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7IC8vIFNlbmQgdGhlIHNhbWUgbmF2aWdhdGlvbiB0aHJvdWdoXG5cbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgZGVsZXRlQmxvY2tlcihibG9ja2VyS2V5KTtcbiAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2VcbiAgICB9KTtcbiAgfSAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG5cblxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pOyAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcblxuXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH0gLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGluaXQuYmFzZW5hbWUpOyAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZ1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpOyAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcblxuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlIGFuZCBub3QgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gRm9yIGV4YW1wbGUsIG9uIC9wYWdlI2hhc2ggYW5kIHN1Ym1pdCBhIDxGb3JtIG1ldGhvZD1cInBvc3RcIj4gd2hpY2ggd2lsbFxuICAgIC8vIGRlZmF1bHQgdG8gYSBuYXZpZ2F0aW9uIHRvIC9wYWdlXG5cblxuICAgIGlmIChpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuXG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSwgb3B0cy5zdWJtaXNzaW9uKTtcblxuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uOyAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcblxuICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FsbCBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMuZmV0Y2hlclN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5yZXBsYWNlLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcblxuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cblxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgIG1hdGNoZXNcbiAgICB9LCBwZW5kaW5nQWN0aW9uRGF0YSA/IHtcbiAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgfSA6IHt9LCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSkpO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpOyAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG5cbiAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICAgIGxvY2F0aW9uXG4gICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7IC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcblxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIGRldGVjdEVycm9yQm91bmRhcnksIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcblxuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIHJlcGxhY2UgPSByZXN1bHQubG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpOyAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGVcbiAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbFxuICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG9cbiAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpblxuXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH0gLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgZmV0Y2hlclN1Ym1pc3Npb24sIHJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG5cbiAgICBpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfSAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG5cblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiA/IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb24gOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kICYmIGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1BY3Rpb24gJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybURhdGEgJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybUVuY1R5cGUgPyB7XG4gICAgICBmb3JtTWV0aG9kOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogbG9hZGluZ05hdmlnYXRpb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1EYXRhOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSxcbiAgICAgIGZvcm1FbmNUeXBlOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRW5jVHlwZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCByb3V0ZXNUb1VzZSwgaW5pdC5iYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7IC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcblxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0Vycm9yIHx8IG51bGxcbiAgICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgICAgfSA6IHt9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG5cblxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgIGRhdGE6IGZldGNoZXIgJiYgZmV0Y2hlci5kYXRhLFxuICAgICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICBsZXQgYWN0aW9uRGF0YSA9IHBlbmRpbmdBY3Rpb25EYXRhIHx8IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uXG4gICAgICB9LCBhY3Rpb25EYXRhID8gT2JqZWN0LmtleXMoYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsXG4gICAgICB9IDoge1xuICAgICAgICBhY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpOyAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcblxuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG5cbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgaHJlZiwgaW5pdC5iYXNlbmFtZSk7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBocmVmXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBmdXR1cmUsIG9wdHMsIHRydWUpO1xuICAgIGxldCBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG5cbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTdG9yZSBvZmYgdGhlIG1hdGNoIHNvIHdlIGNhbiBjYWxsIGl0J3Mgc2hvdWxkUmV2YWxpZGF0ZSBvbiBzdWJzZXF1ZW50XG4gICAgLy8gcmV2YWxpZGF0aW9uc1xuXG5cbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoXG4gICAgfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKTtcbiAgfSAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcblxuICAgIGlmICghbWF0Y2gucm91dGUuYWN0aW9uICYmICFtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICAgIH0pO1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuXG5cbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG5cbiAgICBsZXQgZmV0Y2hlciA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIlxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTsgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLCBzdWJtaXNzaW9uKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgbWFuaWZlc3QsIGRldGVjdEVycm9yQm91bmRhcnksIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcblxuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCJcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG5cblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIHJvdXRlc1RvVXNlLCBpbml0LmJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTsgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBkZXRlY3RFcnJvckJvdW5kYXJ5LCByb3V0ZXIuYmFzZW5hbWUpOyAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfSAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcblxuXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuXG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG5cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpOyAvLyBUT0RPOiBJbiByZW1peCwgdGhpcyB3b3VsZCByZXNldCB0byBJRExFX05BVklHQVRJT04gaWYgaXQgd2FzIGEgY2F0Y2ggLVxuICAgICAgLy8gZG8gd2UgbmVlZCB0byBiZWhhdmUgYW55IGRpZmZlcmVudGx5IHdpdGggb3VyIG5vbi1yZWRpcmVjdCBlcnJvcnM/XG4gICAgICAvLyBXaGF0IGlmIGl0IHdhcyBhIG5vbi1yZWRpcmVjdCBSZXNwb25zZT9cblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7IC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuXG4gICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG5cblxuICBhc3luYyBmdW5jdGlvbiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QsIF90ZW1wKSB7XG4gICAgdmFyIF93aW5kb3c7XG5cbiAgICBsZXQge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2UsXG4gICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3RcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG5cbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHJlZGlyZWN0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcmVkaXJlY3QubG9jYXRpb24sIC8vIFRPRE86IFRoaXMgY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBnZXQgcmlkIG9mIHVzZVRyYW5zaXRpb24gaW4gUmVtaXggdjJcbiAgICBfZXh0ZW5kcyh7XG4gICAgICBfaXNSZWRpcmVjdDogdHJ1ZVxuICAgIH0sIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdCA/IHtcbiAgICAgIF9pc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWVcbiAgICB9IDoge30pKTtcbiAgICBpbnZhcmlhbnQocmVkaXJlY3RMb2NhdGlvbiwgXCJFeHBlY3RlZCBhIGxvY2F0aW9uIG9uIHRoZSByZWRpcmVjdCBuYXZpZ2F0aW9uXCIpOyAvLyBDaGVjayBpZiB0aGlzIGFuIGFic29sdXRlIGV4dGVybmFsIHJlZGlyZWN0IHRoYXQgZ29lcyB0byBhIG5ldyBvcmlnaW5cblxuICAgIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChyZWRpcmVjdC5sb2NhdGlvbikgJiYgaXNCcm93c2VyICYmIHR5cGVvZiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmxvY2F0aW9uKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbGV0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgbGV0IGlzRGlmZmVyZW50QmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgaW5pdC5iYXNlbmFtZSB8fCBcIi9cIikgPT0gbnVsbDtcblxuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IHVybC5vcmlnaW4gfHwgaXNEaWZmZXJlbnRCYXNlbmFtZSkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoOyAvLyBVc2UgdGhlIGluY29taW5nIHN1Ym1pc3Npb24gaWYgcHJvdmlkZWQsIGZhbGxiYWNrIG9uIHRoZSBhY3RpdmUgb25lIGluXG4gICAgLy8gc3RhdGUubmF2aWdhdGlvblxuXG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YVxuICAgIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCFzdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRGF0YSAmJiBmb3JtRW5jVHlwZSkge1xuICAgICAgc3VibWlzc2lvbiA9IHtcbiAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICAgIGZvcm1EYXRhXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cblxuXG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJiBzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgc3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNGZXRjaEFjdGlvblJlZGlyZWN0KSB7XG4gICAgICAvLyBGb3IgYSBmZXRjaCBhY3Rpb24gcmVkaXJlY3QsIHdlIGtpY2sgb2ZmIGEgbmV3IGxvYWRpbmcgbmF2aWdhdGlvblxuICAgICAgLy8gd2l0aG91dCB0aGUgZmV0Y2hlciBzdWJtaXNzaW9uLCBidXQgd2Ugc2VuZCBpdCBhbG9uZyBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb246IHtcbiAgICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgICAgbG9jYXRpb246IHJlZGlyZWN0TG9jYXRpb24sXG4gICAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uLCBwcmVzZXJ2aW5nIHRoZVxuICAgICAgLy8gc3VibWlzc2lvbiBpbmZvIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjoge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtTWV0aG9kIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtRGF0YSA6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBkZXRlY3RFcnJvckJvdW5kYXJ5LCByb3V0ZXIuYmFzZW5hbWUpKSwgLi4uZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4ge1xuICAgICAgaWYgKGYubWF0Y2hlcyAmJiBmLm1hdGNoKSB7XG4gICAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIHJlcXVlc3Quc2lnbmFsKSwgZi5tYXRjaCwgZi5tYXRjaGVzLCBtYW5pZmVzdCwgZGV0ZWN0RXJyb3JCb3VuZGFyeSwgcm91dGVyLmJhc2VuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBlcnJvciA9IHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgICAgcGF0aG5hbWU6IGYucGF0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9KV0pO1xuICAgIGxldCBsb2FkZXJSZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBtYXRjaGVzVG9Mb2FkLmxlbmd0aCk7XG4gICAgbGV0IGZldGNoZXJSZXN1bHRzID0gcmVzdWx0cy5zbGljZShtYXRjaGVzVG9Mb2FkLmxlbmd0aCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgcmVxdWVzdC5zaWduYWwsIHRydWUpXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7IC8vIENhbmNlbCBwZW5kaW5nIHJvdXRlLWxldmVsIGRlZmVycmVkcyBhbmQgbWFyayBjYW5jZWxsZWQgcm91dGVzIGZvclxuICAgIC8vIHJldmFsaWRhdGlvblxuXG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMucHVzaCguLi5jYW5jZWxBY3RpdmVEZWZlcnJlZHMoKSk7IC8vIEFib3J0IGluLWZsaWdodCBmZXRjaGVyIGxvYWRzXG5cbiAgICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLnB1c2goa2V5KTtcbiAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvcikge1xuICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZXJyb3JzOiB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3JcbiAgICAgIH0sXG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5KSB7XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0RmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7XG4gICAgaW52YXJpYW50KGNvbnRyb2xsZXIsIFwiRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogXCIgKyBrZXkpO1xuICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICAgIGRhdGE6IGZldGNoZXIuZGF0YSxcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuXG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QmxvY2tlcihrZXksIGZuKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG5cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHtcbiAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pO1xuICAgIH1cblxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXkpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuICB9IC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuXG5cbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjsgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG5cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcblxuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuXG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG5cbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuXG5cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGJsb2NrZXJLZXk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9IC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcblxuXG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG5cbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCAobG9jYXRpb24gPT4gbG9jYXRpb24ua2V5KTsgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcblxuXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcblxuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gbmV3Um91dGVzO1xuICB9XG5cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBpbml0LmJhc2VuYW1lO1xuICAgIH0sXG5cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcblxuICAgIGdldCByb3V0ZXMoKSB7XG4gICAgICByZXR1cm4gZGF0YVJvdXRlcztcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgbmF2aWdhdGUsXG4gICAgZmV0Y2gsXG4gICAgcmV2YWxpZGF0ZSxcbiAgICAvLyBQYXNzdGhyb3VnaCB0byBoaXN0b3J5LWF3YXJlIGNyZWF0ZUhyZWYgdXNlZCBieSB1c2VIcmVmIHNvIHdlIGdldCBwcm9wZXJcbiAgICAvLyBoYXNoLWF3YXJlIFVSTHMgaW4gRE9NIHBhdGhzXG4gICAgY3JlYXRlSHJlZjogdG8gPT4gaW5pdC5oaXN0b3J5LmNyZWF0ZUhyZWYodG8pLFxuICAgIGVuY29kZUxvY2F0aW9uOiB0byA9PiBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24odG8pLFxuICAgIGdldEZldGNoZXIsXG4gICAgZGVsZXRlRmV0Y2hlcixcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVTdGF0aWNIYW5kbGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkgfHwgZGVmYXVsdERldGVjdEVycm9yQm91bmRhcnk7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIGRldGVjdEVycm9yQm91bmRhcnksIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7IC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG5cbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG5cbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gLy8gV2hlbiByZXR1cm5pbmcgU3RhdGljSGFuZGxlckNvbnRleHQsIHdlIHBhdGNoIGJhY2sgaW4gdGhlIGxvY2F0aW9uIGhlcmVcbiAgICAvLyBzaW5jZSB3ZSBuZWVkIGl0IGZvciBSZWFjdCBDb250ZXh0LiAgQnV0IHRoaXMgaGVscHMga2VlcCBvdXIgc3VibWl0IGFuZFxuICAgIC8vIGxvYWRSb3V0ZURhdGEgb3BlcmF0aW5nIG9uIGEgUmVxdWVzdCBpbnN0ZWFkIG9mIGEgTG9jYXRpb25cblxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDMpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7IC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG5cbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAocm91dGVJZCAmJiAhbWF0Y2gpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAzLCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpO1xuXG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3JzID8gT2JqZWN0LnZhbHVlcyhyZXN1bHQuZXJyb3JzKVswXSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gLy8gUGljayBvZmYgdGhlIHJpZ2h0IHN0YXRlIHZhbHVlIHRvIHJldHVyblxuXG5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LmxvYWRlckRhdGEpIHtcbiAgICAgIHZhciBfcmVzdWx0JGFjdGl2ZURlZmVycmU7XG5cbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG5cbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGlzTXV0YXRpb25NZXRob2QocmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoIHx8IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSwgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2ggIT0gbnVsbCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvciAmJiAhaXNSZWRpcmVjdFJlc3BvbnNlKGUucmVzcG9uc2UpKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlLnJlc3BvbnNlO1xuICAgICAgfSAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuXG5cbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzcG9uc2UoZSkpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIGRldGVjdEVycm9yQm91bmRhcnksIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTsgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH0gLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cblxuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvbkVycm9yKSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sYXp5KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZU1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgT2JqZWN0LmtleXMocGVuZGluZ0FjdGlvbkVycm9yIHx8IHt9KVswXSk7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIobSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenkpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBkZXRlY3RFcnJvckJvdW5kYXJ5LCBiYXNlbmFtZSwgdHJ1ZSwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSldKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG5cbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldChtYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBtYXRjaC5yb3V0ZS5pZCkpO1xuICAgIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgICBpZiAoIWV4ZWN1dGVkTG9hZGVycy5oYXMobWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICAgIGNvbnRleHQubG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIGFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLnNpemUgPiAwID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpIDogbnVsbFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhUm91dGVzLFxuICAgIHF1ZXJ5LFxuICAgIHF1ZXJ5Um91dGVcbiAgfTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogR2l2ZW4gYW4gZXhpc3RpbmcgU3RhdGljSGFuZGxlckNvbnRleHQgYW5kIGFuIGVycm9yIHRocm93biBhdCByZW5kZXIgdGltZSxcbiAqIHByb3ZpZGUgYW4gdXBkYXRlZCBTdGF0aWNIYW5kbGVyQ29udGV4dCBzdWl0YWJsZSBmb3IgYSBzZWNvbmQgU1NSIHJlbmRlclxuICovXG5cbmZ1bmN0aW9uIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3Iocm91dGVzLCBjb250ZXh0LCBlcnJvcikge1xuICBsZXQgbmV3Q29udGV4dCA9IF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgc3RhdHVzQ29kZTogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3JcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiBcImZvcm1EYXRhXCIgaW4gb3B0cztcbn0gLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyh0bywgZnV0dXJlLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH0gLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG5cblxuICBsZXQgc3VibWlzc2lvbjtcblxuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIGxldCBmb3JtTWV0aG9kID0gb3B0cy5mb3JtTWV0aG9kIHx8IFwiZ2V0XCI7XG4gICAgc3VibWlzc2lvbiA9IHtcbiAgICAgIGZvcm1NZXRob2Q6IGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kID8gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIDogZm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgZm9ybUFjdGlvbjogc3RyaXBIYXNoRnJvbVBhdGgocGF0aCksXG4gICAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICBmb3JtRGF0YTogb3B0cy5mb3JtRGF0YVxuICAgIH07XG5cbiAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdWJtaXNzaW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuXG5cbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTsgLy8gU2luY2UgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnMgb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIChhcyBvcHBvc2VkIHRvXG4gIC8vIG5hdmlnYXRpb24gR0VUIHN1Ym1pc3Npb25zIHdoaWNoIHJ1biBhbGwgbG9hZGVycyksIHdlIG5lZWQgdG8gcHJlc2VydmVcbiAgLy8gYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcblxuICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgXCJcIik7XG4gIH1cblxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aCksXG4gICAgc3VibWlzc2lvblxuICB9O1xufSAvLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5cblxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcblxuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICBsZXQgYWN0aW9uUmVzdWx0ID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdIDogcGVuZGluZ0FjdGlvbkRhdGEgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdBY3Rpb25EYXRhKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICBsZXQgZGVmYXVsdFNob3VsZFJldmFsaWRhdGUgPSAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRlLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCB8fCAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgY3VycmVudFVybC50b1N0cmluZygpID09PSBuZXh0VXJsLnRvU3RyaW5nKCkgfHwgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoOyAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtYXRjaC5yb3V0ZS5sb2FkZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcblxuXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0XG4gICAgLy8gcHJvdmlkZSB0aGlzIHZhbHVlIHNvIHRoZXkgY2FuIGxldmVyYWdlIGl0IGlmIG5lZWRlZCBhZnRlciB0aGV5IGNoZWNrXG4gICAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuXG5cbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogZGVmYXVsdFNob3VsZFJldmFsaWRhdGUgfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pOyAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG5cbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoZiwga2V5KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmV2YWxpZGF0ZSBpZiBmZXRjaGVyIHdvbid0IGJlIHByZXNlbnQgaW4gdGhlIHN1YnNlcXVlbnQgcmVuZGVyXG4gICAgaWYgKCFtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpOyAvLyBJZiB0aGUgZmV0Y2hlciBwYXRoIG5vIGxvbmdlciBtYXRjaGVzLCBwdXNoIGl0IGluIHdpdGggbnVsbCBtYXRjaGVzIHNvXG4gICAgLy8gd2UgY2FuIHRyaWdnZXIgYSA0MDQgaW4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhXG5cbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKF9leHRlbmRzKHtcbiAgICAgICAga2V5XG4gICAgICB9LCBmLCB7XG4gICAgICAgIG1hdGNoZXM6IG51bGwsXG4gICAgICAgIG1hdGNoOiBudWxsXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuXG4gICAgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKF9leHRlbmRzKHtcbiAgICAgICAga2V5LFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaFxuICAgICAgfSwgZikpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgLy8gaGl0IGEgc3RhdGljIGhyZWYsIHNvIHRoZXkgX2Fsd2F5c18gY2hlY2sgc2hvdWxkUmV2YWxpZGF0ZSBhbmQgdGhlXG4gICAgLy8gZGVmYXVsdCBpcyBzdHJpY3RseSBpZiBhIHJldmFsaWRhdGlvbiBpcyBleHBsaWNpdGx5IHJlcXVpcmVkIChhY3Rpb25cbiAgICAvLyBzdWJtaXNzaW9ucywgdXNlUmV2YWxpZGF0b3IsIFgtUmVtaXgtUmV2YWxpZGF0ZSkuXG5cblxuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmZXRjaGVyTWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgbmV4dFVybCxcbiAgICAgIG5leHRQYXJhbXM6IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZVxuICAgIH0pKTtcblxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKF9leHRlbmRzKHtcbiAgICAgICAga2V5LFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaFxuICAgICAgfSwgZikpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBbbmF2aWdhdGlvbk1hdGNoZXMsIHJldmFsaWRhdGluZ0ZldGNoZXJzXTtcbn1cblxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoY3VycmVudExvYWRlckRhdGEsIGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGlzTmV3ID0gLy8gW2FdIC0+IFthLCBiXVxuICAhY3VycmVudE1hdGNoIHx8IC8vIFthLCBiXSAtPiBbYSwgY11cbiAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDsgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcblxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkOyAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG5cbiAgcmV0dXJuIGlzTmV3IHx8IGlzTWlzc2luZ0RhdGE7XG59XG5cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fCAvLyBzcGxhdCBwYXJhbSBjaGFuZ2VkLCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiBtYXRjaC5wYXRoXG4gICAgLy8gZS5nLiAvZmlsZXMvaW1hZ2VzL2F2YXRhci5qcGcgLT4gZmlsZXMvZmluYW5jZXMueGxzXG4gICAgY3VycmVudFBhdGggIT0gbnVsbCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihsb2FkZXJNYXRjaCwgYXJnKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuXG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJnLmRlZmF1bHRTaG91bGRSZXZhbGlkYXRlO1xufVxuLyoqXG4gKiBFeGVjdXRlIHJvdXRlLmxhenkoKSBtZXRob2RzIHRvIGxhemlseSBsb2FkIHJvdXRlIG1vZHVsZXMgKGxvYWRlciwgYWN0aW9uLFxuICogc2hvdWxkUmV2YWxpZGF0ZSkgYW5kIHVwZGF0ZSB0aGUgcm91dGVNYW5pZmVzdCBpbiBwbGFjZSB3aGljaCBzaGFyZXMgb2JqZWN0c1xuICogd2l0aCBkYXRhUm91dGVzIHNvIHRob3NlIGdldCB1cGRhdGVkIGFzIHdlbGwuXG4gKi9cblxuXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBkZXRlY3RFcnJvckJvdW5kYXJ5LCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpOyAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcblxuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7IC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuXG4gIGZvciAobGV0IGxhenlSb3V0ZVByb3BlcnR5IGluIGxhenlSb3V0ZSkge1xuICAgIGxldCBzdGF0aWNSb3V0ZVZhbHVlID0gcm91dGVUb1VwZGF0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgbGV0IGlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCA9IHN0YXRpY1JvdXRlVmFsdWUgIT09IHVuZGVmaW5lZCAmJiAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG5cbiAgICBpZiAoIWlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCAmJiAhaW1tdXRhYmxlUm91dGVLZXlzLmhhcyhsYXp5Um91dGVQcm9wZXJ0eSkpIHtcbiAgICAgIHJvdXRlVXBkYXRlc1tsYXp5Um91dGVQcm9wZXJ0eV0gPSBsYXp5Um91dGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIH1cbiAgfSAvLyBNdXRhdGUgdGhlIHJvdXRlIHdpdGggdGhlIHByb3ZpZGVkIHVwZGF0ZXMuICBEbyB0aGlzIGZpcnN0IHNvIHdlIHBhc3NcbiAgLy8gdGhlIHVwZGF0ZWQgdmVyc2lvbiB0byBkZXRlY3RFcnJvckJvdW5kYXJ5XG5cblxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7IC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cblxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHtcbiAgICAvLyBUbyBrZWVwIHRoaW5ncyBmcmFtZXdvcmsgYWdub3N0aWMsIHdlIHVzZSB0aGUgcHJvdmlkZWRcbiAgICAvLyBgZGV0ZWN0RXJyb3JCb3VuZGFyeWAgZnVuY3Rpb24gdG8gc2V0IHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcm91dGVcbiAgICAvLyBwcm9wZXJ0eSBzaW5jZSB0aGUgbG9naWMgd2lsbCBkaWZmZXIgYmV0d2VlbiBmcmFtZXdvcmtzLlxuICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkoX2V4dGVuZHMoe30sIHJvdXRlVG9VcGRhdGUpKSxcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIGRldGVjdEVycm9yQm91bmRhcnksIGJhc2VuYW1lLCBpc1N0YXRpY1JlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBpZiAoaXNTdGF0aWNSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1N0YXRpY1JlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1JvdXRlUmVxdWVzdCA9PT0gdm9pZCAwKSB7XG4gICAgaXNSb3V0ZVJlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0O1xuICBsZXQgb25SZWplY3Q7XG5cbiAgbGV0IHJ1bkhhbmRsZXIgPSBoYW5kbGVyID0+IHtcbiAgICAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuICAgIGxldCByZWplY3Q7XG4gICAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcblxuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG5cbiAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuXG4gICAgaWYgKG1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIC8vIFJ1biBzdGF0aWNhbGx5IGRlZmluZWQgaGFuZGxlciBpbiBwYXJhbGxlbCB3aXRoIGxhenkoKVxuICAgICAgICBsZXQgdmFsdWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoW3J1bkhhbmRsZXIoaGFuZGxlciksIGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIGRldGVjdEVycm9yQm91bmRhcnksIG1hbmlmZXN0KV0pO1xuICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBkZXRlY3RFcnJvckJvdW5kYXJ5LCBtYW5pZmVzdCk7XG4gICAgICAgIGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcblxuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVuIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICAgICAgcm91dGVJZDogbWF0Y2gucm91dGUuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsYXp5KCkgcm91dGUgaGFzIG5vIGxvYWRlciB0byBydW4uICBTaG9ydCBjaXJjdWl0IGhlcmUgc28gd2UgZG9uJ3RcbiAgICAgICAgICAvLyBoaXQgdGhlIGludmFyaWFudCBiZWxvdyB0aGF0IGVycm9ycyBvbiByZXR1cm5pbmcgdW5kZWZpbmVkLlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFyaWFudChoYW5kbGVyLCBcIkNvdWxkIG5vdCBmaW5kIHRoZSBcIiArIHR5cGUgKyBcIiB0byBydW4gb24gdGhlIFxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIHJvdXRlXCIpO1xuICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQocmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtcbiAgICByZXN1bHQgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7IC8vIFByb2Nlc3MgcmVkaXJlY3RzXG5cbiAgICBpZiAocmVkaXJlY3RTdGF0dXNDb2Rlcy5oYXMoc3RhdHVzKSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7IC8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcblxuICAgICAgaWYgKCFBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgbGV0IGFjdGl2ZU1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKTtcbiAgICAgICAgbGV0IHJvdXRlUGF0aG5hbWVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMoYWN0aXZlTWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG4gICAgICAgIGxldCByZXNvbHZlZExvY2F0aW9uID0gcmVzb2x2ZVRvKGxvY2F0aW9uLCByb3V0ZVBhdGhuYW1lcywgbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUpO1xuICAgICAgICBpbnZhcmlhbnQoY3JlYXRlUGF0aChyZXNvbHZlZExvY2F0aW9uKSwgXCJVbmFibGUgdG8gcmVzb2x2ZSByZWRpcmVjdCBsb2NhdGlvbjogXCIgKyBsb2NhdGlvbik7IC8vIFByZXBlbmQgdGhlIGJhc2VuYW1lIHRvIHRoZSByZWRpcmVjdCBsb2NhdGlvbiBpZiB3ZSBoYXZlIG9uZVxuXG4gICAgICAgIGlmIChiYXNlbmFtZSkge1xuICAgICAgICAgIGxldCBwYXRoID0gcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgICByZXNvbHZlZExvY2F0aW9uLnBhdGhuYW1lID0gcGF0aCA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2F0aW9uID0gY3JlYXRlUGF0aChyZXNvbHZlZExvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlXG4gICAgICAgIC8vIHJlZGlyZWN0cy4gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXN0LCB3ZSBjYW4gbGV0IGl0IGdvIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgYXMtaXNcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgbGV0IHVybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKSA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG5cbiAgICAgICAgaWYgKHVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIGlzU2FtZUJhc2VuYW1lKSB7XG4gICAgICAgICAgbG9jYXRpb24gPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcblxuXG4gICAgICBpZiAoaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRlOiByZXN1bHQuaGVhZGVycy5nZXQoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfSAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrIGRpcmVjdGx5XG4gICAgLy8gd2l0aG91dCB1bndyYXBwaW5nLiAgV2UgZG8gdGhpcyB3aXRoIHRoZSBRdWVyeVJvdXRlUmVzcG9uc2Ugd3JhcHBlclxuICAgIC8vIGludGVyZmFjZSBzbyB3ZSBjYW4ga25vdyB3aGV0aGVyIGl0IHdhcyByZXR1cm5lZCBvciB0aHJvd25cblxuXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICAgICAgdGhyb3cge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlIHx8IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7IC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgaWYgKGlzRGVmZXJyZWREYXRhKHJlc3VsdCkpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0LCBfcmVzdWx0JGluaXQyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59IC8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcblxuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjsgLy8gRGlkbid0IHRoaW5rIHdlIG5lZWRlZCB0aGlzIGJ1dCBpdCB0dXJucyBvdXQgdW5saWtlIG90aGVyIG1ldGhvZHMsIHBhdGNoXG4gICAgLy8gd29uJ3QgYmUgcHJvcGVybHkgbm9ybWFsaXplZCB0byB1cHBlcmNhc2UgYW5kIHJlc3VsdHMgaW4gYSA0MDUgZXJyb3IuXG4gICAgLy8gU2VlOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tZXRob2RcblxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGluaXQuYm9keSA9IGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiID8gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIDogZm9ybURhdGE7XG4gIH0gLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG5cblxuICByZXR1cm4gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcblxuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjY29udmVydGluZy1hbi1lbnRyeS1saXN0LXRvLWEtbGlzdC1vZi1uYW1lLXZhbHVlLXBhaXJzXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlIGluc3RhbmNlb2YgRmlsZSA/IHZhbHVlLm5hbWUgOiB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVyc1xuICBsZXQgbG9hZGVyRGF0YSA9IHt9O1xuICBsZXQgZXJyb3JzID0gbnVsbDtcbiAgbGV0IHN0YXR1c0NvZGU7XG4gIGxldCBmb3VuZEVycm9yID0gZmFsc2U7XG4gIGxldCBsb2FkZXJIZWFkZXJzID0ge307IC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9yc1xuXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvclxuICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7IC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nIGFjdGlvbiBlcnJvciwgd2UgcmVwb3J0IGl0IGF0IHRoZSBoaWdoZXN0LXJvdXRlXG4gICAgICAvLyB0aGF0IHRocm93cyBhIGxvYWRlciBlcnJvciwgYW5kIHRoZW4gY2xlYXIgaXQgb3V0IHRvIGluZGljYXRlIHRoYXRcbiAgICAgIC8vIGl0IHdhcyBjb25zdW1lZFxuXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTsgLy8gUHJlZmVyIGhpZ2hlciBlcnJvciB2YWx1ZXMgaWYgbG93ZXIgZXJyb3JzIGJ1YmJsZSB0byB0aGUgc2FtZSBib3VuZGFyeVxuXG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9IC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG5cblxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7IC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH0gLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuXG5cbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBJZiB3ZSBkaWRuJ3QgY29uc3VtZSB0aGUgcGVuZGluZyBhY3Rpb24gZXJyb3IgKGkuZS4sIGFsbCBsb2FkZXJzXG4gIC8vIHJlc29sdmVkKSwgdGhlbiBjb25zdW1lIGl0IGhlcmUuICBBbHNvIGNsZWFyIG91dCBhbnkgbG9hZGVyRGF0YSBmb3IgdGhlXG4gIC8vIHRocm93aW5nIHJvdXRlXG5cbiAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgIGVycm9ycyA9IHBlbmRpbmdFcnJvcjtcbiAgICBsb2FkZXJEYXRhW09iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF1dID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIGxldCB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpOyAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzXG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7XG4gICAgICBrZXksXG4gICAgICBtYXRjaFxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTsgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2gucm91dGUuaWQpO1xuXG4gICAgICBpZiAoIShlcnJvcnMgJiYgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdKSkge1xuICAgICAgICBlcnJvcnMgPSBfZXh0ZW5kcyh7fSwgZXJyb3JzLCB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcblxuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG5cbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoLnJvdXRlLmxvYWRlcikge1xuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcga2V5cyBub3QgaW5jbHVkZWQgaW4gbmV3TG9hZGVyRGF0YSBhbmQgd2hlcmUgYSBsb2FkZXJcbiAgICAgIC8vIHdhc24ndCByZW1vdmVkIGJ5IEhNUlxuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZExvYWRlckRhdGE7XG59IC8vIEZpbmQgdGhlIG5lYXJlc3QgZXJyb3IgYm91bmRhcnksIGxvb2tpbmcgdXB3YXJkcyBmcm9tIHRoZSBsZWFmIHJvdXRlIChvciB0aGVcbi8vIHJvdXRlIHNwZWNpZmllZCBieSByb3V0ZUlkKSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3IgYm91bmRhcnksXG4vLyBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG5cblxuZnVuY3Rpb24gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCByb3V0ZUlkKSB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkID8gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSkgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiBlbGlnaWJsZU1hdGNoZXMucmV2ZXJzZSgpLmZpbmQobSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8IG1hdGNoZXNbMF07XG59XG5cbmZ1bmN0aW9uIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzKSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tZXJyb3Itcm91dGVfX1wiXG4gIH07XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlczogW3tcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgIHJvdXRlXG4gICAgfV0sXG4gICAgcm91dGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNCkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGVcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCBzdGF0dXNUZXh0ID0gXCJVbmtub3duIFNlcnZlciBFcnJvclwiO1xuICBsZXQgZXJyb3JNZXNzYWdlID0gXCJVbmtub3duIEByZW1peC1ydW4vcm91dGVyIGVycm9yXCI7XG5cbiAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiQmFkIFJlcXVlc3RcIjtcblxuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuXG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59IC8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5cblxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoICE9PSBiLmhhc2g7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlKSB7XG4gIGxldCBkZWZlcnJlZCA9IHZhbHVlO1xuICByZXR1cm4gZGVmZXJyZWQgJiYgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5kYXRhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLnJlc29sdmVEYXRhID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWUuaGVhZGVycyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc1Jlc3BvbnNlKG9iai5yZXNwb25zZSkgJiYgKG9iai50eXBlID09PSBSZXN1bHRUeXBlLmRhdGEgfHwgUmVzdWx0VHlwZS5lcnJvcik7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdOyAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgd2FybmluZyBhcyBVTlNBRkVfd2FybmluZywgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzRGVmZXJyZWREYXRhLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMTAuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5cbmZ1bmN0aW9uIGlzUG9seWZpbGwoeCwgeSkge1xuICByZXR1cm4geCA9PT0geSAmJiAoeCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkpIHx8IHggIT09IHggJiYgeSAhPT0geSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICA7XG59XG5cbmNvbnN0IGlzID0gdHlwZW9mIE9iamVjdC5pcyA9PT0gXCJmdW5jdGlvblwiID8gT2JqZWN0LmlzIDogaXNQb2x5ZmlsbDsgLy8gSW50ZW50aW9uYWxseSBub3QgdXNpbmcgbmFtZWQgaW1wb3J0cyBiZWNhdXNlIFJvbGx1cCB1c2VzIGR5bmFtaWNcbi8vIGRpc3BhdGNoIGZvciBDb21tb25KUyBpbnRlcm9wIG5hbWVkIGltcG9ydHMuXG5cbmNvbnN0IHtcbiAgdXNlU3RhdGUsXG4gIHVzZUVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0LFxuICB1c2VEZWJ1Z1ZhbHVlXG59ID0gUmVhY3Q7XG5sZXQgZGlkV2Fybk9sZDE4QWxwaGEgPSBmYWxzZTtcbmxldCBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IGZhbHNlOyAvLyBEaXNjbGFpbWVyOiBUaGlzIHNoaW0gYnJlYWtzIG1hbnkgb2YgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3Jrc1xuLy8gYmVjYXVzZSBvZiBhIHZlcnkgcGFydGljdWxhciBzZXQgb2YgaW1wbGVtZW50YXRpb24gZGV0YWlscyBhbmQgYXNzdW1wdGlvbnNcbi8vIC0tIGNoYW5nZSBhbnkgb25lIG9mIHRoZW0gYW5kIGl0IHdpbGwgYnJlYWsuIFRoZSBtb3N0IGltcG9ydGFudCBhc3N1bXB0aW9uXG4vLyBpcyB0aGF0IHVwZGF0ZXMgYXJlIGFsd2F5cyBzeW5jaHJvbm91cywgYmVjYXVzZSBjb25jdXJyZW50IHJlbmRlcmluZyBpc1xuLy8gb25seSBhdmFpbGFibGUgaW4gdmVyc2lvbnMgb2YgUmVhY3QgdGhhdCBhbHNvIGhhdmUgYSBidWlsdC1pblxuLy8gdXNlU3luY0V4dGVybmFsU3RvcmUgQVBJLiBBbmQgd2Ugb25seSB1c2UgdGhpcyBzaGltIHdoZW4gdGhlIGJ1aWx0LWluIEFQSVxuLy8gZG9lcyBub3QgZXhpc3QuXG4vL1xuLy8gRG8gbm90IGFzc3VtZSB0aGF0IHRoZSBjbGV2ZXIgaGFja3MgdXNlZCBieSB0aGlzIGhvb2sgYWxzbyB3b3JrIGluIGdlbmVyYWwuXG4vLyBUaGUgcG9pbnQgb2YgdGhpcyBzaGltIGlzIHRvIHJlcGxhY2UgdGhlIG5lZWQgZm9yIGhhY2tzIGJ5IG90aGVyIGxpYnJhcmllcy5cblxuZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMihzdWJzY3JpYmUsIGdldFNuYXBzaG90LCAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mXG4vLyBSZWFjdCBkbyBub3QgZXhwb3NlIGEgd2F5IHRvIGNoZWNrIGlmIHdlJ3JlIGh5ZHJhdGluZy4gU28gdXNlcnMgb2YgdGhlIHNoaW1cbi8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuLy8gZnJvbSBgZ2V0U25hcHNob3RgLlxuZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghZGlkV2Fybk9sZDE4QWxwaGEpIHtcbiAgICAgIGlmIChcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0KSB7XG4gICAgICAgIGRpZFdhcm5PbGQxOEFscGhhID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBhcmUgdXNpbmcgYW4gb3V0ZGF0ZWQsIHByZS1yZWxlYXNlIGFscGhhIG9mIFJlYWN0IDE4IHRoYXQgXCIgKyBcImRvZXMgbm90IHN1cHBvcnQgdXNlU3luY0V4dGVybmFsU3RvcmUuIFRoZSBcIiArIFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgc2hpbSB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseS4gVXBncmFkZSBcIiArIFwidG8gYSBuZXdlciBwcmUtcmVsZWFzZS5cIik7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlYWQgdGhlIGN1cnJlbnQgc25hcHNob3QgZnJvbSB0aGUgc3RvcmUgb24gZXZlcnkgcmVuZGVyLiBBZ2FpbiwgdGhpc1xuICAvLyBicmVha3MgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3JrcyBoZXJlIGJlY2F1c2Ugb2Ygc3BlY2lmaWNcbiAgLy8gaW1wbGVtZW50YXRpb24gZGV0YWlscywgbW9zdCBpbXBvcnRhbnRseSB0aGF0IHVwZGF0ZXMgYXJlXG4gIC8vIGFsd2F5cyBzeW5jaHJvbm91cy5cblxuXG4gIGNvbnN0IHZhbHVlID0gZ2V0U25hcHNob3QoKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCkge1xuICAgICAgY29uc3QgY2FjaGVkVmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gICAgICBpZiAoIWlzKHZhbHVlLCBjYWNoZWRWYWx1ZSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSByZXN1bHQgb2YgZ2V0U25hcHNob3Qgc2hvdWxkIGJlIGNhY2hlZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wXCIpO1xuICAgICAgICBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIEJlY2F1c2UgdXBkYXRlcyBhcmUgc3luY2hyb25vdXMsIHdlIGRvbid0IHF1ZXVlIHRoZW0uIEluc3RlYWQgd2UgZm9yY2UgYVxuICAvLyByZS1yZW5kZXIgd2hlbmV2ZXIgdGhlIHN1YnNjcmliZWQgc3RhdGUgY2hhbmdlcyBieSB1cGRhdGluZyBhbiBzb21lXG4gIC8vIGFyYml0cmFyeSB1c2VTdGF0ZSBob29rLiBUaGVuLCBkdXJpbmcgcmVuZGVyLCB3ZSBjYWxsIGdldFNuYXBzaG90IHRvIHJlYWRcbiAgLy8gdGhlIGN1cnJlbnQgdmFsdWUuXG4gIC8vXG4gIC8vIEJlY2F1c2Ugd2UgZG9uJ3QgYWN0dWFsbHkgdXNlIHRoZSBzdGF0ZSByZXR1cm5lZCBieSB0aGUgdXNlU3RhdGUgaG9vaywgd2VcbiAgLy8gY2FuIHNhdmUgYSBiaXQgb2YgbWVtb3J5IGJ5IHN0b3Jpbmcgb3RoZXIgc3R1ZmYgaW4gdGhhdCBzbG90LlxuICAvL1xuICAvLyBUbyBpbXBsZW1lbnQgdGhlIGVhcmx5IGJhaWxvdXQsIHdlIG5lZWQgdG8gdHJhY2sgc29tZSB0aGluZ3Mgb24gYSBtdXRhYmxlXG4gIC8vIG9iamVjdC4gVXN1YWxseSwgd2Ugd291bGQgcHV0IHRoYXQgaW4gYSB1c2VSZWYgaG9vaywgYnV0IHdlIGNhbiBzdGFzaCBpdCBpblxuICAvLyBvdXIgdXNlU3RhdGUgaG9vayBpbnN0ZWFkLlxuICAvL1xuICAvLyBUbyBmb3JjZSBhIHJlLXJlbmRlciwgd2UgY2FsbCBmb3JjZVVwZGF0ZSh7aW5zdH0pLiBUaGF0IHdvcmtzIGJlY2F1c2UgdGhlXG4gIC8vIG5ldyBvYmplY3QgYWx3YXlzIGZhaWxzIGFuIGVxdWFsaXR5IGNoZWNrLlxuXG5cbiAgY29uc3QgW3tcbiAgICBpbnN0XG4gIH0sIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlKHtcbiAgICBpbnN0OiB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGdldFNuYXBzaG90XG4gICAgfVxuICB9KTsgLy8gVHJhY2sgdGhlIGxhdGVzdCBnZXRTbmFwc2hvdCBmdW5jdGlvbiB3aXRoIGEgcmVmLiBUaGlzIG5lZWRzIHRvIGJlIHVwZGF0ZWRcbiAgLy8gaW4gdGhlIGxheW91dCBwaGFzZSBzbyB3ZSBjYW4gYWNjZXNzIGl0IGR1cmluZyB0aGUgdGVhcmluZyBjaGVjayB0aGF0XG4gIC8vIGhhcHBlbnMgb24gc3Vic2NyaWJlLlxuXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaW5zdC52YWx1ZSA9IHZhbHVlO1xuICAgIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDsgLy8gV2hlbmV2ZXIgZ2V0U25hcHNob3Qgb3Igc3Vic2NyaWJlIGNoYW5nZXMsIHdlIG5lZWQgdG8gY2hlY2sgaW4gdGhlXG4gICAgLy8gY29tbWl0IHBoYXNlIGlmIHRoZXJlIHdhcyBhbiBpbnRlcmxlYXZlZCBtdXRhdGlvbi4gSW4gY29uY3VycmVudCBtb2RlXG4gICAgLy8gdGhpcyBjYW4gaGFwcGVuIGFsbCB0aGUgdGltZSwgYnV0IGV2ZW4gaW4gc3luY2hyb25vdXMgbW9kZSwgYW4gZWFybGllclxuICAgIC8vIGVmZmVjdCBtYXkgaGF2ZSBtdXRhdGVkIHRoZSBzdG9yZS5cblxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgfSwgW3N1YnNjcmliZSwgdmFsdWUsIGdldFNuYXBzaG90XSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgcmlnaHQgYmVmb3JlIHN1YnNjcmliaW5nLiBTdWJzZXF1ZW50IGNoYW5nZXMgd2lsbCBiZVxuICAgIC8vIGRldGVjdGVkIGluIHRoZSBzdWJzY3JpcHRpb24gaGFuZGxlci5cbiAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICBmb3JjZVVwZGF0ZSh7XG4gICAgICAgIGluc3RcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZVN0b3JlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgLy8gVE9ETzogQmVjYXVzZSB0aGVyZSBpcyBubyBjcm9zcy1yZW5kZXJlciBBUEkgZm9yIGJhdGNoaW5nIHVwZGF0ZXMsIGl0J3NcbiAgICAgIC8vIHVwIHRvIHRoZSBjb25zdW1lciBvZiB0aGlzIGxpYnJhcnkgdG8gd3JhcCB0aGVpciBzdWJzY3JpcHRpb24gZXZlbnRcbiAgICAgIC8vIHdpdGggdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMuIFNob3VsZCB3ZSB0cnkgdG8gZGV0ZWN0IHdoZW4gdGhpcyBpc24ndFxuICAgICAgLy8gdGhlIGNhc2UgYW5kIHByaW50IGEgd2FybmluZyBpbiBkZXZlbG9wbWVudD9cbiAgICAgIC8vIFRoZSBzdG9yZSBjaGFuZ2VkLiBDaGVjayBpZiB0aGUgc25hcHNob3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHdlXG4gICAgICAvLyByZWFkIGZyb20gdGhlIHN0b3JlLlxuICAgICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgICBpbnN0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07IC8vIFN1YnNjcmliZSB0byB0aGUgc3RvcmUgYW5kIHJldHVybiBhIGNsZWFuLXVwIGZ1bmN0aW9uLlxuXG5cbiAgICByZXR1cm4gc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbc3Vic2NyaWJlXSk7XG4gIHVzZURlYnVnVmFsdWUodmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICBjb25zdCBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7XG4gIGNvbnN0IHByZXZWYWx1ZSA9IGluc3QudmFsdWU7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBuZXh0VmFsdWUgPSBsYXRlc3RHZXRTbmFwc2hvdCgpO1xuICAgIHJldHVybiAhaXMocHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mXG4gIC8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuICAvLyB3aWxsIG5lZWQgdG8gdHJhY2sgdGhhdCB0aGVtc2VsdmVzIGFuZCByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWVcbiAgLy8gZnJvbSBgZ2V0U25hcHNob3RgLlxuICByZXR1cm4gZ2V0U25hcHNob3QoKTtcbn1cblxuLyoqXG4gKiBJbmxpbmVkIGludG8gdGhlIHJlYWN0LXJvdXRlciByZXBvIHNpbmNlIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlIGRvZXMgbm90XG4gKiBwcm92aWRlIGEgVU1ELWNvbXBhdGlibGUgcGFja2FnZSwgc28gd2UgbmVlZCB0aGlzIHRvIGJlIGFibGUgdG8gZGlzdHJpYnV0ZVxuICogVU1EIHJlYWN0LXJvdXRlciBidW5kbGVzXG4gKi9cbmNvbnN0IGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIpO1xuY29uc3QgaXNTZXJ2ZXJFbnZpcm9ubWVudCA9ICFjYW5Vc2VET007XG5jb25zdCBzaGltID0gaXNTZXJ2ZXJFbnZpcm9ubWVudCA/IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDEgOiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyO1xuY29uc3QgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBcInVzZVN5bmNFeHRlcm5hbFN0b3JlXCIgaW4gUmVhY3QgPyAobW9kdWxlID0+IG1vZHVsZS51c2VTeW5jRXh0ZXJuYWxTdG9yZSkoUmVhY3QpIDogc2hpbTtcblxuY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuXG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuY29uc3QgTmF2aWdhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXVxufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuXG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlRXJyb3JDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZUVycm9yXCI7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cblxuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSA8TGluaz5zLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiKSA6IHZvaWQgMDtcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlXG4gICAgLy8gbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbFxuICAgIC8vIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG5cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG5cbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFxuICAgIH0sIG91dGxldCk7XG4gIH1cblxuICByZXR1cm4gb3V0bGV0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoXG4gKi9cblxuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIDxPdXRsZXQ+IHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgZGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cblxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuQ29tcG9uZW50ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIiArIFwiZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50IG9yIENvbXBvbmVudC4gVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBcIiArIFwibnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgfHwgdW5kZWZpbmVkKTsgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG5cblxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckNvbXBvbmVudCgpIHtcbiAgbGV0IGVycm9yID0gdXNlUm91dGVFcnJvcigpO1xuICBsZXQgbWVzc2FnZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSA/IGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCA6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyb3IpO1xuICBsZXQgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiBudWxsO1xuICBsZXQgbGlnaHRncmV5ID0gXCJyZ2JhKDIwMCwyMDAsMjAwLCAwLjUpXCI7XG4gIGxldCBwcmVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIwLjVyZW1cIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgY29kZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjJweCA0cHhcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgZGV2SW5mbyA9IG51bGw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93blxceEEwXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiRXJyb3JCb3VuZGFyeVwiKSwgXCIgcHJvcCBvblxceEEwXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiPFJvdXRlPlwiKSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgyXCIsIG51bGwsIFwiVW5leHBlY3RlZCBBcHBsaWNhdGlvbiBFcnJvciFcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBmb250U3R5bGU6IFwiaXRhbGljXCJcbiAgICB9XG4gIH0sIG1lc3NhZ2UpLCBzdGFjayA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicHJlXCIsIHtcbiAgICBzdHlsZTogcHJlU3R5bGVzXG4gIH0sIHN0YWNrKSA6IG51bGwsIGRldkluZm8pO1xufVxuXG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uXG4gICAgICB9O1xuICAgIH0gLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG5cblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgfHwgc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMucm91dGVDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7IC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG5cbiAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgbWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSkpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgdGhlIGN1cnJlbnQgZXJyb3JzOiBcIiArIGVycm9ycykgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsOyAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzXG5cbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcblxuICAgIGlmIChkYXRhUm91dGVyU3RhdGUpIHtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgICAgIGVycm9yRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnksIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQpIHtcbiAgICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yQ29tcG9uZW50LCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcblxuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IG91dGxldDtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChtYXRjaC5yb3V0ZS5Db21wb25lbnQsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gbWF0Y2gucm91dGUuZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgICBvdXRsZXQsXG4gICAgICAgICAgbWF0Y2hlc1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH07IC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IG9uIHRoaXMgcm91dGUuICBPdGhlcndpc2UgbGV0IGl0IGJ1YmJsZSB1cCB0b1xuICAgIC8vIGFuIGFuY2VzdG9yIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkgfHwgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xuXG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcblxuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBob29rTmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiB7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7IC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaFxuICAgIC8vIGluIHRoZSBAcmVtaXgtcnVuL3JvdXRlciAsIHNvIGlmIHlvdSBjaGFuZ2UgdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2VcbiAgICAvLyB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuXG4gIGlmIChzdGF0ZS5lcnJvcnMgJiYgc3RhdGUuZXJyb3JzW3JvdXRlSWRdICE9IG51bGwpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiWW91IGNhbm5vdCBgdXNlTG9hZGVyRGF0YWAgaW4gYW4gZXJyb3JFbGVtZW50IChyb3V0ZUlkOiBcIiArIHJvdXRlSWQgKyBcIilcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXJEYXRhIGZvciB0aGUgZ2l2ZW4gcm91dGVJZFxuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgYWN0aW9uXG4gKi9cblxuZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VBY3Rpb25EYXRhIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoKHN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0ZS5hY3Rpb25EYXRhKSB8fCB7fSlbMF07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcblxuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTsgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG5cblxuICByZXR1cm4gKF9zdGF0ZSRlcnJvcnMgPSBzdGF0ZS5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZXJyb3JzW3JvdXRlSWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2Jsb2NrZXJJZCkpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJncyA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBzaG91bGRCbG9jayA9PT0gXCJmdW5jdGlvblwiID8gISFzaG91bGRCbG9jayhhcmdzKSA6ICEhc2hvdWxkQmxvY2s7XG4gIH0sIFtzaG91bGRCbG9ja10pO1xuICBsZXQgYmxvY2tlciA9IHJvdXRlci5nZXRCbG9ja2VyKGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbik7IC8vIENsZWFudXAgb24gdW5tb3VudFxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihibG9ja2VyS2V5KSwgW3JvdXRlciwgYmxvY2tlcktleV0pOyAvLyBQcmVmZXIgdGhlIGJsb2NrZXIgZnJvbSBzdGF0ZSBzaW5jZSBEYXRhUm91dGVyQ29udGV4dCBpcyBtZW1vaXplZCBzbyB0aGlzXG4gIC8vIGVuc3VyZXMgd2UgdXBkYXRlIG9uIGJsb2NrZXIgc3RhdGUgdXBkYXRlc1xuXG4gIHJldHVybiBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSkgfHwgYmxvY2tlcjtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlclxuICB9ID0gX3JlZjtcbiAgbGV0IGdldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gcm91dGVyLnN0YXRlLCBbcm91dGVyXSk7IC8vIFN5bmMgcm91dGVyIHN0YXRlIHRvIG91ciBjb21wb25lbnQgc3RhdGUgdG8gZm9yY2UgcmUtcmVuZGVyc1xuXG4gIGxldCBzdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKHJvdXRlci5zdWJzY3JpYmUsIGdldFN0YXRlLCAvLyBXZSBoYXZlIHRvIHByb3ZpZGUgdGhpcyBzbyBSZWFjdEAxOCBkb2Vzbid0IGNvbXBsYWluIGR1cmluZyBoeWRyYXRpb24sXG4gIC8vIGJ1dCB3ZSBwYXNzIG91ciBzZXJpYWxpemVkIGh5ZHJhdGlvbiBkYXRhIGludG8gdGhlIHJvdXRlciBzbyBzdGF0ZSBoZXJlXG4gIC8vIGlzIGFscmVhZHkgc3luY2VkIHdpdGggd2hhdCB0aGUgc2VydmVyIHNhd1xuICBnZXRTdGF0ZSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pOyAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogcm91dGVyLmJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiByb3V0ZXIuc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHJvdXRlci5zdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yXG4gIH0sIHJvdXRlci5zdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlcywgbnVsbCkgOiBmYWxsYmFja0VsZW1lbnQpKSksIG51bGwpO1xufVxuXG4vKipcbiAqIEEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvbWVtb3J5LXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXhcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmMztcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCBkYXRhUm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEF2b2lkIGtpY2tpbmcgb2ZmIG11bHRpcGxlIG5hdmlnYXRpb25zIGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYVxuICAgIC8vIGRhdGEtcm91dGVyIG5hdmlnYXRpb24sIHNpbmNlIGNvbXBvbmVudHMgZ2V0IHJlLXJlbmRlcmVkIHdoZW4gd2UgZW50ZXJcbiAgICAvLyBhIHN1Ym1pdHRpbmcvbG9hZGluZyBzdGF0ZVxuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgJiYgZGF0YVJvdXRlclN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmF2aWdhdGUodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIE91dGxldChwcm9wcykge1xuICByZXR1cm4gdXNlT3V0bGV0KHByb3BzLmNvbnRleHQpO1xufVxuXG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNDtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG5cbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGxvY2F0aW9uQ29udGV4dCAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcblxuICBpZiAobG9jYXRpb25Db250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjU7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBXaGVuIGluIGEgRGF0YVJvdXRlckNvbnRleHQgX3dpdGhvdXRfIGNoaWxkcmVuLCB3ZSB1c2UgdGhlIHJvdXRlciByb3V0ZXNcbiAgLy8gZGlyZWN0bHkuICBJZiB3ZSBoYXZlIGNoaWxkcmVuLCB0aGVuIHdlJ3JlIGluIGEgZGVzY2VuZGFudCB0cmVlIGFuZCB3ZVxuICAvLyBuZWVkIHRvIHVzZSBjaGlsZCByb3V0ZXMuXG5cbiAgbGV0IHJvdXRlcyA9IGRhdGFSb3V0ZXJDb250ZXh0ICYmICFjaGlsZHJlbiA/IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgOiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICByZXR1cm4gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pO1xufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjY7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cztcblxuKGZ1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG59KShBd2FpdFJlbmRlclN0YXR1cyB8fCAoQXdhaXRSZW5kZXJTdGF0dXMgPSB7fSkpO1xuXG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuXG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9IC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuXG5cbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIDxBd2FpdD5cbiAqL1xuXG5cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNztcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0b1JlbmRlcik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgISghZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkFuIGluZGV4IHJvdXRlIGNhbm5vdCBoYXZlIGNoaWxkIHJvdXRlcy5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIENvbXBvbmVudDogZWxlbWVudC5wcm9wcy5Db21wb25lbnQsXG4gICAgICBpbmRleDogZWxlbWVudC5wcm9wcy5pbmRleCxcbiAgICAgIHBhdGg6IGVsZW1lbnQucHJvcHMucGF0aCxcbiAgICAgIGxvYWRlcjogZWxlbWVudC5wcm9wcy5sb2FkZXIsXG4gICAgICBhY3Rpb246IGVsZW1lbnQucHJvcHMuYWN0aW9uLFxuICAgICAgZXJyb3JFbGVtZW50OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCxcbiAgICAgIEVycm9yQm91bmRhcnk6IGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSxcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSAhPSBudWxsIHx8IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50ICE9IG51bGwsXG4gICAgICBzaG91bGRSZXZhbGlkYXRlOiBlbGVtZW50LnByb3BzLnNob3VsZFJldmFsaWRhdGUsXG4gICAgICBoYW5kbGU6IGVsZW1lbnQucHJvcHMuaGFuZGxlLFxuICAgICAgbGF6eTogZWxlbWVudC5wcm9wcy5sYXp5XG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuXG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAocm91dGUuQ29tcG9uZW50ICYmIHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYGVsZW1lbnRgIHdpbGwgYmUgaWdub3JlZC5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlLkVycm9yQm91bmRhcnkgJiYgcm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBlcnJvckVsZW1lbnRgIHdpbGwgYmUgaWdub3JlZC5cIikgOiB2b2lkIDA7XG4gICAgfVxuICB9IC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAvLyB0aGVyZSBpZiB5b3UgY2hhbmdlIHRoaXNcblxuXG4gIHJldHVybiBCb29sZWFuKHJvdXRlLkVycm9yQm91bmRhcnkpIHx8IEJvb2xlYW4ocm91dGUuZXJyb3JFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBkZXRlY3RFcnJvckJvdW5kYXJ5XG4gIH0pLmluaXRpYWxpemUoKTtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgeyBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBkZXRlY3RFcnJvckJvdW5kYXJ5IGFzIFVOU0FGRV9kZXRlY3RFcnJvckJvdW5kYXJ5LCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQmxvY2tlciBhcyB1bnN0YWJsZV91c2VCbG9ja2VyLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgRE9NIHY2LjEwLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2RldGVjdEVycm9yQm91bmRhcnksIFJvdXRlciwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIHVuc3RhYmxlX3VzZUJsb2NrZXIsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1bnN0YWJsZV91c2VCbG9ja2VyLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIEVycm9yUmVzcG9uc2UsIHN0cmlwQmFzZW5hbWUsIFVOU0FGRV93YXJuaW5nLCBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IGRlZmF1bHRNZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIHR5cGVvZiBvYmplY3QudGFnTmFtZSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzQnV0dG9uRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJ1dHRvblwiO1xufVxuZnVuY3Rpb24gaXNGb3JtRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZvcm1cIjtcbn1cbmZ1bmN0aW9uIGlzSW5wdXRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIjtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcblxuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICBsZXQgc3VibWlzc2lvblRyaWdnZXIgPSBvcHRpb25zLnN1Ym1pc3Npb25UcmlnZ2VyO1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuXG4gICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9IC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuXG5cbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pOyAvLyBJbmNsdWRlIG5hbWUgKyB2YWx1ZSBmcm9tIGEgPGJ1dHRvbj4sIGFwcGVuZGluZyBpbiBjYXNlIHRoZSBidXR0b24gbmFtZVxuICAgIC8vIG1hdGNoZXMgYW4gZXhpc3RpbmcgaW5wdXQgbmFtZVxuXG4gICAgaWYgKHRhcmdldC5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQodGFyZ2V0Lm5hbWUsIHRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlO1xuXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICBmb3JtRGF0YSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHRhcmdldCkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YXJnZXQpKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQge1xuICAgIHByb3RvY29sLFxuICAgIGhvc3RcbiAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgbGV0IHVybCA9IG5ldyBVUkwoYWN0aW9uLCBwcm90b2NvbCArIFwiLy9cIiArIGhvc3QpO1xuICByZXR1cm4ge1xuICAgIHVybCxcbiAgICBtZXRob2Q6IG1ldGhvZC50b0xvd2VyQ2FzZSgpLFxuICAgIGVuY1R5cGUsXG4gICAgZm9ybURhdGFcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwiZmV0Y2hlcktleVwiLCBcInJvdXRlSWRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXTtcbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBkZXRlY3RFcnJvckJvdW5kYXJ5OiBVTlNBRkVfZGV0ZWN0RXJyb3JCb3VuZGFyeVxuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVIYXNoUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgZGV0ZWN0RXJyb3JCb3VuZGFyeTogVU5TQUZFX2RldGVjdEVycm9yQm91bmRhcnlcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG5cbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuXG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZSh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJFcnJvclwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpOyAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcblxuICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cblxuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbGF0aXZlLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHRvLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpOyAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG5cbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcblxuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvOyAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcblxuXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgIGVuZCA9IGZhbHNlLFxuICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgdG8sXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY1LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcblxuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcblxuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG5cbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlLFxuICAgICAgaXNQZW5kaW5nXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuXG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcCh7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nXG4gIH0pIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cblxuXG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JbXBsLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG5cbmNvbnN0IEZvcm1JbXBsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY2LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICByZWxvYWREb2N1bWVudCxcbiAgICByZXBsYWNlLFxuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgYWN0aW9uLFxuICAgIG9uU3VibWl0LFxuICAgIGZldGNoZXJLZXksXG4gICAgcm91dGVJZCxcbiAgICByZWxhdGl2ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IF9yZWY2LFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG5cbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIG1ldGhvZDogZm9ybU1ldGhvZCxcbiAgICBhY3Rpb246IGZvcm1BY3Rpb24sXG4gICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyXG4gIH0sIHByb3BzKSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtSW1wbC5kaXNwbGF5TmFtZSA9IFwiRm9ybUltcGxcIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5cblxuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjc7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRJbXBsXCJdID0gXCJ1c2VTdWJtaXRJbXBsXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG5cbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PiAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIHJldHVybiB1c2VTdWJtaXRJbXBsKCk7XG59XG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgdXJsXG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpO1xuICAgIGxldCBocmVmID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBlbmNUeXBlXG4gICAgfTtcblxuICAgIGlmIChmZXRjaGVyS2V5KSB7XG4gICAgICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciB1c2VGZXRjaGVyKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKGhyZWYsIG9wdHMpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRBY3Rpb24sIHJvdXRlciwgZmV0Y2hlcktleSwgcm91dGVJZF0pO1xufVxuXG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTsgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTsgLy8gUHJldmlvdXNseSB3ZSBzZXQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvIFwiLlwiLiBUaGUgcHJvYmxlbSB3aXRoIHRoaXMgaXMgdGhhdFxuICAvLyBgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKWAgZXhjbHVkZXMgc2VhcmNoIHBhcmFtcyBhbmQgdGhlIGhhc2ggb2YgdGhlIHJlc29sdmVkXG4gIC8vIFVSTC4gVGhpcyBpcyB0aGUgaW50ZW5kZWQgYmVoYXZpb3Igb2Ygd2hlbiBcIi5cIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXNcbiAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcblxuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGVzZSBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgLy8gb3IgaGFzaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7IC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSB0aGUgYXV0b21hdGljYWxseVxuICAgIC8vIGluc2VydGVkID9pbmRleCBwYXJhbSBzbyB3ZSBtYXRjaCB0aGUgdXNlUmVzb2x2ZWRQYXRoIHNlYXJjaCBiZWhhdmlvclxuICAgIC8vIHdoaWNoIHdvdWxkIG5vdCBpbmNsdWRlID9pbmRleFxuXG4gICAgaWYgKG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBwYXRoLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpID8gXCI/XCIgKyBwYXJhbXMudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICB9XG5cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9IC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcblxuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKSB7XG4gIGxldCBGZXRjaGVyRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JbXBsLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZmV0Y2hlcktleTogZmV0Y2hlcktleSxcbiAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICB9KSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gIH1cblxuICByZXR1cm4gRmV0Y2hlckZvcm07XG59XG5cbmxldCBmZXRjaGVySWQgPSAwO1xuLyoqXG4gKiBJbnRlcmFjdHMgd2l0aCByb3V0ZSBsb2FkZXJzIGFuZCBhY3Rpb25zIHdpdGhvdXQgY2F1c2luZyBhIG5hdmlnYXRpb24uIEdyZWF0XG4gKiBmb3IgYW55IGludGVyYWN0aW9uIHRoYXQgc3RheXMgb24gdGhlIHNhbWUgcGFnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VGZXRjaGVyKCkge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG5cbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIH0pO1xuICBsZXQgW2xvYWRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gaHJlZiA9PiB7XG4gICAgIXJvdXRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyBmZXRjaGVyIGF2YWlsYWJsZSB0byBjbGVhbiB1cCBmcm9tIHVzZUZldGNoZXIoKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIFsuLi5zdGF0ZS5mZXRjaGVycy52YWx1ZXMoKV07XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDMpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTsgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcblxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpKTtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pKTsgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcblxuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkgey8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgICAgIH1cbiAgICB9LCBbc3RvcmFnZUtleV0pOyAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcblxuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXkpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBnZXRLZXldKTsgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICAgIGlmIChyZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG5cblxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuXG5cbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpO1xuXG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcblxuXG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuXG5cbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9LCBbbG9jYXRpb24sIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiwgcHJldmVudFNjcm9sbFJlc2V0XSk7XG4gIH1cbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5cblxuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmODtcbiAgbGV0IGJsb2NrZXIgPSB1bnN0YWJsZV91c2VCbG9ja2VyKHdoZW4pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG5cbiAgICAgIGlmIChwcm9jZWVkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoYmxvY2tlci5wcm9jZWVkLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtibG9ja2VyLCBtZXNzYWdlXSk7XG59XG4gLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFNjcm9sbFJlc3RvcmF0aW9uLCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBMaXN0IGZyb20gJ0BtdWkvam95L0xpc3QnO1xuaW1wb3J0IE1lbnVMaXN0IGZyb20gJ0BtdWkvam95L01lbnVMaXN0JztcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbXVpL2pveS9NZW51SXRlbSc7XG5cbmNvbnN0IEFwcE5hdiA9ICgpID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCBjdXJyZW50UGF0aCA9IHVzZUxvY2F0aW9uKCkucGF0aG5hbWU7XG5cbiAgY29uc3QgaXRlbXMgPSBbe1xuICAgIG5hbWU6ICdDb2RlIFJldmlldycsXG4gICAgcGF0aDogJy9jb2RlLXJldmlldycsXG4gIH0sIHtcbiAgICBuYW1lOiAnVHdlZXQgR2VuJyxcbiAgICBwYXRoOiAnL3R3ZWV0LWdlbicsXG4gIH0sIHtcbiAgICBuYW1lOiAnQ2hhdGJvdCcsXG4gICAgcGF0aDogJy9jaGF0Ym90JyxcbiAgfV07XG5cbiAgcmV0dXJuIChcbiAgICA8TWVudUxpc3RcbiAgICAgIGNvbXBvbmVudD1cImRpdlwiXG4gICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgc2l6ZT1cInNtXCJcbiAgICAgIHN4PXt7XG4gICAgICAgIG1pbldpZHRoOiAyMDAsXG4gICAgICAgIG1heFdpZHRoOiAyMDAsXG4gICAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxMaXN0ID5cbiAgICAgIHtpdGVtcy5tYXAoKHtuYW1lLCBwYXRofSwgaW5kZXgpID0+IChcbiAgICAgICAgPE1lbnVJdGVtIHNlbGVjdGVkPXtwYXRoID09PSBjdXJyZW50UGF0aH0ga2V5PXtpbmRleH0gb25DbGljaz17KCkgPT4gbmF2aWdhdGUocGF0aCl9PlxuICAgICAgICAgIHtuYW1lfVxuICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgKSl9XG4gICAgICA8L0xpc3Q+XG4gICAgPC9NZW51TGlzdD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcE5hdjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvam95L1R5cG9ncmFwaHknO1xuaW1wb3J0IEFsZXJ0IGZyb20gJ0BtdWkvam95L0FsZXJ0JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvam95L0ljb25CdXR0b24nO1xuXG5pbXBvcnQgUmVwb3J0SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1JlcG9ydCc7XG5pbXBvcnQgQ2xvc2VSb3VuZGVkSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0Nsb3NlUm91bmRlZCc7XG5cbnR5cGUgRXJyb3JBbGVydFByb3BzID0ge1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xufTtcblxuY29uc3QgRXJyb3JBbGVydCA9ICh7ZGVzY3JpcHRpb24sIG9uQ2xvc2V9OiBFcnJvckFsZXJ0UHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QWxlcnRcbiAgICAgIHN4PXt7IGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0JywgbWI6IDJ9fVxuICAgICAgc3RhcnREZWNvcmF0b3I9ezxSZXBvcnRJY29uIHN4PXt7bXQ6ICcycHgnLCBteDogJzRweCcsIGZvbnRTaXplOiAneGwyJ319IC8+fVxuICAgICAgdmFyaWFudD1cInNvZnRcIlxuICAgICAgY29sb3I9J2RhbmdlcidcbiAgICAgIGVuZERlY29yYXRvcj17XG4gICAgICAgIDxJY29uQnV0dG9uIHZhcmlhbnQ9XCJzb2Z0XCIgc2l6ZT1cInNtXCIgY29sb3I9J2Rhbmdlcicgb25DbGljaz17KCkgPT4gb25DbG9zZSgpfT5cbiAgICAgICAgICA8Q2xvc2VSb3VuZGVkSWNvbiAvPlxuICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICB9XG4gICAgPlxuICAgICAgPGRpdj5cbiAgICAgICAgPFR5cG9ncmFwaHkgZm9udFdlaWdodD1cImxnXCIgbXQ9ezAuMjV9PkhlYWRzIFVwITwvVHlwb2dyYXBoeT5cbiAgICAgICAgPFR5cG9ncmFwaHkgZm9udFNpemU9XCJzbVwiIHN4PXt7IG9wYWNpdHk6IDAuOCB9fT57ZGVzY3JpcHRpb259PC9UeXBvZ3JhcGh5PlxuICAgICAgPC9kaXY+XG4gICAgPC9BbGVydD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yQWxlcnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IFNoZWV0IGZyb20gJ0BtdWkvam95L1NoZWV0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9qb3kvQnV0dG9uJztcblxuaW1wb3J0IFRva2VuSW5wdXQgZnJvbSAnLi9Ub2tlbklucHV0JztcblxuY29uc3QgSGVhZGVyID0gKCkgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8U2hlZXQgY29sb3I9XCJuZXV0cmFsXCIgc3g9e3sgcDogMSwgZGlzcGxheTogJ2ZsZXgnLCBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLCBhbGlnbkl0ZW1zOiAnY2VudGVyJ319PlxuICAgICAgPEJ1dHRvbiBzaXplPVwic21cIiB2YXJpYW50PVwicGxhaW5cIiBvbkNsaWNrPXsoKSA9PiBuYXZpZ2F0ZSgnLycpfT5BSSBBcHBzPC9CdXR0b24+XG4gICAgICA8VG9rZW5JbnB1dCAvPlxuICAgIDwvU2hlZXQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnQG11aS9qb3kvVGV4dGFyZWEnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9qb3kvVHlwb2dyYXBoeSc7XG5cbnR5cGUgUmVzcG9uc2VEaXNwbGF5UHJvcHMgPSB7XG4gIHZhbHVlOiBudWxsIHwgc3RyaW5nO1xufTtcblxuY29uc3QgUmVzcG9uc2VEaXNwbGF5ID0gKHt2YWx1ZX06IFJlc3BvbnNlRGlzcGxheVByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFRleHRhcmVhXG4gICAgICBwbGFjZWhvbGRlcj1cIlJlc3VsdHMgd2lsbCBkaXNwbGF5IGhlcmUhXCJcbiAgICAgIHZhbHVlPXt2YWx1ZSA/PyAnJ31cbiAgICAgIG1pblJvd3M9ezZ9XG4gICAgICBzaXplPSdtZCdcbiAgICAgIGVuZERlY29yYXRvcj17XG4gICAgICAgIDxUeXBvZ3JhcGh5IGxldmVsPVwiYm9keTNcIiBzeD17eyBtbDogJ2F1dG8nIH19PlxuICAgICAgICAgIHt2YWx1ZSA/IHZhbHVlLmxlbmd0aCA6IDB9IGNoYXJhY3RlcihzKVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3BvbnNlRGlzcGxheTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBJbnB1dCBmcm9tICdAbXVpL2pveS9JbnB1dCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAbXVpL2pveS9Ub29sdGlwJztcbmltcG9ydCBCb3ggZnJvbSAnQG11aS9qb3kvQm94JztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvam95L1R5cG9ncmFwaHknO1xuXG5pbXBvcnQgSGVscE91dGxpbmVJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvSGVscE91dGxpbmUnO1xuXG5pbXBvcnQgeyB1c2VPcGVuQUlUb2tlbiB9IGZyb20gJy4uL2hvb2tzL3VzZU9wZW5BSVRva2VuJztcblxuY29uc3QgVG9rZW5JbnB1dCA9ICgpID0+IHtcbiAgY29uc3QgW2dldFRva2VuLCBzZXRUb2tlbl0gPSB1c2VPcGVuQUlUb2tlbigpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKHRva2VuOiBzdHJpbmcpID0+IHNldFRva2VuKHRva2VuKTtcblxuICBjb25zdCB0b29sdGlwID0gKFxuICAgIDxCb3ggc3g9e3t3aWR0aDogMzUwfX0+XG4gICAgICA8VHlwb2dyYXBoeSBsZXZlbD0naW5oZXJpdCc+XG4gICAgICAgIElmIHlvdSBkb24mYXBvczt0IGFscmVhZHkgaGF2ZSBhbiBBUEkga2V5LCB5b3UgY2FuIGNyZWF0ZSBvbmUgZm9yIGZyZWUgYXQgPGEgdGFyZ2V0PSdfYmxhbmsnIHJlbD0nbm9yZWZlcnJlcicgaHJlZj1cImh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9hY2NvdW50L2FwaS1rZXlzXCI+aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2FjY291bnQvYXBpLWtleXM8L2E+LlxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgIDwvQm94PlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPElucHV0IFxuICAgICAgc2l6ZT0nc20nIFxuICAgICAgdHlwZT0ncGFzc3dvcmQnXG4gICAgICBzeD17eyB3aWR0aDogMzAwIH19XG4gICAgICBwbGFjZWhvbGRlcj0nT3BlbkFJIEFQSSBLZXknIFxuICAgICAgZGVmYXVsdFZhbHVlPXtnZXRUb2tlbigpID8/IHVuZGVmaW5lZH0gXG4gICAgICBvbkNoYW5nZT17ZXZlbnQgPT4gb25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgIGVuZERlY29yYXRvcj17XG4gICAgICAgIDxUb29sdGlwIHRpdGxlPXt0b29sdGlwfSB2YXJpYW50PVwic29mdFwiIHNpemU9J3NtJz5cbiAgICAgICAgICA8SGVscE91dGxpbmVJY29uIGNvbG9yPSdwcmltYXJ5JyAvPlxuICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICBcbiAgICAgIH1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9rZW5JbnB1dDtcbiIsImNvbnN0IExPQ0FMX1NUT1JBR0VfS0VZID0gJ29wZW5haS10b2tlbic7XG5cbmV4cG9ydCBjb25zdCB1c2VPcGVuQUlUb2tlbiA9ICgpOiBbKCkgPT4gc3RyaW5nIHwgbnVsbCwgKHRva2VuOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkXSA9PiB7XG4gIGNvbnN0IGdldFRva2VuID0gKCkgPT4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVkpO1xuXG4gIGNvbnN0IHNldFRva2VuID0gKHRva2VuOiBzdHJpbmcgfCBudWxsKSA9PlxuICAgIHRva2VuID8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oTE9DQUxfU1RPUkFHRV9LRVksIHRva2VuKSA6IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKExPQ0FMX1NUT1JBR0VfS0VZKTtcblxuICByZXR1cm4gW2dldFRva2VuLCBzZXRUb2tlbl07XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTUNsaWVudCBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcblxuaW1wb3J0IHsgUm91dGVyUHJvdmlkZXIsIGNyZWF0ZUhhc2hSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IFJvb3QgZnJvbSAnLi9wYWdlcy9Sb290JztcblxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmltcG9ydCBDb2RlUmV2aWV3IGZyb20gJy4vcGFnZXMvQ29kZVJldmlldyc7XG5pbXBvcnQgSG9tZSBmcm9tICcuL3BhZ2VzL0hvbWUnO1xuaW1wb3J0IENoYXRCb3QgZnJvbSAnLi9wYWdlcy9DaGF0Qm90JztcbmltcG9ydCBUd2VldEdlbiBmcm9tICcuL3BhZ2VzL1R3ZWV0R2VuJztcblxuY29uc3Qgcm91dGVyID0gY3JlYXRlSGFzaFJvdXRlcihbXG4gIHtcbiAgICBwYXRoOiBcIi9cIixcbiAgICBlbGVtZW50OiA8Um9vdCAvPixcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBpbmRleDogdHJ1ZSxcbiAgICAgICAgZWxlbWVudDo8SG9tZSAvPixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdGg6IFwiL2NvZGUtcmV2aWV3XCIsXG4gICAgICAgIGVsZW1lbnQ6IDxDb2RlUmV2aWV3IC8+LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogXCIvdHdlZXQtZ2VuXCIsXG4gICAgICAgIGVsZW1lbnQ6IDxUd2VldEdlbiAvPixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdGg6IFwiL2NoYXRib3RcIixcbiAgICAgICAgZWxlbWVudDogPENoYXRCb3QgLz4sXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG5dKTtcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpIGFzIEhUTUxFbGVtZW50O1xuXG5jb25zdCByb290ID0gUmVhY3RET01DbGllbnQuY3JlYXRlUm9vdChyb290RWxlbWVudCk7XG5yb290LnJlbmRlcig8Um91dGVyUHJvdmlkZXIgcm91dGVyPXtyb3V0ZXJ9IC8+KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IENoYXRCb3QgPSAoKSA9PiB7XG5cbiAgcmV0dXJuIChcbiAgICA8c3Bhbj5TdXAgQ2hhdGJvdCE8L3NwYW4+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGF0Qm90O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL2pveS9CdXR0b24nO1xuaW1wb3J0IEJveCBmcm9tICdAbXVpL2pveS9Cb3gnO1xuaW1wb3J0IENhcmQgZnJvbSAnQG11aS9qb3kvQ2FyZCc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnQG11aS9qb3kvSW5wdXQnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9qb3kvVHlwb2dyYXBoeSc7XG5cbmltcG9ydCBSZXNwb25zZURpc3BsYXkgZnJvbSAnLi4vY29tcG9uZW50cy9SZXNwb25zZURpc3BsYXknO1xuaW1wb3J0IHsgTWVzc2FnZSwgc3RyZWFtQ2hhdEdQVENvbXBsZXRpb25zIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyB1c2VPcGVuQUlUb2tlbiB9IGZyb20gJy4uL2hvb2tzL3VzZU9wZW5BSVRva2VuJztcblxuY29uc3QgY3JlYXRlUHJvbXB0ID0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PiBgXG5Zb3UgYXJlIGFuIGV4cGVydCBwcm9ncmFtbWVyIGluIGFsbCBwcm9ncmFtbWluZyBsYW5ndWFnZXMuIEEgcGVlciBwcm9ncmFtbWVyIGhhcyBhc2tlZCB5b3UgdG8gcmV2aWV3IHRoZWlyIGNvZGUuXG5HaXZlbiBhIGNvZGUgc25pcHBldCwgcGxlYXNlIHByb3ZpZGUgYSBjb25jaXNlIGNvZGUgcmV2aWV3LCB3aXRoIGFjdGlvbmFibGUgc3VnZ2VzdGlvbnMgZm9yIGltcHJvdmVtZW50LlxuXG5XaGVuIHJldmlld2luZyB0aGUgY29kZSwgbWFrZSBzdXJlIHlvdSBjb25zaWRlciB0aGUgZm9sbG93aW5nOlxuICAqIEJ1Z3Mgb3Igb3RoZXIgaXNzdWVzIHRoYXQgd291bGQgbWFrZSB0aGluZ3Mgbm90IHdvcmsgYXMgZXhwZWN0ZWRcbiAgKiBTZWN1cml0eSBpc3N1ZXNcbiAgKiBQZXJmb3JtYW5jZSBpbXByb3ZlbWVudHNcbiAgKiBDb2RlIHRoYXQgd291bGQgYmUgY29tcGxleCB0byBtYWludGFpbiwgc3VjaCBhczogY29kZSBkdXBsaWNhdGlvbiwgdW5jbGVhciB2YXJpYWJsZSBhbmQgZnVuY3Rpb24gbmFtZXMsIGV0Yy5cbiAgKiBBbnkgb3RoZXIgaXNzdWVzIHlvdSBjYW4gdGhpbmsgb2ZcblxuUGxlYXNlIHVzIHRoZSBiZWxvdyB0ZW1wbGF0ZSBmb3IgeW91ciByZXNwb25zZTpcblxuLXRlbXBsYXRlIHN0YXJ0LVxuXG5Qcm9ncmFtbWluZyBsYW5ndWFnZToge2xhbmd1YWdlfVxuQ29kZSBxdWFsaXR5IHNjb3JlIChvdXQgb2YgMTApOiB7c2NvcmV9XG5cbldoYXQgdGhpcyBjb2RlIGRvZXM6IHtkZXNjcmlwdGlvbn0gKGluIDEwMCB3b3JkcyBvciBsZXNzKVxuXG5Db2RlIHJldmlldzpcblxuICAxLiBCdWdzOiB7YnVnc31cbiAgMi4gU2VjdXJpdHk6IHtzZWN1cml0eX1cbiAgMy4gUGVyZm9ybWFuY2U6IHtwZXJmb3JtYW5jZX1cbiAgNC4gTWFpbnRhaW5hYmlsaXR5OiB7bWFpbnRhaW5hYmlsaXR5fVxuICA1LiBPdGhlcjoge290aGVyfVxuXG4tdGVtcGxhdGUgZW5kLVxuXG5IZXJlIGlzIHRoZSBjb2RlIHRvIHJldmlldyAoZG8gbm90IGluY2x1ZGUgdGhpcyBpbiB5b3VyIHJlc3BvbnNlKTpcbiR7Y29kZX1cbmA7XG5cbmNvbnN0IENvZGVSZXZpZXcgPSAoKSA9PiB7XG5cbiAgY29uc3QgW2NvZGVVcmwsIHNldENvZGVVcmxdID0gUmVhY3QudXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmVzcG9uc2UsIHNldFJlc3BvbnNlXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZ2V0VG9rZW4sIF9dID0gdXNlT3BlbkFJVG9rZW4oKTtcblxuICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xuICAgIHZvaWQgZmV0Y2goY29kZVVybClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcbiAgICAgIC50aGVuKGNvZGUgPT4ge1xuXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjcmVhdGVQcm9tcHQoY29kZSk7XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFt7XG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgIH1dO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdG9rZW4gPSBnZXRUb2tlbigpO1xuXG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAvLyB0b2RvOiBoYW5kbGVyIG1vcmUgZ3JhY2VmdWxseVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdG9rZW4gZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmVhbUNoYXRHUFRDb21wbGV0aW9ucyh7dG9rZW59LCBtZXNzYWdlcylcbiAgICAgICAgLnRoZW4oYXN5bmMgKHN0cmVhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICBcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgaWYgKGRvbmUpIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGRlbHRhID0gdmFsdWUuY2hvaWNlc1swXT8uZGVsdGEuY29udGVudDtcbiAgICAgICAgICBpZiAoZGVsdGEgIT09IHVuZGVmaW5lZCkgcmVzdWx0ICs9IGRlbHRhO1xuICAgICAgICAgIFxuICAgICAgICAgIHNldFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPENhcmQgdmFyaWFudD1cIm91dGxpbmVkXCIgc3g9e3tnYXA6IDIsIHdpZHRoOiAzNTB9fT5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxUeXBvZ3JhcGh5IGxldmVsPSdoMic+Q29kZSBSZXZpZXc8L1R5cG9ncmFwaHk+XG4gICAgICAgIDxUeXBvZ3JhcGh5IGxldmVsPSdib2R5Mic+QnVnIHNxdWFzaGluJmFwb3M7PC9UeXBvZ3JhcGh5PlxuICAgICAgPC9Cb3g+XG5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxJbnB1dCBvbkNoYW5nZT17ZSA9PiBzZXRDb2RlVXJsKGUudGFyZ2V0LnZhbHVlKX0gcGxhY2Vob2xkZXI9J2h0dHBzOi8vLi4uJyBzaXplPSdzbScgLz5cbiAgICAgICAgPFR5cG9ncmFwaHkgc3g9e3ttdDogMX19IGxldmVsPSdib2R5Myc+VVJMIG9mIGNvZGUgZmlsZSAoZWcuIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50Li4uKTwvVHlwb2dyYXBoeT5cbiAgICAgIDwvQm94PlxuXG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uQ2xpY2t9IHZhcmlhbnQ9XCJvdXRsaW5lZFwiIGRpc2FibGVkPXshKGNvZGVVcmwpfT5TdWJtaXQ8L0J1dHRvbj5cbiAgICA8L0NhcmQ+XG5cbiAgICA8Qm94IHN4PXt7bWluV2lkdGg6IDQwMCwgbWF4V2lkdGg6IDYwMCwgZmxleEdyb3c6IDF9fT5cbiAgICAgIDxSZXNwb25zZURpc3BsYXkgdmFsdWU9e3Jlc3BvbnNlfS8+XG4gICAgPC9Cb3g+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVSZXZpZXc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBIb21lID0gKCkgPT4ge1xuXG4gIHJldHVybiAoXG4gICAgPHNwYW4+SG9tZSBQYWdlITwvc3Bhbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBPdXRsZXQgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IHsgQ3NzVmFyc1Byb3ZpZGVyIH0gZnJvbSAnQG11aS9qb3kvc3R5bGVzJztcbmltcG9ydCBDc3NCYXNlbGluZSBmcm9tICdAbXVpL2pveS9Dc3NCYXNlbGluZSc7XG5pbXBvcnQgU3RhY2sgZnJvbSAnQG11aS9qb3kvU3RhY2snO1xuaW1wb3J0IEJveCBmcm9tICdAbXVpL2pveS9Cb3gnO1xuXG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL2NvbXBvbmVudHMvSGVhZGVyJztcbmltcG9ydCBBcHBOYXYgZnJvbSAnLi4vY29tcG9uZW50cy9BcHBOYXYnO1xuXG5jb25zdCBSb290ID0gKCkgPT4geyAgXG4gIHJldHVybiAoXG4gICAgPENzc1ZhcnNQcm92aWRlcj5cbiAgICAgIDxDc3NCYXNlbGluZSAvPlxuICAgICAgPEhlYWRlciAvPlxuXG4gICAgICA8U3RhY2sgZGlyZWN0aW9uPSdyb3cnIHN4PXt7Z2FwOiAyLCBtOiAyLCBoZWlnaHQ6ICcxMDB2aCd9fT5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8QXBwTmF2IC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8U3RhY2sgXG4gICAgICAgICAgZGlyZWN0aW9uPSdyb3cnIFxuICAgICAgICAgIHN4PXt7Z2FwOiA0fX1cbiAgICAgICAgICBmbGV4R3Jvdz17MX1cbiAgICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgICAgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIlxuICAgICAgICA+XG4gICAgICAgICAgPE91dGxldCAvPlxuICAgICAgICA8L1N0YWNrPlxuICAgICAgPC9TdGFjaz5cbiAgICA8L0Nzc1ZhcnNQcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvb3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvam95L0J1dHRvbic7XG5pbXBvcnQgQm94IGZyb20gJ0BtdWkvam95L0JveCc7XG5pbXBvcnQgQ2FyZCBmcm9tICdAbXVpL2pveS9DYXJkJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvam95L1R5cG9ncmFwaHknO1xuaW1wb3J0IE9wdGlvbiBmcm9tICdAbXVpL2pveS9PcHRpb24nO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAbXVpL2pveS9TZWxlY3QnO1xuaW1wb3J0IFRleHRhcmVhIGZyb20gJ0BtdWkvam95L1RleHRhcmVhJztcblxuaW1wb3J0IFJlc3BvbnNlRGlzcGxheSBmcm9tICcuLi9jb21wb25lbnRzL1Jlc3BvbnNlRGlzcGxheSc7XG5pbXBvcnQgRXJyb3JBbGVydCBmcm9tICcuLi9jb21wb25lbnRzL0Vycm9yQWxlcnQnO1xuaW1wb3J0IHsgdXNlT3BlbkFJVG9rZW4gfSBmcm9tICcuLi9ob29rcy91c2VPcGVuQUlUb2tlbic7XG5pbXBvcnQgeyBNZXNzYWdlLCBzdHJlYW1DaGF0R1BUQ29tcGxldGlvbnMgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgY3JlYXRlUHJvbXB0ID0gKGRlc2NyaXB0aW9uOiBzdHJpbmcsIHNlbnRpbWVudDogc3RyaW5nKTogc3RyaW5nID0+IGBcbiAgWW91IHJ1biBhIHBvcHVsYXIgVHdpdHRlciBhY2NvdW50IHdpdGggb3ZlciBhIG1pbGxpb24gZm9sbG93ZXJzLCBhbmQgd2FudCB0byB3cml0ZSBhIG5ldyBUd2VldCB0aGF0IHdpbGwgZ28gdmlyYWwuIFxuXG4gIFdyaXRlIGEgJHtzZW50aW1lbnR9IFR3ZWV0IGFib3V0IFwiJHtkZXNjcmlwdGlvbn1cIi4gTWFrZSB5b3VyIHJlc3BvbnNlIHRoZSBUd2VldCBpdHNlbGYsIGFuZCBkbyBub3QgaW5jbHVkZSBhbnkgb3RoZXIgdGV4dC4gRG8gbm90IGFkZHMgcXVvdGVzIGFyb3VuZCB0aGUgVHdlZXQuXG5cbiAgVXNlIHRoZSBmb2xsb3dpbmcgZ3VpZGVsaW5lcyB3aGVuIGRyYWZ0aW5nIHlvdXIgdHdlZXQ6XG5cbiAgKiBEbyBOT1QgdXNlIG1vcmUgdGhhbiAyODAgdG90YWwgY2hhcmFjdGVycyBpbiB0aGUgVHdlZXRcbiAgKiBVc2UgYW55IGZvcm1hdHRpbmcgb3IgZW1vamlzIHNlZW0gdG8gbWFrZSBzZW5zZSBmb3IgdGhlIFR3ZWV0XG4gICogRG8gTk9UIHVzZSBoYXNodGFncyAoZWcuICMpIHVubGVzcyBzcGVjaWZpY2FsbHkgYXNrZWQgZm9yIGluIHRoZSBkZXNjcmlwdGlvblxuICAqIE1ha2Ugc3VyZSB0aGUgdHdlZXQgaXMgY29uY2lzZSBhbmQgdG8gdGhlIHBvaW50LCBidXQgYWxzbyBlbmdhZ2luZyBhbmQgaW50ZXJlc3RpbmdcblxuYDtcblxuY29uc3QgVHdlZXRHZW4gPSAoKSA9PiB7XG5cbiAgY29uc3QgW3R3ZWV0RGVzY3JpcHRpb24sIHNldFR3ZWV0RGVzY3JpcHRpb25dID0gUmVhY3QudXNlU3RhdGUoJycpO1xuICBjb25zdCBbdHdlZXRTZW50aW1lbnQsIHNldFR3ZWV0U2VudGltZW50XSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Jlc3BvbnNlLCBzZXRSZXNwb25zZV0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBbZ2V0VG9rZW4sIF9dID0gdXNlT3BlbkFJVG9rZW4oKTtcblxuICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBjcmVhdGVQcm9tcHQodHdlZXREZXNjcmlwdGlvbiwgdHdlZXRTZW50aW1lbnQpO1xuICAgIFxuICAgIGNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlW10gPSBbe1xuICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgY29udGVudCxcbiAgICB9XTtcbiAgICBcbiAgICBjb25zdCB0b2tlbiA9IGdldFRva2VuKCk7XG5cbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICBzZXRFcnJvcignRW50ZXIgeW91ciBPcGVuQUkgQVBJIGtleSB0byBnZXQgc3RhcnRlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHJlYW1DaGF0R1BUQ29tcGxldGlvbnMoe3Rva2VufSwgbWVzc2FnZXMpXG4gICAgICAudGhlbihhc3luYyAoc3RyZWFtKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgXG4gICAgICBsZXQgcmVzdWx0ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZWx0YSA9IHZhbHVlLmNob2ljZXNbMF0/LmRlbHRhLmNvbnRlbnQ7XG4gICAgICAgIGlmIChkZWx0YSAhPT0gdW5kZWZpbmVkKSByZXN1bHQgKz0gZGVsdGE7XG4gICAgICAgIFxuICAgICAgICBzZXRSZXNwb25zZShyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLiBDaGVjayB5b3VyIEFQSSBrZXkgYW5kIHRyeSB0aGUgcmVxdWVzdCBhZ2Fpbi4nO1xuICAgICAgc2V0RXJyb3IobWVzc2FnZSk7XG4gICAgfSk7XG4gIH07XG5cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxDYXJkIHZhcmlhbnQ9XCJvdXRsaW5lZFwiIHN4PXt7Z2FwOiAyLCB3aWR0aDogMzUwfX0+XG4gICAgICA8Qm94PlxuICAgICAgICA8VHlwb2dyYXBoeSBsZXZlbD0naDInPlR3ZWV0IEdlbjwvVHlwb2dyYXBoeT5cbiAgICAgICAgPFR5cG9ncmFwaHkgbGV2ZWw9J2JvZHkyJz5DcmFmdCBkZWxpZ2h0ZnVsIHR3ZWV0cyE8L1R5cG9ncmFwaHk+XG4gICAgICA8L0JveD5cblxuICAgICAgPEJveD5cbiAgICAgICAgPFRleHRhcmVhIG1pblJvd3M9ezN9IG9uQ2hhbmdlPXtlID0+IHNldFR3ZWV0RGVzY3JpcHRpb24oZS50YXJnZXQudmFsdWUpfSBwbGFjZWhvbGRlcj0nRGVzY3JpYmUgYSBUd2VldC4uLicgc2l6ZT0nc20nIC8+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7bXQ6IDF9fSBsZXZlbD0nYm9keTMnPkRlc2NyaWJlIGEgVHdlZXQgeW91IHdhbnQuIE5vIG5lZWQgdG8gYmUgY29uY2lzZS4gQWRkIGRldGFpbHMgYWJvdXQgZm9ybWF0IGFuZCBoYXN0YWdzIGlmIHlvdSB3YW50ICZhcG9zO2VtITwvVHlwb2dyYXBoeT5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveD5cbiAgICAgICAgPFNlbGVjdCBzaXplPSdzbScgcGxhY2Vob2xkZXI9J1NlbGVjdCBzZW50aW1lbnQuLi4nIG9uQ2hhbmdlPXsoX2UsIG5ld1ZhbHVlKSA9PiBzZXRUd2VldFNlbnRpbWVudChuZXdWYWx1ZSBhcyBzdHJpbmcpfT5cbiAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZnVubnlcIj5GdW5ueTwvT3B0aW9uPlxuICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpbnNwaXJpbmdcIj5JbnNwaXJpbmc8L09wdGlvbj5cbiAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiY29udHJvdmVyc2lhbFwiPkNvbnRyb3ZlcnNpYWw8L09wdGlvbj5cbiAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwic2VyaW91c1wiPlNlcmlvdXM8L09wdGlvbj5cbiAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiaW5mb3JtYXRpdmVcIj5JbmZvcm1hdGl2ZTwvT3B0aW9uPlxuICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJlbW90aW9uYWxcIj5FbW90aW9uYWw8L09wdGlvbj5cbiAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7bXQ6IDF9fSBsZXZlbD0nYm9keTMnPlNlbGVjdCB3aGF0IHNlbnRpbWVudCB5b3Ugd2FudCB0aGUgVHdlZXQgdG8gaGF2ZS4gPC9UeXBvZ3JhcGh5PlxuICAgICAgPC9Cb3g+XG5cbiAgICAgIDxCdXR0b24gb25DbGljaz17b25DbGlja30gdmFyaWFudD1cIm91dGxpbmVkXCIgZGlzYWJsZWQ9eyEodHdlZXREZXNjcmlwdGlvbiAmJiB0d2VldFNlbnRpbWVudCl9PlN1Ym1pdDwvQnV0dG9uPlxuICAgIDwvQ2FyZD5cblxuICAgIDxCb3ggc3g9e3ttaW5XaWR0aDogNDAwLCBtYXhXaWR0aDogNjAwLCBmbGV4R3JvdzogMX19PlxuICAgICAge2Vycm9yID8gPEVycm9yQWxlcnQgZGVzY3JpcHRpb249e2Vycm9yfSBvbkNsb3NlPXsoKSA9PiBzZXRFcnJvcihudWxsKX0gLz4gOiBudWxsfVxuICAgICAgPFJlc3BvbnNlRGlzcGxheSB2YWx1ZT17cmVzcG9uc2V9Lz5cbiAgICA8L0JveD5cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVHdlZXRHZW47XG4iLCJjb25zdCBDT01QTEVUSU9OU19VUkwgPSAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJztcblxuZXhwb3J0IHR5cGUgQ29uZmlnID0ge1xuICB0b2tlbjogc3RyaW5nLFxufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZSA9IHtcbiAgcm9sZTogJ3N5c3RlbScgfCAnYXNzaXN0YW50JyB8ICd1c2VyJyxcbiAgY29udGVudDogc3RyaW5nLFxufTtcblxuLy8gYSBsaXR0bGUgcXVpY2svc2xvcHB5IHR5cGluZyBqdXN0IHRvIGdldCB0aGUgdHlwZXMgdG8gd29yayBvdXRcbi8vIGZvciBub3cgYWxsIHdlIGNhcmUgYWJvdXQgaXMgdGhlIGRlbHRhIG9mIHRoZSBmaXJzdCBjaG9pY2Vcbi8vIFRPRE86IGNsZWFuIHRoaXMgdXAgaWYgbW9yZSByaWdvcm91cyB0eXBpbmcgaXMgbmVlZGVkXG5leHBvcnQgdHlwZSBDb21wbGV0aW9uc1N0cmVhbVJlc3BvbnNlID0ge1xuICBpZDogc3RyaW5nLFxuICBvYmplY3Q6IHN0cmluZyxcbiAgY3JlYXRlZDogbnVtYmVyLFxuICBjaG9pY2VzOiB7XG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBkZWx0YToge1xuICAgICAgY29udGVudDogc3RyaW5nLFxuICAgIH0sXG4gICAgZmluaXNoX3JlYXNvbjogc3RyaW5nLFxuICB9W10sXG4gIHVzYWdlOiB7XG4gICAgcHJvbXB0X3Rva2VuczogbnVtYmVyLFxuICAgIGNvbXBsZXRpb25fdG9rZW5zOiBudW1iZXIsXG4gICAgdG90YWxfdG9rZW5zOiBudW1iZXJcbiAgfVxufTtcblxuLy8gc3RyZWFtcyByZXNwb25zZXMgZnJvbSBjaGF0Z3B0IGNvbXBsZXRpb25zIGFwaVxuZXhwb3J0IGNvbnN0IHN0cmVhbUNoYXRHUFRDb21wbGV0aW9ucyA9IGFzeW5jIChjb25maWc6IENvbmZpZywgbWVzc2FnZXM6IE1lc3NhZ2VbXSk6IFByb21pc2U8UmVhZGFibGVTdHJlYW08Q29tcGxldGlvbnNTdHJlYW1SZXNwb25zZT4+ID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goQ09NUExFVElPTlNfVVJMLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtjb25maWcudG9rZW59YCxcbiAgICB9LFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG1vZGVsOiAnZ3B0LTMuNS10dXJibycsXG4gICAgICBtZXNzYWdlcyxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjUsXG4gICAgICBzdHJlYW06IHRydWUsXG4gICAgfSksXG4gIH0pO1xuXG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgY29uc3Qgc3RhdHVzVGV4dCA9IHJlcy5zdGF0dXNUZXh0O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlcy5ib2R5Py5nZXRSZWFkZXIoKS5yZWFkKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYE9wZW5BSSBBUEkgcmV0dXJuZWQgYW4gZXJyb3I6ICR7ZGVjb2Rlci5kZWNvZGUocmVzdWx0Py52YWx1ZSkgfHwgc3RhdHVzVGV4dH1gLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBib2R5ID0gcmVzLmJvZHk7XG4gIGlmICghYm9keSkge1xuICAgIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSByZXR1cm5lZCBhbiBlbXB0eSByZXNwb25zZScpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgY29uc3QgcmVhZGVyID0gYm9keS5nZXRSZWFkZXIoKTtcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2h1bmsgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gY2h1bmsuc3BsaXQoJ1xcbicpLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGxpbmUucmVwbGFjZSgvXmRhdGE6IC8sICcnKTtcblxuICAgICAgICAgIGlmIChtZXNzYWdlID09PSAnW0RPTkVdJykge1xuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UobWVzc2FnZSkgYXMgQ29tcGxldGlvbnNTdHJlYW1SZXNwb25zZTtcbiAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoanNvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbiIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDY0OCk7XG4iXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIlN0eWxlU2hlZXQiLCJvcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwiX2luc2VydFRhZyIsInRhZyIsImJlZm9yZSIsInRhZ3MiLCJsZW5ndGgiLCJpbnNlcnRpb25Qb2ludCIsIm5leHRTaWJsaW5nIiwicHJlcGVuZCIsImNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJwdXNoIiwiaXNTcGVlZHkiLCJ1bmRlZmluZWQiLCJzcGVlZHkiLCJjdHIiLCJub25jZSIsImtleSIsIl9wcm90byIsInByb3RvdHlwZSIsImh5ZHJhdGUiLCJub2RlcyIsImZvckVhY2giLCJpbnNlcnQiLCJydWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInNoZWV0IiwiaSIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJlIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhYnMiLCJNYXRoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiT2JqZWN0IiwiYXNzaWduIiwidHJpbSIsInZhbHVlIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsImluZGV4b2YiLCJzZWFyY2giLCJpbmRleE9mIiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiYmVnaW4iLCJlbmQiLCJzbGljZSIsImFycmF5IiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsIm5vZGUiLCJyb290IiwicGFyZW50IiwidHlwZSIsInByb3BzIiwiY2hpbGRyZW4iLCJyZXR1cm4iLCJwcmV2IiwibmV4dCIsInBlZWsiLCJjYXJldCIsInRva2VuIiwiYWxsb2MiLCJkZWFsbG9jIiwiZGVsaW1pdCIsImRlbGltaXRlciIsIndoaXRlc3BhY2UiLCJlc2NhcGluZyIsImNvdW50IiwiY29tbWVudGVyIiwiaWRlbnRpZmllciIsIkNPTU1FTlQiLCJjYWxsYmFjayIsIm91dHB1dCIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJqb2luIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsIm9mZnNldCIsImF0cnVsZSIsInByb3BlcnR5IiwicHJldmlvdXMiLCJ2YXJpYWJsZSIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJzaXplIiwiaiIsImsiLCJ4IiwieSIsInoiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJmaXhlZEVsZW1lbnRzIiwiV2Vha01hcCIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwiZ2V0Iiwic2V0IiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImhhc2giLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsIm1hcCIsImV4ZWMiLCJzc3JTdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJjYWxsIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsInNwbGl0IiwiY3VycmVudFNoZWV0IiwiY29sbGVjdGlvbiIsImZpbmFsaXppbmdQbHVnaW5zIiwic2VyaWFsaXplciIsImNvbmNhdCIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwic3R5bGVzIiwiY2FjaGUiLCJuYW1lIiwicmVnaXN0ZXJlZCIsImZuIiwiY3JlYXRlIiwiYXJnIiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsIkNhY2hlUHJvdmlkZXIiLCJQcm92aWRlciIsIndpdGhFbW90aW9uQ2FjaGUiLCJmdW5jIiwiZm9yd2FyZFJlZiIsInJlZiIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJHbG9iYWwiLCJ3IiwiVCIsInNoZWV0UmVmIiwidXNlUmVmIiwiY29uc3RydWN0b3IiLCJyZWh5ZHJhdGluZyIsInF1ZXJ5U2VsZWN0b3IiLCJjdXJyZW50Iiwic2hlZXRSZWZDdXJyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY3NzIiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJfa2V5Iiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsImFwcGx5IiwiYW5pbSIsInRvU3RyaW5nIiwic3RyIiwiaCIsImxlbiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwidG9Mb3dlckNhc2UiLCJwcm9jZXNzU3R5bGVWYWx1ZSIsIm1hdGNoIiwicDEiLCJwMiIsImN1cnNvciIsImhhbmRsZUludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwib2JqIiwic3RyaW5nIiwiaXNBcnJheSIsImludGVycG9sYXRlZCIsIl9pIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwicmVzdWx0IiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic2VyaWFsaXplU3R5bGVzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2siLCJ1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2siLCJ1c2VMYXlvdXRFZmZlY3QiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJyZWdpc3RlclN0eWxlcyIsImlzU3RyaW5nVGFnIiwiaW5zZXJ0U3R5bGVzIiwiTWVudVVuc3R5bGVkQ29udGV4dCIsImRpc3BsYXlOYW1lIiwiZ2V0V2luZG93Iiwid2luZG93Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwibWF4IiwibWluIiwicm91bmQiLCJnZXRVQVN0cmluZyIsInVhRGF0YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudERhdGEiLCJicmFuZHMiLCJpdGVtIiwiYnJhbmQiLCJ2ZXJzaW9uIiwidXNlckFnZW50IiwiaXNMYXlvdXRWaWV3cG9ydCIsInRlc3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbmNsdWRlU2NhbGUiLCJpc0ZpeGVkU3RyYXRlZ3kiLCJjbGllbnRSZWN0Iiwic2NhbGVYIiwic2NhbGVZIiwib2Zmc2V0V2lkdGgiLCJ3aWR0aCIsIm9mZnNldEhlaWdodCIsImhlaWdodCIsInZpc3VhbFZpZXdwb3J0IiwiYWRkVmlzdWFsT2Zmc2V0cyIsImxlZnQiLCJvZmZzZXRMZWZ0IiwidG9wIiwib2Zmc2V0VG9wIiwicmlnaHQiLCJib3R0b20iLCJnZXRXaW5kb3dTY3JvbGwiLCJ3aW4iLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImdldE5vZGVOYW1lIiwibm9kZU5hbWUiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlzU2Nyb2xsUGFyZW50IiwiX2dldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsIm9mZnNldFBhcmVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwicmVjdCIsImlzRWxlbWVudFNjYWxlZCIsInNjcm9sbCIsIm9mZnNldHMiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsImxpc3RTY3JvbGxQYXJlbnRzIiwibGlzdCIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsInNjcm9sbFBhcmVudCIsImlzQm9keSIsInRhcmdldCIsInVwZGF0ZWRMaXN0IiwiaXNUYWJsZUVsZW1lbnQiLCJnZXRUcnVlT2Zmc2V0UGFyZW50IiwiZ2V0T2Zmc2V0UGFyZW50IiwiaXNGaXJlZm94IiwiY3VycmVudE5vZGUiLCJ0cmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZSIsImNvbnRhaW4iLCJ3aWxsQ2hhbmdlIiwiZmlsdGVyIiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwic3RhcnQiLCJ2aWV3cG9ydCIsInBvcHBlciIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJtb2RpZmllclBoYXNlcyIsIm1vZGlmaWVycyIsIk1hcCIsInZpc2l0ZWQiLCJTZXQiLCJzb3J0IiwibW9kaWZpZXIiLCJhZGQiLCJyZXF1aXJlcyIsInJlcXVpcmVzSWZFeGlzdHMiLCJkZXAiLCJoYXMiLCJkZXBNb2RpZmllciIsIkRFRkFVTFRfT1BUSU9OUyIsInN0cmF0ZWd5IiwiYXJlVmFsaWRFbGVtZW50cyIsInNvbWUiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwicGVuZGluZyIsInN0YXRlIiwib3JkZXJlZE1vZGlmaWVycyIsIm1vZGlmaWVyc0RhdGEiLCJlbGVtZW50cyIsImF0dHJpYnV0ZXMiLCJlZmZlY3RDbGVhbnVwRm5zIiwiaXNEZXN0cm95ZWQiLCJpbnN0YW5jZSIsInNldE9wdGlvbnMiLCJzZXRPcHRpb25zQWN0aW9uIiwiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsInNjcm9sbFBhcmVudHMiLCJjb250ZXh0RWxlbWVudCIsIm1lcmdlZCIsInBoYXNlIiwib3JkZXJNb2RpZmllcnMiLCJleGlzdGluZyIsImRhdGEiLCJrZXlzIiwibSIsImVuYWJsZWQiLCJfcmVmMyIsIl9yZWYzJG9wdGlvbnMiLCJlZmZlY3QiLCJjbGVhbnVwRm4iLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRCYXNlUGxhY2VtZW50IiwiZ2V0VmFyaWF0aW9uIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwiY29tcHV0ZU9mZnNldHMiLCJfcmVmIiwiYmFzZVBsYWNlbWVudCIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJ1bnNldFNpZGVzIiwibWFwVG9TdHlsZXMiLCJfcmVmMiIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsIl9vZmZzZXRzJHgiLCJfb2Zmc2V0cyR5IiwiaGFzWCIsImhhc093blByb3BlcnR5IiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJoZWlnaHRQcm9wIiwid2lkdGhQcm9wIiwiX09iamVjdCRhc3NpZ24iLCJjb21tb25TdHlsZXMiLCJfcmVmNCIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJyb3VuZE9mZnNldHNCeURQUiIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiY29udGFpbnMiLCJjaGlsZCIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGUiLCJpc1NhbWVOb2RlIiwicmVjdFRvQ2xpZW50UmVjdCIsImdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlIiwiY2xpcHBpbmdQYXJlbnQiLCJodG1sIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJsYXlvdXRWaWV3cG9ydCIsImdldFZpZXdwb3J0UmVjdCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0Iiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJkaXJlY3Rpb24iLCJnZXREb2N1bWVudFJlY3QiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsImRldGVjdE92ZXJmbG93IiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkc3RyYXRlZ3kiLCJfb3B0aW9ucyRib3VuZGFyeSIsImJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsInBhZGRpbmciLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImNsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJnZXRDbGlwcGluZ1JlY3QiLCJyZWZlcmVuY2VDbGllbnRSZWN0IiwicG9wcGVyT2Zmc2V0cyIsInBvcHBlckNsaWVudFJlY3QiLCJlbGVtZW50Q2xpZW50UmVjdCIsIm92ZXJmbG93T2Zmc2V0cyIsIm9mZnNldERhdGEiLCJtdWx0aXBseSIsImF4aXMiLCJ3aXRoaW4iLCJnZXRTaWRlT2Zmc2V0cyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwiX29wdGlvbnMkc2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfcmVmNSIsIl9vcHRpb25zJGdwdUFjY2VsZXJhdCIsIl9vcHRpb25zJGFkYXB0aXZlIiwiX29wdGlvbnMkcm91bmRPZmZzZXRzIiwiYXJyb3ciLCJzdHlsZSIsInJlbW92ZUF0dHJpYnV0ZSIsImluaXRpYWxTdHlsZXMiLCJtYXJnaW4iLCJhdHRyaWJ1dGUiLCJfb3B0aW9ucyRvZmZzZXQiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUFuZFNraWRkaW5nVG9YWSIsIl9kYXRhJHN0YXRlJHBsYWNlbWVudCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJmbGlwVmFyaWF0aW9ucyIsImFsbG93ZWRBdXRvUGxhY2VtZW50cyIsInByZWZlcnJlZFBsYWNlbWVudCIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMiLCJwbGFjZW1lbnRzIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJhIiwiYiIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwiX2xvb3AiLCJmaXR0aW5nUGxhY2VtZW50IiwiZmluZCIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsImlzQmFzZVBsYWNlbWVudCIsInRldGhlck9mZnNldFZhbHVlIiwibm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlIiwib2Zmc2V0TW9kaWZpZXJTdGF0ZSIsIl9vZmZzZXRNb2RpZmllclN0YXRlJCIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dFbGVtZW50IiwiYXJyb3dSZWN0IiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX21pbiIsIl9tYXgiLCJpc09yaWdpblNpZGUiLCJfb2Zmc2V0TW9kaWZpZXJWYWx1ZSIsIl90ZXRoZXJNaW4iLCJfdGV0aGVyTWF4IiwiX3ByZXZlbnRlZE9mZnNldCIsInYiLCJ3aXRoaW5NYXhDbGFtcCIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsInRvUGFkZGluZ09iamVjdCIsIm1pblByb3AiLCJtYXhQcm9wIiwiZW5kRGlmZiIsInN0YXJ0RGlmZiIsImNsaWVudFNpemUiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiZGlzYWJsZVBvcnRhbCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImhhbmRsZVJlZiIsInVzZUZvcmtSZWYiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsImdldENvbnRhaW5lciIsInNldFJlZiIsIm5ld1Byb3BzIiwiZ2V0UG9wcGVyVW5zdHlsZWRVdGlsaXR5Q2xhc3MiLCJzbG90IiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3MiLCJkZWZhdWx0Q29udGV4dFZhbHVlIiwiZGlzYWJsZURlZmF1bHRDbGFzc2VzIiwiQ2xhc3NOYW1lQ29uZmlndXJhdG9yQ29udGV4dCIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJyZXNvbHZlQW5jaG9yRWwiLCJhbmNob3JFbCIsImRlZmF1bHRQb3BwZXJPcHRpb25zIiwiUG9wcGVyVG9vbHRpcCIsImNvbXBvbmVudCIsIm9wZW4iLCJvd25lclN0YXRlIiwiaW5pdGlhbFBsYWNlbWVudCIsInBvcHBlck9wdGlvbnMiLCJwb3BwZXJSZWYiLCJwb3BwZXJSZWZQcm9wIiwic2xvdFByb3BzIiwic2xvdHMiLCJUcmFuc2l0aW9uUHJvcHMiLCJvdGhlciIsInRvb2x0aXBSZWYiLCJvd25SZWYiLCJoYW5kbGVQb3BwZXJSZWYiLCJoYW5kbGVQb3BwZXJSZWZSZWYiLCJydGxQbGFjZW1lbnQiLCJmbGlwUGxhY2VtZW50Iiwic2V0UGxhY2VtZW50IiwicmVzb2x2ZWRBbmNob3JFbGVtZW50Iiwic2V0UmVzb2x2ZWRBbmNob3JFbGVtZW50IiwicG9wcGVyTW9kaWZpZXJzIiwiY2hpbGRQcm9wcyIsImNsYXNzZXMiLCJjb21wb3NlQ2xhc3NlcyIsInVzZUNsYXNzTmFtZXNPdmVycmlkZSIsIlJvb3QiLCJyb290UHJvcHMiLCJ1c2VTbG90UHJvcHMiLCJlbGVtZW50VHlwZSIsImV4dGVybmFsU2xvdFByb3BzIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsInJvbGUiLCJjb250YWluZXJQcm9wIiwia2VlcE1vdW50ZWQiLCJ0cmFuc2l0aW9uIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwicmVzb2x2ZWRBbmNob3JFbCIsIm5vZGVUeXBlIiwiZGlzcGxheSIsInRyYW5zaXRpb25Qcm9wcyIsImluIiwib25FbnRlciIsIm9uRXhpdGVkIiwiU2VsZWN0VW5zdHlsZWRDb250ZXh0IiwidXNlQnV0dG9uIiwicGFyYW1ldGVycyIsImRpc2FibGVkIiwiZm9jdXNhYmxlV2hlbkRpc2FibGVkIiwiaHJlZiIsImV4dGVybmFsUmVmIiwidGFiSW5kZXgiLCJ0byIsImJ1dHRvblJlZiIsImFjdGl2ZSIsInNldEFjdGl2ZSIsImlzRm9jdXNWaXNpYmxlUmVmIiwib25Gb2N1cyIsImhhbmRsZUZvY3VzVmlzaWJsZSIsIm9uQmx1ciIsImhhbmRsZUJsdXJWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiaG9zdEVsZW1lbnROYW1lIiwic2V0SG9zdEVsZW1lbnROYW1lIiwiY3JlYXRlSGFuZGxlTW91c2VMZWF2ZSIsIm90aGVySGFuZGxlcnMiLCJldmVudCIsIl9vdGhlckhhbmRsZXJzJG9uTW91cyIsInByZXZlbnREZWZhdWx0Iiwib25Nb3VzZUxlYXZlIiwiY3JlYXRlSGFuZGxlQmx1ciIsIl9vdGhlckhhbmRsZXJzJG9uQmx1ciIsImNyZWF0ZUhhbmRsZUZvY3VzIiwiX290aGVySGFuZGxlcnMkb25Gb2N1MiIsIl9vdGhlckhhbmRsZXJzJG9uRm9jdSIsImN1cnJlbnRUYXJnZXQiLCJvbkZvY3VzVmlzaWJsZSIsImlzTmF0aXZlQnV0dG9uIiwiYnV0dG9uIiwiaW5jbHVkZXMiLCJjcmVhdGVIYW5kbGVDbGljayIsIl9vdGhlckhhbmRsZXJzJG9uQ2xpYyIsIm9uQ2xpY2siLCJjcmVhdGVIYW5kbGVNb3VzZURvd24iLCJfb3RoZXJIYW5kbGVycyRvbk1vdXMyIiwib25jZSIsIm9uTW91c2VEb3duIiwiY3JlYXRlSGFuZGxlS2V5RG93biIsIl9vdGhlckhhbmRsZXJzJG9uS2V5RCIsIl9vdGhlckhhbmRsZXJzJG9uQ2xpYzIiLCJvbktleURvd24iLCJkZWZhdWx0UHJldmVudGVkIiwiY3JlYXRlSGFuZGxlS2V5VXAiLCJfb3RoZXJIYW5kbGVycyRvbktleVUiLCJfb3RoZXJIYW5kbGVycyRvbkNsaWMzIiwib25LZXlVcCIsInVwZGF0ZUhvc3RFbGVtZW50TmFtZSIsIl9pbnN0YW5jZSR0YWdOYW1lIiwidGFnTmFtZSIsImJ1dHRvblByb3BzIiwiZ2V0Um9vdFByb3BzIiwicHJvcHNFdmVudEhhbmRsZXJzIiwiZXh0ZXJuYWxFdmVudEhhbmRsZXJzIiwicGFnZVNpemUiLCJnZXROZXdIaWdobGlnaHRlZE9wdGlvbiIsInByZXZpb3VzbHlIaWdobGlnaHRlZE9wdGlvbiIsImRpZmYiLCJoaWdobGlnaHREaXNhYmxlZE9wdGlvbnMiLCJpc09wdGlvbkRpc2FibGVkIiwiZGlzYWJsZUxpc3RXcmFwIiwib3B0aW9uQ29tcGFyZXIiLCJfb3B0aW9ucyRuZXh0SW5kZXgiLCJtYXhJbmRleCIsInByZXZpb3VzbHlIaWdobGlnaHRlZEluZGV4IiwiZmluZEluZGV4Iiwib3B0aW9uIiwibmV4dEluZGV4Q2FuZGlkYXRlIiwibG9va3VwRGlyZWN0aW9uIiwid3JhcEFyb3VuZCIsIm5ld0luZGV4IiwibmV4dEluZGV4IiwiZm9jdXNEaXNhYmxlZCIsIm8iLCJuZXh0Rm9jdXMiLCJmaW5kVmFsaWRPcHRpb25Ub0hpZ2hsaWdodCIsIm1vdmVIaWdobGlnaHQiLCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlIiwibzEiLCJvMiIsImhhbmRsZU9wdGlvblNlbGVjdGlvbiIsInNlbGVjdGlvbkxpbWl0Iiwic2VsZWN0ZWRWYWx1ZXMiLCJvcHRpb25JbmRleCIsIm5ld1NlbGVjdGVkVmFsdWVzIiwic2VsZWN0ZWRPcHRpb25zIiwic28iLCJuZXdTZWxlY3Rpb24iLCJ0b2dnbGVTZWxlY3Rpb24iLCJoaWdobGlnaHRlZFZhbHVlIiwidGV4dENyaXRlcmlhTWF0Y2hlcyIsInNlYXJjaFN0cmluZyIsInN0cmluZ2lmeU9wdGlvbiIsIl9zdHJpbmdpZnlPcHRpb24iLCJ0ZXh0IiwiZGVmYXVsdExpc3Rib3hSZWR1Y2VyIiwiYWN0aW9uIiwicHJldmlvdXNseVNlbGVjdGVkVmFsdWUiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlQmx1ciIsImhpZ2hsaWdodCIsIm9wdGlvblN0cmluZ2lmaWVyIiwic3RhcnRXaXRoQ3VycmVudE9wdGlvbiIsIm5leHRPcHRpb24iLCJoYW5kbGVUZXh0TmF2aWdhdGlvbiIsIl9vcHRpb25zJGZpbmQiLCJfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3RlZFZhbHVlIiwiaGFuZGxlT3B0aW9uc0NoYW5nZSIsImFyZUFycmF5c0VxdWFsIiwiYXJyYXkxIiwiYXJyYXkyIiwiaXRlbUNvbXBhcmVyIiwiZ2V0Q29udHJvbGxlZFN0YXRlIiwiaW50ZXJuYWxTdGF0ZSIsInVzZUxhdGVzdCIsImRlcHMiLCJURVhUX05BVklHQVRJT05fUkVTRVRfVElNRU9VVCIsImRlZmF1bHRPcHRpb25Db21wYXJlciIsIm9wdGlvbkEiLCJvcHRpb25CIiwiZGVmYXVsdElzT3B0aW9uRGlzYWJsZWQiLCJkZWZhdWx0T3B0aW9uU3RyaW5naWZpZXIiLCJ1c2VMaXN0Ym94IiwiX3Byb3BzJG9wdGlvbklkR2VuZXJhIiwiZm9jdXNNYW5hZ2VtZW50IiwiaWQiLCJpZFByb3AiLCJsaXN0Ym94UmVmIiwiZXh0ZXJuYWxMaXN0Ym94UmVmIiwic3RhdGVSZWR1Y2VyIiwiZXh0ZXJuYWxSZWR1Y2VyIiwidmFsdWVQYXJhbSIsInVzZUlkIiwiZGVmYXVsdElkR2VuZXJhdG9yIiwiXyIsIm9wdGlvbklkR2VuZXJhdG9yIiwicHJvcHNXaXRoRGVmYXVsdHMiLCJkaXNwYXRjaCIsImludGVybmFsUmVkdWNlciIsImRlZmF1bHRWYWx1ZSIsImFjdGlvblJlZiIsImluaXRpYWxTdGF0ZSIsImNvbWJpbmVkUmVkdWNlciIsIm5leHRTdGF0ZSIsImRpc3BhdGNoV2l0aFByb3BzIiwicHJldmlvdXNTdGF0ZSIsImludGVybmFsUHJldmlvdXNTdGF0ZSIsInByb3BzUmVmIiwibGFzdEFjdGlvblJlZiIsIl9wcmV2aW91c1N0YXRlJHNlbGVjdCIsIm9uQ2hhbmdlIiwicHJldmlvdXNTZWxlY3RlZFZhbHVlcyIsIm5leHRTZWxlY3RlZFZhbHVlcyIsIl9wcm9wc1JlZiRjdXJyZW50IiwiX3Byb3BzUmVmJGN1cnJlbnQkb25IIiwib3B0aW9uMSIsIm9wdGlvbjIiLCJhcmVPcHRpb25zRXF1YWwiLCJvbkhpZ2hsaWdodENoYW5nZSIsInVzZVN0YXRlQ2hhbmdlRGV0ZWN0aW9uIiwidXNlQ29udHJvbGxhYmxlUmVkdWNlciIsInRleHRDcml0ZXJpYVJlZiIsImxhc3RUaW1lIiwidGV4dENyaXRlcmlhIiwibG93ZXJLZXkiLCJjdXJyZW50VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwidXNlVGV4dE5hdmlnYXRpb24iLCJoaWdobGlnaHRlZEluZGV4IiwibGF0ZXN0U2VsZWN0ZWRWYWx1ZSIsImxhdGVzdEhpZ2hsaWdodGVkSW5kZXgiLCJwcmV2aW91c09wdGlvbnMiLCJzZXRTZWxlY3RlZFZhbHVlIiwidmFsdWVzIiwic2V0SGlnaGxpZ2h0ZWRWYWx1ZSIsImNyZWF0ZUhhbmRsZU9wdGlvbkNsaWNrIiwiX290aGVyJG9uQ2xpY2siLCJjcmVhdGVIYW5kbGVPcHRpb25Qb2ludGVyT3ZlciIsIl9vdGhlciRvbk1vdXNlT3ZlciIsIm9uTW91c2VPdmVyIiwiX290aGVyJG9uS2V5RG93biIsImtleXNUb1ByZXZlbnREZWZhdWx0IiwiZ2V0T3B0aW9uU3RhdGUiLCJfbGF0ZXN0U2VsZWN0ZWRWYWx1ZSQiLCJvcHQiLCJzZWxlY3RlZCIsImhpZ2hsaWdodGVkIiwiZ2V0T3B0aW9uVGFiSW5kZXgiLCJvcHRpb25TdGF0ZSIsImdldE9wdGlvblByb3BzIiwib25Qb2ludGVyT3ZlciIsImhpZ2hsaWdodGVkT3B0aW9uIiwic2VsZWN0ZWRPcHRpb24iLCJfb3RoZXIkb25CbHVyIiwiX2xpc3Rib3hSZWYkY3VycmVudCIsImFjdGl2ZUVsZW1lbnQiLCJBY3Rpb25UeXBlcyIsImFwcGVuZE93bmVyU3RhdGUiLCJvdGhlclByb3BzIiwiZXh0cmFjdEV2ZW50SGFuZGxlcnMiLCJvYmplY3QiLCJleGNsdWRlS2V5cyIsInByb3AiLCJvbWl0RXZlbnRIYW5kbGVycyIsIm1lcmdlU2xvdFByb3BzIiwiZ2V0U2xvdFByb3BzIiwiam9pbmVkQ2xhc3NlcyIsIm1lcmdlZFN0eWxlIiwiaW50ZXJuYWxSZWYiLCJldmVudEhhbmRsZXJzIiwiY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJpbnRlcm5hbFNsb3RQcm9wcyIsInJlc29sdmVDb21wb25lbnRQcm9wcyIsImNvbXBvbmVudFByb3BzIiwidXNlRm9yY2VkUmVyZW5kZXJpbmciLCJzZXRTdGF0ZSIsInVzZU1lc3NhZ2VCdXMiLCJidXMiLCJsaXN0ZW5lcnMiLCJzdWJzY3JpYmUiLCJ0b3BpYyIsInRvcGljTGlzdGVuZXJzIiwiZGVsZXRlIiwicHVibGlzaCIsImNyZWF0ZU1lc3NhZ2VCdXMiLCJfcGFyYW1ldGVycyRhZGRpdGlvbmEiLCJyZXN0IiwicmVzb2x2ZWRDb21wb25lbnRzUHJvcHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiX2NyZWF0ZVN2Z0ljb24iLCJfanN4UnVudGltZSIsIl9kZWZhdWx0IiwiZGVmYXVsdCIsImpzeCIsImQiLCJlbnVtZXJhYmxlIiwiX3V0aWxzIiwiY3JlYXRlU3ZnSWNvbiIsImdldEFsZXJ0VXRpbGl0eUNsYXNzIiwiQWxlcnRSb290Iiwic3R5bGVkIiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJ0aGVtZSIsIl90aGVtZSR2YXJpYW50cyIsInZhcnMiLCJyYWRpdXMiLCJzbSIsImZvbnRTaXplIiwibWQiLCJmb250RmFtaWx5IiwiYmFja2dyb3VuZENvbG9yIiwiYWxpZ25JdGVtcyIsImJvcmRlclJhZGl1cyIsInZhcmlhbnRzIiwidmFyaWFudCIsImNvbG9yIiwiQWxlcnRTdGFydERlY29yYXRvciIsInN0YXJ0RGVjb3JhdG9yIiwiX3RoZW1lJHZhcnMkcGFsZXR0ZSIsIm1hcmdpbklubGluZUVuZCIsInBhbGV0dGUiLCJBbGVydEVuZERlY29yYXRvciIsImVuZERlY29yYXRvciIsIl90aGVtZSR2YXJzJHBhbGV0dGUyIiwibWFyZ2luSW5saW5lU3RhcnQiLCJtYXJnaW5MZWZ0IiwiQWxlcnQiLCJpblByb3BzIiwidXNlVGhlbWVQcm9wcyIsImNvbG9yUHJvcCIsImdldENvbG9yIiwiY2FwaXRhbGl6ZSIsInVzZVV0aWxpdHlDbGFzc2VzIiwiU2xvdFJvb3QiLCJ1c2VTbG90IiwiU2xvdFN0YXJ0RGVjb3JhdG9yIiwic3RhcnREZWNvcmF0b3JQcm9wcyIsIlNsb3RFbmREZWNvcmF0b3IiLCJlbmREZWNvcmF0b3JQcm9wcyIsImRlZmF1bHRUaGVtZSIsImRlZmF1bHRDbGFzc05hbWUiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIkJveFJvb3QiLCJzaG91bGRGb3J3YXJkUHJvcCIsInN0eWxlRnVuY3Rpb25TeCIsInVzZVRoZW1lIiwiX2V4dGVuZFN4UHJvcCIsImV4dGVuZFN4UHJvcCIsImFzIiwiY3JlYXRlQm94IiwiQ2xhc3NOYW1lR2VuZXJhdG9yIiwiZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyIsIl90IiwidCIsImNpcmN1bGF0ZSIsIkNpcmN1bGFyUHJvZ3Jlc3NSb290IiwiaW5zdGFuY2VTaXplIiwidGhpY2tuZXNzIiwiYm94U2l6aW5nIiwianVzdGlmeUNvbnRlbnQiLCJjb250ZW50IiwiQ2lyY3VsYXJQcm9ncmVzc1N2ZyIsInN2ZyIsIkNpcmN1bGFyUHJvZ3Jlc3NUcmFjayIsInRyYWNrIiwiY3giLCJjeSIsInIiLCJmaWxsIiwic3Ryb2tlIiwiQ2lyY3VsYXJQcm9ncmVzc1Byb2dyZXNzIiwicHJvZ3Jlc3MiLCJzdHJva2VMaW5lY2FwIiwidHJhbnNmb3JtT3JpZ2luIiwiZGV0ZXJtaW5hdGUiLCJDaXJjdWxhclByb2dyZXNzIiwiTnVtYmVyIiwiU2xvdFN2ZyIsInN2Z1Byb3BzIiwiU2xvdFRyYWNrIiwidHJhY2tQcm9wcyIsIlNsb3RQcm9ncmVzcyIsInByb2dyZXNzUHJvcHMiLCJnZXRCdXR0b25VdGlsaXR5Q2xhc3MiLCJCdXR0b25TdGFydERlY29yYXRvciIsIm1hcmdpblJpZ2h0IiwiQnV0dG9uRW5kRGVjb3JhdG9yIiwiQnV0dG9uTG9hZGluZ0NlbnRlciIsImxvYWRpbmdJbmRpY2F0b3JDZW50ZXIiLCJfdGhlbWUkdmFyaWFudHMyIiwiX3RoZW1lJHZhcmlhbnRzMyIsIl90aGVtZSR2YXJpYW50czQiLCJCdXR0b25Sb290IiwiX3RoZW1lJHZhcmlhbnRzNSIsIl90aGVtZSR2YXJpYW50czYiLCJfdGhlbWUkdmFyaWFudHM3IiwiX3RoZW1lJHZhcmlhbnRzOCIsIm1pbkhlaWdodCIsInBhZGRpbmdCbG9jayIsInBhZGRpbmdJbmxpbmUiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImJvcmRlciIsInRleHREZWNvcmF0aW9uIiwibGciLCJmdWxsV2lkdGgiLCJmb2N1cyIsImxvYWRpbmdQb3NpdGlvbiIsImxvYWRpbmciLCJsb2FkaW5nSW5kaWNhdG9yIiwibG9hZGluZ0luZGljYXRvclByb3AiLCJfYnV0dG9uUmVmJGN1cnJlbnQiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJjb21wb3NlZENsYXNzZXMiLCJTbG90TG9hZGluZ0luZGljYXRvckNlbnRlciIsImxvYWRpbmdJbmRpY2F0b3JDZW50ZXJQcm9wcyIsImdldENhcmRVdGlsaXR5Q2xhc3MiLCJDYXJkUm93Q29udGV4dCIsIkNhcmRSb290IiwiX3RoZW1lJGNvbG9ySW52ZXJzaW9uIiwiYm94U2hhZG93Iiwic2hhZG93IiwiYmFja2dyb3VuZCIsInN1cmZhY2UiLCJmbGV4RGlyZWN0aW9uIiwib3JpZW50YXRpb24iLCJpbnZlcnRlZENvbG9ycyIsImNvbG9ySW52ZXJzaW9uIiwiQ2FyZCIsImV4dHJhUHJvcHMiLCJpc011aUVsZW1lbnQiLCJpbnNldCIsImRpdmlkZXJPcmllbnRhdGlvbiIsIkNvbG9ySW52ZXJzaW9uIiwiZGlzYWJsZUNvbG9yU2NoZW1lIiwiR2xvYmFsU3R5bGVzIiwiX2NvbXBvbmVudHMkSm95VHlwb2dyIiwiX2NvbXBvbmVudHMiLCJfY29tcG9uZW50cyRKb3lUeXBvZ3IyIiwiX2NvbXBvbmVudHMkSm95VHlwb2dyMyIsImNvbG9yU2NoZW1lU3R5bGVzIiwiZW50cmllcyIsImNvbG9yU2NoZW1lcyIsInNjaGVtZSIsIl9zY2hlbWUkcGFsZXR0ZSIsImdldENvbG9yU2NoZW1lU2VsZWN0b3IiLCJjb2xvclNjaGVtZSIsIm1vZGUiLCJkZWZhdWx0VHlwb2dyYXBoeUxldmVsIiwiY29tcG9uZW50cyIsIkpveVR5cG9ncmFwaHkiLCJkZWZhdWx0UHJvcHMiLCJsZXZlbCIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiV2Via2l0VGV4dFNpemVBZGp1c3QiLCJwcmltYXJ5IiwidHlwb2dyYXBoeSIsImNvbW1vbiIsIndoaXRlIiwiYmFja2Ryb3AiLCJnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzIiwiU3R5bGVkSWNvbkJ1dHRvbiIsIm1pbldpZHRoIiwiSWNvbkJ1dHRvblJvb3QiLCJnZXRJbnB1dFV0aWxpdHlDbGFzcyIsIlN0eWxlZElucHV0Um9vdCIsIl92YXJpYW50U3R5bGUkYmFja2dybyIsInZhcmlhbnRTdHlsZSIsInBvaW50ZXJFdmVudHMiLCJTdHlsZWRJbnB1dEh0bWwiLCJvdXRsaW5lIiwiYWxpZ25TZWxmIiwiZm9udFN0eWxlIiwidGV4dE92ZXJmbG93IiwicGFkZGluZ0lubGluZVN0YXJ0IiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJwYWRkaW5nSW5saW5lRW5kIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIlN0eWxlZElucHV0U3RhcnREZWNvcmF0b3IiLCJmbGV4V3JhcCIsInRlcnRpYXJ5IiwiZm9jdXNlZCIsIlN0eWxlZElucHV0RW5kRGVjb3JhdG9yIiwiX3RoZW1lJHZhcmlhbnRzOSIsIl90aGVtZSR2YXJpYW50czEwIiwiX3RoZW1lJHZhcmlhbnRzMTEiLCJJbnB1dFJvb3QiLCJJbnB1dElucHV0IiwiaW5wdXQiLCJJbnB1dFN0YXJ0RGVjb3JhdG9yIiwiSW5wdXRFbmREZWNvcmF0b3IiLCJfaW5Qcm9wcyRlcnJvciIsIl9pblByb3BzJHNpemUiLCJfZm9ybUNvbnRyb2wkY29sb3IiLCJfdXNlRm9yd2FyZGVkSW5wdXQiLCJ1c2VGb3J3YXJkZWRJbnB1dCIsInByb3BzVG9Gb3J3YXJkIiwicm9vdFN0YXRlQ2xhc3NlcyIsImlucHV0U3RhdGVDbGFzc2VzIiwiZ2V0SW5wdXRQcm9wcyIsImZvcm1Db250cm9sIiwiZXJyb3IiLCJlcnJvclByb3AiLCJzaXplUHJvcCIsIlNsb3RJbnB1dCIsImlucHV0UHJvcHMiLCJodG1sRm9yIiwiaW50ZXJuYWxGb3J3YXJkZWRQcm9wcyIsIkZvcm1Db250cm9sQ29udGV4dCIsImFyaWFEZXNjcmliZWRieSIsImFyaWFMYWJlbCIsImFyaWFMYWJlbGxlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiYXV0b0ZvY3VzIiwiZGlzYWJsZWRQcm9wIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsInJlcXVpcmVkIiwiZGVmYXVsdFZhbHVlUHJvcCIsInJlcXVpcmVkUHJvcCIsInZhbHVlUHJvcCIsImlucHV0UmVmIiwiaW5wdXRSZWZQcm9wIiwiZm9ybUNvbnRyb2xDb250ZXh0IiwiX2Zvcm1Db250cm9sQ29udGV4dCRkIiwiX2Zvcm1Db250cm9sQ29udGV4dCRlIiwiX2Zvcm1Db250cm9sQ29udGV4dCRyIiwiaXNDb250cm9sbGVkIiwiaGFuZGxlSW5wdXRSZWZXYXJuaW5nIiwiaGFuZGxlSW5wdXRSZWYiLCJzZXRGb2N1c2VkIiwiaGFuZGxlRm9jdXMiLCJfZm9ybUNvbnRyb2xDb250ZXh0JG8iLCJzdG9wUHJvcGFnYXRpb24iLCJoYW5kbGVDaGFuZ2UiLCJfZm9ybUNvbnRyb2xDb250ZXh0JG8yIiwiX290aGVySGFuZGxlcnMkb25DaGFuIiwiRXJyb3IiLCJleHRlcm5hbFByb3BzIiwibWVyZ2VkRXZlbnRIYW5kbGVycyIsInVzZUlucHV0IiwiQm9vbGVhbiIsIlN0eWxlZExpc3QiLCJhcHBseVNpemVWYXJzIiwibmVzdGluZyIsIm1hcmdpbkJsb2NrU3RhcnQiLCJtYXJnaW5CbG9ja0VuZCIsIndyYXAiLCJsaXN0U3R5bGUiLCJMaXN0Um9vdCIsIk5lc3RlZExpc3RDb250ZXh0IiwibWVudUNvbnRleHQiLCJzZWxlY3RDb250ZXh0IiwicmFkaW9Hcm91cENvbnRleHQiLCJyb2xlUHJvcCIsIkxpc3RQcm92aWRlciIsInJvdyIsInNjb3BlZFZhcmlhYmxlcyIsIm5lc3RlZCIsImJhc2VQcm92aWRlcnMiLCJSb3dMaXN0Q29udGV4dCIsImdldExpc3RVdGlsaXR5Q2xhc3MiLCJTdHlsZWRMaXN0SXRlbUJ1dHRvbiIsInRleHRBbGlnbiIsIm1hcmdpbklubGluZSIsIm1hcmdpbkJsb2NrIiwibWluQmxvY2tTaXplIiwiZmxleEJhc2lzIiwibWluSW5saW5lU2l6ZSIsImdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIiwiTWVudUl0ZW1Sb290IiwiX2l0ZW1TdGF0ZSRkaXNhYmxlZCIsImxhYmVsIiwiaXRlbVJlZiIsInJlZ2lzdGVySXRlbSIsInVucmVnaXN0ZXJJdGVtIiwicmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyIiwiZ2V0QnV0dG9uUHJvcHMiLCJmb2N1c1JlcXVlc3RlZCIsInJlcXVlc3RGb2N1cyIsImZvY3VzSWZSZXF1ZXN0ZWQiLCJpdGVtU3RhdGUiLCJnZXRJdGVtU3RhdGUiLCJyZXJlbmRlciIsImhpZ2hsaWdodGVkSXRlbUlkIiwib3B0aW9uUHJvcHMiLCJnZXRJdGVtUHJvcHMiLCJ1c2VNZW51SXRlbSIsIkhJR0hMSUdIVF9DSEFOR0VfVE9QSUMiLCJuZXdTdGF0ZSIsImdldE1lbnVMaXN0VXRpbGl0eUNsYXNzIiwiTWVudUxpc3RSb290IiwiYWN0aW9ucyIsImNvbnRleHRWYWx1ZSIsImdldExpc3Rib3hQcm9wcyIsImhpZ2hsaWdodEZpcnN0SXRlbSIsImhpZ2hsaWdodExhc3RJdGVtIiwibGlzdGJveFJlZlByb3AiLCJvbkNsb3NlIiwibGlzdGJveElkIiwibWVudUl0ZW1zIiwic2V0TWVudUl0ZW1zIiwibWV0YWRhdGEiLCJub3RpZnlIaWdobGlnaHRDaGFuZ2VkIiwibWVzc2FnZUJ1cyIsIm5ld1ZhbHVlIiwiaGFuZGxlciIsInVzZU1lbnVDaGFuZ2VOb3RpZmllcnMiLCJzZXRMaXN0Ym94SGlnaGxpZ2h0IiwiX21lbnVJdGVtcyRpZCRyZWYkY3VyIiwiaW5uZXJUZXh0IiwiX21lbnVJdGVtcyRpZCIsInJlbGF0ZWRUYXJnZXQiLCJfbGlzdGJveFJlZiRjdXJyZW50MiIsIl9tZW51SXRlbXMkaGlnaGxpZ2h0ZSIsIl9tZW51SXRlbXMkaGlnaGxpZ2h0ZTIiLCJ1c2VNZW51IiwibGlzdGJveFByb3BzIiwibWVudUNvbnRleHRWYWx1ZSIsImdldE9wdGlvblV0aWxpdHlDbGFzcyIsIk9wdGlvblJvb3QiLCJwYXJhbXMiLCJvcHRpb25SZWYiLCJvcHRpb25SZWZQYXJhbSIsInJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlciIsImxpc3Rib3hDbGllbnRSZWN0Iiwib3B0aW9uQ2xpZW50UmVjdCIsInVzZU9wdGlvbiIsImdldE9wdGlvbnNGcm9tQ2hpbGRyZW4iLCJzZWxlY3RDaGlsZHJlbiIsIl9wcm9wcyIsIl9wcm9wczIiLCJfZWxlbWVudCRwcm9wcyRkaXNhYmwyIiwibm9kZUNoaWxkcmVuIiwiX2VsZW1lbnQkcHJvcHMkZGlzYWJsIiwiZ3JvdXAiLCJmbGF0dGVuT3B0aW9uR3JvdXBzIiwiZ3JvdXBlZE9wdGlvbnMiLCJpc0dyb3VwRGlzYWJsZWQiLCJmbGF0T3B0aW9ucyIsIm9wdGlvbk9yR3JvdXAiLCJTRUxFQ1RJT05fQ0hBTkdFX1RPUElDIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsIlN2Z0ljb25Sb290IiwiX3RoZW1lJHZhcmlhbnRzJHBsYWluIiwiX3RoZW1lJHZhcmlhbnRzJHBsYWluMiIsImluc3RhbmNlRm9udFNpemUiLCJ1c2VyU2VsZWN0IiwicGxhaW5Db2xvciIsInBsYWluIiwiU3ZnSWNvbiIsImh0bWxDb2xvciIsImluaGVyaXRWaWV3Qm94IiwidGl0bGVBY2Nlc3MiLCJ2aWV3Qm94IiwiZm9jdXNhYmxlIiwicGF0aCIsIkNvbXBvbmVudCIsIm11aU5hbWUiLCJnZXRTZWxlY3RVdGlsaXR5Q2xhc3MiLCJfVW5mb2xkIiwiZGVmYXVsdFJlbmRlclNpbmdsZVZhbHVlIiwiX3NlbGVjdGVkT3B0aW9uJGxhYmVsIiwiZGVmYXVsdEZvcm1WYWx1ZVByb3ZpZGVyIiwiSlNPTiIsIlNlbGVjdFJvb3QiLCJTZWxlY3RCdXR0b24iLCJ3aGl0ZVNwYWNlIiwiU2VsZWN0TGlzdGJveCIsImxpc3Rib3giLCJwb3B1cCIsIm1heEhlaWdodCIsIlNlbGVjdFN0YXJ0RGVjb3JhdG9yIiwiU2VsZWN0RW5kRGVjb3JhdG9yIiwiU2VsZWN0SW5kaWNhdG9yIiwiX2luUHJvcHMkZGlzYWJsZWQiLCJkZWZhdWx0TGlzdGJveE9wZW4iLCJkaXNhYmxlZEV4dGVybmFsUHJvcCIsImdldFNlcmlhbGl6ZWRWYWx1ZSIsImxpc3Rib3hPcGVuIiwibGlzdGJveE9wZW5Qcm9wIiwib25MaXN0Ym94T3BlbkNoYW5nZSIsInJlbmRlclZhbHVlIiwicmVuZGVyVmFsdWVQcm9wIiwiaW5kaWNhdG9yIiwiVW5mb2xkIiwic2V0QW5jaG9yRWwiLCJzZXRHcm91cGVkT3B0aW9ucyIsInNldExpc3Rib3hPcGVuIiwidXNlQ29udHJvbGxlZCIsImNvbnRyb2xsZWQiLCJyb290UmVmIiwiaGFuZGxlT3BlbkNoYW5nZSIsImlzT3BlbiIsImJ1dHRvbkFjdGl2ZSIsImJ1dHRvbkZvY3VzVmlzaWJsZSIsImJ1dHRvblJlZlByb3AiLCJsaXN0Ym94SWRQcm9wIiwibXVsdGlwbGUiLCJvbk9wZW5DaGFuZ2UiLCJoYW5kbGVCdXR0b25SZWYiLCJvcHRpb25zTWFwIiwiaWdub3JlRW50ZXJLZXlVcCIsImlnbm9yZUNsaWNrIiwibGlzdGJveEZvY3VzUmVxdWVzdGVkIiwicmVxdWVzdExpc3Rib3hGb2N1cyIsImZvY3VzTGlzdGJveElmUmVxdWVzdGVkIiwiaGFuZGxlTGlzdGJveFJlZiIsIm5vdGlmeVNlbGVjdGlvbkNoYW5nZWQiLCJ1c2VTZWxlY3RDaGFuZ2VOb3RpZmllcnMiLCJjcmVhdGVIYW5kbGVCdXR0b25DbGljayIsImNyZWF0ZUhhbmRsZUJ1dHRvbktleURvd24iLCJjcmVhdGVIYW5kbGVMaXN0Ym94S2V5VXAiLCJjbG9zaW5nS2V5cyIsImNyZWF0ZUhhbmRsZUxpc3Rib3hJdGVtQ2xpY2siLCJjcmVhdGVIYW5kbGVMaXN0Ym94Qmx1ciIsImxpc3Rib3hSZWR1Y2VyIiwiZ2V0QnV0dG9uUm9vdFByb3BzIiwib3B0aW9uVmFsdWVzIiwidmFsdWVUb0NoZWNrIiwiX29wdGlvbiRkaXNhYmxlZCIsInVzZUxpc3Rib3hQYXJhbWV0ZXJzIiwibmV3VmFsdWVzIiwiX25ld1ZhbHVlcyQiLCJnZXRMaXN0Ym94Um9vdFByb3BzIiwiZ2V0TGlzdGJveE9wdGlvblByb3BzIiwib3B0aW9uVmFsdWUiLCJoYW5kbGVycyIsIl9idXR0b25SZWYkY3VycmVudDIiLCJfaGFuZGxlcnMkb25Nb3VzZURvd24iLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsIlNsb3RCdXR0b24iLCJsYWJlbElkIiwiU2xvdExpc3Rib3giLCJQb3BwZXJVbnN0eWxlZCIsImdldFNsb3RPd25lclN0YXRlIiwiZGlzYWJsZUNvbG9ySW52ZXJzaW9uIiwiU2xvdEluZGljYXRvciIsImluZGljYXRvclByb3BzIiwiY29udGV4dCIsIl9saXN0Ym94UHJvcHMkb3duZXJTdCIsImdldFNoZWV0VXRpbGl0eUNsYXNzIiwiU2hlZXRSb290IiwiY2hpbGRSYWRpdXMiLCJiZ2NvbG9yIiwicmVzb2x2ZWRCZyIsIlNoZWV0IiwiY3JlYXRlVGhlbWUiLCJkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50IiwidXNlVGhlbWVQcm9wc0RlZmF1bHQiLCJqb2luQ2hpbGRyZW4iLCJzZXBhcmF0b3IiLCJjaGlsZHJlbkFycmF5IiwiYnJlYWtwb2ludHMiLCJwcm9wVmFsdWUiLCJzcGFjaW5nIiwidHJhbnNmb3JtZXIiLCJiYXNlIiwiYnJlYWtwb2ludCIsImRpcmVjdGlvblZhbHVlcyIsInNwYWNpbmdWYWx1ZXMiLCJwcmV2aW91c0RpcmVjdGlvblZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidXNlRmxleEdhcCIsImdhcCIsImRlZXBtZXJnZSIsIlN0YWNrIiwiY3JlYXRlU3R5bGVkQ29tcG9uZW50IiwiY29tcG9uZW50TmFtZSIsIlN0YWNrUm9vdCIsInRoZW1lUHJvcHMiLCJkaXZpZGVyIiwiY3JlYXRlU3RhY2siLCJnZXRTdGFja1V0aWxpdHlDbGFzcyIsImdldFN0eWxlVmFsdWUiLCJwYXJzZUludCIsInZpc2liaWxpdHkiLCJpc0VtcHR5Iiwib3V0ZXJIZWlnaHRTdHlsZSIsIm1heFJvd3MiLCJtaW5Sb3dzIiwic2hhZG93UmVmIiwicmVuZGVycyIsImdldFVwZGF0ZWRTdGF0ZSIsImNvbXB1dGVkU3R5bGUiLCJvd25lcldpbmRvdyIsImlucHV0U2hhbGxvdyIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nVG9wIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImlubmVySGVpZ2h0Iiwic2luZ2xlUm93SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ1cGRhdGVTdGF0ZSIsInByZXZTdGF0ZSIsInN5bmNIZWlnaHQiLCJoYW5kbGVSZXNpemUiLCJkZWJvdW5jZSIsInN5bmNIZWlnaHRXaXRoRmx1c2hTeWNuIiwicmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXJXaW5kb3ciLCJSZXNpemVPYnNlcnZlciIsIm9ic2VydmUiLCJjbGVhciIsImRpc2Nvbm5lY3QiLCJyb3dzIiwiZ2V0VGV4dGFyZWFVdGlsaXR5Q2xhc3MiLCJUZXh0YXJlYVJvb3QiLCJUZXh0YXJlYUlucHV0IiwidGV4dGFyZWEiLCJXZWJraXRCYWNrZ3JvdW5kQ2xpcCIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJUZXh0YXJlYVN0YXJ0RGVjb3JhdG9yIiwiVGV4dGFyZWFFbmREZWNvcmF0b3IiLCJTbG90VGV4dGFyZWEiLCJ0ZXh0YXJlYVByb3BzIiwiZ2V0VG9vbHRpcFV0aWxpdHlDbGFzcyIsIlRvb2x0aXBSb290IiwiX293bmVyU3RhdGUkcGxhY2VtZW50IiwiX293bmVyU3RhdGUkcGxhY2VtZW50MiIsInhzIiwidG9vbHRpcCIsIndvcmRXcmFwIiwiZGlzYWJsZUludGVyYWN0aXZlIiwiVG9vbHRpcEFycm93IiwiX3ZhcmlhbnRTdHlsZSRiYWNrZ3JvMiIsImJvcmRlckxlZnRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQ29sb3IiLCJoeXN0ZXJzaXNPcGVuIiwiaHlzdGVyc2lzVGltZXIiLCJjdXJzb3JQb3NpdGlvbiIsImNvbXBvc2VNb3VzZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImNvbXBvc2VGb2N1c0V2ZW50SGFuZGxlciIsIlRvb2x0aXAiLCJkZXNjcmliZUNoaWxkIiwiZGlzYWJsZUZvY3VzTGlzdGVuZXIiLCJkaXNhYmxlSG92ZXJMaXN0ZW5lciIsImRpc2FibGVJbnRlcmFjdGl2ZVByb3AiLCJkaXNhYmxlVG91Y2hMaXN0ZW5lciIsImVudGVyRGVsYXkiLCJlbnRlck5leHREZWxheSIsImVudGVyVG91Y2hEZWxheSIsImZvbGxvd0N1cnNvciIsImxlYXZlRGVsYXkiLCJsZWF2ZVRvdWNoRGVsYXkiLCJvbk9wZW4iLCJvcGVuUHJvcCIsInRpdGxlIiwiY2hpbGROb2RlIiwic2V0Q2hpbGROb2RlIiwiYXJyb3dSZWYiLCJzZXRBcnJvd1JlZiIsImlnbm9yZU5vblRvdWNoRXZlbnRzIiwiY2xvc2VUaW1lciIsImVudGVyVGltZXIiLCJsZWF2ZVRpbWVyIiwidG91Y2hUaW1lciIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsInByZXZVc2VyU2VsZWN0Iiwic3RvcFRvdWNoSW50ZXJhY3Rpb24iLCJXZWJraXRVc2VyU2VsZWN0IiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlT3BlbiIsImhhbmRsZUNsb3NlIiwidXNlRXZlbnRDYWxsYmFjayIsInNldFRpbWVvdXQiLCJoYW5kbGVFbnRlciIsImhhbmRsZUxlYXZlIiwidXNlSXNGb2N1c1Zpc2libGUiLCJzZXRDaGlsZElzRm9jdXNWaXNpYmxlIiwiZGV0ZWN0VG91Y2hTdGFydCIsImNoaWxkcmVuUHJvcHMiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZUxlYXZlIiwibmF0aXZlRXZlbnQiLCJoYW5kbGVVc2VSZWYiLCJoYW5kbGVGb2N1c1JlZiIsIm5hbWVPckRlc2NQcm9wcyIsInRpdGxlSXNTdHJpbmciLCJleGNsdWRlU2xvdHNBbmRTbG90UHJvcHMiLCJvbk1vdXNlTW92ZSIsImNsaWVudFgiLCJjbGllbnRZIiwiaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzIiwib25Ub3VjaEVuZCIsInRvdWNoIiwiU2xvdEFycm93IiwiYXJyb3dQcm9wcyIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJUeXBvZ3JhcGh5TmVzdGVkQ29udGV4dCIsIlR5cG9ncmFwaHlJbmhlcml0Q29udGV4dCIsIlN0YXJ0RGVjb3JhdG9yIiwiX293bmVyU3RhdGUkc3giLCJzeCIsIm1hcmdpblRvcCIsIkVuZERlY29yYXRvciIsIl9vd25lclN0YXRlJHN4MiIsIlR5cG9ncmFwaHlSb290IiwiX3RoZW1lJHR5cG9ncmFwaHkkb3duIiwiX3RoZW1lJHR5cG9ncmFwaHkkb3duMiIsIl90aGVtZSR2YXJzJHBhbGV0dGUkbyIsIl90aGVtZSR2YXJpYW50cyRvd25lciIsInZlcnRpY2FsQWxpZ24iLCJub1dyYXAiLCJndXR0ZXJCb3R0b20iLCJtYXJnaW5Cb3R0b20iLCJtYWluQ2hhbm5lbCIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImRpc3BsYXkxIiwiZGlzcGxheTIiLCJib2R5MSIsImJvZHkyIiwiYm9keTMiLCJib2R5NCIsImJvZHk1IiwiaW5oZXJpdCIsIl91c2VUaGVtZVByb3BzIiwidGV4dENvbG9yIiwiaW5oZXJpdGluZyIsImNvbXBvbmVudFByb3AiLCJsZXZlbFByb3AiLCJsZXZlbE1hcHBpbmciLCJnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIiwidXNlQ29sb3JJbnZlcnNpb24iLCJjaGlsZFZhcmlhbnQiLCJvdmVycmlhYmxlVmFyaWFudHMiLCJpbnN0YW5jZUNvbG9yUHJvcCIsImRlZmF1bHRDb2xvclByb3AiLCJDb2xvckludmVyc2lvblByb3ZpZGVyIiwiY29sb3JJbnZlcnNpb25Db25maWciLCJhc3NpZ25OZXN0ZWRLZXlzIiwiYXJyYXlLZXlzIiwidGVtcCIsImdldENzc1ZhbHVlIiwiY3NzVmFyc1BhcnNlciIsInByZWZpeCIsInNob3VsZFNraXBHZW5lcmF0aW5nVmFyIiwidmFyc1dpdGhEZWZhdWx0cyIsImNzc1ZhciIsInNob3VsZFNraXBQYXRocyIsInJlY3Vyc2UiLCJwYXJlbnRLZXlzIiwicGFyc2VyQ29uZmlnIiwib3RoZXJUaGVtZSIsInJvb3RWYXJzIiwicm9vdENzcyIsInJvb3RWYXJzV2l0aERlZmF1bHRzIiwidGhlbWVWYXJzIiwiY29sb3JTY2hlbWVzTWFwIiwibGlnaHQiLCJvdGhlckNvbG9yU2NoZW1lcyIsImdlbmVyYXRlQ3NzVmFycyIsInRoZW1lS2V5IiwibGV0dGVyU3BhY2luZyIsImdyZXkiLCJibHVlIiwieWVsbG93IiwicmVkIiwiZ3JlZW4iLCJwdXJwbGUiLCJjc3NWYXJQcmVmaXgiLCJleHRlbmRUaGVtZSIsInRoZW1lT3B0aW9ucyIsIl9zY2FsZXNJbnB1dCRmb2N1cyR0aCIsIl9zY2FsZXNJbnB1dCRmb2N1cyIsIl9zY2FsZXNJbnB1dCRmb2N1cyR0aDIiLCJfc2NhbGVzSW5wdXQkZm9jdXMyIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDMiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g0IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDYiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g3IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoOCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDkiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gxMCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDExIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMTIiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gxMyIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDE0IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMTUiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gxNiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDE3IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMTgiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gxOSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDIwIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMjEiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gyMiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDIzIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMjQiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gyNSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDI2IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMjciLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gyOCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDI5IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMzAiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gzMSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDMyIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMzMiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gzNCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDM1IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMzYiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2gzNyIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDM4IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoMzkiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g0MCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDQxIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNDIiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g0MyIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDQ0IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNDUiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g0NiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDQ3IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNDgiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g0OSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDUwIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNTEiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g1MiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDUzIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNTQiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g1NSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDU2IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNTciLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g1OCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDU5IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNjAiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g2MSIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDYyIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNjMiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g2NCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDY1IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNjYiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g2NyIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDY4IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNjkiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g3MCIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDcxIiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNzIiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g3MyIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDc0IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNzUiLCJfc2NhbGVzSW5wdXQkY29sb3JTY2g3NiIsIl9zY2FsZXNJbnB1dCRjb2xvclNjaDc3IiwiX3NjYWxlc0lucHV0JGNvbG9yU2NoNzgiLCJjb21wb25lbnRzSW5wdXQiLCJ2YXJpYW50c0lucHV0IiwiY29sb3JJbnZlcnNpb25JbnB1dCIsInNjYWxlc0lucHV0IiwiZ2V0Q3NzVmFyIiwiZGVmYXVsdENvbG9ycyIsIm5ldXRyYWwiLCJkYW5nZXIiLCJpbmZvIiwic3VjY2VzcyIsIndhcm5pbmciLCJibGFjayIsImdldENzc1ZhckNvbG9yIiwiX2RlZmF1bHRDb2xvcnMkY29sb3IiLCJ0b2tlbnMiLCJjcmVhdGVMaWdodE1vZGVWYXJpYW50VmFyaWFibGVzIiwicGxhaW5Ib3ZlckJnIiwicGxhaW5BY3RpdmVCZyIsInBsYWluRGlzYWJsZWRDb2xvciIsIm91dGxpbmVkQ29sb3IiLCJvdXRsaW5lZEJvcmRlciIsIm91dGxpbmVkSG92ZXJCZyIsIm91dGxpbmVkSG92ZXJCb3JkZXIiLCJvdXRsaW5lZEFjdGl2ZUJnIiwib3V0bGluZWREaXNhYmxlZENvbG9yIiwib3V0bGluZWREaXNhYmxlZEJvcmRlciIsInNvZnRDb2xvciIsInNvZnRCZyIsInNvZnRIb3ZlckJnIiwic29mdEFjdGl2ZUJnIiwic29mdERpc2FibGVkQ29sb3IiLCJzb2Z0RGlzYWJsZWRCZyIsInNvbGlkQ29sb3IiLCJzb2xpZEJnIiwic29saWRIb3ZlckJnIiwic29saWRBY3RpdmVCZyIsInNvbGlkRGlzYWJsZWRDb2xvciIsInNvbGlkRGlzYWJsZWRCZyIsImNyZWF0ZURhcmtNb2RlVmFyaWFudFZhcmlhYmxlcyIsImxpZ2h0Q29sb3JTeXN0ZW0iLCJwbGFpbkhvdmVyQ29sb3IiLCJvdXRsaW5lZEhvdmVyQ29sb3IiLCJzb2Z0SG92ZXJDb2xvciIsInNlY29uZGFyeSIsImxldmVsMSIsImxldmVsMiIsImxldmVsMyIsInNoYWRvd1JpbmciLCJzaGFkb3dDaGFubmVsIiwiZGFya0NvbG9yU3lzdGVtIiwiZm9udEZhbWlseUZhbGxiYWNrIiwiY29kZSIsImZhbGxiYWNrIiwieGwiLCJ4bDIiLCJ4bDMiLCJ4czMiLCJ4czIiLCJ4bDQiLCJ4bDUiLCJ4bDYiLCJ4bDciLCJkZWZhdWx0U2NhbGVzIiwiZGFyayIsIm91dGxpbmVPZmZzZXQiLCJiYWRnZSIsInRhYmxlIiwibW9kYWwiLCJtZXJnZWRTY2FsZXMiLCJjcmVhdGVCcmVha3BvaW50cyIsIk11aVN2Z0ljb24iLCJzdHlsZU92ZXJyaWRlcyIsInRoZW1lUHJvcCIsIl90aGVtZVByb3AkdmFycyRwYWxldCIsImNyZWF0ZVNwYWNpbmciLCJzb2Z0Iiwic29saWQiLCJzdXBwb3J0ZWRDb2xvclNjaGVtZSIsImNvbG9yU3lzdGVtIiwiY2hhbm5lbE1hcHBpbmciLCJtYWluIiwibGlnaHRDaGFubmVsIiwiZGFya0NoYW5uZWwiLCJhdHRhY2hDb2xvckNoYW5uZWxzIiwidW5zdGFibGVfc3hDb25maWciLCJ1bnN0YWJsZV9zeCIsImNyZWF0ZVZhcmlhbnRJbnB1dCIsInBsYWluSG92ZXIiLCJwbGFpbkFjdGl2ZSIsInBsYWluRGlzYWJsZWQiLCJvdXRsaW5lZCIsIm91dGxpbmVkSG92ZXIiLCJvdXRsaW5lZEFjdGl2ZSIsIm91dGxpbmVkRGlzYWJsZWQiLCJzb2Z0SG92ZXIiLCJzb2Z0QWN0aXZlIiwic29mdERpc2FibGVkIiwic29saWRIb3ZlciIsInNvbGlkQWN0aXZlIiwic29saWREaXNhYmxlZCIsImNsb25lIiwiU3ltYm9sIiwiZm9yIiwibG9jYWxUaGVtZSIsIm91dGVyVGhlbWUiLCJtZXJnZU91dGVyTG9jYWxUaGVtZSIsIkVNUFRZX1RIRU1FIiwiSW5uZXJUaGVtZVByb3ZpZGVyIiwiREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZIiwiREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVkiLCJERUZBVUxUX0FUVFJJQlVURSIsImdldFN5c3RlbU1vZGUiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInByb2Nlc3NTdGF0ZSIsInN5c3RlbU1vZGUiLCJpbml0aWFsaXplVmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIkNzc1ZhcnNQcm92aWRlciIsInVzZUNvbG9yU2NoZW1lIiwiZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0IiwiZGVmYXVsdEF0dHJpYnV0ZSIsIm1vZGVTdG9yYWdlS2V5IiwiZGVmYXVsdE1vZGVTdG9yYWdlS2V5IiwiY29sb3JTY2hlbWVTdG9yYWdlS2V5IiwiZGVmYXVsdENvbG9yU2NoZW1lU3RvcmFnZUtleSIsImRlZmF1bHRNb2RlIiwiZGVzaWduU3lzdGVtTW9kZSIsImRlZmF1bHRDb2xvclNjaGVtZSIsImRlc2lnblN5c3RlbUNvbG9yU2NoZW1lIiwiZGlzYWJsZVRyYW5zaXRpb25PbkNoYW5nZSIsImRlc2lnblN5c3RlbVRyYW5zaXRpb25PbkNoYW5nZSIsInJlc29sdmVUaGVtZSIsImV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdCIsImNvbnNvbGUiLCJDb2xvclNjaGVtZUNvbnRleHQiLCJkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSIsImRlZmF1bHREYXJrQ29sb3JTY2hlbWUiLCJzdG9yYWdlV2luZG93IiwiZG9jdW1lbnROb2RlIiwiY29sb3JTY2hlbWVOb2RlIiwiY29sb3JTY2hlbWVTZWxlY3RvciIsImRpc2FibGVOZXN0ZWRDb250ZXh0IiwiZGlzYWJsZVN0eWxlU2hlZXRHZW5lcmF0aW9uIiwiaGFzTW91bnRlZCIsInVwcGVyVGhlbWUiLCJjdHgiLCJyZXN0VGhlbWVQcm9wIiwiYWxsQ29sb3JTY2hlbWVzIiwic3RhdGVNb2RlIiwic2V0TW9kZSIsImxpZ2h0Q29sb3JTY2hlbWUiLCJkYXJrQ29sb3JTY2hlbWUiLCJzdGF0ZUNvbG9yU2NoZW1lIiwic2V0Q29sb3JTY2hlbWUiLCJzdXBwb3J0ZWRDb2xvclNjaGVtZXMiLCJqb2luZWRDb2xvclNjaGVtZXMiLCJpbml0aWFsTW9kZSIsImdldENvbG9yU2NoZW1lIiwiY3VycmVudFN0YXRlIiwibmV3TW9kZSIsIm5ld0xpZ2h0Q29sb3JTY2hlbWUiLCJuZXdEYXJrQ29sb3JTY2hlbWUiLCJoYW5kbGVNZWRpYVF1ZXJ5IiwibWVkaWFMaXN0ZW5lciIsIm1lZGlhIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImhhbmRsZVN0b3JhZ2UiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJ1c2VDdXJyZW50Q29sb3JTY2hlbWUiLCJjYWxjdWxhdGVkQ29sb3JTY2hlbWUiLCJ0YXJnZXRDb2xvclNjaGVtZSIsImRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXQiLCJvdGhlckNvbG9yU2NoZW1lc1N0eWxlU2hlZXQiLCJzY2hlbWVLZXkiLCJleGNsdWRlZFZhcmlhYmxlcyIsInRpbWVyIiwic2hvdWxkR2VuZXJhdGVTdHlsZVNoZWV0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjcmVhdGVDc3NWYXJzUHJvdmlkZXIiLCJtZXJnZWRUaGVtZSIsInRoZW1lSW5wdXQiLCJTdHlsZWRFbmdpbmVQcm92aWRlciIsImluamVjdEZpcnN0IiwiQyIsIl9rZXlzJCIsInJlc29sdmVTeFZhbHVlIiwicGFyc2VkVmFsdWUiLCJzeE9iamVjdCIsInJlc29sdmVTeCIsInN4UHJvcCIsInN4SXRlbSIsIl90aGVtZSR2YXJzIiwiaXNWYXJpYW50UGFsZXR0ZSIsImNvbG9yUGFsZXR0ZSIsIl92YWx1ZSRtYXRjaCIsImNyZWF0ZVZhcmlhbnRTdHlsZSIsInZhcmlhbnRWYXIiLCJSZWdFeHAiLCJhc3NpZ25Dc3MiLCJjcmVhdGVQcmVmaXhWYXIiLCJjcmVhdGVWYXJpYW50IiwiZW50cnkiLCJzb2xpZEhvdmVyQ29sb3IiLCJjcmVhdGVTb2Z0SW52ZXJzaW9uIiwiYWRkRGVmYXVsdFZhbHVlcyIsImdldENzc1ZhckRlZmF1bHQiLCJwcmVmaXhWYXIiLCJfdGhlbWUkcGFsZXR0ZSIsIl90aGVtZSRwYWxldHRlJGNvbG9yIiwiY3JlYXRlU29saWRJbnZlcnNpb24iLCJfZXhjbHVkZWQzIiwiX2V4Y2x1ZGVkNCIsImluaXRpYWxFbGVtZW50VHlwZSIsInVzZVNsb3RQcm9wc1BhcmFtcyIsInJvb3RDb21wb25lbnQiLCJfbWVyZ2VTbG90UHJvcHMiLCJzbG90Q29tcG9uZW50Iiwic2xvdE93bmVyU3RhdGUiLCJmaW5hbE93bmVyU3RhdGUiLCJfY29sb3IiLCJMZWFmQ29tcG9uZW50IiwicHJvcE5hbWUiLCJmdW5jcyIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJwYXBlciIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXNPcGFjaXR5IiwiYWN0aXZhdGVkT3BhY2l0eSIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodFJlZ3VsYXIiLCJmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodEJvbGQiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0iLCJweFRvUmVtMiIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJjYXNpbmciLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJjYXB0aW9uIiwib3ZlcmxpbmUiLCJjcmVhdGVTaGFkb3ciLCJweCIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsInNuYWNrYmFyIiwibWl4aW5zIiwibWl4aW5zSW5wdXQiLCJwYWxldHRlSW5wdXQiLCJ0cmFuc2l0aW9ucyIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsImdldERlZmF1bHRFcnJvciIsImdldERlZmF1bHRJbmZvIiwiZ2V0RGVmYXVsdFN1Y2Nlc3MiLCJnZXREZWZhdWx0V2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJjb250cmFzdFRleHQiLCJtb2RlcyIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsIm11aVRoZW1lIiwidG9vbGJhciIsInVwIiwic2hhZG93cyIsImFyZ3VtZW50IiwiZGVmYXVsdFN4Q29uZmlnIiwiY3JlYXRlU3R5bGVkIiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwiX3RoZW1lJHRyYW5zaXRpb25zIiwiX3RoZW1lJHRyYW5zaXRpb25zJGNyIiwiX3RoZW1lJHRyYW5zaXRpb25zMiIsIl90aGVtZSR0cmFuc2l0aW9uczIkZCIsIl90aGVtZSR0eXBvZ3JhcGh5IiwiX3RoZW1lJHR5cG9ncmFwaHkkcHhUIiwiX3RoZW1lJHR5cG9ncmFwaHkyIiwiX3RoZW1lJHR5cG9ncmFwaHkyJHB4IiwiX3RoZW1lJHR5cG9ncmFwaHkzIiwiX3RoZW1lJHR5cG9ncmFwaHkzJHB4IiwiX3BhbGV0dGUkb3duZXJTdGF0ZSRjIiwiX3BhbGV0dGUiLCJfcGFsZXR0ZSRvd25lclN0YXRlJGMyIiwiX3BhbGV0dGUyIiwiX3BhbGV0dGUyJGFjdGlvbiIsIl9wYWxldHRlMyIsIl9wYWxldHRlMyRhY3Rpb24iLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwibW9yZSIsInZhbGlkYXRvciIsInJlYXNvbiIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJ1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJnbG9iYWxTdHlsZXMiLCJyZWFjdFByb3BzUmVnZXgiLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwib3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wIiwiX19lbW90aW9uX2ZvcndhcmRQcm9wIiwiSW5zZXJ0aW9uIiwibmV3U3R5bGVkIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJGcmFnbWVudCIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIiwicHJvY2Vzc29yIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwiaGFuZGxlQnJlYWtwb2ludHMiLCJ0aGVtZUJyZWFrcG9pbnRzIiwiY3NzS2V5IiwiY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0IiwiYnJlYWtwb2ludHNJbnB1dCIsIl9icmVha3BvaW50c0lucHV0JGtleSIsInJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludEtleXMiLCJicmVha3BvaW50T3V0cHV0IiwibWVyZ2VCcmVha3BvaW50c0luT3JkZXIiLCJlbXB0eUJyZWFrcG9pbnRzIiwibWVyZ2VkT3V0cHV0IiwicmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMiLCJicmVha3BvaW50VmFsdWVzIiwiY3VzdG9tQmFzZSIsImJyZWFrcG9pbnRzS2V5cyIsImNvbXB1dGVCcmVha3BvaW50c0Jhc2UiLCJjbGFtcCIsImRlY29tcG9zZUNvbG9yIiwiY2hhckF0IiwicmUiLCJjb2xvcnMiLCJuIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJjb2xvclNwYWNlIiwic2hpZnQiLCJwYXJzZUZsb2F0IiwiY29sb3JDaGFubmVsIiwiZGVjb21wb3NlZENvbG9yIiwidmFsIiwiaWR4IiwicmVjb21wb3NlQ29sb3IiLCJnZXRMdW1pbmFuY2UiLCJyZ2IiLCJzIiwibCIsImYiLCJoc2xUb1JnYiIsInRvRml4ZWQiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwicHJvcHNUb0NsYXNzS2V5IiwiY2xhc3NLZXkiLCJnZXRTdHlsZU92ZXJyaWRlcyIsImdldFZhcmlhbnRTdHlsZXMiLCJ2YXJpYW50c1N0eWxlcyIsImRlZmluaXRpb24iLCJ2YXJpYW50c1Jlc29sdmVyIiwiX3RoZW1lJGNvbXBvbmVudHMiLCJfdGhlbWUkY29tcG9uZW50cyRuYW0iLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50IiwiaXNNYXRjaCIsInN5c3RlbURlZmF1bHRUaGVtZSIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJjb21wb25lbnRTbG90Iiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIiwic2tpcFN4IiwiaW5wdXRTa2lwU3giLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJyZXNvbHZlZFN0eWxlT3ZlcnJpZGVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsIndpdGhDb25maWciLCJzb3J0QnJlYWtwb2ludHNWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwidW5pdCIsInN0ZXAiLCJzb3J0ZWRWYWx1ZXMiLCJkb3duIiwiYmV0d2VlbiIsImVuZEluZGV4Iiwib25seSIsIm5vdCIsImtleUluZGV4Iiwic3BhY2luZ0lucHV0IiwibXVpIiwiYXJnc0lucHV0Iiwic2hhcGUiLCJzaGFwZUlucHV0IiwiY3JlYXRlR2V0Q3NzVmFyIiwiYXBwZW5kVmFyIiwiZmllbGQiLCJmYWxsYmFja3MiLCJwcm9wZXJ0aWVzIiwicCIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpciIsIm1lbW9pemUiLCJtYXJnaW5LZXlzIiwicGFkZGluZ0tleXMiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsIl9nZXRQYXRoIiwidGhlbWVTcGFjaW5nIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwiZ2V0VmFsdWUiLCJ0cmFuc2Zvcm1lZCIsImNzc1Byb3BlcnRpZXMiLCJjc3NQcm9wZXJ0eSIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsInJlc29sdmVDc3NQcm9wZXJ0eSIsIm1lcmdlIiwicHJvcFR5cGVzIiwiZmlsdGVyUHJvcHMiLCJnZXRQYXRoIiwiY2hlY2tWYXJzIiwidGhlbWVNYXBwaW5nIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJib3JkZXJUcmFuc2Zvcm0iLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJjb2x1bW5HYXAiLCJyb3dHYXAiLCJwYWxldHRlVHJhbnNmb3JtIiwic2l6aW5nVHJhbnNmb3JtIiwibWF4V2lkdGgiLCJfcHJvcHMkdGhlbWUiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kyIiwicHQiLCJwciIsInBiIiwicGwiLCJweSIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibWIiLCJtbCIsIm14IiwibXkiLCJkaXNwbGF5UHJpbnQiLCJhbGlnbkNvbnRlbnQiLCJqdXN0aWZ5SXRlbXMiLCJqdXN0aWZ5U2VsZiIsImdyaWRBdXRvRmxvdyIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJncmlkQXJlYSIsInNwbGl0UHJvcHMiLCJfcHJvcHMkdGhlbWUkdW5zdGFibGUiLCJzeXN0ZW1Qcm9wcyIsImNvbmZpZyIsImluU3giLCJmaW5hbFN4IiwiZ2V0VGhlbWVWYWx1ZSIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInRyYXZlcnNlIiwic3hJbnB1dCIsInN0eWxlS2V5IiwibWF5YmVGbiIsImJyZWFrcG9pbnRzVmFsdWVzIiwib2JqZWN0cyIsImFsbEtleXMiLCJ1bmlvbiIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJ1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3giLCJjb250ZXh0VGhlbWUiLCJ1c2VUaGVtZVdpdGhvdXREZWZhdWx0IiwicmVzb2x2ZVByb3BzIiwiZGVmYXVsdFNsb3RQcm9wcyIsInNsb3RQcm9wTmFtZSIsImdldFRoZW1lUHJvcHMiLCJkZWZhdWx0R2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IiLCJ0b1VwcGVyQ2FzZSIsImdldFV0aWxpdHlDbGFzcyIsInV0aWxpdHlDbGFzcyIsIndhaXQiLCJ0aW1lb3V0IiwiZGVib3VuY2VkIiwiaXNQbGFpbk9iamVjdCIsImRlZXBDbG9uZSIsInNvdXJjZSIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJjaGVja2VkIiwiY29tcGxldGVkIiwiZXhwYW5kZWQiLCJnbG9iYWxTdGF0ZVByZWZpeCIsImdsb2JhbFN0YXRlQ2xhc3MiLCJtdWlOYW1lcyIsImRlZmF1bHRQcm9wIiwidmFsdWVTdGF0ZSIsInNldFZhbHVlIiwicmVmcyIsImdsb2JhbElkIiwibWF5YmVSZWFjdFVzZUlkIiwiaWRPdmVycmlkZSIsInJlYWN0SWQiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJ1c2VHbG9iYWxJZCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiZG9jIiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibmVlZExheWVyIiwibW9kdWxlcyIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwic291cmNlTWFwcGluZyIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImFhIiwiY2EiLCJjIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJsYSIsIm1hIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicmEiLCJzYSIsInRhIiwicGEiLCJpc05hTiIsInFhIiwib2EiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiaXRlcmF0b3IiLCJLYSIsIkxhIiwiQSIsIk1hIiwic3RhY2siLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUGEiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uZmlndXJhYmxlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsIlhhIiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZGVmYXVsdFNlbGVjdGVkIiwiZ2IiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJhc3BlY3RSYXRpbyIsImxpbmVDbGFtcCIsInFiIiwicmIiLCJzYiIsInNldFByb3BlcnR5IiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsInNpYmxpbmciLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwicG9pbnRlcklkIiwiVGMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJVYyIsImpkIiwia2QiLCJsZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwicmFuZ2UiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsImxpc3RlbmVyIiwiRCIsIm9mIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsIkoiLCJ1IiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwibWVtb2l6ZWRWYWx1ZSIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJxIiwiaGgiLCJpaCIsImpoIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsInVwZGF0ZXIiLCJxaCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInJoIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJkb25lIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIk4iLCJPIiwiUCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsIm1lc3NhZ2UiLCJkaWdlc3QiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIlMiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ3bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZGwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJBY3Rpb24iLCJfZXh0ZW5kcyIsIlBvcFN0YXRlRXZlbnRUeXBlIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsImluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEluZGV4IiwidjVDb21wYXQiLCJjcmVhdGVNZW1vcnlMb2NhdGlvbiIsImNsYW1wSW5kZXgiLCJQb3AiLCJnZXRDdXJyZW50TG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsInBhdGhuYW1lIiwiY3JlYXRlSHJlZiIsImNyZWF0ZVBhdGgiLCJjcmVhdGVVUkwiLCJVUkwiLCJlbmNvZGVMb2NhdGlvbiIsInBhcnNlUGF0aCIsIlB1c2giLCJuZXh0TG9jYXRpb24iLCJkZWx0YSIsIlJlcGxhY2UiLCJnbyIsImxpc3RlbiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsInVzciIsImNyZWF0ZUhhc2hIaXN0b3J5Iiwic3Vic3RyIiwiaGFzaEluZGV4IiwiaW52YXJpYW50IiwiY29uZCIsIndhcm4iLCJnZXRIaXN0b3J5U3RhdGUiLCJwYXJzZWRQYXRoIiwic2VhcmNoSW5kZXgiLCJnZXRMb2NhdGlvbiIsInZhbGlkYXRlTG9jYXRpb24iLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJvcmlnaW4iLCJyZXBsYWNlU3RhdGUiLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJSZXN1bHRUeXBlIiwiaW1tdXRhYmxlUm91dGVLZXlzIiwiY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyIsInJvdXRlcyIsImRldGVjdEVycm9yQm91bmRhcnkiLCJwYXJlbnRQYXRoIiwibWFuaWZlc3QiLCJyb3V0ZSIsInRyZWVQYXRoIiwiaXNJbmRleFJvdXRlIiwiaW5kZXhSb3V0ZSIsImhhc0Vycm9yQm91bmRhcnkiLCJwYXRoT3JMYXlvdXRSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsImZsYXR0ZW5Sb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJqb2luUGF0aHMiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwiaXNPcHRpb25hbCIsInJlc3RFeHBsb2RlZCIsInN1YnBhdGgiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsImdlbmVyYXRlUGF0aCIsIm9yaWdpbmFsUGF0aCIsImtleU1hdGNoIiwib3B0aW9uYWwiLCJtYXRjaGVyIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsIm1lbW8iLCJzcGxhdFZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwicmVzb2x2ZVBhdGgiLCJmcm9tUGF0aG5hbWUiLCJ0b1BhdGhuYW1lIiwicG9wIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsImdldEludmFsaWRQYXRoRXJyb3IiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJyZXNvbHZlVG8iLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiZnJvbSIsImlzRW1wdHlQYXRoIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicGF0aHMiLCJqc29uIiwiaW5pdCIsInJlc3BvbnNlSW5pdCIsInN0YXR1cyIsImhlYWRlcnMiLCJIZWFkZXJzIiwiUmVzcG9uc2UiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkRlZmVycmVkRGF0YSIsInJlamVjdCIsInBlbmRpbmdLZXlzU2V0Iiwic3Vic2NyaWJlcnMiLCJkZWZlcnJlZEtleXMiLCJhYm9ydFByb21pc2UiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwib25BYm9ydCIsInVubGlzdGVuQWJvcnRTaWduYWwiLCJzaWduYWwiLCJ0cmFja1Byb21pc2UiLCJwcm9taXNlIiwicmFjZSIsIm9uU2V0dGxlIiwiYWJvcnRlZCIsImVtaXQiLCJzZXR0bGVkS2V5Iiwic3Vic2NyaWJlciIsImNhbmNlbCIsImFib3J0IiwiYXN5bmMiLCJ1bndyYXBwZWREYXRhIiwidW53cmFwVHJhY2tlZFByb21pc2UiLCJwZW5kaW5nS2V5cyIsIl90cmFja2VkIiwiaXNUcmFja2VkUHJvbWlzZSIsIl9lcnJvciIsIl9kYXRhIiwiZGVmZXIiLCJyZWRpcmVjdCIsIkVycm9yUmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiaW50ZXJuYWwiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsInZhbGlkTXV0YXRpb25NZXRob2RzQXJyIiwidmFsaWRNdXRhdGlvbk1ldGhvZHMiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwidmFsaWRSZXF1ZXN0TWV0aG9kcyIsInJlZGlyZWN0U3RhdHVzQ29kZXMiLCJyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMiLCJJRExFX05BVklHQVRJT04iLCJmb3JtTWV0aG9kIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybURhdGEiLCJJRExFX0ZFVENIRVIiLCJJRExFX0JMT0NLRVIiLCJwcm9jZWVkIiwiQUJTT0xVVEVfVVJMX1JFR0VYIiwiaXNCcm93c2VyIiwiaXNTZXJ2ZXIiLCJkZWZhdWx0RGV0ZWN0RXJyb3JCb3VuZGFyeSIsImNyZWF0ZVJvdXRlciIsImluRmxpZ2h0RGF0YVJvdXRlcyIsImRhdGFSb3V0ZXMiLCJmdXR1cmUiLCJ2N19ub3JtYWxpemVGb3JtTWV0aG9kIiwidW5saXN0ZW5IaXN0b3J5Iiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaHlkcmF0aW9uRGF0YSIsImluaXRpYWxNYXRjaGVzIiwiaW5pdGlhbEVycm9ycyIsImdldEludGVybmFsUm91dGVyRXJyb3IiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwicm91dGVyIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwiaW5pdGlhbGl6ZWQiLCJsYXp5IiwibG9hZGVyIiwiaGlzdG9yeUFjdGlvbiIsIm5hdmlnYXRpb24iLCJyZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJyZXZhbGlkYXRpb24iLCJsb2FkZXJEYXRhIiwiYWN0aW9uRGF0YSIsImVycm9ycyIsImZldGNoZXJzIiwiYmxvY2tlcnMiLCJwZW5kaW5nQWN0aW9uIiwicGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCIsImlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiIsImlzUmV2YWxpZGF0aW9uUmVxdWlyZWQiLCJjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyIsImNhbmNlbGxlZEZldGNoZXJMb2FkcyIsImZldGNoQ29udHJvbGxlcnMiLCJpbmNyZW1lbnRpbmdMb2FkSWQiLCJwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCIsImZldGNoUmVsb2FkSWRzIiwiZmV0Y2hSZWRpcmVjdElkcyIsImZldGNoTG9hZE1hdGNoZXMiLCJhY3RpdmVEZWZlcnJlZHMiLCJibG9ja2VyRnVuY3Rpb25zIiwiaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUiLCJjb21wbGV0ZU5hdmlnYXRpb24iLCJfbG9jYXRpb24kc3RhdGUiLCJfbG9jYXRpb24kc3RhdGUyIiwiaXNBY3Rpb25SZWxvYWQiLCJpc011dGF0aW9uTWV0aG9kIiwiX2lzUmVkaXJlY3QiLCJtZXJnZUxvYWRlckRhdGEiLCJkZWxldGVCbG9ja2VyIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsInN0YXJ0TmF2aWdhdGlvbiIsIm9wdHMiLCJzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJ1c2VyTWF0Y2hlcyIsImNyZWF0ZVVzZU1hdGNoZXNNYXRjaCIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInJvdXRlc1RvVXNlIiwibG9hZGluZ05hdmlnYXRpb24iLCJvdmVycmlkZU5hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJzdWJtaXNzaW9uIiwicGVuZGluZ0FjdGlvbkRhdGEiLCJwZW5kaW5nRXJyb3IiLCJyZXF1ZXN0IiwiY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QiLCJmaW5kTmVhcmVzdEJvdW5kYXJ5IiwiYWN0aW9uT3V0cHV0IiwiaW50ZXJydXB0QWN0aXZlTG9hZHMiLCJhY3Rpb25NYXRjaCIsImdldFRhcmdldE1hdGNoIiwiY2FsbExvYWRlck9yQWN0aW9uIiwic2hvcnRDaXJjdWl0ZWQiLCJtZXRob2QiLCJyb3V0ZUlkIiwiaXNSZWRpcmVjdFJlc3VsdCIsInN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uIiwiaXNFcnJvclJlc3VsdCIsImJvdW5kYXJ5TWF0Y2giLCJwZW5kaW5nQWN0aW9uRXJyb3IiLCJpc0RlZmVycmVkUmVzdWx0IiwiaGFuZGxlQWN0aW9uIiwiUmVxdWVzdCIsImZldGNoZXJTdWJtaXNzaW9uIiwiYWN0aXZlU3VibWlzc2lvbiIsIm1hdGNoZXNUb0xvYWQiLCJyZXZhbGlkYXRpbmdGZXRjaGVycyIsImdldE1hdGNoZXNUb0xvYWQiLCJmZXRjaGVyIiwicmV2YWxpZGF0aW5nRmV0Y2hlciIsInJlc3VsdHMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJmaW5kUmVkaXJlY3QiLCJwcm9jZXNzTG9hZGVyRGF0YSIsImRlZmVycmVkRGF0YSIsImRvbmVLZXlzIiwibWFya0ZldGNoZXJzRG9uZSIsIm1hcmtGZXRjaFJlZGlyZWN0c0RvbmUiLCJhYm9ydFN0YWxlRmV0Y2hMb2FkcyIsImhhbmRsZUxvYWRlcnMiLCJnZXRGZXRjaGVyIiwiX3RlbXAiLCJfd2luZG93IiwiaXNGZXRjaEFjdGlvblJlZGlyZWN0IiwicmV2YWxpZGF0ZSIsInJlZGlyZWN0TG9jYXRpb24iLCJfaXNGZXRjaEFjdGlvblJlZGlyZWN0IiwiaXNEaWZmZXJlbnRCYXNlbmFtZSIsInJlZGlyZWN0SGlzdG9yeUFjdGlvbiIsImN1cnJlbnRNYXRjaGVzIiwiZmV0Y2hlcnNUb0xvYWQiLCJhbGwiLCJyZXNvbHZlRGVmZXJyZWRSZXN1bHRzIiwiYWJvcnRGZXRjaGVyIiwic2V0RmV0Y2hlckVycm9yIiwiZGVsZXRlRmV0Y2hlciIsImRvbmVGZXRjaGVyIiwibGFuZGVkSWQiLCJ5ZWV0ZWRLZXlzIiwidXBkYXRlQmxvY2tlciIsIm5ld0Jsb2NrZXIiLCJibG9ja2VyIiwic2hvdWxkQmxvY2tOYXZpZ2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiYmxvY2tlcktleSIsImJsb2NrZXJGdW5jdGlvbiIsInByZWRpY2F0ZSIsImNhbmNlbGxlZFJvdXRlSWRzIiwiZGZkIiwiaW5pdGlhbGl6ZSIsImVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb24iLCJnZXRLZXkiLCJuYXZpZ2F0ZSIsIm5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyIsInVzZXJSZXBsYWNlIiwiZmV0Y2giLCJyZXF1ZXN0TWF0Y2hlcyIsImV4aXN0aW5nRmV0Y2hlciIsImFib3J0Q29udHJvbGxlciIsImZldGNoUmVxdWVzdCIsImFjdGlvblJlc3VsdCIsImxvYWRpbmdGZXRjaGVyIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJkaWRBYm9ydEZldGNoTG9hZHMiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwicmVzb2x2ZURlZmVycmVkRGF0YSIsImhhbmRsZUZldGNoZXJMb2FkZXIiLCJkaXNwb3NlIiwiZ2V0QmxvY2tlciIsIl9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnMiLCJfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHMiLCJfaW50ZXJuYWxTZXRSb3V0ZXMiLCJuZXdSb3V0ZXMiLCJpc0ZldGNoZXIiLCJpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJzZWFyY2hQYXJhbXMiLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImhhc05ha2VkSW5kZXhRdWVyeSIsImFwcGVuZCIsImN1cnJlbnRVcmwiLCJuZXh0VXJsIiwiZGVmYXVsdFNob3VsZFJldmFsaWRhdGUiLCJib3VuZGFyeUlkIiwibmF2aWdhdGlvbk1hdGNoZXMiLCJib3VuZGFyeU1hdGNoZXMiLCJnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeSIsImN1cnJlbnRMb2FkZXJEYXRhIiwiY3VycmVudE1hdGNoIiwiaXNOZXciLCJpc01pc3NpbmdEYXRhIiwiaXNOZXdMb2FkZXIiLCJjdXJyZW50Um91dGVNYXRjaCIsIm5leHRSb3V0ZU1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZUxvYWRlciIsImN1cnJlbnRQYXJhbXMiLCJuZXh0UGFyYW1zIiwiaXNOZXdSb3V0ZUluc3RhbmNlIiwiZmV0Y2hlck1hdGNoZXMiLCJmZXRjaGVyTWF0Y2giLCJjdXJyZW50UGF0aCIsImxvYWRlck1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZSIsInJvdXRlQ2hvaWNlIiwibG9hZExhenlSb3V0ZU1vZHVsZSIsImxhenlSb3V0ZSIsInJvdXRlVG9VcGRhdGUiLCJyb3V0ZVVwZGF0ZXMiLCJsYXp5Um91dGVQcm9wZXJ0eSIsImlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCIsImlzU3RhdGljUmVxdWVzdCIsImlzUm91dGVSZXF1ZXN0IiwicmVxdWVzdENvbnRleHQiLCJyZXN1bHRUeXBlIiwib25SZWplY3QiLCJydW5IYW5kbGVyIiwicHJvdG9jb2wiLCJpc1NhbWVCYXNlbmFtZSIsInJlc29sdmVkTG9jYXRpb24iLCJyZXNwb25zZSIsImNvbnRlbnRUeXBlIiwic3RhdHVzQ29kZSIsIl9yZXN1bHQkaW5pdCIsIl9yZXN1bHQkaW5pdDIiLCJkZWZlcnJlZCIsInJlc29sdmVEYXRhIiwiaXNEZWZlcnJlZERhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJGaWxlIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJwcm9jZXNzUm91dGVMb2FkZXJEYXRhIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJyZXZlcnNlIiwiX3RlbXA0IiwiZXJyb3JNZXNzYWdlIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJ1bndyYXAiLCJnZXRBbGwiLCJoYW5kbGUiLCJwYXRoTWF0Y2hlcyIsIkRhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIkF3YWl0Q29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VIcmVmIiwicmVsYXRpdmUiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VSZXNvbHZlZFBhdGgiLCJqb2luZWRQYXRobmFtZSIsInVzZUxvY2F0aW9uIiwidXNlTmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwidXNlTmF2aWdhdGUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJPdXRsZXRDb250ZXh0IiwidXNlT3V0bGV0Q29udGV4dCIsInVzZU91dGxldCIsInVzZVBhcmFtcyIsInJvdXRlTWF0Y2giLCJfdGVtcDIiLCJ1c2VSb3V0ZXMiLCJkYXRhUm91dGVyU3RhdGVDb250ZXh0IiwicGFyZW50TWF0Y2hlcyIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlbmRlcmVkTWF0Y2hlcyIsIl9yZW5kZXJNYXRjaGVzIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwidXNlUm91dGVFcnJvciIsInByZVN0eWxlcyIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJzdXBlciIsInN0YXRpYyIsImVycm9ySW5mbyIsInJvdXRlQ29udGV4dCIsIlJlbmRlcmVkUm91dGUiLCJkYXRhUm91dGVyQ29udGV4dCIsInN0YXRpY0NvbnRleHQiLCJlcnJvckVsZW1lbnQiLCJFcnJvckJvdW5kYXJ5IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJkYXRhUm91dGVyU3RhdGUiLCJlcnJvckluZGV4IiwicmVkdWNlUmlnaHQiLCJnZXRDaGlsZHJlbiIsIkRhdGFSb3V0ZXJIb29rIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwiaG9va05hbWUiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJ1c2VDdXJyZW50Um91dGVJZCIsInVzZVJvdXRlQ29udGV4dCIsInRoaXNSb3V0ZSIsInVzZU5hdmlnYXRpb24iLCJVc2VOYXZpZ2F0aW9uIiwidXNlUmV2YWxpZGF0b3IiLCJVc2VSZXZhbGlkYXRvciIsInVzZU1hdGNoZXMiLCJVc2VNYXRjaGVzIiwidXNlTG9hZGVyRGF0YSIsIlVzZUxvYWRlckRhdGEiLCJ1c2VSb3V0ZUxvYWRlckRhdGEiLCJVc2VSb3V0ZUxvYWRlckRhdGEiLCJ1c2VBY3Rpb25EYXRhIiwiVXNlQWN0aW9uRGF0YSIsIl9zdGF0ZSRlcnJvcnMiLCJVc2VSb3V0ZUVycm9yIiwidXNlQXN5bmNWYWx1ZSIsInVzZUFzeW5jRXJyb3IiLCJibG9ja2VySWQiLCJ1c2VCbG9ja2VyIiwic2hvdWxkQmxvY2siLCJVc2VCbG9ja2VyIiwiUm91dGVyUHJvdmlkZXIiLCJmYWxsYmFja0VsZW1lbnQiLCJnZXRTdGF0ZSIsIlJvdXRlciIsIlJvdXRlcyIsIk1lbW9yeVJvdXRlciIsImhpc3RvcnlSZWYiLCJOYXZpZ2F0ZSIsIk91dGxldCIsIlJvdXRlIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsIkF3YWl0IiwiX3JlZjYiLCJBd2FpdEVycm9yQm91bmRhcnkiLCJSZXNvbHZlQXdhaXQiLCJBd2FpdFJlbmRlclN0YXR1cyIsIm5ldmVyU2V0dGxlZFByb21pc2UiLCJyZW5kZXJFcnJvciIsIl9yZWY3IiwidG9SZW5kZXIiLCJyZW5kZXJNYXRjaGVzIiwiY3JlYXRlTWVtb3J5Um91dGVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJkZWZhdWx0TWV0aG9kIiwiZGVmYXVsdEVuY1R5cGUiLCJpc0h0bWxFbGVtZW50IiwiY3JlYXRlU2VhcmNoUGFyYW1zIiwiY3JlYXRlQnJvd3NlclJvdXRlciIsInBhcnNlSHlkcmF0aW9uRGF0YSIsImNyZWF0ZUhhc2hSb3V0ZXIiLCJfX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGEiLCJkZXNlcmlhbGl6ZUVycm9ycyIsIl9fdHlwZSIsIkJyb3dzZXJSb3V0ZXIiLCJIYXNoUm91dGVyIiwiSGlzdG9yeVJvdXRlciIsIkxpbmsiLCJhYnNvbHV0ZUhyZWYiLCJyZWxvYWREb2N1bWVudCIsImlzRXh0ZXJuYWwiLCJ0YXJnZXRVcmwiLCJpbnRlcm5hbE9uQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiTmF2TGluayIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJyb3V0ZXJTdGF0ZSIsIm5leHRMb2NhdGlvblBhdGhuYW1lIiwiaXNBY3RpdmUiLCJpc1BlbmRpbmciLCJhcmlhQ3VycmVudCIsIkZvcm0iLCJGb3JtSW1wbCIsImZvcndhcmRlZFJlZiIsIm9uU3VibWl0IiwiZmV0Y2hlcktleSIsInN1Ym1pdCIsInVzZVN1Ym1pdEltcGwiLCJ1c2VGb3JtQWN0aW9uIiwic3VibWl0dGVyIiwic3VibWl0TWV0aG9kIiwiU2Nyb2xsUmVzdG9yYXRpb24iLCJzdG9yYWdlS2V5IiwidXNlU2Nyb2xsUmVzdG9yYXRpb24iLCJyZXBsYWNlUHJvcCIsImlzTW9kaWZpZWRFdmVudCIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJ1c2VTZWFyY2hQYXJhbXMiLCJkZWZhdWx0SW5pdCIsImRlZmF1bHRTZWFyY2hQYXJhbXNSZWYiLCJoYXNTZXRTZWFyY2hQYXJhbXNSZWYiLCJsb2NhdGlvblNlYXJjaCIsImRlZmF1bHRTZWFyY2hQYXJhbXMiLCJnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbiIsInNldFNlYXJjaFBhcmFtcyIsIm5leHRJbml0IiwibmF2aWdhdGVPcHRpb25zIiwibmV3U2VhcmNoUGFyYW1zIiwidXNlU3VibWl0IiwiVXNlU3VibWl0SW1wbCIsImRlZmF1bHRBY3Rpb24iLCJlbmNUeXBlIiwic3VibWlzc2lvblRyaWdnZXIiLCJGb3JtRGF0YSIsImlzQnV0dG9uRWxlbWVudCIsImlzSW5wdXRFbGVtZW50IiwiZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvIiwiZmV0Y2hlcklkIiwidXNlRmV0Y2hlciIsIl9yb3V0ZSRtYXRjaGVzIiwiVXNlRmV0Y2hlciIsImNyZWF0ZUZldGNoZXJGb3JtIiwibG9hZCIsImZldGNoZXJXaXRoQ29tcG9uZW50cyIsInVzZUZldGNoZXJzIiwiVXNlRmV0Y2hlcnMiLCJTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkiLCJfdGVtcDMiLCJVc2VTY3JvbGxSZXN0b3JhdGlvbiIsInNjcm9sbFJlc3RvcmF0aW9uIiwidXNlUGFnZUhpZGUiLCJzY3JvbGxZIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXNzaW9uUG9zaXRpb25zIiwiZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxJbnRvVmlldyIsInNjcm9sbFRvIiwidXNlQmVmb3JlVW5sb2FkIiwidXNlUHJvbXB0IiwiX3JlZjgiLCJ3aGVuIiwiY29uZmlybSIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4cyIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJzdHlsZUVsZW1lbnQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImRlc2NyaXB0aW9uIiwiZ2V0VG9rZW4iLCJzZXRUb2tlbiIsInVzZU9wZW5BSVRva2VuIiwicmVsIiwiTE9DQUxfU1RPUkFHRV9LRVkiLCJyZW1vdmVJdGVtIiwicm9vdEVsZW1lbnQiLCJjb2RlVXJsIiwic2V0Q29kZVVybCIsInNldFJlc3BvbnNlIiwiY3JlYXRlUHJvbXB0IiwibWVzc2FnZXMiLCJzdHJlYW1DaGF0R1BUQ29tcGxldGlvbnMiLCJzdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwiY2hvaWNlcyIsInR3ZWV0RGVzY3JpcHRpb24iLCJzZXRUd2VldERlc2NyaXB0aW9uIiwidHdlZXRTZW50aW1lbnQiLCJzZXRUd2VldFNlbnRpbWVudCIsInNldEVycm9yIiwiX2UiLCJyZXMiLCJBdXRob3JpemF0aW9uIiwibW9kZWwiLCJ0ZW1wZXJhdHVyZSIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsIlJlYWRhYmxlU3RyZWFtIiwiY2xvc2UiLCJsaW5lcyIsImVucXVldWUiLCJfX2VzTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIm5zIiwiZGVmIiwidG9TdHJpbmdUYWciLCJuYyJdLCJzb3VyY2VSb290IjoiIn0=